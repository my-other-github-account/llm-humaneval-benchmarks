{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" (thanks to built-in `max()` and `min()`) \"\"\"\n    if not numbers or not isinstance(numbers, (list, tuple, set, frozenset)):\n        return False\n    if not threshold or not isinstance(threshold, (float, int, long, complex, bool, dict, tuple, list, set, frozenset)) or threshold < 0:\n        return False\n    numbers.sort()\n    if not numbers or not all(isinstance(n, (float, int, long, complex, bool, dict, tuple, list, set, frozenset)) for n in numbers):\n        return False\n    if not all(n < threshold for n in numbers) or not all(n > threshold for n in numbers):\n        return False\n    return True"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_groups = []\n    curr_group = []\n    in_group = True\n    for char in paren_string:\n        if char == '(':\n            if in_group:\n                curr_group.append(char)\n            else:\n                in_group = True\n        elif char == ')':\n            if in_group:\n                in_group = False\n                paren_groups.append(curr_group)\n                curr_group = []\n    if in_group:\n        curr_group.append(char)\n    paren_groups.append(curr_group)\n    return paren_groups\n\n"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n    \n    Return the decimal part of the number.\n    \"\"\"\n    \n    if number < 1:\n        return 0\n    \n    integer_part = math.floor(number)\n    decimal_part = number - integer_part\n    \n    return decimal_part\n\n"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        else:\n            balance -= op\n    return balance < 0"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    if not numbers:\n        return 0\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return [delimeter]\n    return [num1 if i == 0 else delimeter + num2 for i, num1 in enumerate(numbers, 1) for num2 in numbers[i-1:-1]]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_count = 0\n    result = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_count += 1\n        elif paren_string[i] == ')':\n            paren_count -= 1\n            if paren_count == -1:\n                result.append(i)\n    return result\n\n"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    :param strings: A list of strings to be filtered\n    :param substring: A string to be matched in the list\n    :return: A list of strings that contain the given substring\n    \"\"\"\n    return list(filter(lambda x: substring in x, strings))"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), product(numbers))\n\n\ndef product(numbers: List[int]) -> int:\n    \"\"\" For a given list of integers, return the product of all the integers in a list.\n    Empty list should return 1.\n    >>> product([])\n    1\n    >>> product([1, 2, 3, 4])\n    24\n    \"\"\"\n    if not numbers:\n        return 1\n    return multiply(numbers)\n\n\ndef multiply(numbers: List[int]) -> int:\n    \"\"\" For a given list of integers, return the product of all the integers in a list.\n    O(n) time complexity.\n    >>> multiply([1, 2, 3, 4])\n    24\n    \"\"\"\n    product = 1\n    for i in numbers:\n        product *= i\n    return product\n\n\ndef sum(numbers: List[int]) -> int:\n    \"\"\" For a given list of integers, return the sum of all the integers in a list.\n    Empty list should return 0.\n    >>> sum([])\n    0\n    >>> sum([1, 2, 3, 4])\n    10\n    \"\"\"\n    if not numbers:\n        return 0\n    return sum_up(numbers)\n\n\ndef sum_up(numbers: List[int]) -> int:\n    \"\"\" For a given list of integers, return the sum of all the integers in a list.\n    O(n) time complexity.\n    >>> sum_up([1, 2, 3, 4])\n    10\n    \"\"\"\n    sum = 0\n    for i in numbers:\n        sum += i\n    return sum"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    :param numbers: A list of integers\n    :return: A list of the rolling maximum elements found in the sequence\n    \"\"\"\n    if not numbers:\n        return []\n    n = len(numbers)\n    state = [0, n, 0]\n    for i in range(n):\n        state[0], state[1], state[2] = state[2], state[1], state[0]\n        if i == n - 1:\n            state[2] = max(numbers[i - state[1]] if i - state[1] >= 0 else 0, state[2])\n        else:\n            state[2] = max(numbers[i - state[1]], state[2])\n    return [state[2]] + list(roll)\n\n\ndef list(n: int) -> List[int]:\n    \"\"\"\n    :param n: The number of elements to generate\n    :return: A list of n random integers between 0 and 9\n    \"\"\"\n    return [i for i in range(n) if i >= 0 and i <= 9]\n\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if string:\n        longest_palindrome_length = 0\n        for i in range(1, len(string) + 1):\n            if i == 1:\n                prefix = string[0:i]\n            else:\n                prefix = string[0:i-1]\n            palindrome_suffix = string[i - len(prefix) : i]\n            if is_palindrome(prefix) and palindrome_suffix == prefix[::-1]:\n                if i - len(prefix) > longest_palindrome_length:\n                    longest_palindrome_length = i - len(prefix)\n                result = string[0:i] + string[i - len(prefix) :]\n                \n        return result\n    else:\n        return string"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Perform binary XOR on two strings a and b, both of which consist only of 1s and 0s.\n    :param a: the first string\n    :param b: the second string\n    :return: the XOR of the two strings\n    \"\"\"\n    a = ''.join(a)  # convert to a list of characters and join\n    b = ''.join(b)  # do the same for b\n    xor_str = ''.join(chr(ord(c) ^ ord(d)) for (c, d) in zip(a, b))  # perform the XOR on each character\n    return xor_str  # return the XOR of the two strings as a string"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    elif len(strings[0]) > len(strings[1:]):\n        return strings[0]\n    else:\n        return longest(strings[1:])\n\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a, b):\n    if a < b:\n        a, b = b, a\n    for i in range(1, int(b/a) + 1):\n        if a % i == 0 and b % i == 0:\n            return i\n    return 1\n\n"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Generate all possible prefixes of a given string\n    and return them in order of length\n    \"\"\"\n    if not string:\n        return []\n    else:\n        return [string] + all_prefixes(string[1:])"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    uniq_chars = set(string)\n    return len(uniq_chars)\n\n"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = []\n    for note in music_string:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif '.|' == note:\n            beats.append(1)\n    return beats\n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    n = 0\n    i = 0\n    while i < len(string):\n        if string[i:].lower() == substring.lower():\n            n += 1\n        i += 1\n    return n\n\n"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sort a string of numbers from zero to nine in ascending order.\n    :param numbers: a string of numbers separated by spaces\n    :return: the sorted string\n    \"\"\"\n    numbers = numbers.strip()\n    if not numbers:\n        return \"\"\n    numbers = list(map(int, numbers.split()))\n    numbers.sort()\n    return \" \".join(str(n) for n in numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    :param numbers: List[float]\n    :return: Tuple[float, float]\n    \"\"\"\n    if len(numbers) < 2:\n        return None, None\n\n    # sort the numbers in ascending order\n    numbers.sort()\n\n    # find the two closest numbers\n    closest_distance = 1e10\n    closest_pair = (None, None)\n    for i in range(1, len(numbers)):\n        for j in range(i, len(numbers)):\n            distance = numbers[j] - numbers[i]\n            if distance < closest_distance:\n                closest_distance = distance\n                closest_pair = (i, j)\n\n    return numbers[closest_pair[0]], numbers[closest_pair[1]]"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" (Recursion)\n    :param numbers: A list of floats\n    :return: A list of rescaled floats\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        mid = (len(numbers) - 1) // 2\n        rescaled_left = rescale_to_unit(numbers[:mid])\n        rescaled_right = rescale_to_unit(numbers[mid:])\n        return rescaled_left + [0.5] + rescaled_right"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filters a list of any Python values and only retains the integers.\n\n    :param values: a list of any Python values\n    :return: a list of only the integer values\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, int), values))"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    if not string:\n        return 0\n    else:\n        return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n):\n    if n < 2:\n        return n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0 and i < n:\n            return i\n    return n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\"\n    :type n: int\n    \"\"\"\n    factors = set()\n    n = next_composite_number(n)\n    while n > 1:\n        p = next_prime(n)\n        if n % p == 0:\n            n //= p\n            factors.add(p)\n            if p in factors:\n                factors.add(1)\n    return list(factors)\n\ndef next_composite_number(n: int) -> int:\n    \"\"\"\n    :type n: int\n    \"\"\"\n    if n < 2:\n        return n\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime(i) and i > n:\n            return i\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    :type n: int\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0:\n            return False\n    return True\n\ndef next_prime(n: int) -> int:\n    \"\"\"\n    :type n: int\n    \"\"\"\n    if n < 0:\n        return None\n    if n == 1:\n        return 2\n    for i in range(3, int(n ** 0.5) + 2, 6):\n        if is_prime(i):\n            return i\n    return None\n\ndef list_to_set(l: List[int]) -> Set[int]:\n    \"\"\"\n    :type l: List[int]\n    \"\"\"\n    return set(l)\n\ndef set_to_list(s: Set[int]) -> List[int]:\n    \"\"\"\n    :type s: Set[int]\n    \"\"\"\n    return list(s)\n"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n\n    for num in numbers:\n        if num in seen:\n            continue\n        seen.add(num)\n        result.append(num)\n\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    lowercase = string.lower()\n    uppercase = string.upper()\n    return lowercase if lowercase == uppercase else uppercase"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\"\n    :param strings: a list of strings\n    :return: the concatenated string\n    \"\"\"\n    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    :param strings: A list of strings to be filtered.\n    :param prefix: The prefix to be matched.\n    :return: A list of strings that start with the given prefix.\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l):\n    return list(filter(lambda x: x >= 0, l))"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"List of coefficients must have an even number of coefficients\")\n    if n == 0:\n        return 0\n    half = (n + 1) // 2\n    return (xs[0] + xs[half] * x + xs[half] * x**2 +... + xs[n-1] * x**(n-1-half))\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) < 2:\n        return None\n    if not all(x!= 0 for x in xs):\n        return None\n    if not (len(xs) % 2 == 0 and xs[0] > 0):\n        return None\n    for i in range(1, len(xs), 2):\n        if xs[i] == 0:\n            return i // 2\n    return None\n\n"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    l_new = l\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_new[i] = l[i]\n        else:\n            l_new[i] = sorted(l[i])\n    return l_new"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    seen = set()\n    for i in l:\n        if i in seen:\n            continue\n        seen.add(i)\n    return list(seen)"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: List[int]):\n    if not l:\n        return 0\n    else:\n        return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    if n < 10:\n        return n\n    for i in range(11, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            if i % 3 == 0:\n                print(\"FizzBuzz\", end=\"\")\n            elif i % 3 == 1:\n                print(\"Fizz\", end=\"\")\n            elif i % 3 == 2:\n                print(\"Buzz\", end=\"\")\n            else:\n                print(i, end=\"\")\n    return n\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    even_list = [x for i, x in enumerate(l) if i % 2 == 0]\n    l.extend(even_list)\n    l.sort()\n    return l\n"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    :param s: the string to be encoded\n    :return: the encoded string\n    \"\"\"\n    # split string to groups of 3\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    # cycle elements in each group\n    groups = [(group[2], group[0], group[1]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    :param s: the encoded string\n    :return: the decoded string\n    \"\"\"\n    # split string to groups of 9\n    groups = [s[i:i + 9] for i in range(0, len(s), 9)]\n    # cycle elements in each group\n    groups = [(group[8], group[5], group[2], group[1], group[4], group[7], group[0], group[3], group[6]) if len(group) == 9 else group for group in groups]\n    return ''.join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    if n < 2:\n        return n\n    for i in range(2, n+1):\n        if is_prime(i):\n            if i in fibonacci_numbers(n):\n                return i\n    return -1\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci_numbers(n: int) -> set:\n    if n < 2:\n        return set()\n    if n == 2:\n        return set(2)\n    for i in range(3, n+1):\n        yield i\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    if n % 2!= 0:\n        return 0\n    for i in range(n // 2):\n        if i % 2 == 0:\n            for j in range(i, n - i - 1, 2):\n                if j % 2 == 1:\n                    return 1\n    return 0"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l):\n    return list(map(lambda x: x+1, l))\n\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    base numbers are less than 10.\n    :param x: The number to be converted\n    :param base: The new base to convert to\n    :return: The string representation of the converted number in the new base.\"\"\"\n    if base < 1 or base > 10:\n        raise ValueError(f\"Base number must be between 1 and 10.\")\n\n    if x == 0:\n        return \"0\"\n\n    if base == 1:\n        return str(x)\n\n    if base == 2:\n        if x == 1:\n            return \"1\"\n        else:\n            return \"0\" + str(x-1)\n\n    if base == 3:\n        if x == 1:\n            return \"1\"\n        else:\n            return \"0\" + str(x-1)\n\n    if base == 4:\n        if x == 1:\n            return \"1\"\n        else:\n            return \"0\" + str(x-1)\n\n    if base == 5:\n        if x == 1:\n            return \"1\"\n        else:\n            return \"0\" + str(x-1)\n\n    if base == 6:\n        if x == 1:\n            return \"1\"\n        else:\n            return \"0\" + str(x-1)\n\n    if base == 7:\n        if x == 1:\n            return \"1\"\n        else:\n            return \"0\" + str(x-1)\n\n    if base == 8:\n        if x == 1:\n            return \"1\"\n        else:\n            return \"0\" + str(x-1)\n\n    if base == 9:\n        if x == 1:\n            return \"1\"\n        else:\n            return \"0\" + str(x-1)\n\n    if base == 10:\n        return str(x)\n\n    if base == 11:\n        if x == 1:\n            return \""}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    if h < a:\n        h, a = a, h\n    return (a**2 - h**2) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n):\n    if n <= 3:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\n"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    n = len(l)\n    if n%2==0:\n        t1 = (l[n/2-1] + l[n/2])/2\n        return t1\n    else:\n        t1 = l[n/2]\n        return t1"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    :param text: the string to check\n    :return: True if the string is a palindrome, False otherwise\n    \"\"\"\n    if not text:\n        return True\n    if len(text) == 1:\n        return True\n    for i in range(len(text) / 2):\n        if text[i]!= text[len(text) - i - 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/49", "completion": "def modp(n, p):\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n        p = -p\n    while p <= n:\n        if (n % p)!= 0:\n            break\n        p += 1\n    return p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n    \"\"\"\n    :param s:\n    :return:\n    \"\"\"\n    return \"\".join([chr(ord(ch) + 5 - ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    :param s:\n    :return:\n    \"\"\"\n    return \"\".join([chr(ord(c) - 5 + (ord(\"a\") - 1)) if c in s else \"?\" for c in range(26)])\n\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiou\"\n    text = text.lower()\n    res = []\n    for c in text:\n        if c in vowels:\n            continue\n        else:\n            res.append(c)\n    return \"\".join(res)\n\n"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    if not l:\n        return False\n    for i, n in enumerate(l):\n        if n > t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    if s0 == s1:\n        return True\n    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n < 2:\n        return n\n    return (fib(n-1) + fib(n-2))"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets):\n    n = len(brackets)\n    if n % 2!= 0:\n        return False\n    for i in range(n // 2):\n        if brackets[i]!= '>' and brackets[i+1]!= '<':\n            return False\n    return True"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"\n    :param l: list\n    :return:\n    \"\"\"\n    if len(l) < 2:\n        return True\n    else:\n        last = l[0]\n        for i in range(1, len(l)):\n            if l[i] < last:\n                return False\n            last = l[i]\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    l1.sort()\n    l2.sort()\n    common_set = set(l1) & set(l2)\n    return list(common_set)\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    if not n > 1:\n        return 0\n    if is_prime(n):\n        return n\n    for i in range(2, int(n**0.5) + 1):\n        if is_divisible(n, i):\n            p = i\n            while is_divisible(n, i * p):\n                p += 1\n            return p\n    return 0\n\ndef is_prime(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_divisible(n, d):\n    for i in range(1, int(n/d) + 1):\n        if n % d * i == 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    s = 0\n    while n > 1:\n        s += n\n        n -= 1\n    return s\n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets):\n    n = len(brackets)\n    if n % 2!= 0:\n        return False\n    for i in range(n // 2):\n        if brackets[i]!= '(' and brackets[i+1]!= ')':\n            return False\n    return True"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    n = len(xs)\n    if n == 0:\n        return []\n    else:\n        first = xs[0]\n        rest = xs[1:]\n        der = [first * (n - 1) / (n - 2)] + derivative(rest)\n    return der"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    if n < 3:\n        return n\n    return (fibfib(n-1) + fibfib(n-2)) % 2\n\n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = \"aeiouy\"\n    if s.endswith(\"y\"):\n        vowels += \"y\"\n    vowel_count = sum(1 for char in s if char in vowels)\n    return vowel_count\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    if shift > len(str(x))-1:\n        return list(reversed(str(x).zfill(len(str(x)))))\n    else:\n        return str(x)[shift-1:0] + str(x)[:shift-1]\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"\n    s: str\n    \"\"\"\n    # get the uppercase characters\n    upper_chars = [char.upper() if char.isalpha() else char for char in s]\n    # sum of the uppercase characters\n    sum_of_upper_chars = sum(int(char) for char in upper_chars)\n    return sum_of_upper_chars\n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples, oranges, mangoes = 0, 0, 0\n    for i, fruit in enumerate(s.split()):\n        if fruit.lower() == 'apples':\n            apples += 1\n        elif fruit.lower() == 'oranges':\n            oranges += 1\n        elif fruit.lower() =='mangoes':\n            mangoes += 1\n    total_fruits = apples + oranges + mangoes\n    if total_fruits == n:\n        return mangoes\n    else:\n        return 0"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n    \n    even_values = [val for val in arr if val % 2 == 0]\n    if not even_values:\n        return []\n    \n    smallest_even_value = min(even_values)\n    if smallest_even_value in arr:\n        return [smallest_even_value, arr.index(smallest_even_value)]\n    else:\n        return [smallest_even_value, -1]\n"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    # create a set to remove duplicates\n    seen = set(lst)\n\n    # find the maximum element in the set\n    max_element = max(seen)\n\n    # if the maximum element has a frequency of at least 1\n    # it is the answer\n    if max_element in seen:\n        return max_element\n\n    # otherwise, there is no such value\n    # and the function returns -1\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    else:\n        return [min(lst)] + [max(s - [min(lst)]) for s in group_by_min(lst)]\n\ndef group_by_min(lst):\n    d = dict(zip(lst, [min(v) for v in lst]))\n    return [list(d.get(v, [])) for v in d]\n"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a + b > c) and (b + c > a) and (c + a > b):\n        return (a * b * c) ** 0.5\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if not is_palindrome(q) or sum(q) > w:\n        return False\n    else:\n        return True\n\ndef is_palindrome(q):\n    if len(q) < 2:\n        return False\n    else:\n        for i in range(len(q) / 2):\n            if q[i]!= q[len(q) - 1 - i]:\n                return False\n    return True\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    if n < 2:\n        return n\n    if arr[0] == arr[n-1] and arr[1:n] == arr[1:-1][::-1]:\n        return 0\n    for i in range(1, n):\n        if arr[i]!= arr[n-i-1]:\n            j = i\n            while j < n-i-1:\n                if arr[j]!= arr[n-i-1-j]:\n                    break\n                j += 1\n            if j == n-i-1:\n                return i+1\n    return n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) < len(lst2):\n        return total_match(lst2, lst1)\n    if len(lst1) > len(lst2):\n        return total_match(lst2, lst1)\n    if not lst1 or not lst2:\n        return []\n    total_chars_in_all_strings = sum(len(string.strip()) for string in lst1)\n    if total_chars_in_all_strings == len(lst2):\n        return lst1\n    return total_match(lst2, lst1)"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 100:\n        for i in range(3, a, 2):\n            if not is_prime(i) or i * a / 100 not in [j * 100 for j in range(10, 100, 10) if is_prime(j)]:\n                return False\n        return True\n\ndef is_prime(a):\n    if a < 2:\n        return False\n    for i in range(5, int(a ** 0.5) + 1, 6):\n        if a % i == 0 or a % (i + 2) == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == n**.5:\n        return True\n    for i in range(1, int(n**.5) + 1):\n        if x - n**i == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a < 0:\n        a = -a\n    for i in range(1, a):\n        if a % i**3 == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"\n    :type num: str\n    :rtype: int\n    \"\"\"\n    if not num:\n        return 0\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 59, 67, 71, 79, 83, 89, 97, 101, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 169, 179, 187, 193, 199, 209, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 299, 307, 311, 319, 327, 331, 337, 347, 353, 359, 367, 373, 379, 383, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 479, 487, 491, 499, 503, 509, 511, 521, 529, 533, 541, 547, 557, 563, 569, 571, 5"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(int(decimal)).replace('b', 'db')\n    return 'db' + binary + 'db'\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i:i+3] == s[i+1:i+4] == s[i+2:i+5]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grade_table = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        0.0: 'E'\n    }\n\n    grades = list(grades)\n    letter_grades = []\n\n    for i, gpa in enumerate(grades):\n        if gpa in letter_grade_table:\n            letter_grades.append(letter_grade_table[gpa])\n        else:\n            letter_grades.append('E')\n\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if len(string) == 0:\n        return False\n    for i in range(1, len(string)+1):\n        if string.count(i) > 1:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 1:\n        return 1\n    for i in range(1, n):\n        if i % 2 == 1 and i not in [1, n] or i % 2!= 1 and i in [1, n]:\n            return 1\n    return 0"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    # Convert N to binary\n    binary = bin(N).replace('b', '')\n\n    # Get the sum of digits in binary\n    sum_digits = sum(int(d) for d in binary)\n\n    # Check if the sum of digits is 0\n    if sum_digits == 0:\n        return '0'\n\n    # Get the last digit of the binary number\n    last_digit = binary.rstrip('1')\n\n    # If the last digit is 0, add 1 to the sum of digits\n    if last_digit == '0':\n        sum_digits += 1\n\n    # Convert the sum of digits to a string of binary\n    binary_sum = bin(sum_digits).replace('b', '')\n\n    # Concatenate the binary number and the sum of digits in binary\n    result = binary + binary_sum\n\n    return result\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_at_odd = [x for x in lst if x % 2 == 0 and x % 1!= 0]\n    return even_at_odd\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n\n    # split the string into words\n    words = s.split()\n\n    # sort the words in ascending order based on ascii value\n    sorted_words = sorted(words, key=lambda x: ord(x) if x.isalpha() else 1000, reverse=True)\n\n    # join the words back into a string, preserving the order\n    ordered_s =''.join(sorted_words)\n\n    return ordered_s"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    # get all rows\n    rows = [list(r) for r in lst]\n    \n    # sort rows by index\n    sorted_rows = sorted(rows, key=lambda r: r.index(x), reverse=True)\n    \n    # for each row\n    for row in sorted_rows:\n        # get all columns\n        columns = [c for c in row if c!= x]\n        \n        # sort columns by value\n        sorted_columns = sorted(columns, reverse=True)\n        \n        # create tuple with (row, columns)\n        result = (row, sorted_columns)\n        \n        # append to result list\n        if result not in _result:\n            _result.append(result)\n    \n    return _result\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    n = len(array)\n    if n == 0 or n == 1:\n        return array\n    if (sum(array[0], array[n-1]) % 2) == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    if not s:\n        return s\n    n = len(s)\n    m = 2 * n\n    i = m // n\n    j = i - 1 if i > 1 else 0\n    k = m - i * n\n    p = n // 2\n    o = (n - p) // 2\n    c = [ord(c) for c in s]\n    d = [0] * n\n    for i in range(n):\n        d[i] = c[i]\n    for i in range(n):\n        for j in range(i, n):\n            d[j] = d[j] + d[i]\n    for i in range(n):\n        for j in range(o, n):\n            d[j] = d[j] - d[i]\n    for i in range(n):\n        d[i] = d[i] - d[p]\n    for i in range(n):\n        d[i] = d[i] - d[k]\n    for i in range(n):\n        d[i] = d[i] - d[i - p]\n    for i in range(n):\n        d[i] = d[i] - d[i - k]\n    for i in range(n):\n        d[i] = d[i] - d[i - o]\n    for i in range(n):\n        d[i] = d[i] - d[i - k - p]\n    for i in range(n):\n        d[i] = d[i] - d[i - j]\n    for i in range(n):\n        d[i] = d[i] - d[i - p - j]\n    for i in range(n):\n        d[i] = d[i] - d[i - o - j]\n    for i in range(n):\n        d[i] = d[i] - d[i - k - o - j]\n    for i in range(n):"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    else:\n        return min(lst, key=lambda x: -lst.index(x))\n"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    for i, word in enumerate(S):\n        if word.lower() == 'i':\n            boredoms += 1\n            for j in range(i+1, len(S)):\n                if S[j].lower() in ('.', '?', '!') and S[i]!= S[j]:\n                    boredoms -= 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x + y == z and all(i.isdigit(c) for c in str(x)) and all(i.isdigit(c) for c in str(y)):\n        return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n    # Swap case of all letters\n    message = message.swapcase()\n\n    # Replace vowels with their corresponding vowel\n    vowels = 'aeiou'\n    for vowel in vowels:\n        if vowel in message:\n            # Find the corresponding vowel in the english alphabet\n            vowel_index = vowels.index(vowel)\n            # Add the next vowel to the message\n            message += chr(vowel_index + 2)\n\n    # Return the encoded message\n    return message\n"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    # find the largest prime value\n    prime = next(i for i in lst if is_prime(i))\n\n    # sum of its digits\n    digit_sum = sum(int(d) for d in str(prime))\n\n    # return the result\n    return digit_sum\n\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_strs = [key for key in dict.keys() if isinstance(key, str)]\n    if all_strs:\n        if all(key.islower() if key.isupper() else key.isupper() for key in all_strs):\n            return True\n        else:\n            return False\n    else:\n        return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n < 2:\n        return []\n    primes = [2]\n    for i in range(3, int(n*0.5)+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n*0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a < 0 and b < 0:\n        return -1\n    elif a < 0 and b > 0:\n        return 0\n    elif a > 0 and b < 0:\n        return 1\n    else:\n        return a * b\n"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    \"\"\"\n    Find the closest integer to a given value.\n    \"\"\"\n    if value.isdigit() and len(str(value)) == 1:\n        return int(value)\n    if value.isalpha() or value.isdigit() or value.ismiracle() or value.isnan():\n        return round(value, 0)\n    else:\n        return value"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 1:\n        return [n, (n+1)//2, (n+1)//3, (n+1)//4, (n+1)//6, (n+1)//12]\n    else:\n        return [n, (n+1), (n+2), (n+2), (n+2), (n+2), (n+2), (n+2)]\n"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(',') if s.endswith(' and') else s.split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        x, y = y, x\n    for i in range(y+1):\n        if i % 2 == 0 and i >= x and i <= y:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (m + n) / 2\n    i = 0\n    while i <= m:\n        if i == n:\n            avg += 1\n        i += 1\n    while i <= avg:\n        i = i + 1\n    return bin(avg).replace(\"0b\", \"\").zfill(6)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    # Filter out even digits\n    x = [i for i in x if i % 2!= 0]\n\n    # Sort the list in increasing order\n    x.sort(reverse=True)\n\n    # Return the list of unique digits\n    return x\n"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if arr:\n        # sort by length\n        arr.sort(key=len, reverse=True)\n\n        # only keep the part that is between 1 and 9\n        good_arr = [x for x in arr if 1 <= x <= 9]\n\n        # reverse the good part\n        reversed_good_arr = list(reversed(good_arr))\n\n        # replace each digit by its corresponding name\n        result = [f\"{x}\" for x in reversed_good_arr]\n\n    else:\n        result = []\n\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    if n == 0:\n        return []\n    else:\n        even_fact = 1\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                even_fact *= i\n        odd_sum = 1\n        for i in range(1, n+1):\n            odd_sum += i\n        return [even_fact if i % 2 == 0 else odd_sum for i in range(1, n+1)]\n"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    even_palindromes = 0\n    odd_palindromes = 0\n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n\n    return (even_palindromes, odd_palindromes)\n"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Count the number of positive numbers in an array.\n    \"\"\"\n    return len([x for x in arr if x > 0])\n\n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"\n    :type arr: List[int]\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n    for i in range(min(len(lst1), len(lst2))):\n        if lst1[i] % 2!= 0 and lst2[i] % 2!= 0:\n            continue\n        if lst1[i] % 2 == 0 and lst2[i] % 2 == 0:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letters = test.lower()\n    counts = Counter(letters)\n    most_common = counts.pop(None, 0)\n    return {k: v for k, v in counts.items() if v == most_common}\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    \"\"\"\n    Reverse the given string s and delete all characters that are in c.\n    Then check if the result is a palindrome.\n    :param s: the original string\n    :param c: the set of characters to be deleted\n    :return: a tuple (result_string, is_palindrome)\n    \"\"\"\n    result_string = s[::-1]\n    for c in c:\n        result_string = result_string.replace(c, '')\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    if not lst:\n        return [\"the number of odd elements in the string 0 of the input.\"]\n    odd_counts = [0] * (1 + len(lst))\n    for i, s in enumerate(lst):\n        if s.isdigit() and not all(c.isdigit() for c in s):\n            odd_counts[i + 1] = len(filter(lambda c: c.isdigit() and c.isodd(), s))\n    return odd_counts\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    # create a set to remove duplicates\n    seen_set = set(nums)\n\n    # find the sum of all elements in the set\n    total_sum = sum(seen_set)\n\n    # iterate through the nums\n    for i in range(len(nums)):\n        # if the current element is not in the set, it is a sub-array\n        if nums[i] not in seen_set:\n            # add it to the set and the sum\n            seen_set.add(nums[i])\n            min_sum = total_sum - nums[i]\n\n            # if this is the minimum sum so far, return it\n            if min_sum > 0:\n                return min_sum\n\n    # if the end is reached and no sub-array has been found, the\n    # minimum sub-array sum is 0\n    return 0\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    n, m = len(grid), len(grid[0])\n    if n == 0 or m == 0:\n        return 0 if n == 0 else 1\n    if capacity > n * m:\n        capacity = n * m\n    dp = [0] * capacity\n    for i in range(n):\n        dp[0] = i + 1\n    for j in range(m):\n        dp[j + 1] = n + 1\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                dp[min(dp[i], dp[i-1]-1, dp[j]-1, dp[j-1])] -= 1\n    return dp[0]\n"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Count the number of ones in each integer\n    ones_counts = [i.count(1) for i in arr]\n\n    # Sort the array based on the number of ones\n    sorted_arr = sorted(arr, key=lambda x: ones_counts.index(x.count(1)))\n\n    return sorted_arr\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for i in range(len(words)):\n        word = words[i].lower()\n        if n <= len(word) and all(ord(c) > 194 if c!='' else False for c in word):\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"a\", \"e\", \"i\", \"o\", \"u\"\n    word = word.lower()\n    left = 0\n    right = len(word)\n    while left < right:\n        mid = (left + right) // 2\n        if word[mid] in vowels:\n            if word[left:mid] in vowels and word[mid:right] in vowels:\n                return \"\".join(vowels.index(word[i]) + 1 for i in [left, mid, right])\n            elif word[mid] in vowels:\n                left = mid + 1\n        else:\n            right = mid - 1\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    if len(lst) == 1:\n        return \"Yes\" if lst[0] == \"(\" else \"No\"\n    if len(lst) == 2 and lst[0] == lst[1]:\n        return \"Yes\"\n    for i in range(1, len(lst)):\n        if lst[i-1] == \"(\" and lst[i] == \")\" and i < len(lst) - 1:\n            continue\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    if k > len(arr) or k < 1:\n        return None\n    if k == 1:\n        return [x for x in arr if x!= 0]\n    arr.sort(reverse=True)\n    return [x for x in arr[0:k-1] if x > arr[k-1]]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    odd_sum = 0\n    for i in range(len(lst) - 1):\n        if lst[i] % 2 == 0 and lst[i+1] % 2 == 0:\n            odd_sum += lst[i+1]\n    return odd_sum\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    # get the first k elements\n    k_elements = arr[0:k]\n    \n    # sum of the elements with at most two digits\n    sum_with_digits = sum(int(d1) + int(d2) for d1, d2 in zip(k_elements, k_elements[1:]))\n    \n    # add the rest of the elements\n    total = sum_with_digits + sum(arr[k:])\n    \n    return total\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    # Base case: n=1\n    if n == 1:\n        return [1]\n\n    # Collatz sequence for n\n    collatz_sequence = [n]\n\n    # While there are still numbers in the sequence\n    while len(collatz_sequence) > 0:\n\n        # Get the next number in the sequence\n        current_number = collatz_sequence.pop()\n\n        # If the number is odd, it is an odd number in the collatz sequence\n        if current_number % 2!= 0:\n            return current_number\n\n        # If the number is even, it is not an odd number in the collatz sequence\n        else:\n            # Recursively call the function for each number from 3 to n-1\n            for i in range(3, current_number-1, -1):\n                if i not in collatz_sequence:\n                    collatz_sequence.append(i)\n\n    # If we reached here, then all the numbers in the sequence are odd\n    return [1, 5]\n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date.strip():\n        return False\n    \n    # Day rules\n    if date.count('-') == 1:\n        day, month, year = date.split('-')\n        day = int(day)\n        if (1 <= month <= 3 and 1 <= day <= 31) or (4 <= month <= 6 and 1 <= day <= 30) or (9 <= month <= 11 and 1 <= day <= 30) or (12 <= month <= 31 and 1 <= day <= 29):\n            continue\n        else:\n            return False\n    elif date.count('-') == 2:\n        day, month, year = date.split('-')\n        day = int(day)\n        if (1 <= month <= 12 and 1 <= day <= 31) or (4 <= month <= 6 and 1 <= day <= 29) or (9 <= month <= 11 and 1 <= day <= 29) or (12 <= month <= 31 and 1 <= day <= 28):\n            continue\n        else:\n            return False\n    else:\n        return False\n    \n    # Month rules\n    if (1 <= int(month) <= 3 and 1 <= day <= 31) or (4 <= int(month) <= 6 and 1 <= day <= 30) or (9 <= int(month) <= 11 and 1 <= day <= 30) or (12 <= int(month) <= 31 and 1 <= day <= 29):\n        continue\n    else:\n        return False\n\n    # Year rules\n    if (1900 <= int(year) <= 2100):\n        continue\n    else:\n        return False\n\n    return True\n\n"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if not txt.strip():\n        return 0 if not ',,' in ''.join(str(c) for c in 'abcdefghijklmnopqrstuvwxyz'[1:10:2]) else 1\n    return len(list(filter(str.isdigit, txt.strip()))))"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if not (interval1[1] > interval2[0] and interval2[1] > interval1[0]):\n        return \"NO\"\n    if interval1[1] - interval1[0] + 1 == (interval2[1] - interval2[0] + 1):\n        return \"NO\"\n    prime_num_intersection = set(list(islice(xrange(interval1[0], interval1[1], 1), 1000003)))\n    if set(list(islice(xrange(interval2[0], interval2[1], 1), 1000003))) == prime_num_intersection:\n        return \"YES\"\n    return \"NO\"\n\n"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    s = 0\n    for i in arr:\n        s *= (i > 0) - (i < 0)\n    return s\n"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # create a list of all possible paths of length k\n    path_list = []\n    for i in range(k):\n        path = []\n        for j in range(k):\n            path.append(grid[i][j])\n            path_list.append(path)\n    # find the shortest path\n    min_path_length = float(\"inf\")\n    min_path = []\n    for i in range(len(path_list)):\n        path_length = 0\n        for j in range(len(path_list)):\n            if i == j:\n                path_length += 1\n            else:\n                if path_list[i][j] == path_list[i][0]:\n                    path_length += 1\n        if path_length < min_path_length:\n            min_path_length = path_length\n            min_path = path_list[i]\n    # find the cells that the minimum path goes through\n    min_path_cells = []\n    for cell in min_path:\n        if cell not in min_path_cells:\n            min_path_cells.append(cell)\n    return min_path_cells\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1, 3, 2, n+1]\n    elif n == 1:\n        return [1, 3, 2, 8]\n    else:\n        if n % 2 == 0:\n            return [1, 3, 2, (n+1)//2] + tri(n-1)\n        else:\n            return tri(n-1) + tri(n-2) + tri(n+1)\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 1:\n        return 0\n    odd_digits = n\n    for i in range(1, 10):\n        if i not in str(n):\n            continue\n        if i % 2 == 0:\n            continue\n        odd_digits *= i\n    return odd_digits"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    in_square_bracket = True\n    while in_square_bracket:\n        if string[0] == ']':\n            if not in_square_bracket:\n                in_square_bracket = False\n        elif string[0] == '[':\n            stack.append(string[0])\n        else:\n            if not stack:\n                in_square_bracket = False\n            else:\n                if stack.pop() == ']' and stack.pop() == '[':\n                    in_square_bracket = False\n    return not in_square_bracket\n"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    \"\"\"\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    if not lst:\n        return 0\n    else:\n        return sum(i**2 for i in lst if i is not None and i > 0)\n"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt.endswith(' '):\n        return False\n    words = txt.rstrip().split()\n    if words and words[-1] == '':\n        return False\n    return not word.endswith(' ') and not word.endswith(','):\n        for word in words:\n            if not word.endswith(' '):\n                return False\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    n = len(arr)\n    if n == 0:\n        return -1\n    if n == 1:\n        return 0\n    if arr[0] < arr[1]:\n        return 0\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return None, None\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    if negatives:\n        largest_negative = max(negatives)\n    else:\n        largest_negative = None\n    if positives:\n        smallest_positive = min(positives)\n    else:\n        smallest_positive = None\n    return largest_negative, smallest_positive\n"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"\n    :type n: int\n    \"\"\"\n    if n < 4:\n        return False\n    for i in range(4):\n        for j in range(2, n+1, 2):\n            if j == n:\n                break\n            if j % 2!= 0:\n                continue\n            if i == 0:\n                a = j\n            elif i == 1:\n                b = j\n            elif i == 2:\n                c = j\n            else:\n                d = j\n            if a + b + c + d == n:\n                return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"\n    The Brazilian factorial is defined as n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n    \n    n: an integer\n    \n    returns: the special factorial of n\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = re.sub(r\"s+\", \"-\", text)\n    return text\n"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3 or not file_name.endswith('.txt') and not file_name.endswith('.exe') and not file_name.endswith('.dll'):\n        return 'No'\n    if not file_name.startswith(file_name[0] if file_name[0] in 'abcdefghijklmnopqrstuvwxyz' else '?'):\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    s = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0 and (i % 4 == 0 or i % 4!= 0):\n            s += x**(i % 3 == 0 and i % 4 == 0? 3 : 4)\n    return s"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = set(sentence.split())\n    prime_words = [word for word in words if (len(set(digit for digit in string.lower() if string.isdigit() else '?') in str(word)) and not word.isdigit())]\n    ordered_prime_words = sorted(prime_words, key=len, reverse=True)\n    return''.join(ordered_prime_words)\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_fraction, n_fraction = x.split(\"/\")\n    x_numerator, x_denominator = [int(i) for i in x_fraction.split(\" \")]\n    n_numerator, n_denominator = [int(i) for i in n_fraction.split(\" \")]\n    if (x_numerator[0] % n_numerator[0] == 0 and x_numerator[1] % n_numerator[1] == 0) or (x_numerator[1] % n_numerator[0] == 0 and x_numerator[0] % n_numerator[1] == 0):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    nums.sort(key=lambda x: sum(int(d) for d in str(x)) % 9)\n    return nums\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) in (1, 3, 5, 7, 9) and (num // 10) % 2!= 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i*i-i+1 for i in range(n)]\n    triples = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i < j < k and a[i] + a[j] + a[k] % 3 == 0:\n                    triples += 1\n    return triples"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    if planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Earth\" and planet2 == \"Mercury\":\n        return (\"Venus\")\n    if planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Venus\" and planet2 == \"Mars\":\n        return (\"Earth\")\n    if planet1 == \"Venus\" and planet2 == \"Jupiter\":\n        return (\"Saturn\")\n    if planet1 == \"Venus\" and planet2 == \"Saturn\":\n        return (\"Uranus\")\n    if planet1 == \"Venus\" and planet2 == \"Neptune\":\n        return (\"Pluto\")\n    if planet1 == \"Mars\" and planet2 == \"Jupiter\":\n        return (\"Saturn\")\n    if planet1 == \"Mars\" and planet2 == \"Saturn\":\n        return (\"Uranus\")\n    if planet1 == \"Mars\" and planet2 == \"Neptune\":\n        return (\"Pluto\")\n    if planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Uranus\")\n    if planet1 == \"Jupiter\" and planet2 == \"Neptune\":\n        return (\"Pluto\")\n    if planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Pluto\")\n    if planet1 == \"Saturn\" and planet2 == \"Neptune\":\n        return (\"Pluto\")\n    if planet1 == \"Uranus\" and planet2 == \"Neptune\":\n        return (\"Pluto\")\n    return ()"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"Sort a list of strings by length and then alphabetically.\"\"\"\n    lst.sort(key=len, reverse=True)\n    return lst\n"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n < 2:\n        return x\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    for i, n in enumerate(lst):\n        if n is not a number or n < 0:\n            continue\n        if n % 1!= 0:\n            continue\n        doubled = n ** 2\n        yield doubled\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    if game == guess:\n        return [0] * len(game)\n    else:\n        return [abs(game - guess) for _ in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strength = 0\n    \n    for extension in extensions:\n        if class_name.endswith('.' + extension):\n            strength = (len(extension) - len(re.findall(r'[A-Z]', extension))) / 2\n            if strongest_extension is None or strength > strengthen_extension.strength:\n                strongest_extension = (class_name, extension)\n    return strongest_extension[1] if strongest_extension else None\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if a.lower() in b.lower():\n        return True\n    for i in range(len(b)):\n        rotated = b[i:].rotate(i)\n        if rotated in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_digits = 0\n    odd_digits = 0\n\n    while num:\n        if num % 10 in [0, 2, 4, 6, 8]:\n            even_digits += 1\n        else:\n            odd_digits += 1\n\n    return (even_digits, odd_digits)\n\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    if number <= 9:\n        return str(number)\n    else:\n        return f\"{number}a\"\n\n"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if (a**2 + b**2) - (2*a*b*c)**.5 > c**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    # sort the words in lexicographical order\n    sorted_words = sorted(words, key=len, reverse=True)\n    \n    # get the word with the maximum number of unique characters\n    max_uniq_chars = 0\n    for word in sorted_words:\n        if len(set(word)) > max_uniq_chars:\n            max_uniq_chars = len(set(word))\n    return word\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if need > remaining:\n        eaten, leftover = 0, 0\n        while eaten < need:\n            eaten += min(need - eaten, remaining)\n            leftover -= min(need - eaten, remaining)\n        return [eaten, leftover]\n    else:\n        eaten = min(need, remaining)\n        leftover = remaining - eaten\n        return [eaten, leftover]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator) < 2 or (len(operator) - 1) < len(operand):\n        return \"Error: Incorrect number of operands or operators.\"\n    if not all(isinstance(e, int) for e in operand) or any(e < 0 for e in operand):\n        return \"Error: Only non-negative integers are allowed in the operand list.\"\n    if not all(isinstance(e, str) for e in operator) or any(e not in ['+', '-', '*', '/', '^'] for e in operator):\n        return \"Error: Only '+', '-', '*', '/', and '^' are allowed in the operator list.\"\n    expression = \"\"\n    for i in range(len(operand)):\n        if i == 0:\n            expression += operator[0]\n        elif i == 1:\n            expression += operator[1]\n        else:\n            expression += operator[2]\n        expression += operand[i]\n    return eval(expression)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    # create a list of all letters in the string\n    letters = list(s)\n\n    # a flag to indicate if any letter was found\n    found_letter = False\n\n    # iterate over all characters in the string\n    for i, c in enumerate(s):\n        # if the character is a letter, then...\n        if c.isalpha():\n            #...check if it is already uppercase\n            if c.isupper():\n                # it is already uppercase, so do nothing\n            else:\n                # it is not already uppercase, so...\n                found_letter = True\n                break\n        # if a letter was found, then...\n        if found_letter:\n            #...reverse its case\n            if c.islower():\n                s[i] = chr(ord('a') + 0x20)\n            else:\n                s[i] = chr(ord('A') + 0x20)\n            found_letter = False\n\n    # if no letter was found, then...\n    if not found_letter:\n        #...reverse the entire string\n        s = s[::-1]\n\n    return s\n"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash\n\n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    even_digits = []\n    while a <= b:\n        if a % 2 == 0 and a not in even_digits:\n            even_digits.append(a)\n        a += 1\n    return even_digits\n"}
