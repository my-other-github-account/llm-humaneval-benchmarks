{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    separated_groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return separated_groups\n            group = stack.pop()\n            if len(stack) % 2 == 0:\n                separated_groups.append(group)\n            else:\n                stack.append(group)\n    return separated_groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    for operation in operations:\n        if operation < 0 and operations[-1] >= 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(num - mean) for num in numbers) / len(numbers)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)-1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    stack = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            stack.append(i)\n        elif char == ')':\n            depth = len(stack) - 1\n            stack.pop()\n            if stack:\n                stack[-1] = max(stack[-1], depth)\n            else:\n                stack.append(depth)\n    return [max(stack) + 1]"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), 1 * numbers[0])"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    result = []\n    max_so_far = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    \n    # find the longest palindrome postfix\n    max_len = 0\n    for i in range(len(string)):\n        # check if the substring from i to the end is a palindrome\n        if is_palindrome(string[i:]) and len(string[i:]) > max_len:\n            max_len = len(string[i:])\n    \n    # append the reverse of the prefix\n    return string + string[::-1][:max_len-len(string)]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        result += a[i] ^ b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = min(strings, key=len)\n    for s in strings:\n        if len(s) > len(longest_string):\n            longest_string = s\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    return greatest_common_divisor(a, b - a)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[0:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    result =''.join(str(i) for i in range(n+1))\n    return result"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    note_dict = {'o': 4, 'o|': 2, '.|': 1}\n    beats = []\n    for note in music_string:\n        if note in note_dict:\n            beats.append(note_dict[note])\n        elif note == '|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    # Initialize count to 0\n    count = 0\n    \n    # Iterate through the string\n    for i in range(len(string) - len(substring) + 1):\n        # If the substring is found in the string\n        if string[i:i+len(substring)] == substring:\n            # Increment the count\n            count += 1\n            \n    # Return the count\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = sorted(numbers.split())\n    return''.join(numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    numbers.sort()\n    return numbers[-1], numbers[0]"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    return [num / max(numbers) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if value.is_integer()]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            largest = i\n            break\n        i += 1\n    return largest"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    if n < 2:\n        return [n]\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return [i] * (n // i)\n    return [n]"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    return list(set(numbers))"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join(chr(ord(char) ^ 32) if char.islower() else chr(ord(char) ^ 32) for char in string)"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only the unique zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2!= 0 or xs[-1]!= 0:\n        raise ValueError(\"xs must have an even number of coefficients and the last coefficient must be 0\")\n    return round(math.sqrt(xs[0] / xs[-1]), 2)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    return sorted(list(filter(lambda x: x % 3!= 0, l)))"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 and i % 13 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    return sorted(l[::2]) + sorted(l[1::2])"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # create a list of groups of three characters\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    \"\"\"\n    Returns the n-th prime Fibonacci number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a = 2\n        b = 1\n        primes = [2]\n        while len(primes) < n:\n            a, b = b, a + b\n            if is_prime(a):\n                primes.append(a)\n        return primes[-1]\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Returns True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    return len(l) >= 3 and len(set(l)) >= 3 and len(set(l)) == len(l)"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # initialize left and right cars with 0 elements\n    left_cars = [0] * n\n    right_cars = [0] * n\n    \n    # simulate left and right cars moving towards each other\n    for i in range(n):\n        left_cars[i] = i\n        right_cars[i] = n - i - 1\n    \n    # count the number of collisions\n    count = 0\n    for i in range(n):\n        if left_cars[i] > right_cars[i]:\n            count += 1\n    \n    return count"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    return len(l) == 0 or any(l.count(x) > 1 for x in l)"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = ''\n    while x > 0:\n        result = digits[x % base] + result\n        x //= base\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    a = 0\n    b = 2\n    c = 0\n    d = 0\n    if n < 4:\n        return n\n    for i in range(4, n+1):\n        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        mid = len(l) // 2\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[len(l) // 2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    result = 1\n    while n > 0:\n        result *= 2\n        n -= 1\n    return (result % p + p) % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in text.lower() if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    s0_dict = {}\n    s1_dict = {}\n    for char in s0:\n        if char in s1_dict:\n            s1_dict[char] += 1\n        else:\n            s1_dict[char] = 1\n    for char in s1:\n        if char in s0_dict:\n            s0_dict[char] += 1\n        else:\n            s0_dict[char] = 1\n    return s0_dict == s1_dict"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack or stack[-1]!= \"<<\":\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    \"\"\"\n    return len(set(l)) == 1"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    # find the intersection of the two lists\n    common_elements = set(l1) & set(l2)\n    \n    # sort the common elements\n    sorted_common = sorted(list(common_elements))\n    \n    return sorted_common"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n            if n == 1:\n                return i\n        else:\n            i += 1\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    n = len(xs)\n    res = [xs[i+1] * (n-i-1) for i in range(n-1)]\n    res[n-1] = sum(res[:n-1])\n    return res"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n <= 2:\n        return n\n    a = 0\n    b = 1\n    c = 1\n    for i in range(3, n+1):\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    return c"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = 'aeiouy'\n    count = 0\n    for c in s:\n        if c in vowels and (c == 'y' and s[-1] == c):\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x) + (len(str(x)) - shift) * '0'\n    return ''.join(str(x)[-shift:]) + str(x)[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    ascii_codes = [ord(c) for c in s if c.isupper()]\n    return sum(ascii_codes)"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    # split the string by the 'and' word\n    s_list = s.split(\"and\")\n    # initialize a variable to store the number of mango fruits\n    mango = 0\n    # loop through the list of strings\n    for f in s_list:\n        # convert the string to an integer\n        f_num = int(f.strip())\n        # subtract the number of mango fruits from the total number of fruits\n        n -= f_num\n        # if the string represents oranges or apples, add the number of mango fruits\n        if f.startswith(\"oranges\") or f.startswith(\"apples\"):\n            mango += f_num\n    # return the number of mango fruits\n    return mango"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_nodes = [node for node in arr if node % 2 == 0]\n    if not even_nodes:\n        return []\n\n    min_even = min(even_nodes)\n    min_even_index = even_nodes.index(min_even)\n    return [min_even, min_even_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    # create a dictionary to store the frequency of each integer\n    freq = {}\n    # create a max heap to store the integers with frequency greater than the integer itself\n    max_heap = []\n    # iterate through the list\n    for i, num in enumerate(lst):\n        # if the integer is not in the dictionary, add it with a frequency of 1\n        if num not in freq:\n            freq[num] = 1\n        # if the integer is already in the dictionary, increase its frequency\n        else:\n            freq[num] += 1\n        # if the frequency of the integer is greater than the integer itself, add it to the max heap\n        if freq[num] > num:\n            max_heap.append(num)\n    # if the max heap is empty, there is no integer that satisfies the condition\n    if not max_heap:\n        return -1\n    # otherwise, return the smallest integer in the max heap\n    return max_heap[0]"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    # initialize variables\n    min_val = lst[0]\n    max_val = lst[0]\n    sorted_lst = []\n    unsorted_lst = []\n\n    # loop through list\n    for val in lst:\n        if val < min_val:\n            min_val = val\n            min_index = lst.index(min_val)\n            sorted_lst.append(min_val)\n            lst.pop(min_index)\n            unsorted_lst.append(lst.pop(min_index))\n        elif val > max_val:\n            max_val = val\n            max_index = lst.index(max_val)\n            sorted_lst.append(max_val)\n            lst.pop(max_index)\n            unsorted_lst.append(lst.pop(max_index))\n        else:\n            unsorted_lst.append(val)\n\n    # append remaining elements\n    sorted_lst.extend(lst)\n    sorted_lst.extend(unsorted_lst)\n\n    return sorted_lst"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a+b > c and a+c > b and b+c > a:\n        s = (a+b+c)/2\n        return round(s*(s-a)*(s-b)*(s-c), 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n    # Check if the list is balanced\n    if q[0]!= q[-1]:\n        return False\n    \n    # Check if the sum of elements is less than or equal to the maximum possible weight\n    return sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    # Initialize variables\n    n = len(arr)\n    start = [0] * n\n    for i in range(n):\n        start[i] = arr[i]\n    # Find the first element that is not palindromic\n    for i in range(n):\n        if start[i]!= arr[i]:\n            # Find the smallest change that makes the element palindromic\n            for j in range(n):\n                if start[j]!= arr[j]:\n                    continue\n                if arr[i] < start[j]:\n                    start[i] = start[j] + 1\n                    break\n            else:\n                start[i] = min(arr[i], start[i] + 1)\n    # Count the number of elements that need to be changed\n    count = 0\n    for i in range(n):\n        if start[i]!= arr[i]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    # Get the lengths of both lists\n    len1 = len(lst1)\n    len2 = len(lst2)\n\n    # If both lists have the same length, return the first list\n    if len1 == len2:\n        return lst1\n\n    # Calculate the total length of strings in the shorter list\n    total_length = len1 + len2 - len(set(lst1 + lst2) - set(lst1))\n\n    # Return the list with the shorter length\n    if len1 < len2:\n        return lst1\n    elif len1 == len2:\n        return lst1 if len(set(lst1)) < len(set(lst2)) else lst2\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, int(a**0.5) + 1):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n**int(n.__class__.__name__[5:])"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0:\n        return True\n    if a < 0:\n        return False\n    for i in range(1, int(a**(1/3))+1):\n        if a == i*i*i:\n            return True\n    return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    hex_digits = [2, 3, 5, 7, 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in hex_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = ''\n    power = 0\n    while decimal > 0:\n        remainder = decimal % 2\n        binary += '1' if remainder == 1 else '0'\n        decimal //= 2\n        power += 1\n    return 'db' + binary + 'db'"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    # Check if the length of the string is at least 3\n    if len(s) < 3:\n        return False\n    \n    # Check if every 3 consecutive letters are distinct\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    grade_map = {\n        4.0: 'A+',\n        > 3.7: 'A',\n        > 3.3: 'A-',\n        > 3.0: 'B+',\n        > 2.7: 'B',\n        > 2.3: 'B-',\n        > 2.0: 'C+',\n        > 1.7: 'C',\n        > 1.3: 'C-',\n        > 1.0: 'D+',\n        > 0.7: 'D',\n        > 0.0: 'D-',\n        0.0: 'E'\n    }\n\n    return [grade_map[gpa] for gpa in grades]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    if len(string) in [2, 3, 5, 7] or len(string) == 11:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # initialize count\n    count = 0\n    \n    # loop through all n-digit numbers\n    for i in range(10**n):\n        # check if number starts or ends with 1\n        if str(i)[:1] == '1' or str(i)[:n] == '1':\n            # increment count\n            count += 1\n            \n    # return count\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = bin(N)[2:]\n    binary_list = list(binary)\n    total_sum = 0\n    for digit in binary_list:\n        total_sum += int(digit)\n    return '0'*(len(binary_list)-len(str(total_sum))) + str(total_sum)"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    return sum(filter(lambda x: x % 2 == 0 and x % 1 == 1, map(int, lst)))"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # split the string into words\n    words = s.split()\n    # create a list of tuples, where each tuple contains the original word and its sorted version\n    sorted_words = [('', word) for word in sorted(words)]\n    # create a new string with the sorted words\n    sorted_s = ''.join(sorted_words)[::-1]\n    return sorted_s"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    row_tuples = []\n    for i, row in enumerate(lst):\n        for j, x_coordinate in enumerate(row):\n            if x_coordinate == x:\n                row_tuples.append((i, j))\n    return sorted(row_tuples, key=lambda tup: (tup[0], -tup[1]))"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n\n    first_value = array[0]\n    last_value = array[-1]\n    sort_order = (first_value + last_value) % 2\n\n    if sort_order == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    shifted_alphabet = alphabet[2:] + alphabet[:2]\n    encrypted_string = \"\"\n    for char in s:\n        encrypted_string += shifted_alphabet[ord(char) - ord('a')]\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    lst.sort()\n    return lst[-2]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    words = S.split(\".?!\")\n    count = 0\n    for sentence in words:\n        if sentence.startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if (x + y == z) or (x + z == y) or (y + z == x):\n        return True\n    elif type(x) + type(y) + type(z)!= 'int' or not all(x, y, z):\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = \"AEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char in vowels:\n            ascii_value = ord(char)\n            ascii_value += 2\n            if ascii_value > ord('Z'):\n                ascii_value -= 26\n            encoded_message += chr(ascii_value)\n        else:\n            encoded_message += char.upper()\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    max_prime = 0\n    max_digits_sum = 0\n    for num in lst:\n        if is_prime(num):\n            if num > max_prime:\n                max_prime = num\n                max_digits_sum = sum(int(digit) for digit in str(max_prime))\n    return max_digits_sum\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    lower = [key.lower() for key in dict.keys()]\n    upper = [key.upper() for key in dict.keys()]\n\n    return lower == lower or upper == upper"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n == 0:\n        return []\n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        for j in range(i, int(n**0.5)+1, i):\n            if all(j % i!= 0 for i in primes):\n                primes.append(j)\n        i += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    # Get the unit digits of the two numbers\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    \n    # If either of the unit digits is 0, the product will be 0\n    if unit_digit_a == 0 or unit_digit_b == 0:\n        return 0\n    \n    # Multiply the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    # If the product is greater than 9, the last digit will be 9\n    if product > 9:\n        return 9\n    \n    # Return the product\n    return product"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # Convert the string to a float\n    value = float(value)\n    \n    # Get the closest integer\n    if value >= 0:\n        return int(value + (0.5 if value % 1 == 0 else 0))\n    else:\n        return int(value + (0.5 if value % 1 == 0 else 1))"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [n] + make_a_pile(n-1)\n    return [n] + make_a_pile(n-1) + [2 if n % 2 == 1 else 1]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    # Check if x is even and y is odd or vice versa\n    if x % 2 == 0 and y % 2!= 0 or x % 2!= 0 and y % 2 == 0:\n        return -1\n    \n    # Find the maximum even number in the range [x, y]\n    max_num = max(x, y)\n    even_num = max_num\n    while even_num % 2!= 0:\n        even_num -= 2\n    return even_num"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    return bin(((n + m) // 2 + 1) // 2)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(list(set(filter(lambda x: not any(int(d)%2 for d in str(x)) for x in x))))"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Sort the array and get the indices of the elements between 1 and 9\n    sorted_arr = sorted(arr)\n    indices = [i for i, num in enumerate(sorted_arr) if num in range(1, 10)]\n\n    # Reverse the sorted array\n    sorted_arr.reverse()\n\n    # Replace each digit with its corresponding name\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = [names[num - 1] for num in sorted_arr[indices[0]:indices[-1]+1]]\n\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = [1] * n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result[i-1] = math.factorial(i)\n        else:\n            for j in range(1, i+1):\n                result[i-1] += j\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    # create a list of palindromic numbers between 1 and n\n    palindromes = [i for i in range(1, n+1) if str(i) == str(i)[::-1]]\n\n    # count the even and odd palindromes\n    even_count = 0\n    odd_count = 0\n    for palindrome in palindromes:\n        if palindrome % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # return the tuple with even and odd counts\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num < 0:\n            signed_digits = [num & 1]\n            num = num // 2\n            while num!= 0:\n                signed_digits.append(num & 1)\n                num //= 2\n            count += sum(signed_digits)\n        else:\n            count += sum(int(digit) for digit in str(num))\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n\n    # Find the maximum element in the array\n    max_elem = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_elem:\n            max_elem = arr[i]\n\n    # If the maximum element is at the end of the array, we can sort it\n    if arr[n-1] == max_elem:\n        return True\n\n    # If the maximum element is not at the end of the array, we cannot sort it\n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Check if all elements in lst1 are even\n    all_even = all(x % 2 == 0 for x in lst1)\n    \n    # Check if lst2 contains only even numbers\n    all_even_2 = all(x % 2 == 0 for x in lst2)\n    \n    # Check if lst1 and lst2 have different elements\n    different = set(lst1)!= set(lst2)\n    \n    # If all elements in lst1 are even and lst2 contains only even numbers,\n    # and lst1 and lst2 have different elements, return \"YES\"\n    if all_even and all_even_2 and different:\n        return \"YES\"\n    \n    # Otherwise, return \"NO\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Split the string by space and convert all letters to lowercase\n    letters = [letter.lower() for letter in test.split()]\n    \n    # Count the occurrence of each letter\n    counts = {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    \n    # Find the letter with the highest count\n    max_letter = max(counts, key=counts.get)\n    max_count = counts[max_letter]\n    \n    # Create a dictionary with the letter and its count\n    histogram_dict = {}\n    for letter, count in counts.items():\n        if count == max_count:\n            histogram_dict[letter] = count\n    \n    return histogram_dict"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    # create a set of characters from string c\n    char_set = set(c)\n    # create a new string without characters in char_set\n    result = ''.join([i for i in s if i not in char_set])\n    # check if the new string is a palindrome\n    is_palindrome = result == result[::-1]\n    # return the result string and the check result in a tuple\n    return (result, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_digits = [int(d) for d in s if int(d) % 2!= 0]\n        result.append(f\"the number of odd elements {len(odd_digits)} in the string {i+1} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # initialize the minimum sum to the first element of the array\n    min_sum = nums[0]\n    # initialize the current sum to the first element of the array\n    current_sum = nums[0]\n    # initialize the max sum to the first element of the array\n    max_sum = nums[0]\n    # iterate through the array\n    for i in range(1, len(nums)):\n        # update the current sum\n        current_sum = min(nums[i], current_sum + nums[i])\n        # update the max sum if the current sum is greater\n        max_sum = max(nums[i], max_sum)\n        # update the minimum sum if the current sum is less than the current minimum sum\n        min_sum = min(current_sum, min_sum)\n    # return the minimum sum\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # initialize variables\n    num_rows, num_cols = len(grid), len(grid[0])\n    buckets = 0\n    \n    # iterate through each row\n    for i in range(num_rows):\n        # iterate through each column\n        for j in range(num_cols):\n            # if the well has water, fill the bucket\n            if grid[i][j] == 1:\n                # calculate how many buckets are needed\n                buckets = math.ceil(grid[i][j] / capacity)\n                # update the grid by setting the value of the well to 0\n                grid[i][j] = 0\n                # decrement the number of buckets used\n                buckets -= 1\n    \n    # return the number of times the buckets were lowered\n    return buckets"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    # split the string into a list of words\n    words = s.split()\n    # initialize an empty list to store the matching words\n    result = []\n    # iterate through the words\n    for word in words:\n        # count the number of consonants in the word\n        num_consonants = sum(c.isalpha() and c.islower() and c not in \"aeiou\" for c in word)\n        # if the number of consonants is exactly n, append the word to the result list\n        if num_consonants == n:\n            result.append(word)\n    # return the result list\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    left_index = 0\n    right_index = len(word) - 1\n    closest_vowel = ''\n    \n    while left_index <= right_index:\n        if word[left_index] in vowels and word[right_index] in vowels:\n            if (left_index < right_index) and (word[left_index] < word[right_index]):\n                closest_vowel = word[left_index]\n                break\n            elif (left_index > right_index) and (word[left_index] > word[right_index]):\n                closest_vowel = word[right_index]\n                break\n        elif word[left_index] in vowels:\n            closest_vowel = word[left_index]\n            break\n        elif word[right_index] in vowels:\n            closest_vowel = word[right_index]\n            break\n        else:\n            if left_index < right_index:\n                closest_vowel = word[left_index]\n                break\n            else:\n                closest_vowel = word[right_index]\n                break\n        left_index += 1\n        right_index -= 1\n    \n    return closest_vowel"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Get the first k elements\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum_ = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 0 and num % 2!= 0:\n            sum_ += num\n    return sum_"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for i in range(min(k, len(arr))):\n        if arr[i] < 100:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    def collatz(n):\n        if n == 1:\n            return [1]\n        elif n % 2 == 0:\n            half = n // 2\n            return [n] + collatz(half)\n        else:\n            return [n] + collatz(3*n + 1)\n    \n    return sorted(collatz(n))"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    # Check if date is not empty\n    if not date:\n        return False\n    \n    # Check if date is in the correct format\n    if date[4:] not in ['01', '03', '05', '06', '08', '10', '12']:\n        return False\n    \n    # Check if day is within valid range for the given month\n    days_in_month = [31, 28, 31, 30, 30, 31, 30, 31, 30, 31, 30, 31]\n    month_index = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    month_name = date[0:4]\n    day = int(date[8:10])\n    month = month_index[month_name]\n    if day > days_in_month[month] or day < 1:\n        return False\n    \n    # Check if month is within valid range\n    if month < 1 or month > 12:\n        return False\n    \n    # If all conditions are satisfied, return True\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if'' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        alphabet = 'abcdefghijklmnopqrstuvwxyz'\n        result = 0\n        for i in range(26):\n            if chr(i + ord('a')) in txt:\n                result += 1\n        return result"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    # Check if the list is empty or has only one element\n    if len(lst) < 2 or lst[1]!= lst[0] + 1:\n        return True\n    # Check if any element is not in sequence\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # check if intervals intersect\n    if start1 <= end2 and start2 <= end1:\n        # calculate length of intersection\n        length = end1 - start1\n        \n        # check if length is prime\n        is_prime = True\n        for i in range(2, length):\n            if length % i == 0:\n                is_prime = False\n                break\n        \n        return \"YES\" if is_prime else \"NO\"\n    \n    # if intervals don't intersect, return \"NO\"\n    return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n\n    sign_product = 1\n    magnitude_sum = 0\n\n    for num in arr:\n        if num == 0:\n            magnitude_sum += 0\n            sign_product *= 0\n        elif num > 0:\n            magnitude_sum += abs(num)\n            sign_product *= 1\n        else:\n            magnitude_sum += abs(num)\n            sign_product *= -1\n\n    return magnitude_sum * sign_product"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # Find the minimum value in the first row\n    min_val = min(grid[0])\n    # Initialize the result list with the minimum value\n    result = [min_val]\n    # Initialize the current row and column\n    row, col = 0, 0\n    # Initialize the visited cells\n    visited = set()\n    # Iterate through the grid\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            # If the cell is not visited and its value is less than the current\n            # minimum path length, update the minimum path length and the current\n            # row and column\n            if grid[i][j] < k and (i, j) not in visited:\n                visited.add((i, j))\n                row = i\n                col = j\n                result.append(grid[i][j])\n                # If the minimum path length is reached, break the loop\n                if len(result) == k:\n                    break\n    # Return the result list\n    return result"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 1:\n        return [3]\n    elif n % 2 == 0:\n        return [1 + n // 2] + [tri(n - 1 - i) for i in range(n // 2)]\n    else:\n        return [tri(n - 1)] + [tri(n - 2)] + [tri(n + 1)]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    num_digits = 0\n    odd_product = 1\n    while n > 0:\n        num_digits += 1\n        digit = n % 10\n        if digit % 2 == 1:\n            odd_product *= digit\n    return odd_product if num_digits > 0 else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top == '(':\n                stack.append(char)\n            elif top == '[':\n                if stack and stack[-1] == ']':\n                    stack.pop()\n                stack.append(char)\n            else:\n                return False\n    return True"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(map(lambda x: round(x**2), lst))"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Split the string by space to get the words\n    words = txt.split()\n    # Get the last word\n    last_word = words[-1]\n    # Check if the last character is a letter and is not a part of a word\n    return not last_word.endswith(letter) and not last_word.endswith(space+letter)"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    # Create a function that returns a tuple (a, b), where 'a' is\n    # the largest of negative integers, and 'b' is the smallest\n    # of positive integers in a list.\n    # If there is no negative or positive integers, return them as None.\n\n    # Get the indices of negative and positive integers\n    neg_indices = [i for i, x in enumerate(lst) if x < 0]\n    pos_indices = [i for i, x in enumerate(lst) if x > 0]\n\n    # If there are no negative or positive integers, return None\n    if not neg_indices and not pos_indices:\n        return (None, None)\n\n    # Get the largest negative integer and the smallest positive integer\n    if neg_indices:\n        a = lst[neg_indices[-1]]\n    else:\n        a = None\n\n    if pos_indices:\n        b = lst[pos_indices[0]]\n    else:\n        b = None\n\n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    return n == 0 and n % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n > 0:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    # split the string into a list of words\n    words = text.split()\n    # iterate through the list of words\n    for i in range(len(words)):\n        # replace all spaces in a word with underscores\n        words[i] = words[i].replace(' ', '_')\n        # if the word has more than 2 consecutive spaces\n        if len(words[i]) > 2 and words[i][1] =='':\n            # replace all consecutive spaces with -\n            words[i] = words[i][0] + '-' + words[i][-1]\n    # join the list of words back into a string\n    fixed_text =''.join(words)\n    return fixed_text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    # Check if file name contains more than 3 digits\n    if file_name.count('0123456789') > 3:\n        return 'No'\n    \n    # Check if file name contains exactly one dot\n    if '.' not in file_name:\n        return 'No'\n    dot_index = file_name.index('.')\n    \n    # Check if substring before dot starts with a latin alphapet letter\n    if not file_name[0].isalpha():\n        return 'No'\n    \n    # Check if substring after dot is valid\n    if file_name[dot_index+1:].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # If all conditions are met, return 'Yes'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n        result += lst[i]\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if len(set(e for e in word if e.isalpha())) == len(word):\n            if is_prime(len(word)):\n                result += word + \" \"\n    return result[:-1]\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    # convert strings to fractions\n    x = Fraction(x)\n    n = Fraction(n)\n    \n    # check if x * n is a whole number\n    if x * n.denominator == x * n.numerator:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Sort the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, order them based on their index in original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), x))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for i in range(len(nums) - 1):\n        if nums[i] % 10 % 2!= 0 and nums[i+1] % 10 % 2!= 0:\n            if (nums[i] % 100 % 10 == 5 or nums[i] % 100 % 10 == 7) and (nums[i+1] % 100 % 10 == 5 or nums[i+1] % 100 % 10 == 7):\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i*i-i+1 for i in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets and planet2 not in planets:\n        return ()\n    result = [planet for planet in planets if planet not in [planet1, planet2] and (planet <= planet1 or planet >= planet2)]\n    return sorted(result)"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Create a dictionary to store the words and their indexes\n    word_dict = {}\n    # Iterate through the list and store the words and their indexes in the dictionary\n    for i, word in enumerate(lst):\n        if word not in word_dict:\n            word_dict[word] = [i]\n        else:\n            word_dict[word].append(i)\n\n    # Sort the list of words by length and then alphabetically\n    sorted_words = sorted(list(word_dict.keys()), key=lambda x: (len(x), x))\n\n    # Create a new list with the sorted words and their indexes\n    sorted_list = []\n    for word in sorted_words:\n        for index in word_dict[word]:\n            sorted_list.append(lst[index])\n    return sorted_list"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    # Check if n is prime\n    is_prime = [True]\n    is_prime[0] = False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            is_prime[i-1] = False\n    # If n is prime, return x\n    # Else, return y\n    return x if is_prime[n-1] else y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    odd_sum = 0\n    for num in lst:\n        if num >= 0 and num == int(num):\n            odd_sum += num**2\n    return odd_sum"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    cap_count = 0\n    sm_count = 0\n    strongest_extension = ''\n    for extension in extensions:\n        cap_count += len(extension.upper())\n        sm_count += len(extension.lower())\n        if cap_count - sm_count > len(strongest_extension) / cap_count - sm_count:\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    # Get the length of the words\n    n = len(a)\n    m = len(b)\n\n    # Iterate through the words\n    for i in range(n):\n        # Check if the current substring matches any rotation of b\n        for j in range(m):\n            if a[i:i+m] == b[j:] or a[i:i+m][::-1] == b[j:] or a[i:i+m][::-1] == b[j:][::-1]:\n                return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    num_str = str(num)\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    # Define roman numerals as a dictionary\n    roman_numerals = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M'\n    }\n    \n    # Define a function to convert a number to its roman numeral\n    def to_roman_numeral(number, roman_numerals):\n        # Initialize an empty string\n        roman_numeral = ''\n        \n        # Iterate through the roman numerals dictionary\n        for value, numeral in roman_numerals.items():\n            # If the number is a multiple of the value, add the numeral\n            if number % value == 0:\n                roman_numeral += numeral\n                \n                # If the numeral has more than two characters,\n                # remove the last two characters\n                if len(numeral) > 2:\n                    roman_numeral = roman_numeral[:-2]\n                    \n                # Set the number to the next multiple of the value\n                number -= value\n                \n        # If the number is still greater than zero,\n        # add the remaining numerals\n        if number > 0:\n            roman_numeral += to_roman_numeral(number, roman_numerals)\n            \n        return roman_numeral\n    \n    # Call the to_roman_numeral function with the given number\n    return to_roman_numeral(number, roman_numerals)"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if (a**2 + b**2 == c**2) or (b**2 + c**2 == a**2) or (c**2 + a**2 == b**2):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    # Create a dictionary to store the unique characters and their counts\n    char_count = {}\n    # Get the lexicographically first word and initialize the max_word variable\n    max_word = words[0]\n    # Loop through each word in the list\n    for word in words[1:]:\n        # Get the set of unique characters in the current word\n        unique_chars = set(word)\n        # Loop through each character in the current word\n        for char in unique_chars:\n            # If the character is not in the char_count dictionary, add it with a count of 1\n            if char not in char_count:\n                char_count[char] = 1\n            # If the character is already in the char_count dictionary, increment its count\n            else:\n                char_count[char] += 1\n        # Check if the current word has more unique characters than the current max_word\n        if len(unique_chars) > len(char_count):\n            # If the current word has more unique characters, update the max_word variable\n            max_word = word\n    # Return the max_word variable\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining < need:\n        remaining = 0\n    return [number + need, remaining]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = 0\n    for i in range(len(operand) - 1):\n        operator_index = i + len(operand) - 1\n        operand_index = i\n        if operator[operator_index] == '+':\n            result += operand[operand_index]\n        elif operator[operator_index] == '-':\n            result -= operand[operand_index]\n        elif operator[operator_index] == '*':\n            result *= operand[operand_index]\n        elif operator[operator_index] == '/':\n            result //= operand[operand_index]\n        elif operator[operator_index] == '**':\n            result **= operand[operand_index]\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    # create a list of boolean values indicating if a character is a letter or not\n    is_letter = [c.isalpha() for c in s]\n    # reverse the string if it contains no letters\n    if not is_letter:\n        return s[::-1]\n    # loop through the string and apply the case change for letters\n    for i in range(len(s)):\n        if is_letter[i]:\n            s = s[:i] + s[i].upper() + s[i+1:]\n    return s"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if text:\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return sorted(result)"}
