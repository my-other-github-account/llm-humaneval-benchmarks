{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1]!= '(':\n                stack.pop()\n            if not stack:\n                paren_groups.append(char)\n                stack.append(char)\n        elif char =='':\n            pass\n        else:\n            raise ValueError(f'Unexpected character {char}')\n    return paren_groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    for operation in operations:\n        if operation < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    return abs(numbers - numbers.mean())"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1))\n"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    return [max(nums[i:i + 2]) for i in range(len(nums) - 1)]\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str):\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str):\n    # Find the longest postfix of supplied string that is a palindrome.\n    postfix_palindromes = [\n        p for p in reversed(string) if is_palindrome(p)\n    ]\n    # Find the longest palindrome in postfix_palindromes.\n    longest_palindrome = max(postfix_palindromes, default=None)\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return (\n        longest_palindrome + longest_palindrome[::-1]\n        if longest_palindrome is not None and longest_palindrome!= \"\"\n        else string\n    )\n\n"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = max(strings, key=len)\n    return longest_string if len(strings) == 1 else longest_string\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    return gcd(a, b)\n\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b, a % b)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    return [x + b for x in range(len(string) + 1)[::-1] for b in string[x:]]\n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str):\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    music_notes = []\n    for note in music_string:\n        if note == 'o':\n            music_notes.append(4)\n        elif note == 'o|':\n            music_notes.append(2)\n        elif note == '.' or note == '|':\n            music_notes.append(1)\n        else:\n            raise ValueError('Invalid note symbol')\n    return music_notes"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str):\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x) if x in ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine'] else 0)\n    return''.join(numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers = sorted(numbers)\n    if len(numbers) < 2:\n        return None, None\n    first, second = numbers[0], numbers[1]\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - first) < abs(second - first):\n            second = numbers[i]\n    return first, second"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements\")\n    min_val, max_val = min(numbers), max(numbers)\n    return [x / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: isinstance(x, int), values))\n"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str):\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int):\n    return n//2"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, n//2 + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        if n == 1:\n            break\n    return [f for f in reversed(factors) if f not in factors[:1]]"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    # sort the list to make it easier to find duplicates\n    sorted_numbers = sorted(numbers)\n\n    # create a set to store unique values\n    unique_numbers = set()\n\n    # loop through the sorted list and add unique values to the set\n    for number in sorted_numbers:\n        if number not in unique_numbers:\n            unique_numbers.add(number)\n\n    # convert the set back to a list\n    return list(unique_numbers)\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 == 1:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if max(xs) < 0:\n        raise ValueError(\"find_zero only guarantees a solution when largest non zero coefficient is positive\")\n    return poly(xs[:len(xs) // 2], 0)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    return sorted(l[::2]) + [*l[1::2]]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    return \"\".join(itertools.cycle(s))\n"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    if n == 0 or n == 1:\n        return 2\n    else:\n        a = 2\n        b = 3\n        i = 4\n        while i <= n:\n            if is_prime(i):\n                a, b = b, i\n            i += 2\n        return a + b"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    return any(\n        map(\n            lambda x: x[0] + x[1] + x[2] == 0,\n            itertools.combinations(l, 3),\n            # filter out combinations that include duplicates\n            map(lambda x: list(set(x)), itertools.combinations(l, 3))\n        )\n    )"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    # define the number of cars in each direction\n    num_cars_left = n\n    num_cars_right = n\n\n    # define the starting positions of the cars\n    left_start = 0\n    right_start = 1\n\n    # define the total distance traveled by all cars\n    total_distance = 10000\n\n    # count the number of collisions\n    collisions = 0\n\n    # loop over all cars\n    for i in range(num_cars_left):\n        # move the left cars\n        left_start += 1\n        for j in range(num_cars_right):\n            right_start += 1\n\n        # check if a collision has occurred\n        if left_start == right_start:\n            collisions += 1\n\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def count_unique_pairs(l):\n    \"\"\"\n    count_unique_pairs takes a list of integers as an input.\n    it returns the number of unique pairs of integers in the list that\n    sum to zero.\n    >>> count_unique_pairs([1, 3, 5, 0])\n    0\n    >>> count_unique_pairs([1, 3, -2, 1])\n    0\n    >>> count_unique_pairs([1, 2, 3, 7])\n    0\n    >>> count_unique_pairs([2, 4, -5, 3, 5, 7])\n    2\n    >>> count_unique_pairs([1])\n    0\n    \"\"\"\n"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * h) / 2.0"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2 or n == 3:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return n % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) - ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": ""}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    if not l:\n        return True\n    if len(l) == 1:\n        return True\n    if l[0] >= l[-1]:\n        return all(x <= y for x, y in zip(l[1:], l[:-1]))\n    else:\n        return all(x >= y for x, y in zip(l[1:], l[:-1]))"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    if n <= 1:\n        return None\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    count_left = brackets.count('(')\n    count_right = brackets.count(')')\n    return count_left == count_right### Assumption:\n    if count_left > count_right:\n        return False\n    elif count_left < count_right:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    return (str(x)[:shift] + str(x)[-shift:]) if shift < len(str(x)) else str(x)[::-1]\n\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    fruit_count = {\n        \"apples\": 0,\n        \"oranges\": 0,\n        \"mangoes\": 0\n    }\n    for fruit in s.split(\",\"):\n        if fruit.strip().lower() == \"apples\":\n            fruit_count[\"apples\"] = int(fruit.strip().split(\" \")[1])\n        elif fruit.strip().lower() == \"oranges\":\n            fruit_count[\"oranges\"] = int(fruit.strip().split(\" \")[1])\n        elif fruit.strip().lower() == \"mangoes\":\n            fruit_count[\"mangoes\"] = int(fruit.strip().split(\" \")[1])\n    return n - fruit_count[\"apples\"] - fruit_count[\"oranges\"]"}
{"task_id": "HumanEval/68", "completion": ""}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    return max(filter(lambda x: x > 0 and lst.count(x) >= x, lst))"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n-1, -1):\n            if arr[i]!= arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                if is_palindrome(arr):\n                    return 1\n    return 0\n\n\ndef is_palindrome(arr):\n    for i in range(n//2):\n        if arr[i]!= arr[n-i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n**int(n)"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return a == 0 or a == (int(a**0.5))**3"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    hex_digits = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for digit in num:\n        if digit in hex_digits:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:].zfill(10) + \"db\"\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    return len(s) >= 3 and all(len(set(s[i:i+3])) == 3 for i in range(len(s) - 2))"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    gpa_letters = {\n        4.0: 'A+',\n        '> 3.7': 'A',\n        '> 3.3': 'A-',\n        '> 3.0': 'B+',\n        '> 2.7': 'B',\n        '> 2.3': 'B-',\n        '> 2.0': 'C+',\n        '> 1.7': 'C',\n        '> 1.3': 'C-',\n        '> 1.0': 'D+',\n        '> 0.7': 'D',\n        '> 0.0': 'D-',\n        0.0: 'E'\n    }\n    return [gpa_letters[g] for g in grades]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    return len(string) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(N)[2:].count('1')"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    # Sort the array in ascending order if the sum of the first and last indices is odd\n    # and in descending order if the sum is even\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if (x + y == z or x + z == y or y + z == x) and all([isinstance(i, int) for i in [x, y, z]]):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    return ''.join(\n        (chr(ord(letter) - (ord(letter) - ord('a') + 2) % 26) if letter in 'aeiou' else letter)\n        for letter in message\n    )"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    # find the largest prime number in the list\n    largest_prime = 0\n    for i in lst:\n        if is_prime(i):\n            largest_prime = i\n\n    # get the sum of the digits of the largest prime number\n    sum_of_digits = 0\n    while largest_prime > 0:\n        digit = largest_prime % 10\n        largest_prime //= 10\n        sum_of_digits += digit\n\n    return sum_of_digits\n\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5 + 1)):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    if all(k.isupper() for k in keys) or all(k.islower() for k in keys):\n        return True\n    return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n <= 0:\n        return []\n    return [i for i in range(2, n+1) if is_prime_number(i)]\n\n\ndef is_prime_number(n):\n    if n <= 1:\n        return False\n    return all(n % i for i in range(2, int(n**0.5)+1))\n\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    if a < 10 and b < 10:\n        return a * b\n    return 0"}
{"task_id": "HumanEval/98", "completion": "def count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in odd indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 2\n    count_lower('dBBE') returns 1\n    \"\"\"\n"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    return int(float(value) if float(value) % 1 else value)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n\n    >>> make_a_pile(4)\n    [4, 6, 8, 10]\n\n    >>> make_a_pile(5)\n    [5, 7, 9, 11, 13]\n\n    >>> make_a_pile(6)\n    [6, 8, 10, 12, 14, 16]\n\n    >>> make_a_pile(7)\n    [7, 9, 11, 13, 15, 17, 19]\n\n    >>> make_a_pile(8)\n    [8, 10, 12, 14, 16, 18, 20, 22]\n\n    >>> make_a_pile(9)\n    [9, 11, 13, 15, 17, 19, 21, 2"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(maxsplit=0)"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n"}
{"task_id": "HumanEval/103", "completion": "def is_prime(n):\n    \"\"\"You are given an integer n. \n    Your task is to determine whether n is a prime number.\n    If n is a prime number, return True. \n    If n is not a prime number, return False.\n    Example:\n    is_prime(2) => True\n    is_prime(3) => True\n    is_prime(4) => False\n    is_prime(5) => True\n    is_prime(6) => False\n    is_prime(7) => True\n    is_prime(8) => False\n    is_prime(9) => True\n    is_prime(10) => False\n    is_prime(11) => True\n    is_prime(12) => False\n    is_prime(13) => True\n    is_prime(14) => False\n    is_prime(15) => True\n    is_prime(16) => False\n    is_prime(17) => True\n    is_prime(18) => False\n    is_prime(19) => True\n    is_prime(20) => False\n    \"\"\"\n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted(set([i for i in x if not any(i % 2 == 0 for j in str(i).split(''))]))\n"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    elif any(x not in range(1, 10) for x in arr):\n        return ['One']\n    else:\n        sorted_arr = sorted(arr)\n        return [name for x, name in zip(sorted_arr, ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'] if x in range(1, 10) else [])]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return len([num for num in arr if sum(int(d) for d in str(num)) > 0])"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i]!= arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    return all(x % 2 == 0 for x in lst1)"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    histogram_dict = {}\n    test_list = test.split()\n    for letter in set(test_list):\n        if letter in histogram_dict:\n            histogram_dict[letter] += 1\n        else:\n            histogram_dict[letter] = 1\n    return histogram_dict"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [\n        f\"the number of odd elements {count}\"\n        for count in [\n            len(\n                [\n                    int(digit)\n                    for digit in word\n                    if not digit % 2\n                ]\n            )\n            for word in lst\n        ]\n    ]\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    max_fill_count = 0\n    while rows > 0 and cols > 0:\n        if rows == 1 and cols == 1:\n            max_fill_count += 1\n            rows -= 1\n            cols -= 1\n        elif rows == 1 and cols > 1:\n            while cols > 0 and grid[0][cols-1] == 1:\n                max_fill_count += 1\n                cols -= 1\n            rows -= 1\n        elif rows > 1 and cols == 1:\n            while rows > 1 and grid[rows-1][1] == 1:\n                max_fill_count += 1\n                rows -= 1\n            cols -= 1\n        else:\n            while rows > 1 and cols > 1 and grid[rows-1][cols-1] == 1:\n                max_fill_count += 1\n                rows -= 1\n                cols -= 1\n            rows -= 1\n            cols -= 1\n    return max_fill_count"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: int(bin(x)[2:].count('1')) if x >= 0 else float(x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    return [\n        word\n        for word in s.split()\n        if len(word) == n and word.isalpha()\n    ]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'aeiou'\n    word = word.lower()\n    for i in range(len(word)):\n        if word[i] in vowels and word[i] not in 'aeiou':\n            return word[i]\n    return ''"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    if len(lst) == 0:\n        return \"No\"\n    if len(lst[0]) == 0:\n        return \"No\"\n    if len(lst[1]) == 0:\n        return \"No\"\n    if lst[0][0] == lst[1][0]:\n        return \"Yes\"\n    if lst[0][0] == \"(\" and lst[1][0] == \")\":\n        return \"Yes\"\n    if lst[0][0] == \")\" and lst[1][0] == \"(\":\n        return \"Yes\"\n    return \"No\""}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr)[-k:]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(x for x in lst if x % 2 == 0 and x % 4 == 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    odd_collatz = []\n    while n!= 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3*n + 1\n        odd_collatz.append(n)\n    return sorted(odd_collatz)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    parts = date.split('-')\n    try:\n        day, month, year = [int(part) for part in parts]\n    except ValueError:\n        return False\n    if month not in (1, 3, 5, 7, 8, 10, 12) or (month in (4, 6, 9, 11) and day not in range(1, 31)) or (month == 2 and day not in range(1, 29)) or (month not in range(1, 13)):\n        return False\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if txt.count(\" \"):\n        return txt.split()\n    elif txt.count(\",\"):\n        return txt.split(\",\")\n    else:\n        return [i for i in txt.lower() if ord(i) % 2 == 0]"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if interval1[1] >= interval2[0] or interval2[1] >= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n\n    \"\"\"\n\n"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    path = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == k:\n                path.append(grid[i][j])\n                return path\n    return None"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return []\n    if n % 2 == 0:\n        return [1] + tri(n // 2)\n    else:\n        return [1] + tri(n - 1) + tri(n - 2) + tri(n + 1)"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    return reduce(lambda x, y: x * (y % 2 == 1),\n                  [int(d) for d in str(n)]\n                 , 1)"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    return any(\n        (\n            string.count(\"[\") == string.count(\"]\")\n            and (\n                string.count(\"[\") > 0\n                or (\n                    string.count(\"[\") == 1\n                    and string.count(\"]\") == 1\n                    and string.find(\"[\") < string.find(\"]\")\n                )\n            )\n        )\n        for i in range(len(string) // 2)\n    )"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(x**2 for x in map(int, round_up_to_int(lst)))\n\ndef round_up_to_int(lst):\n    return [int(x + 0.5) if x >= 0 else int(x - 0.5) for x in lst]\n\n"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    return not txt.strip().endswith(\n        [letter for letter in set(txt.lower()) if letter not in set('.,;:!?')]\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    return next((i for i in range(len(arr)) if arr[i] < arr[i-1] or i == 0), -1)\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n    if negative_integers:\n        a = max(negative_integers)\n    else:\n        a = None\n    if positive_integers:\n        b = min(positive_integers)\n    else:\n        b = None\n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(',', '.').strip())\n        b = float(b.replace(',', '.').strip())\n        return compare(a, b)\n    elif isinstance(a, int) and isinstance(b, int):\n        return compare(a, b)\n    else:\n        return None\n\ndef compare(a, b):\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n % 4 == 0\n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return \"No\"\n    if \".\" not in file_name:\n        return \"No\"\n    if not file_name.startswith(letters):\n        return \"No\"\n    if file_name.endswith(extensions) is False:\n        return \"No\"\n    return \"Yes\"\n\n"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum(x**2 if x % 3 == 0 else x**3 if x % 4 == 0 else x for x in lst)"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    return''.join(w for w in words if is_prime(len(w)))\n\n\ndef is_prime(n):\n    if n == 1 or n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    return int(x) // int(n) == 1"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    # sort the list in ascending order based on the sum of their digits\n    nums_sorted = sorted(nums, key=lambda x: sum(map(int, str(x))))\n    \n    # if there are several items with similar sum of their digits,\n    # order them based on their index in original list\n    return [*zip(*sorted(zip(nums_sorted, range(len(nums_sorted)))))]\n\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    return_val = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2 == 0:\n            return_val += 1\n    return return_val"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(n)]\n    return len(\n        filter(\n            lambda x, y, z: x + y + z % 3 == 0 and y > x and z > y,\n            itertools.combinations(a, 3),\n        )\n    )"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    planets_between = [p for p in planets if planet1 in planets <= p <= planet2]\n    return tuple(sorted(set(planets_between)))\n\n"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n is True:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    total = 0\n    for num in lst:\n        if num % 2 == 0 or not isinstance(num, int):\n            continue\n        total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_extension_strength = 0\n    for extension in extensions:\n        extension_strength = len(extension) - len(extension.lower())\n        if strongest_extension is None or strongest_extension_strength < extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = extension_strength\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    return any(b in w or w in b for w in a.translate(str.maketrans({ord(c): ord(c) if c in b else None for c in b}))"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    count_even = 0\n    count_odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num //= 10\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman = ''\n    while number > 0:\n        roman = _convert(number % 10, roman)\n        number //= 10\n    return roman\n\ndef _convert(num, roman):\n    if num == 1:\n        return 'i'\n    elif num == 2:\n        return 'ii'\n    elif num == 3:\n        return 'iii'\n    elif num == 4:\n        return 'iv'\n    elif num == 5:\n        return 'v'\n    elif num == 6:\n        return 'vi'\n    elif num == 7:\n        return 'vii'\n    elif num == 8:\n        return 'viii'\n    elif num == 9:\n        return 'ix'\n    elif num == 10:\n        return 'x'\n    elif num == 20:\n        return 'xx'\n    elif num == 30:\n        return 'xxx'\n    elif num == 40:\n        return 'xl'\n    elif num == 50:\n        return 'l'\n    elif num == 60:\n        return 'lx'\n    elif num == 70:\n        return 'lxx'\n    elif num == 80:\n        return 'lxxx'\n    elif num == 90:\n        return 'xc'\n    elif num == 100:\n        return 'c'\n    elif num == 200:\n        return 'cc'\n    elif num == 300:\n        return 'ccc'\n    elif num == 400:\n        return 'cd'\n    elif num == 500:\n        return 'd'\n    elif num == 600:\n        return 'dc'\n    elif num == 700:\n        return 'dcc'\n    elif num == 800:\n        return 'dccc'\n    elif num == 900:\n        return 'cdc'\n    elif num == 1000:\n        return 'cm'\n\n"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if (a**2 + b**2 == c**2):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    # sort the words in ascending order based on their length\n    words = sorted(words, key=len, reverse=True)\n    \n    # create a dictionary to store the unique characters and their counts\n    unique_chars = collections.Counter(words[0])\n    \n    # loop through all the words and update the dictionary with the unique characters\n    for word in words[1:]:\n        unique_chars.update(collections.Counter(word))\n    \n    # get the word with maximum count of unique characters\n    max_word = max(words, key=lambda word: unique_chars[word])\n    \n    # return the word with maximum number of unique characters\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"The length of operator list is not equal to the length of operand list minus one.\")\n    if any(x < 0 for x in operand):\n        raise ValueError(\"Operand is a list of non-negative integers.\")\n    if len(operator) < 1:\n        raise ValueError(\"Operator list has at least one operator.\")\n    if len(operand) < 2:\n        raise ValueError(\"Operand list has at least two operands.\")\n    result = 0\n    for i in range(len(operator) - 1):\n        if operator[i] == \"+\":\n            result += operand[i]\n        elif operator[i] == \"-\":\n            result -= operand[i]\n        elif operator[i] == \"*\":\n            result *= operand[i]\n        elif operator[i] == \"/\":\n            result /= operand[i]\n        elif operator[i] == \"**\":\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n"}
