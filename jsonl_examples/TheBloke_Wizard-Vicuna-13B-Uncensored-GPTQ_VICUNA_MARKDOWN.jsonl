{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n given threshold.\n \"\"\"\n for i in range(len(numbers) - 1):\n if abs(numbers[i] - numbers[i+1]) <= threshold:\n return True\n return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n paren_groups = []\n index = 0\n in_group = False\n for char in paren_string:\n if char == '(' and not in_group:\n paren_groups.append('')\n in_group = True\n elif char == ')' and in_group:\n in_group = False\n paren_groups.append('')\n if not in_group:\n index += 1\n return paren_groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n \"\"\" Given a positive floating point number, it can be decomposed into\n and integer part (largest integer smaller than given number) and decimals\n leftover part always smaller than 1).\n\n Return the decimal part of the number.\n \"\"\"\n integer_part = math.floor(number)\n decimal_part = number - integer_part\n return decimal_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n balance = 0\n for op in operations:\n if op > 0:\n balance += op\n elif op < 0:\n balance += abs(op)\n return balance < 0"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n around the mean of this dataset.\n Mean Absolute Deviation is the average absolute difference between each\n element and a centerpoint (mean in this case):\n MAD = average | x - x_mean |\n \n >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n 1.0\n \"\"\"\n mean = sum(numbers) / len(numbers)\n deviation = [abs(x - mean) for x in numbers]\n return sum(deviation) / len(deviation)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n \"\"\"\n numbers.insert(1, delimeter)\n return numbers"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n paren_count = 0\n nested_parens = []\n for char in paren_string:\n if char == '(':\n paren_count += 1\n elif char == ')':\n paren_count -= 1\n if paren_count == 0:\n nested_parens.append(paren_count)\n return nested_parens"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n filtered_strings = []\n for string in strings:\n if substring in string:\n filtered_strings.append(string)\n return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n total = sum(numbers)\n product = 1\n if numbers:\n product *= numbers[0]\n total += product\n return total, product"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n max_so_far = numbers[0]\n max_sequence = [max_so_far]\n for num in numbers:\n if num > max_so_far:\n max_sequence.append(num)\n max_so_far = max_sequence[-1]\n return max_sequence"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n \"\"\" Test if given string is a palindrome \"\"\"\n return string == string[::-1]\ndef make_palindrome(string: str) -> str:\n \"\"\" Find the shortest palindrome that begins with a supplied string.\n Algorithm idea is simple:\n - Find the longest postfix of supplied string that is a palindrome.\n - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n \n >>> make_palindrome('')\n ''\n >>> make_palindrome('cat')\n 'catac'\n >>> make_palindrome('cata')\n 'catac'\n \"\"\"\n longest_palindrome = ''\n for i in range(len(string)):\n if not is_palindrome(string[i:]):\n break\n longest_palindrome = string[:i]\n string = string[i:]\n if len(longest_palindrome) > len(string):\n return longest_palindrome\n else:\n return make_palindrome(string) + longest_palindrome"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n result = \"\"\n for i in range(len(a)):\n char_a = a[i]\n char_b = b[i]\n if char_a == \"1\" and char_b == \"1\":\n result += \"0\"\n elif char_a == \"0\" and char_b == \"0\":\n result += \"1\"\n elif char_a == \"1\" and char_b == \"0\":\n result += \"1\"\n elif char_a == \"0\" and char_b == \"1\":\n result += \"0\"\n return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n longest_string = \"\"\n for string in strings:\n if len(string) > len(longest_string):\n longest_string = string\n return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n while b:\n a, b = b, a % b\n return a"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n prefixes = []\n current_prefix = string\n while current_prefix:\n prefixes.append(current_prefix)\n current_prefix = current_prefix.lstrip(string)\n return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n \n >>> string_sequence(0)\n '0'\n >>> string_sequence(5)\n '0 1 2 3 4 5'\n \"\"\"\n return''.join(str(i) for i in range(n))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n distinct_chars = len(set(string.lower()))\n return distinct_chars"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n notes = []\n current_note = 0\n for char in music_string:\n if char == 'o':\n notes.append(current_note)\n current_note = 0\n elif char == 'o|':\n notes.append(current_note)\n current_note = 1\n elif char == '.|':\n notes.append(current_note)\n current_note = 0\n elif char =='':\n pass\n else:\n print(f\"Invalid character: {char}\")\n return notes"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n count = 0\n for i in range(len(string)):\n if substring == string[i:i+len(substring)]:\n count += 1\n return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n sorted_numbers = sorted(numbers.split())\n return''.join(sorted_numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n closest_pair = max_min_pair(numbers)\n return closest_pair[0], closest_pair[1]\n\ndef max_min_pair(numbers: List[float]) -> Tuple[float, float]:\n min_number = min(numbers)\n max_number = max(numbers)\n return (min_number, max_number)"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n such that the smallest number will become 0 and the largest will become 1\n \"\"\"\n numbers = sorted(numbers)\n return (numbers[0] - numbers[1]) * (numbers[2:] + [numbers[0]]) + numbers[1]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n \"\"\" Filter given list of any python values only for integers\n \n >>> filter_integers(['a', 3.14, 5])\n [5]\n >>> filter_integers([1, 2, 3, 'abc', {}, []])\n [1, 2, 3]\n \"\"\"\n return list(filter(lambda x: isinstance(x, int), values))"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n largest_divisor_count = 0\n largest_divisor_index = 0\n largest_divisor_n = n\n \n while largest_divisor_count < n:\n largest_divisor_count += 1\n largest_divisor_index += 1\n largest_divisor_n //= largest_divisor_index\n \n return largest_divisor_n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n factors = []\n i = 2\n while i <= n:\n if n % i == 0:\n factors.append(i)\n n //= i\n if n > 1:\n factors.append(n)\n return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n unique_numbers = []\n for num in numbers:\n if num not in unique_numbers:\n unique_numbers.append(num)\n return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase. \"\"\"\n return ''.join(x.isupper() and chr(ord(x) + 32) or chr(ord(x) - 32) for x in string)"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n \"\"\" Concatenate list of strings into a single string \"\"\"\n return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n \n >>> filter_by_prefix([], 'a')\n []\n >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n ['abc', 'array']\n \"\"\"\n return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n \"\"\"Return true if a given number is prime, and false otherwise.\n \n >>> is_prime(6)\n False\n >>> is_prime(101)\n True\n >>> is_prime(11)\n True\n >>> is_prime(13441)\n True\n >>> is_prime(61)\n True\n >>> is_prime(4)\n False\n >>> is_prime(1)\n False\n \"\"\"\n if n < 2:\n return False\n elif n == 2:\n return True\n else:\n for i in range(2, int(n**0.5)+1):\n if n % i == 0:\n return False\n return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float) -> float:\n \"\"\"\n Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n \"\"\"\n return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n \"\"\"\n xs are coefficients of a polynomial.\n find_zero find x such that poly(x) = 0.\n find_zero returns only only zero point, even if there are many.\n Moreover, find_zero only takes list xs having even number of coefficients\n and largest non zero coefficient as it guarantees\n a solution.\n \"\"\"\n n = len(xs)\n if n % 2 == 0:\n return round(poly(xs, -1), 2)\n else:\n return round(poly(xs, -1), 2)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n l' = l.copy()\n for i in range(len(l)):\n if i % 3 == 0:\n l'[i] = l[i]\n else:\n l'[i] = sorted(l[i])\n return l'"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n unique_set = set()\n for item in l:\n if item not in unique_set:\n unique_set.add(item)\n return sorted(unique_set)"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n count = 0\n for i in range(1, n+1):\n if i % 11 == 0 and i % 13 == 0:\n count += 1\n elif i % 7 == 0:\n count += 1\n return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n l_even = [l[i] for i in range(len(l), 0, 2)]\n l_even.sort()\n return [l[i] for i in range(len(l))] + l_even"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str) -> str:\n \"\"\"\n returns encoded string by cycling groups of three characters.\n \"\"\"\n # split string to groups. Each of length 3.\n groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n # cycle elements in each group. Unless group has fewer elements than 3.\n groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n return \"\".join(groups)\n\ndef decode_cyclic(s: str) -> str:\n \"\"\"\n takes as input string encoded with encode_cyclic function. Returns decoded string.\n \"\"\"\n # TODO: Implement decode_cyclic function.\n return s"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n if n <= 2:\n return n\n elif is_prime(n):\n return n\n else:\n return prime_fib(n-1) + prime_fib(n-2)\n\ndef is_prime(n: int) -> bool:\n if n <= 1:\n return False\n elif n <= 4:\n return True\n else:\n for i in range(5, int(n**0.5)+1, 6):\n if n % i == 0:\n return False\n return True"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n \"\"\"\n triples_sum_to_zero takes a list of integers as an input.\n it returns True if there are three distinct elements in the list that\n sum to zero, and False otherwise.\n \"\"\"\n for i in range(len(l)):\n for j in range(len(l)):\n for k in range(len(l)):\n if i!= j and i!= k and j!= k and l[i] + l[j] + l[k] == 0:\n return True\n return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n \"\"\"\n Imagine a road that's a perfectly straight infinitely long line.\n n cars are driving left to right; simultaneously, a different set of n cars\n are driving right to left.\n The two sets of cars start out being very far from\n each other. All cars move in the same speed. Two cars are said to collide\n when a car that's moving left to right hits a car that's moving right to left.\n However, the cars are infinitely sturdy and strong; as a result, they continue moving\n in their trajectory as if they did not collide.\n This function outputs the number of such collisions.\n \"\"\"\n collisions = 0\n for i in range(n):\n for j in range(n):\n if i!= j:\n if (i == 0 and j == 0) or (i == n - 1 and j == n - 1):\n continue\n if (i == 0 and j == n - 1) or (i == n - 1 and j == 0):\n continue\n if (i == 0 and j == 0) or (i == n - 1 and j == n - 1):\n continue\n collisions += 1\n return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n \"\"\"Return list with elements incremented by 1.\n \n >>> incr_list([1, 2, 3])\n [2, 3, 4]\n >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n [6, 4, 6, 3, 4, 4, 10, 1, 124]\n \"\"\"\n return list(map(lambda x: x + 1, l))"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n \"\"\"\n pairs_sum_to_zero takes a list of integers as an input.\n it returns True if there are two distinct elements in the list that\n sum to zero, and False otherwise.\n \"\"\"\n for i in range(len(l)):\n for j in range(i+1, len(l)):\n if l[i] + l[j] == 0:\n return True\n return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n \"\"\"Change numerical base of input number x to base.\n return string representation after the conversion.\n base numbers are less than 10.\n \n >>> change_base(8, 3)\n '22'\n >>> change_base(8, 2)\n '1000'\n >>> change_base(7, 2)\n '111'\n \"\"\"\n \n if base < 2 or base > 10:\n return \"Invalid base value\"\n \n digits = []\n while x:\n digit = x % base\n digits.append(digit)\n x //= base\n \n if base == 10:\n return ''.join(reversed(digits))\n \n return ''.join(digits)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n \"\"\"Given length of a side and high return area for a triangle.\"\"\"\n return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n fib4_cache = {0: 0, 1: 0}\n if n in fib4_cache:\n return fib4_cache[n]\n elif n == 0:\n return 0\n elif n == 1:\n return 0\n elif n == 2:\n return 2\n elif n == 3:\n return 0\n else:\n fib4_cache[n] = fib4_cache[n-1] + fib4_cache[n-2] + fib4_cache[n-3] + fib4_cache[n-4]\n return fib4_cache[n]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n n = len(l)\n if n % 2 == 0:\n m = (n // 2) - 1\n else:\n m = n // 2\n return (l[m] + l[m+1]) / 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n if n < 0:\n raise ValueError(\"n must be non-negative\")\n if p == 0:\n raise ValueError(\"p must be non-zero\")\n if n == 0:\n return 0\n if n == 1:\n return 1\n if n == 2:\n return 0\n if n == 3:\n return 2\n if n == 4:\n return 1\n if n == 5:\n return 3\n if n == 6:\n return 4\n if n == 7:\n return 5\n if n == 8:\n return 6\n if n == 9:\n return 7\n if n == 10:\n return 8\n if n == 11:\n return 9\n if n == 12:\n return 10\n if n == 13:\n return 11\n if n == 14:\n return 12\n if n == 15:\n return 13\n if n == 16:\n return 14\n if n == 17:\n return 15\n if n == 18:\n return 16\n if n == 19:\n return 17\n if n == 20:\n return 18\n if n == 21:\n return 19\n if n == 22:\n return 20\n if n == 23:\n return 21\n if n == 24:\n return 22\n if n == 25:\n return 23\n if n == 26:\n return 24\n if n == 27:\n return 25\n if n == 28:\n return 26\n if n == 29:\n return 27\n if n == 30:\n return 28\n if n == 31:\n return 29\n if n == 32:\n return 30\n if n == 33:\n return 31\n if n == 34:\n return 3"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n \"\"\"\n returns encoded string by shifting every character by 5 in the alphabet.\n \"\"\"\n return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\ndef decode_shift(s: str) -> str:\n \"\"\"\n takes as input string encoded with encode_shift function. Returns decoded string.\n \"\"\"\n return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n return ''.join(c for c in text if c not in 'aeiouAEIOU')"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n \"\"\"\n Return True if all numbers in the list l are below threshold t.\n \"\"\"\n return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n if len(s0)!= len(s1):\n return False\n return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n if n <= 1:\n return n\n else:\n return (fib(n-1) + fib(n-2))"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n \"\"\"\n brackets is a string of \"<\" and \">\".\n return True if every opening bracket has a corresponding closing bracket.\n \"\"\"\n if not brackets:\n return True\n count = 0\n for char in brackets:\n if char == \">\":\n count += 1\n if count % 2 == 0:\n return False\n count = 0\n return True"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n \"\"\"Return True is list elements are monotonically increasing or decreasing.\n \n >>> monotonic([1, 2, 4, 20])\n True\n >>> monotonic([1, 20, 4, 10])\n False\n >>> monotonic([4, 1, 0, -10])\n True\n \"\"\"\n return all(l[i] >= l[i-1] for i in range(len(l)))"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n # create sets of elements in each list\n set1 = set(l1)\n set2 = set(l2)\n \n # find common elements\n common_set = set1.intersection(set2)\n \n # convert back to list\n return list(common_set)"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n if n < 2:\n return 0\n elif n == 2:\n return n\n else:\n i = 2\n while i * i <= n:\n if n % i == 0:\n return i\n i += 1\n return largest_prime_factor(n // i)"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n \n >>> sum_to_n(30)\n 465\n >>> sum_to_n(100)\n 5050\n >>> sum_to_n(5)\n 15\n >>> sum_to_n(10)\n 55\n >>> sum_to_n(1)\n 1\n \"\"\"\n total = 0\n for i in range(1, n+1):\n total += i\n return total"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n \"\"\"\n brackets is a string of \"(\" and \")\".\n return True if every opening bracket has a corresponding closing bracket.\n \"\"\"\n if not brackets:\n return True\n left = 0\n right = 0\n for char in brackets:\n if char == \"(\":\n left += 1\n else:\n if char == \")\":\n right -= 1\n if right == left:\n return True\n else:\n return False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n \"\"\" xs represent coefficients of a polynomial.\n xs[0] + xs[1] * x + xs[2] * x^2 +....\n Return derivative of this polynomial in the same form.\n \"\"\"\n n = len(xs)\n if n == 0:\n return []\n if n == 1:\n return [0]\n result = []\n for i in range(n):\n result.append(i + 1)\n result.append(xs[i] + (result[i] - 1) * xs[i+1] * x)\n result.append(xs[i] + (result[i] - 1) * xs[i+1] * x**2)\n return result"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n if n <= 2:\n return n\n else:\n return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n vowels = \"aeiouy\"\n count = 0\n for char in s:\n if char.lower() in vowels and (char.lower()!= 'y' or s[-1]!= 'y'):\n count += 1\n return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n and return the result as a string.\n If shift > number of digits, return digits reversed.\n \n >>> circular_shift(12, 1)\n \"21\"\n >>> circular_shift(12, 2)\n \"12\"\n \"\"\"\n \n return str(int(x) >> shift)"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n total = 0\n for c in s:\n if ord(c) >= 97 and ord(c) <= 122:\n total += ord(c) - 97\n return total"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n apples = 0\n oranges = 0\n mangoes = 0\n \n if s.count('apples and ') > 0:\n apples = int(s.split(' and ')[0].strip('apples and '))\n if s.count('oranges and ') > 0:\n oranges = int(s.split(' and ')[0].split(' and ')[1].strip(' or '))\n if s.count('mangoes and ') > 0:\n mangoes = int(s.split(' and ')[0].split(' and ')[1].split(' and ')[1].strip(' and '))\n \n total_fruits = apples + oranges + mangoes\n \n return total_fruits - apples - oranges"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n smallest_even_value = None\n smallest_index = None\n for i, node in enumerate(arr):\n if node % 2 == 0 and node < smallest_even_value:\n smallest_even_value = node\n smallest_index = i\n elif smallest_even_value is not None and node < smallest_even_value:\n smallest_index = i\n if smallest_even_value is None:\n return []\n return [smallest_even_value, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n max_freq = lst[0]\n max_val = lst[0]\n for num in lst:\n if num > 0 and num in lst:\n if lst.count(num) >= lst.count(num) - 1:\n max_val = num\n max_freq = lst.count(num)\n return max_val\n else:\n return -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n if not lst:\n return []\n min_val = max(lst)\n for val in lst:\n if val < min_val:\n min_val = val\n else:\n if min_val > val:\n min_val = val\n return lst[::-1]"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n if (a + b > c) and (b + c > a) and (a + c > b):\n return round(0.5 * (a * b + b * c + c * a), 2)\n else:\n return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n if len(q) == 0:\n return False\n if len(q) % 2 == 0:\n return will_it_fly(q[1:], w) and q[0] <= w\n else:\n return will_it_fly(q[1:], w) and q[0] + q[1] <= w\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n # create a copy of the array\n arr_copy = arr.copy()\n \n # make a list of all the unique elements in the array\n unique_elements = set(arr_copy)\n \n # create a list of all the elements in the array\n all_elements = [num for num in arr_copy]\n \n # create a list of all the palindromic subarrays in the array\n palindromes = []\n for i in range(len(arr_copy)):\n for j in range(i, len(arr_copy)):\n subarray = [arr_copy[k] for k in range(i, j+1)]\n if subarray == subarray[::-1]:\n palindromes.append(subarray)\n \n # find the smallest palindrome that is not in the array\n smallest_palindrome = min(palindromes, key=len)\n \n # find the smallest number of elements that need to be changed to make the array palindromic\n num_changes = len(arr) - len(smallest_palindrome)\n \n return num_changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n if len(lst1) == len(lst2):\n return lst1\n else:\n return [c for c in lst1 if c < lst2[0]]"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n for p in primes:\n if a % p == 0:\n return False\n for i in range(2, int(a**0.5)+1):\n if a % i == 0 or a % (i+2) == 0:\n return False\n return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n if x == n**int(1):\n return True\n else:\n return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n if a == int(a**0.5**0.5):\n return True\n else:\n return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n count = 0\n for char in num:\n if char.isalpha() and char.isupper():\n count += 1\n if count > 0:\n break\n return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n binary = bin(decimal)[2:]\n return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n \"\"\"You are given a string s.\n Your task is to check if the string is happy or not.\n A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n For example:\n is_happy(a) => False\n is_happy(aa) => False\n is_happy(abcd) => True\n is_happy(aabb) => False\n is_happy(adb) => True\n is_happy(xyy) => False\n \"\"\"\n \n if len(s) < 3:\n return False\n \n prev_char = s[0]\n for i in range(1, len(s)):\n if s[i] == prev_char:\n if i > 0 and s[i-1] == s[i]:\n return False\n prev_char = s[i]\n if i > 2 and s[i-3] == s[i-2] == s[i]:\n return False\n return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n letter_grade = []\n for grade in grades:\n if grade >= 4.0:\n letter_grade.append(\"A+\")\n elif grade >= 3.7:\n letter_grade.append(\"A\")\n elif grade >= 3.3:\n letter_grade.append(\"A-\")\n elif grade >= 3.0:\n letter_grade.append(\"B+\")\n elif grade >= 2.7:\n letter_grade.append(\"B\")\n elif grade >= 2.3:\n letter_grade.append(\"B-\")\n elif grade >= 2.0:\n letter_grade.append(\"C+\")\n elif grade >= 1.7:\n letter_grade.append(\"C\")\n elif grade >= 1.3:\n letter_grade.append(\"C-\")\n elif grade >= 1.0:\n letter_grade.append(\"D+\")\n elif grade >= 0.7:\n letter_grade.append(\"D\")\n elif grade >= 0.3:\n letter_grade.append(\"D-\")\n elif grade >= 0:\n letter_grade.append(\"E\")\n else:\n letter_grade.append(\"E\")\n return letter_grade"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n \"\"\"\n Returns True if the length of the string is a prime number, False otherwise.\n \"\"\"\n if len(string) < 2:\n return False\n for i in range(2, int(len(string) / 2) + 1):\n if string.count(i)!= 1:\n return False\n return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n count = 0\n for i in range(10**n):\n if str(i) == '1' or str(i)[-1] == '1':\n count += 1\n return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n binary = bin(N)[2:]\n return sum(int(digit) for digit in binary)"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n even_indices = [i for i in range(len(lst)) if i % 2 == 0 and i % 4!= 0]\n even_elements = [lst[i] for i in even_indices]\n return sum(even_elements)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n # split the string into words\n words = s.split()\n \n # sort the words by their ascii values\n sorted_words = sorted(words, key=lambda x: ord(x))\n \n # join the sorted words back into a string\n return''.join(sorted_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n rows = []\n for row in lst:\n for i in range(len(row)):\n if row[i] == x:\n row_idx = i\n row_cols = [j for j in range(len(row)) if row[j]!= 0]\n rows.append((row_idx, row_cols))\n rows.sort(key=lambda x: (x[0], -x[1]))\n return rows"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n if not array:\n return array\n first = array[0]\n last = array[-1]\n if (first + last) % 2 == 0:\n array.sort(reverse=True)\n else:\n array.sort()\n return array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n # rotate the alphabet by shifting down by two multiplied to two places\n alphabet = 'abcdefghijklmnopqrstuvwxyz'\n rotated_alphabet = alphabet[2:][:2] + alphabet[:2]\n \n # encrypt the string using the rotated alphabet\n encrypted = ''\n for char in s:\n if char.isalpha():\n encrypted += rotated_alphabet.get(char.lower(), '')\n else:\n encrypted += char\n \n return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n if not lst:\n return None\n else:\n return lst[1] if len(lst) <= 2 else lst[1] if lst[0] <= lst[1] else next_smallest(lst)"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n boredoms = 0\n for i in range(len(S)):\n if S[i] in ['.', '?', '!']:\n if i > 0 and S[i-1] not in ['.', '?', '!']:\n boredoms += 1\n return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n return False\n if x + y == z and x == y == z:\n return True\n return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n # Convert all letters to lowercase\n message = message.lower()\n \n # Swap case of all letters\n message = message.swapcase()\n \n # Replace all vowels with the letter that appears 2 places ahead of that vowel in the english alphabet\n vowels = 'aeiou'\n message = message.replace(vowels[0], chr(ord(vowels[0]) + 2))\n message = message.replace(vowels[1], chr(ord(vowels[1]) + 2))\n message = message.replace(vowels[2], chr(ord(vowels[2]) + 2))\n message = message.replace(vowels[3], chr(ord(vowels[3]) + 2))\n \n return message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n largest_prime = lst[0]\n sum_of_digits = 0\n for i in range(len(lst)):\n if lst[i] > largest_prime:\n largest_prime = lst[i]\n sum_of_digits = 0\n for j in range(2, largest_prime):\n sum_of_digits += (largest_prime % j)\n return sum_of_digits"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n if len(dict) == 0:\n return False\n elif all(isinstance(key, str) and isinstance(key.lower(), str) or isinstance(key, str) and isinstance(key.upper(), str) for key in dict):\n return True\n else:\n return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n primes = []\n i = 2\n while i <= n:\n is_prime = True\n for j in range(2, int(i ** 0.5) + 1):\n if i % j == 0:\n is_prime = False\n break\n if is_prime:\n primes.append(i)\n i += 1\n return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n result = 0\n if a % 10 == 0 and b % 10 == 0:\n result = a * b\n elif a % 10 == 0:\n result = a * b // 10\n elif b % 10 == 0:\n result = a * b // 10\n else:\n result = a * b // 10\n return result"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n count = 0\n for i in range(len(s)):\n if s[i].isupper() and i % 2 == 0:\n count += 1\n return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n if value.isdigit():\n return int(value)\n elif value.isalpha():\n return int(value.lower())\n else:\n return float(value)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n if n % 2 == 0:\n next_num = n + 2\n else:\n next_num = n + 1\n pile = [n]\n for i in range(1, next_num+1):\n pile.append(i)\n return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n words = s.split(\", \")\n return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n # check if x is even\n if x % 2 == 0:\n # check if y is even\n if y % 2 == 0:\n # if both x and y are even, return the biggest even integer in the range [x, y]\n if x <= y:\n return max(x, y)\n else:\n return min(x, y)\n else:\n # if x is even and y is odd, return -1\n return -1\n else:\n # if x is odd, return -1\n return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n avg = (n + m) / 2\n if n > m:\n return -1\n elif n <= m:\n rounded_avg = int(round(avg))\n binary = bin(rounded_avg)[2:]\n return binary"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n # create a list of all digits in x\n digits = []\n for num in x:\n digits.extend(str(d).strip('()') for d in str(num))\n \n # create a list of even digits\n even_digits = [d for d in digits if d.isdigit()]\n \n # create a list of all unique digits\n unique_digits = [d for d in digits if d not in even_digits]\n \n # sort the list in increasing order\n unique_digits.sort()\n \n return unique_digits"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n if not arr:\n return []\n # sort the integers between 1 and 9 inclusive\n sorted_arr = sorted(arr, key=lambda x: x in ['1', '2', '3', '4', '5', '6', '7', '8', '9'])\n # reverse the sorted array\n reversed_arr = sorted_arr[::-1]\n # replace each digit by its corresponding name\n return ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n result = []\n for i in range(1, n+1):\n if i % 2 == 0:\n result.append(i)\n else:\n result.extend(range(1, i+1))\n return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n even_count = 0\n odd_count = 0\n even_odd_count = 0\n \n for i in range(1, n+1):\n if i == int(i):\n even_count += 1\n elif i % 10 == 0:\n odd_count += 1\n else:\n even_odd_count += 1\n \n return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n count = 0\n for num in arr:\n if num > 0:\n sum_of_digits = sum(int(digit) for digit in str(num))\n if sum_of_digits > 0:\n count += 1\n return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will be randomly ordered. Your task is to determine if\n it is possible to get an array sorted in non-decreasing order by performing \n the following operation on the given array:\n One right shift operation means shifting all elements of the array by one\n position in the right direction. The last element of the array will be moved to\n the starting position in the array i.e. 0th index. \n If it is possible to obtain the sorted array by performing the above operation\n then return True else return False.\n If the given array is empty then return True.\n Note: The given list is guaranteed to have unique elements.\n For Example:\n move_one_ball([3, 4, 5, 1, 2])==>True\n Explanation: By performin 2 right shift operations, non-decreasing order can\n be achieved for the given array.\n move_one_ball([3, 5, 4, 1, 2])==>False\n Explanation:It is not possible to get non-decreasing order for the given\n array by performing any number of right shift operations.\n \"\"\"\n n = len(arr)\n if n == 0:\n return True\n else:\n return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n if len(lst1) % 2 == 0 and len(lst2) % 2 == 0:\n return \"YES\"\n else:\n return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n letters = test.lower().split()\n counts = {}\n max_count = 0\n for letter in letters:\n if letter in counts:\n counts[letter] += 1\n else:\n counts[letter] = 1\n if counts[letter] > max_count:\n max_count = counts[letter]\n result = {}\n result[max_count] = letter\n return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n \"\"\"\n Task\n We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n then check if the result string is palindrome.\n A string is called palindrome if it reads the same backward as forward.\n You should return a tuple containing the result string and True/False for the check.\n Example\n For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n \"\"\"\n result = \"\"\n for char in s:\n if char not in c:\n result += char\n return (result, False)\n else:\n result = s.replace(char, \"\")\n if result == s[::-1]:\n return (result, True)\n else:\n return (result, False)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n output = []\n for i, s in enumerate(lst):\n if len(set(s) - set(str(s))) % 2 == 1:\n output.append(\"the number of odd elements in the string {} of the input.\".format(i+1))\n return output"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n # initialize the min subarray sum to be the sum of all elements in nums\n min_subarray_sum = sum(nums)\n \n # iterate through the array and find the minimum subarray sum\n for i in range(len(nums)):\n left_index = i\n right_index = len(nums) - 1\n min_subarray_sum = nums[i]\n while left_index >= 0 and right_index >= 0:\n # check if the subarray from left to right index includes only positive numbers\n if nums[left_index] >= 0 and nums[right_index] >= 0:\n min_subarray_sum = max(nums[left_index] + nums[right_index], min_subarray_sum)\n # check if the subarray from left to right index includes only negative numbers\n if nums[left_index] <= 0 and nums[right_index] <= 0:\n min_subarray_sum = min(nums[left_index] - nums[right_index], min_subarray_sum)\n # update the left and right index if the current subarray sum is smaller than the current min subarray sum\n if nums[left_index] + nums[right_index] < min_subarray_sum:\n min_subarray_sum = nums[left_index] + nums[right_index]\n if nums[left_index] - nums[right_index] < min_subarray_sum:\n min_subarray_sum = nums[left_index] - nums[right_index]\n # update the min subarray sum if the current subarray sum is smaller than the current min subarray sum\n if nums[i] + min_subarray_sum < min_subarray_sum:\n min_subarray_sum = nums[i] + min_subarray_sum\n \n # return the min subarray sum\n return min_subarray_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n \"\"\"\n You are given a rectangular grid of wells. Each row represents a single well,\n and each 1 in a row represents a single unit of water.\n Each well has a corresponding bucket that can be used to extract water from it, \n and all buckets have the same capacity.\n Your task is to use the buckets to empty the wells.\n Output the number of times you need to lower the buckets.\n\n Constraints:\n * all wells have the same length\n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n \"\"\"\n n = len(grid)\n m = len(grid[0])\n max_fill_count = 0\n max_fill_index = None\n for i in range(n):\n for j in range(m):\n if grid[i][j] == 1:\n if max_fill_index is None or max_fill_count < i:\n max_fill_count = i\n max_fill_index = (i, j)\n if max_fill_count > capacity:\n max_fill_count = capacity\n return max_fill_count"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n # convert array to binary string\n binary_arr = bin(arr)[2:].zfill(len(arr))\n \n # count number of ones in binary string\n num_ones = len([i for i in binary_arr if i == '1'])\n \n # sort array based on number of ones\n if num_ones == 0:\n return arr\n elif num_ones == 1:\n return sorted(arr)\n else:\n return sorted(arr, key=lambda x: len([i for i in bin(x)[2:].zfill(len(x)) if i == '1']))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n words = []\n for word in s.split():\n if len(set(word.lower().translate(str.maketrans('', '', string.punctuation))) & set('bcdfghjklmnpqrstvwxyz')) <= n:\n words.append(word)\n return words"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n vowels = ['a', 'e', 'i', 'o', 'u']\n word = word.lower()\n i = 0\n while i < len(word) - 1:\n if word[i] in 'bcdfghjklmnpqrstvwxyz' and word[i+1] in 'bcdfghjklmnpqrstvwxyz' and word[i+2] in 'bcdfghjklmnpqrstvwxyz':\n i += 2\n if word[i] in vowels and word[i+1] not in vowels and word[i+2] not in vowels:\n return word[i]\n i += 1\n return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n good_strings = []\n for i in range(len(lst)):\n for j in range(i+1, len(lst)):\n if lst[i] == '(' and lst[j] == ')' or lst[i] == ')' and lst[j] == '(':\n good_strings.append(lst[i:j+1])\n return 'Yes' if good_strings else 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n \"\"\"\n Given an array arr of integers and a positive integer k, return a sorted list \n of length k with the maximum k numbers in arr.\n\n Example 1:\n \n Input: arr = [-3, -4, 5], k = 3\n Output: [-4, -3, 5]\n \n Example 2:\n \n Input: arr = [4, -4, 4], k = 2\n Output: [4, -4]\n \n Example 3:\n \n Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n Output: [2]\n \n Note:\n \n 1. The length of the array will be in the range of [1, 1000].\n 2. The elements in the array will be in the range of [-1000, 1000].\n 3. 0 <= k <= len(arr).\n \"\"\"\n \n sorted_arr = sorted(arr[:k])\n return sorted_arr"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n odd_even_sum = 0\n for i in range(len(lst)):\n if i % 2 == 0:\n if lst[i] % 2 == 1:\n odd_even_sum += lst[i]\n return odd_even_sum"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n \"\"\"\n Given a non-empty array of integers arr and an integer k, return\n the sum of the elements with at most two digits from the first k elements of arr.\n \"\"\"\n # Convert all elements to strings\n arr = list(map(str, arr))\n \n # Get the first k elements as strings\n first_k_str = ''.join(arr[:k])\n \n # Get the sum of the first k elements as strings\n sum_str = sum(first_k_str[-2::-1])\n \n # Convert the sum string back to an integer\n sum_int = int(sum_str)\n \n # Return the sum\n return sum_int"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n \"\"\"\n Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n Note: \n 1. Collatz(1) is [1].\n 2. returned list sorted in increasing order.\n \"\"\"\n odd_collatz = []\n while n > 0:\n if n % 2 == 0:\n n = n // 2\n else:\n n = 3 * n + 1\n odd_collatz.append(n)\n return sorted(odd_collatz)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n # Check if the date is not empty\n if not date:\n return False\n \n # Check if the number of days is valid\n months = [31, 31, 30, 31, 31, 30, 31, 30, 31, 30, 31]\n days = int(date.split('-')[1])\n month = int(date.split('-')[0].split('(')[0])\n if month < 1 or month > 12 or days < 1 or days > months[month-1]:\n return False\n \n # Check if the date is in the correct format\n format = '%d-%d-%d'\n if date.count('-')!= 3 or len(date.split('-'))!= 3:\n return False\n \n return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n words = txt.split()\n if not words:\n return len(set(ord(c) for c in txt if c.isalpha() and ord(c) % 2 == 1))\n return words"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n if len(lst) < 2:\n return True\n elif len(lst) == 2 and lst[0] == lst[1]:\n return True\n else:\n return False"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n \"\"\"You are given two intervals,\n where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n The given intervals are closed which means that the interval (start, end)\n includes both start and end.\n For each given interval, it is assumed that its start is less or equal its end.\n Your task is to determine whether the length of intersection of these two \n intervals is a prime number.\n Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n which its length is 1, which not a prime number.\n If the length of the intersection is a prime number, return \"YES\",\n otherwise, return \"NO\".\n If the two intervals don't intersect, return \"NO\".\n\n [input/output] samples:\n intersection((1, 2), (2, 3)) ==> \"NO\"\n intersection((-1, 1), (0, 4)) ==> \"NO\"\n intersection((-3, -1), (-5, 5)) ==> \"YES\"\n \"\"\"\n \n start1 = interval1[0]\n end1 = interval1[1]\n start2 = interval2[0]\n end2 = interval2[1]\n \n if start1 > end2 or start2 > end1:\n return \"NO\"\n \n intersection_length = (end1 - start1) * (end2 - start2)\n \n if intersection_length % 1 == 0:\n return \"NO\"\n \n for i in range(2, int(intersection_length) + 1):\n if intersection_length % i == 0:\n return \"NO\"\n \n return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n if not arr:\n return None\n result = 0\n for num in arr:\n sign = 1 if num > 0 else -1 if num < 0 else 0\n result += abs(num) * sign\n return result"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n # create a list of lists to represent the grid\n grid = [[0] * (n+1) for n in range(n+1)]\n \n # fill the grid with the values in the range [1, N * N]\n for i in range(n+1):\n for j in range(n+1):\n grid[i][j] = j+1\n \n # find the minimum path of length k in the grid\n k = 3\n path = []\n for i in range(n):\n for j in range(n):\n # find the ordered list of the values on the cells that the current cell go through\n lst = [grid[i+1][j+1] for i in range(n) for j in range(n)]\n # find the ordered list of the values on the cells that the previous cell go through\n prev_lst = [grid[i][j] for i in range(n) for j in range(n)]\n # compare the two ordered lists\n if lst == prev_lst:\n path.append(grid[i][j])\n else:\n if k > 1:\n # if there are more cells to visit, continue the path\n path.append(grid[i][j])\n # if the path is complete, return the list of values\n return path"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n tribonacci = [1, 3]\n if n <= 1:\n return tribonacci\n elif n % 2 == 0:\n return tribonacci + [tri(n-1) + tri(n-2)]\n else:\n return tribonacci + [tri(n-1) + tri(n-2) + tri(n+1)]\n tri(10)"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n odd_digits = 0\n even_digits = 0\n if n > 0:\n odd_digits = n % 10\n even_digits = n // 10\n if odd_digits == 0:\n return 0\n else:\n return odd_digits * even_digits"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n if string.count('[')!= string.count(']'):\n return False\n stack = []\n for char in string:\n if char == '[' and stack and stack[-1]!= ']':\n stack.append(char)\n elif char == ']' and stack and stack[-1]!= '[':\n stack.pop()\n elif char == ']' and not stack:\n return False\n elif char == '[' and not stack:\n return False\n elif char == ',' and not stack:\n return False\n return all(stack)"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n result = 0\n for num in lst:\n num = int(num)\n result += num**2\n return result"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n if not txt:\n return False\n # split the string into words\n words = txt.split()\n # get the last word\n last_word = words[-1]\n # check if the last character is a letter and not part of a word\n return last_word[-1].isalpha() and not last_word.endswith(' ')"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n n = len(arr)\n max_idx = 0\n for i in range(n-1):\n if arr[i] <= arr[i+1]:\n max_idx = i\n else:\n break\n if max_idx == 0:\n return -1\n return max_idx"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n if not lst:\n return None, None\n neg_lst = [num for num in lst if num < 0]\n pos_lst = [num for num in lst if num > 0]\n neg_max = max(neg_lst)\n pos_min = min(pos_lst)\n return neg_max, pos_min"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n if a > b:\n return a\n elif b > a:\n return b\n elif isinstance(a, str) and isinstance(b, str) and a!= b:\n if a.endswith(','):\n a = float(a.replace(',', '.'))\n if b.endswith(','):\n b = float(b.replace(',', '.'))\n if a > b:\n return a\n elif b > a:\n return b\n return None\n else:\n return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n Example\n is_equal_to_sum_even(4) == False\n is_equal_to_sum_even(6) == False\n is_equal_to_sum_even(8) == True\n \"\"\"\n if n <= 2:\n return True\n elif n % 2 == 0 and n > 4:\n return False\n else:\n for i in range(2, int(n**0.5)+1):\n if i % 2 == 0:\n sum_even = n - i\n if sum_even == i:\n return True\n return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n \"\"\"The Brazilian factorial is defined as:\n brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n where n > 0\n\n For example:\n >>> special_factorial(4)\n 288\n\n The function will receive an integer as input and should return the special\n factorial of this integer.\n \"\"\"\n \n if n < 0:\n return None\n \n result = 1\n for i in range(n):\n result *= i\n result /= (i + 1)\n \n return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n text = text.replace(\" \", \"_\")\n text = text.replace(\"  \", \"-\")\n return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n if len(file_name) > 3:\n return \"No\"\n dot_index = file_name.find(\".\")\n if dot_index == -1:\n return \"No\"\n if not file_name[0].isalpha():\n return \"No\"\n suffix = file_name.split(\".\")[1]\n if suffix not in [\"txt\", \"exe\", \"dll\"]:\n return \"No\"\n return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n \"\"\"\n This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n \n Examples:\n For lst = [1,2,3] the output should be 6\n For lst = [] the output should be 0\n For lst = [-1,-5,2,-1,-5] the output should be -126\n \"\"\"\n \n sum = 0\n for num in lst:\n if num is None:\n continue\n if (num is not None) and (num % 3 == 0):\n sum += num**2\n elif (num is not None) and (num % 4 == 0) and (num % 3!= 0):\n sum += num**3\n else:\n sum += num\n return sum"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n prime_words = []\n for word in sentence.split():\n if len(word) == 2:\n prime_words.append(word)\n return''.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n if x == n:\n return True\n elif x % n == 0:\n return False\n else:\n return simplify(int(x) / int(n), int(n))"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n # create a list of tuples, where each tuple contains the number and its sum of digits\n # sort the list by the sum of digits\n sorted_nums = sorted(nums, key=lambda x: sum(int(digit) for digit in str(x)), reverse=True)\n \n # if there are several items with similar sum of their digits,\n # order them based on their index in original list\n return sorted_nums[:]"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n nums = list(nums)\n count = 0\n for num in nums:\n if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n count += 1\n return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n a = [i**2 - i + 1 for i in range(n+1)]\n valid_triples = 0\n for i in range(n):\n for j in range(i+1, n):\n for k in range(j+1, n):\n if a[i] + a[j] + a[k] % 3 == 0:\n valid_triples += 1\n return valid_triples"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n if planet1 not in planets or planet2 not in planars:\n return ()\n orbits = []\n for i in range(len(planets)):\n if planets[i] == planet1:\n orbits.append(i)\n if planets[i] == planet2:\n orbits.append(i)\n orbits.sort(key=lambda x: abs(x - 1))\n return tuple(planets[orbit] for orbit in orbits)\n else:\n return ()"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n sorted_lst = sorted(lst, key=len)\n return [word for word in sorted_lst if len(word) % 2 == 0]"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n if n % 2 == 0:\n return y\n else:\n return x"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n sum_of_squares = 0\n for num in lst:\n if isinstance(num, int) and num!= num.round() and num % 1 == 0:\n sum_of_squares += num**2\n return sum_of_squares"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n # create a list to store the differences between the guesses and the actual scores\n diffs = []\n \n # iterate over the game and guess lists\n for i in range(len(game)):\n # check if the guess is correct\n if game[i] == guess[i]:\n # if the guess is correct, the difference is 0\n diffs.append(0)\n else:\n # otherwise, the difference is the absolute difference between the guess and the score\n diffs.append(abs(game[i] - guess[i]))\n \n # return the list of differences\n return diffs"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n strongest_extension = None\n for extension in extensions:\n if extension.isupper():\n if extension.islower():\n strength = 1 - len(extension.lower())\n else:\n strength = 1\n else:\n strength = 0\n if strongest_extension is None or strength > strongest_extension:\n strongest_extension = extension\n return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n return any(a.lower() in b.lower() for i in range(1, len(b) + 1) for j in range(i, len(b)) for k in range(j, len(b)) for l in range(k, len(b)))"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n even_count = 0\n odd_count = 0\n \n if num < 0:\n num = abs(num)\n \n while num:\n digit = num % 10\n if digit % 2 == 0:\n even_count += 1\n else:\n odd_count += 1\n num //= 10\n \n return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n roman_numerals = {\n 1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix', 10: 'x',\n 100: 'c', 200: 'cc', 300: 'ccc', 400: 'cd', 500: 'd', 600: 'dc', 700: 'dcc', 800: 'dccc', 900: 'cm',\n 1000:'m'\n }\n return roman_numerals[number]"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n if a == b == c:\n return True\n elif a + b + c == 2 * (a + b) or a + b + c == 2 * (b + c):\n return True\n else:\n return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n max_word = \"\"\n max_count = 0\n for word in words:\n count = len(word)\n if count > max_count:\n max_count = count\n max_word = word\n if max_count == len(words):\n return max_word\n return \"\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n if remaining >= need:\n return [number + need, remaining - need]\n else:\n return [number + need, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n \"\"\"\n Given two lists operator, and operand. The first list has basic algebra operations, and \n the second list is a list of integers. Use the two given lists to build the algebric \n expression and return the evaluation of this expression.\n \n The basic algebra operations:\n Addition ( + ) \n Subtraction ( - ) \n Multiplication ( * ) \n Floor division ( // ) \n Exponentiation ( ** ) \n \n Example:\n operator['+', '*', '-']\n array = [2, 3, 4, 5]\n result = 2 + 3 * 4 - 5\n => result = 9\n \n Note:\n The length of operator list is equal to the length of operand list minus one.\n Operand is a list of of non-negative integers.\n Operator list has at least one operator, and operand list has at least two operands.\n \"\"\"\n operator_list = operator\n operand_list = operand\n if len(operator_list)!= len(operand_list) - 1:\n raise ValueError(\"Invalid input. Operator list and operand list must have the same length except for the last element.\")\n result = 1\n for i in range(len(operator_list)):\n if operator_list[i] == '+':\n result *= operand_list[i]\n elif operator_list[i] == '-':\n result -= operand_list[i]\n elif operator_list[i] == '*':\n result *= operand_list[i]\n elif operator_list[i] == '/':\n result /= operand_list[i]\n elif operator_list[i] == '**':\n result **= operand_list[i]\n return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n result = \"\"\n for i in range(len(s)):\n if i < len(s) - 1 and isalpha(s[i]):\n if s[i].islower():\n s[i], s[i+1] = s[i+1], s[i]\n else:\n s[i], s[i+1] = s[i+1], s[i].upper()\n else:\n result += s[i]\n else:\n result += s[i]\n return result"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n if not text:\n return None\n md5_hash = hashlib.md5(text.encode()).hexdigest()\n return md5_hash"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n integers = []\n while a <= b:\n if a % 2 == 0:\n integers.append(a)\n a += 2\n return integers"}
