{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Define a function to check if a string is balanced\n    def is_balanced(string: str) -> bool:\n        \"\"\"\n        Check if a string is balanced.\n        A balanced string is a string that has the same number of open and close parentheses.\n        \"\"\"\n        # Check if the string is empty\n        if not string:\n            return True\n        # Check if the string has an odd number of parentheses\n        if len(string) % 2!= 0:\n            return False\n        # Check if the string has an even number of parentheses\n        if len(string) % 2 == 0:\n            return True\n        # Check if the string has an odd number of parentheses\n        return False\n    # Define a function to separate groups of parentheses\n    def separate_groups(string: str) -> List[str]:\n        \"\"\"\n        Separate groups of parentheses.\n        A group of parentheses is a string that has the same number of open and close parentheses.\n        \"\"\"\n        # Initialize a list to store the groups\n        groups = []\n        # Loop through the string\n        for char in string:\n            # Check if the char is an open parenthesis\n            if char == '(':\n                # If the group is not empty, add it to the list\n                if groups:\n                    groups.append(groups[-1])\n                # If the group is empty, add the current char to the list\n                else:\n                    groups.append(char)\n            # Check if the char is a close parenthesis\n            elif char == ')':\n                # If the group is not empty, add it to the list\n                if groups:\n                   "}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        elif operation < 0:\n            balance += operation\n        else:\n            return False\n    return balance < 0"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviation = [abs(x - mean) for x in numbers]\n    return sum(deviation) / len(deviation)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return [numbers[0]]\n    if delimeter == 0:\n        return [numbers[0]] + [numbers[i] for i in range(1, len(numbers))]\n    return [numbers[0]] + [numbers[i] for i in range(1, len(numbers))] + [delimeter] + [numbers[i] for i in range(1, len(numbers))]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Initialize a list to store the maximum level of nesting for each group\n    max_levels = [0] * len(paren_string)\n\n    # Initialize a list to store the current level of nesting for each group\n    current_levels = [0] * len(paren_string)\n\n    # Initialize a list to store the current level of nesting for each group\n    current_levels = [0] * len(paren_string)\n\n    # Initialize a list to store the current level of nesting for each group\n    current_levels = [0] * len(paren_string)\n\n    # Initialize a list to store the current level of nesting for each group\n    current_levels = [0] * len(paren_string)\n\n    # Initialize a list to store the current level of nesting for each group\n    current_levels = [0] * len(paren_string)\n\n    # Initialize a list to store the current level of nesting for each group\n    current_levels = [0] * len(paren_string)\n\n    # Initialize a list to store the current level of nesting for each group\n    current_levels = [0] * len(paren_string)\n\n    # Initialize a list to store the current level of nesting for each group\n    current_levels = [0] * len(paren_string)\n\n    # Initialize a list to store the current level of nesting for each group\n    current_levels = [0] * len(paren_string)\n\n    # Initialize a list to store the current level of nesting for each group\n    current_levels = [0] * len"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), product(numbers)\n"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far = numbers[0]\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n    return [max_so_far] + [max_so_far] * (len(numbers) - 1)\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    # Find the longest postfix of the string that is a palindrome\n    longest_palindrome = max(len(string) - i, 0) for i in range(len(string))\n    longest_palindrome = max(longest_palindrome, 0)\n\n    # Find the prefix that comes before the palindromic suffix\n    prefix = string[:longest_palindrome]\n\n    # Append the reverse of the prefix to the end of the string\n    return prefix[::-1] + string[longest_palindrome:]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(chr(ord(c) ^ ord(d)) for c, d in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while a % 2 == 0 or b % 2 == 0:\n        a //= 2\n        b //= 2\n    while a % 2!= 0 or b % 2!= 0:\n        a //= 2\n        b //= 2\n    return a"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        if prefix not in prefixes:\n            prefixes.append(prefix)\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n == 0:\n        return '0'\n    else:\n        return f'{n} {string_sequence(n-1)}'"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Define a function to parse a single note\n    def parse_note(note: str) -> int:\n        if note == 'o':\n            return 4\n        elif note == 'o|':\n            return 2\n        elif note == '.|':\n            return 1\n        else:\n            return 0\n    \n    # Parse the music string\n    notes = music_string.split(' ')\n    beats = [parse_note(note) for note in notes]\n    \n    # Return the list of beats\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if substring in string[i:i+len(substring)]:\n            count += 1\n            i += len(substring)\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to\n    each other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers[0], numbers[0]\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[0], sorted_numbers[-1]"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    smallest = min(numbers)\n    largest = max(numbers)\n    return [smallest / largest * i for i in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        for i in range(2, n+1):\n            if n % i == 0:\n                return i\n    return n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            n /= i\n    factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    if not strings:\n        return \"\"\n    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2!= 0:\n        raise ValueError(\"List xs must have even number of coefficients\")\n    if xs[0] == 0:\n        return 0\n    if xs[0] == 1:\n        return 1\n    if xs[0] == -1:\n        return -1\n    if xs[0] == 2:\n        return 2\n    if xs[0] == -2:\n        return -2\n    if xs[0] == 3:\n        return 3\n    if xs[0] == -3:\n        return -3\n    if xs[0] == 4:\n        return 4\n    if xs[0] == -4:\n        return -4\n    if xs[0] == 5:\n        return 5\n    if xs[0] == -5:\n        return -5\n    if xs[0] == 6:\n        return 6\n    if xs[0] == -6:\n        return -6\n    if xs[0] == 7:\n        return 7\n    if xs[0] == -7:\n        return -7\n    if xs[0] == 8:\n        return 8\n    if xs[0] == -8:\n        return -8\n    if xs[0] == 9:\n        return 9"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_sorted = sorted(l)\n    l_third = [l_sorted[i] if i % 3 == 0 else l_sorted[i] for i in range(len(l))]\n    return l_third"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            if i % 11 == 0:\n                if i % 7 == 0:\n                    count += 1\n            else:\n                if i % 7 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_even = [x[::2] for x in l]\n    l_odd = [x[1::2] for x in l]\n    return l_even + l_odd"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n <= 1:\n        return n\n    elif n <= 2:\n        return 2\n    elif n <= 3:\n        return 3\n    elif n <= 4:\n        return 5\n    elif n <= 5:\n        return 89\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i+1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"Input number must be non-negative\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return str(base)\n    if x == 2:\n        return str(base) + str(base - 1)\n    if x == 3:\n        return str(base) + str(base - 1) + str(base - 2)\n    if x == 4:\n        return str(base) + str(base - 1) + str(base - 2) + str(base - 3)\n    if x == 5:\n        return str(base) + str(base - 1) + str(base - 2) + str(base - 3) + str(base - 4)\n    if x == 6:\n        return str(base) + str(base - 1) + str(base - 2) + str(base - 3) + str(base - 4) + str(base - 5)\n    if x == 7:\n        return str(base) + str(base - 1) + str(base - 2) + str(base - 3) + str(base - 4) + str(base - 5) + str(base - 6)\n    if x == 8:\n        return str(base) + str(base - 1) + str(base - 2) + str(base - 3) + str(base - 4) + str(base - 5) + str(base - 6) + str(base - 7)\n    if x == 9:\n        return str(base) + str(base - 1) + str(base - 2) + str(base - 3) + str("}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 5\n    elif n == 7:\n        return 6\n    elif n == 8:\n        return 7\n    elif n == 9:\n        return 8\n    elif n == 10:\n        return 9\n    elif n == 11:\n        return 10\n    elif n == 12:\n        return 11\n    elif n == 13:\n        return 12\n    elif n == 14:\n        return 13\n    elif n == 15:\n        return 14\n    elif n == 16:\n        return 15\n    elif n == 17:\n        return 16\n    elif n == 18:\n        return 17\n    elif n == 19:\n        return 18\n    elif n == 20:\n        return 19\n    elif n == 21:\n        return 20\n    elif n == 22:\n        return 21\n    elif n == 23:\n        return 22\n    elif n == 24:\n        return 23\n    elif n == 25:\n        return 24\n    elif n == 26:\n        return 25\n    elif n =="}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num <= t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if s0 == s1:\n        return True\n    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    # Check if the string is empty\n    if not brackets:\n        return True\n\n    # Check if the string is a single bracket\n    if brackets == \"<\" or brackets == \">\" or brackets == \"<<\" or brackets == \">>\":\n        return True\n\n    # Check if the string is a single bracket with a corresponding closing bracket\n    if brackets == \"<\" and brackets[1:] == \">\" or brackets == \">\" and brackets[1:] == \"<\":\n        return True\n\n    # Check if the string is a single bracket with a corresponding closing bracket\n    if brackets == \"<\" and brackets[1:] == \">\" and brackets[2:] == \"<\" or brackets == \">\" and brackets[1:] == \"<\" and brackets[2:] == \">\":\n        return True\n\n    # Check if the string is a single bracket with a corresponding closing bracket\n    if brackets == \"<\" and brackets[1:] == \">\" and brackets[2:] == \"<\" and brackets[3:] == \">\" or brackets == \">\" and brackets[1:] == \"<\" and brackets[2:] == \">\" and brackets[3:] == \"<\":\n        return True\n\n    # Check if the string is a single bracket with a corresponding closing bracket\n    if brackets == \"<\" and brackets[1:] == \">\" and brackets[2:] == \"<\" and brackets[3:] == \">\" and brackets[4:] == \">\" or brackets == \">\" and brackets[1:] == \"<\" and brackets[2:] == \">\" and brackets[3:] == \"<\" and brackets[4:] == \"<\":\n        return True\n\n    # Check if the string is a single bracket with a corresponding closing bracket\n    if brackets == \"<\" and brackets[1:] == \">\" and brackets[2:] == \"<\""}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return False\n    if l[0] > l[1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # create a set to store unique elements\n    unique_set = set()\n    # iterate through both lists\n    for item in l1:\n        unique_set.add(item)\n    for item in l2:\n        unique_set.add(item)\n    # return the sorted unique common elements\n    return sorted(unique_set)"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    elif n < 10:\n        return 2\n    elif n < 100:\n        return 2\n    elif n < 1000:\n        return 2\n    elif n < 10000:\n        return 2\n    elif n < 100000:\n        return 2\n    elif n < 1000000:\n        return 2\n    elif n < 10000000:\n        return 2\n    elif n < 100000000:\n        return 2\n    elif n < 1000000000:\n        return 2\n    elif n < 10000000000:\n        return 2\n    elif n < 100000000000:\n        return 2\n    elif n < 1000000000000:\n        return 2\n    elif n < 10000000000000:\n        return 2\n    elif n < 100000000000000:\n        return 2\n    elif n < 1000000000000000:\n        return 2\n    elif n < 10000000000000000:\n        return 2\n    elif n < 100000000000000000:\n        return 2\n    elif n < 1000000000000000000:\n        return 2\n    elif n < 10000000000000"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"\n    return sum(range(1, n+1))\n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    if len(xs) == 1:\n        return [1]\n    else:\n        return [xs[0] + xs[1] * x + xs[2] * x**2 +...]\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels.append('y')\n    if s[-1] == 'y':\n        vowels.append('y')\n    return sum(1 for c in s if c in vowels)\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    # convert string to list of characters\n    s = list(s)\n    # remove lowercase characters\n    s = [c for c in s if ord(c) >= 65 and ord(c) <= 90]\n    # sum the uppercase characters\n    return sum(s)"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    apples, oranges = s.split()\n    apples = int(apples)\n    oranges = int(oranges)\n    mango = n - apples - oranges\n    return mango\n"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n    \"\"\"\n    smallest_even_value = 0\n    smallest_index = 0\n    for node in arr:\n        if node % 2 == 0:\n            if node < smallest_even_value:\n                smallest_even_value = node\n                smallest_index = arr.index(node)\n    return [smallest_even_value, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_freq = 0\n    max_val = -1\n    for val in lst:\n        if val > 0:\n            freq = lst.count(val)\n            if freq >= val:\n                if freq > max_freq:\n                    max_freq = freq\n                    max_val = val\n    return max_val\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    else:\n        return [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + ["}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c or b + c > a or c + a > b:\n        return -1\n    else:\n        return (a * (b + c) / 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if len(q) == 1:\n        return True\n    if sum(q) > w:\n        return False\n    if q[0] == q[-1]:\n        return True\n    return False\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Check if the array is already palindromic\n    if arr == sorted(arr):\n        return 0\n\n    # Find the first element that is not in the middle of the array\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i]!= arr[i+1]:\n            break\n        i += 1\n\n    # Find the last element that is not in the middle of the array\n    j = len(arr) - 1\n    while j > 0:\n        if arr[j]!= arr[j-1]:\n            break\n        j -= 1\n\n    # Find the minimum number of elements that need to be changed\n    min_change = abs(i - j)\n\n    # Check if the array is already palindromic\n    if arr[i] == arr[j] and arr[i]!= arr[i+1]:\n        return 0\n\n    # Find the minimum number of elements that need to be changed\n    min_change = min(min_change, abs(i - j))\n\n    # Check if the array is already palindromic\n    if arr[i] == arr[j] and arr[i]!= arr[i+1]:\n        return 0\n\n    # Find the minimum number of elements that need to be changed\n    min_change = min(min_change, abs(i - j))\n\n    # Check if the array is already palindromic\n    if arr["}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 100:\n        for i in range(2, a // 2):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == n**int(1):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0:\n        return True\n    elif a == 1:\n        return True\n    elif a == 2:\n        return False\n    elif a == 3:\n        return True\n    elif a == 4:\n        return True\n    elif a == 5:\n        return True\n    elif a == 6:\n        return True\n    elif a == 7:\n        return True\n    elif a == 8:\n        return True\n    elif a == 9:\n        return True\n    elif a == 10:\n        return True\n    elif a == 11:\n        return True\n    elif a == 12:\n        return True\n    elif a == 13:\n        return True\n    elif a == 14:\n        return True\n    elif a == 15:\n        return True\n    elif a == 16:\n        return True\n    elif a == 17:\n        return True\n    elif a == 18:\n        return True\n    elif a == 19:\n        return True\n    elif a == 20:\n        return True\n    elif a == 21:\n        return True\n    elif a == 22:\n        return True\n    elif a == 23:\n        return True\n    elif a == 24:\n        return True\n    elif a == 25:\n        return True\n    elif a == 26:\n        return True\n    elif a == 27:\n        return True\n    elif a == 28:\n        return True\n    elif a == 29:\n        return True\n    elif a == 30:\n        return True\n    elif a == 31:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = []\n    while decimal > 0:\n        binary.append(decimal % 2)\n        decimal //= 2\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal %"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Convert the grades to a list\n    grades_list = list(grades)\n    \n    # Create a dictionary to store the letter grades\n    letter_grades = {\n        'A+': 4.0,\n        'A': 3.7,\n        'A-': 3.3,\n        'B+': 3.0,\n        'B': 2.7,\n        'B-': 2.3,\n        'C+': 2.0,\n        'C': 1.7,\n        'C-': 1.3,\n        'D+': 1.0,\n        'D': 0.7,\n        'D-': 0.3,\n        'E': 0.0\n    }\n    \n    # Loop through the grades list and assign the letter grades\n    letter_grades_list = []"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    if len(string) <= 1:\n        return False\n    for i in range(2, len(string)):\n        if string[i] == string[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i == 1 or i == n:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/84", "completion": ""}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    even_indices = [i for i in range(len(lst)) if i % 2 == 0]\n    even_elements = [lst[i] for i in even_indices]\n    return sum(even_elements)\n"}
{"task_id": "HumanEval/86", "completion": ""}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Sort coordinates initially by rows in ascending order.\n    lst = sorted(lst, key=lambda x: x[0])\n    # Sort coordinates of the row by columns in descending order.\n    lst = sorted(lst, key=lambda x: x[1])\n    # Find the row with x in it.\n    row = [i for i, x in enumerate(lst) if x == x][0]\n    # Find the coordinates of the row.\n    coords = [(i, j) for i, x in enumerate(lst) for j in range(len(lst[i]))]\n    # Sort the coordinates by rows in ascending order.\n    coords = sorted(coords, key=lambda x: x[0])\n    # Sort the coordinates of the row by columns in descending order.\n    coords = sorted(coords, key=lambda x: x[1])\n    # Return the coordinates of the row.\n    return [x for x in coords"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) == 0:\n        return array\n    elif len(array) == 1:\n        return array\n    else:\n        if sum(array[0], array[-1]) % 2 == 0:\n            array.sort(reverse=True)\n        else:\n            array.sort()\n    return array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    # Rotate the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    \n    # Encrypt the string\n    encrypted_string = ''\n    for char in s:\n        # Shift the letter down by two multiplied to two places\n        shifted_letter = rotated_alphabet.index(char) + 2 * 2\n        # Add the shifted letter to the encrypted string\n        encrypted_string += rotated_alphabet[shifted_letter]\n    \n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    for i in range(len(S)):\n        if S[i] == 'I' and S[i+1] in ['?', '.', '!']:\n            boredoms += 1\n    return boredoms\n"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x == (y + z) and all(isinstance(i, int) for i in [x, y, z]):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    # Swap case of all letters\n    message = message.upper()\n    \n    # Replace vowels with the letter that appears 2 places ahead of that vowel in the english alphabet\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for vowel in vowels:\n        message = message.replace(vowel, chr(ord(vowel) + 2))\n    \n    return message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    max_prime = max(lst, key=lambda x: is_prime(x))\n    return sum(int(c) for c in str(max_prime))\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str) or not key.islower() or not isinstance(value, str) or not value.islower():\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = [2]\n    for i in range(3, int(n**0.5)+1, 2):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Convert the input to a string\n    a_str = str(a)\n    b_str = str(b)\n    \n    # Get the unit digits of a and b\n    a_unit_digit = a_str[-1]\n    b_unit_digit = b_str[-1]\n    \n    # Calculate the product of the unit digits\n    product = a_unit_digit * b_unit_digit\n    \n    # Return the result\n    return int(product)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].upper() in 'AEIOU':\n            count += 1\n            if i % 2 == 0:\n                break\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # Convert the value to a float\n    value = float(value)\n    \n    # Find the closest integer\n    closest_int = round(value)\n    \n    # If the closest integer is equidistant from two integers, round it away from zero\n    if abs(value - closest_int) < 0.001:\n        closest_int = round(value)\n        \n    return closest_int"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n, 2*n, 2*n+1]\n    else:\n        return [n, 2*n+1, 2*n+2]\n"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.split(',')\n    return [word.strip() for word in words]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x < y:\n        return -1\n    else:\n        return max(x, y)\n"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return binary_avg\n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        result.append(i)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    sorted_arr = sorted(arr)\n    reversed_arr = sorted_arr[::-1]\n    result = []\n    for num in reversed_arr:\n        if num >= 1 and num <= 9:\n            result.append(str(num))\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_palindrome = 0\n    odd_palindrome = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_palindrome += 1\n        else:\n            odd_palindrome += 1\n    return (even_palindrome, odd_palindrome)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n        sum_digits = sum(int(digit) for digit in str(num))\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    if arr[0] < arr[1]:\n        return True\n    return move_one_ball(arr[1:])"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    histogram_dict = {}\n    for letter in test.split():\n        if letter in histogram_dict:\n            histogram_dict[letter] += 1\n        else:\n            histogram_dict[letter] = 1\n    return histogram_dict\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    \"\"\"\n    Task: We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example: For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = s.replace(c, '')\n    if result == s:\n        return (result, True)\n    else:\n        return (result, False)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    output = []\n    for i in lst:\n        if i.isdigit():\n            output.append(\"the number of odd elements in the string \" + str(i) + \" of the input.\")\n    return output\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + min_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # initialize variables\n    n = len(grid)\n    m = len(grid[0])\n    # initialize empty list to store the number of times to lower the buckets\n    max_fill = []\n    # initialize empty list to store the number of times to lower the buckets\n    max_fill_list = []\n    # initialize empty list to store the number of times to lower the buckets\n    max_fill_list_list = []\n    # initialize empty list to store the number of times to lower the buckets\n    max_fill_list_list_list = []\n    # initialize empty list to store the number of times to lower the buckets\n    max_fill_list_list_list_list = []\n    # initialize empty list to store the number of times to lower the buckets\n    max_fill_list_list_list_list_list = []\n    # initialize empty list to store the number of times to lower the buckets\n    max_fill_list_list_list_list_list_list = []\n    # initialize empty list to store the number of times to lower the buckets\n    max_fill_list_list_list_list_list_list_list = []\n    # initialize empty list to store the number of times to lower the buckets\n    max_fill_list_list_list_list_list_list_list_list = []\n    # initialize empty list to store the number of times to lower the buckets\n    max_fill_list_list_list_list_list_list_list_list_list = []\n    # initialize empty list to store the number of times to lower the buckets\n    max_fill_list_list_list_list_list_list_list_list_list_list = []\n    # initialize empty list to store the number of times to lower the buckets\n    max_fill_list_list_list_list_list_list_list_list_list_list_list = []\n    # initialize empty list to store the number of times to lower the buckets\n    max_fill_list_list_list_list_list_list_list_list_list_list_list_list = []\n    # initialize empty"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort the array based on number of ones in binary representation\n    sorted_arr = sorted(arr, key=lambda x: bin(x)[2:])\n    # Sort the array based on decimal value\n    sorted_arr = sorted(arr, key=lambda x: int(x))\n    return sorted_arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s == '':\n        return []\n    words = s.split()\n    result = []\n    for i in range(len(words)):\n        word = words[i]\n        if len(word) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    # Check if the word is empty\n    if not word:\n        return \"\"\n    \n    # Check if the word only contains vowels\n    if all(c in \"aeiou\" for c in word):\n        return \"\"\n    \n    # Check if the word only contains consonants\n    if all(c not in \"aeiou\" for c in word):\n        return \"\"\n    \n    # Check if the word is a vowel\n    if word in \"aeiou\":\n        return word\n    \n    # Check if the word is a consonant\n    if word not in \"aeiou\":\n        return \"\"\n    \n    # Check if the word is a vowel between two consonants\n    if word.startswith(word[0]) and word.endswith(word[-1]):\n        return word[1:-1]\n    \n    # Check if the word is a vowel between two consonants\n    if word.startswith(word[0]) and word.endswith(word[-1]):\n        return word[1:-1]\n    \n    # Check if the word is a vowel between two consonants\n    if word.startswith(word[0]) and word.endswith(word[-1]):\n        return word[1:-1]\n    \n    # Check if the word is a vowel between two consonants\n    if word.startswith(word[0]) and word.endswith(word[-1]):\n        return word[1:-1]\n    \n    # Check if the word is a vowel between two consonants\n    if word.startswith(word[0]) and word.endswith(word[-1]):\n        return word[1:-1]\n    \n    # Check if the word is a vowel between two consonants\n    if word.startswith(word[0]) and word.endswith(word[-1]):\n        return word[1:-1]\n    \n    # Check if the word is a vowel between two consonants\n    if word.startswith(word[0]) and word.endswith(word[-1]):\n        return word[1:-1]\n    "}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    if len(lst) == 0:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == ')':\n        return 'Yes'\n    return 'No'\n"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # Sort the array\n    arr.sort()\n\n    # Find the maximum k numbers\n    max_k = 0\n    for i in range(k):\n        max_k = max(max_k, i)\n\n    # Create a list of the maximum k numbers\n    max_list = [arr[i] for i in range(k)]\n\n    # Return the sorted list of maximum k numbers\n    return max_list"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    odd_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            odd_sum += lst[i]\n    return odd_sum\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    if len(arr) < k:\n        return 0\n    if k == 1:\n        return arr[0]\n    if k == 2:\n        return arr[0] + arr[1]\n    if k == 3:\n        return arr[0] + arr[1] + arr[2]\n    if k == 4:\n        return arr[0] + arr[1] + arr[2] + arr[3]\n    if k == 5:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\n    if k == 6:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\n    if k == 7:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\n    if k == 8:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\n    if k == 9:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\n    if k == 10:\n        return arr[0] + arr[1] + arr[2] + arr[3"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n // 2]\n    else:\n        return [3 * n + 1]\n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    # Check if the date is empty\n    if not date:\n        return False\n    \n    # Check if the number of days is valid\n    if len(date.split('-'))!= 3:\n        return False\n    \n    # Check if the month is valid\n    if int(date[0]) < 1 or int(date[0]) > 12:\n        return False\n    \n    # Check if the day is valid\n    if int(date[2]) < 1 or int(date[2]) > 31:\n        return False\n    \n    # Check if the year is valid\n    if int(date[2][-2:]) < 2000 or int(date[2][-2:]) > 2099:\n        return False\n    \n    # Check if the date is in the correct format\n    if date.count('-')!= 3:\n        return False\n    \n    # Check if the date is valid\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if txt.isdigit():\n        return int(txt)\n    elif txt.isalpha():\n        return len(txt)\n    else:\n        return 0"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2 and lst[0] == lst[1]:\n        return True\n    else:\n        return sorted(lst) == lst"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    elif interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_arr = [1 if i > 0 else -1 if i < 0 else 0 for i in arr]\n    product = 1\n    for i in range(len(arr)):\n        product *= sign_arr[i]\n    return product"}
{"task_id": "HumanEval/129", "completion": ""}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, tri(n-1) + tri(n-2) + tri(n+1)]\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    odd_digits = n % 10\n    even_digits = n // 10\n    if even_digits == 0:\n        return 0\n    else:\n        return odd_digits * digits(even_digits)\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    # Check if the string is empty\n    if not string:\n        return False\n    \n    # Check if the string is a single bracket\n    if string == '[' or string == ']':\n        return False\n    \n    # Check if the string is a nested bracket\n    if string[0] == '[' and string[-1] == ']':\n        return True\n    \n    # Check if the string is a single bracket\n    if string == '[' or string == ']':\n        return False\n    \n    # Check if the string is a nested bracket\n    if string[0] == '[' and string[-1] == ']':\n        return True\n    \n    # Check if the string is a single bracket\n    if string == '[' or string == ']':\n        return False\n    \n    # Check if the string is a nested bracket\n    if string[0] == '[' and string[-1] == ']':\n        return True\n    \n    # Check if the string is a single bracket\n    if string == '[' or string == ']':\n        return False\n    \n    # Check if the string is a nested bracket\n    if string[0] == '[' and string[-1] == ']':\n        return True\n    \n    # Check if the string is a single bracket\n    if string == '[' or string == ']':\n        return False\n    \n    # Check if the string is a nested bracket\n    if string[0] == '[' and string[-1] == ']':\n        return True\n    \n    # Check if the string is a single bracket\n    if string == '[' or string == ']':\n        return False\n    \n    # Check if the string is a nested bracket\n    if string[0] == '[' and string[-1] == ']':\n        return True\n    \n    # Check if the string is a single bracket\n    if string == '[' or string == ']':\n        return False\n    \n    # Check if the string is a nested bracket\n    if string[0] == '[' and string[-1] == ']':\n        return True\n    "}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    return sum(map(lambda x: int(x)**2, lst))"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Check if the last character is a letter\n    if txt[-1].isalpha():\n        # Check if the last character is not a part of a word\n        if txt[-1] not in txt[-2:].lower():\n            return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    # Initialize a variable to keep track of the largest index\n    max_index = -1\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        # If the current element is greater than or equal to the element\n        # immediately preceding it, then update the max index\n        if arr[i] >= arr[i-1]:\n            max_index = i\n            break\n    \n    # If the max index is -1, then no such element exists\n    if max_index == -1:\n        return -1\n    else:\n        return max_index\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return None, None\n    neg_lst = [num for num in lst if num < 0]\n    pos_lst = [num for num in lst if num > 0]\n    if neg_lst:\n        neg_max = max(neg_lst)\n        neg_min = min(neg_lst)\n        return neg_max, neg_min\n    if pos_lst:\n        pos_max = max(pos_lst)\n        pos_min = min(pos_lst)\n        return pos_max, pos_min\n    return None, None"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n < 4:\n        return False\n    if n % 4 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 4 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        return 0\n    else:\n        return n * special_factorial(n-1)\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example 3\") == \"_Example-3\"\n    \"\"\"\n    return re.sub(r's+', '_', text)"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    if file_name.split('.')[0] == '':\n        return 'No'\n    if file_name.split('.')[0][0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i in lst:\n        if i % 3 == 0:\n            result += i**2\n        elif i % 4 == 0 and i % 3!= 0:\n            result += i**3\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if len(word) in prime_numbers:\n            prime_words.append(word)\n    return''.join(prime_words)\n\ndef prime_numbers():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return primes\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_list(numbers):\n    for i in numbers:\n        if i < 2:\n            return False\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                return False\n    return True\n\ndef is_prime_list_recursive(numbers):\n    if len(numbers) == 1:\n        return is_prime(numbers[0])\n    if len(numbers) == 2:\n        return is_prime(numbers[0]) and is_prime(numbers[1])\n    if len(numbers) == 3:\n        return is_prime(numbers[0]) and is_prime(numbers[1]) and is_prime(numbers[2])\n    if len(numbers) == 4:\n        return is_prime(numbers[0]) and is_prime(numbers[1]) and is_prime(numbers[2]) and is_prime(numbers[3])\n    if len(numbers) == 5:\n        return is_prime(numbers[0]) and is_prime(numbers[1]) and is_prime(numbers[2]) and is"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    \"\"\"\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Check if x is a whole number\n    if int(x) == x:\n        return True\n    # Check if n is a whole number\n    if int(n) == n:\n        return True\n    # Check if x and n are valid fractions\n    if x.find('/') == -1 or n.find('/') == -1:\n        return False\n    # Check if x and n have the same denominator\n    if int(x.split('/')[0])!= int(n.split('/')[0]):\n        return False\n    # Check if x and n have the same numerator\n    if int(x.split('/')[1])!= int(n.split('/')[1]):\n        return False\n    # Check if x and n have the same denominator and numerator\n    if int(x.split('/')[0])!= int(n.split('/')[0]) or int(x.split('/')[1])!= int(n.split('/')[1]):\n        return False\n    # Return True if x * n evaluates to a whole number\n    return True"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n    # Sort the list in ascending order according to the sum of their digits\n    sorted_nums = sorted(nums, key=lambda x: sum(int(digit) for digit in str(x)))\n    # If there are several items with similar sum of their digits,\n    # order them based on their index in original list\n    return sorted_nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    nums = sorted(nums)\n    odd_nums = [num for num in nums if num % 2!= 0 and num % 10!= 0]\n    return len(odd_nums)\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i*i-i+1 for i in range(n)]\n    triples = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    triples += 1\n    return triples\n"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    if planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Earth\" and planet2 == \"Mercury\":\n        return (\"Venus\")\n    elif planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": ""}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n % 2 == 0:\n        return y\n    else:\n        for i in range(3, int(n**0.5) + 1):\n            if n % i == 0:\n                return x\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\n    if not lst:\n        return 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 1:\n            odd_sum += num**2\n    return odd_sum"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Check if the length of the arrays are equal\n    if len(game)!= len(guess):\n        return [0] * len(game)\n    \n    # Create a dictionary to store the guesses and scores\n    guess_scores = {}\n    \n    # Loop through the arrays and add the guesses and scores to the dictionary\n    for i in range(len(game)):\n        guess_scores[i] = guess[i] - game[i]\n    \n    # Create a new array to store the differences\n    diffs = [abs(guess_scores[i]) for i in range(len(game))]\n    \n    # Return the differences\n    return diffs"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    # Find the strongest extension\n    strongest_extension = None\n    for extension in extensions:\n        cap = len(extension)\n        sm = len(extension.lower())\n        strength = cap - sm\n        if strongest_extension is None or strength > strongest_extension.strength:\n            strongest_extension = Extension(extension, strength)\n    # Return the strongest extension\n    return class_name + '.' + strongest_extension.name\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    # check if the second word is a substring of the first word\n    if a.find(b)!= -1:\n        return True\n    \n    # check if any of the rotations of the second word is a substring of the first word\n    for i in range(1, len(b) + 1):\n        rotated = b[i-1:] + b[:i]\n        if a.find(rotated)!= -1:\n            return True\n    \n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num:\n        num %= 10\n        even_count += 1\n    while num:\n        num //= 10\n        odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        return \"Error: number out of range\"\n    roman_numeral = \"\"\n    while number > 0:\n        if number % 1000 == 100:\n            roman_numeral += \"M\"\n        elif number % 100 == 90:\n            roman_numeral += \"CM\"\n        elif number % 50 == 40:\n            roman_numeral += \"XC\"\n        elif number % 40 == 9:\n            roman_numeral += \"XCIX\"\n        elif number % 10 == 9:\n            roman_numeral += \"XC\"\n        elif number % 5 == 5:\n            roman_numeral += \"V\"\n        elif number % 4 == 4:\n            roman_numeral += \"IV\"\n        elif number % 1000 == 900:\n            roman_numeral += \"CM\"\n        elif number % 500 == 400:\n            roman_numeral += \"CD\"\n        elif number % 100 == 90:\n            roman_numeral += \"CM\"\n        elif number % 50 == 40:\n            roman_numeral += \"XL\"\n        elif number % 40 == 9:\n            roman_numeral += \"XL\"\n        elif number % 10 == 9:\n            roman_numeral += \"XL\"\n        elif number % 5 == 5:\n            roman_numeral += \"V\"\n        elif number % "}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if a == b == c:\n        return True\n    elif a == b == c - 2:\n        return True\n    elif a == b - 2 == c:\n        return True\n    elif a - 2 == b == c:\n        return True\n    elif a - 2 == b - 2 == c:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > len(word):\n            max_len = len(set(word))\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining <= 0:\n        return [number, 0]\n    if number >= need:\n        return [number, remaining]\n    return [number + need - number, remaining - need]\n"}
{"task_id": "HumanEval/160", "completion": ""}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not s:\n        return s\n    elif not s[0].isalpha():\n        return s\n    else:\n        return ''.join(s[i].upper() if s[i].isalpha() else s[i] for i in range(len(s)))\n"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        return []\n    else:\n        return [a, b]"}
