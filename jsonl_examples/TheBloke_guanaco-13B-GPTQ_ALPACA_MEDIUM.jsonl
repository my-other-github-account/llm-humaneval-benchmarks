{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    if not numbers:\n        return False\n\n    for i in range(1, len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if j - i > 1 and abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    :param paren_string:\n    :return:\n    \"\"\"\n    paren_groups = []\n    paren_stack = []\n\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            paren_stack.append(c)\n        elif c == ')':\n            if len(paren_stack) > 0:\n                paren_group = paren_stack.pop()\n                paren_groups.append(paren_group)\n    return paren_groups\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\n    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n\n    :param operations: List[int]\n    :return: bool\n\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n    if operations[0] < 0:\n        return True\n\n    for i in range(1, len(operations)):\n        if operations[i] < 0:\n            return True\n\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    if not numbers:\n        return 0.0\n\n    mean = sum(numbers) / len(numbers)\n\n    result = 0.0\n\n    for number in numbers:\n        result += abs(number - mean)\n\n    return result / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    if numbers is None or delimeter is None:\n        return numbers\n\n    if not numbers:\n        return []\n\n    if delimeter not in numbers:\n        raise ValueError(f\"delimeter {delimeter} is not a member of the list {numbers}\")\n\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    :param paren_string:\n    :return:\n    \"\"\"\n    paren_stack = []\n    paren_level = 0\n    for c in paren_string:\n        if c == '(':\n            paren_stack.append(paren_level)\n            paren_level += 1\n        elif c == ')':\n            if paren_level == 0:\n                raise ValueError(\"Unbalanced parentheses\")\n            paren_level -= 1\n        else:\n            pass\n\n    return paren_stack\n\n"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings, substring):\n    return [string for string in strings if substring in string]\n\n"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    if not numbers:\n        return (0, 1)\n\n    return (sum(numbers), product(numbers))\n\n"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        if numbers[i] > result[-1]:\n            result.append(numbers[i])\n    return result\n\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    :param a:\n    :param b:\n    :return:\n    \"\"\"\n    xor_list = [ord(c) for c in (a + b)]\n    xor_list.sort()\n    return ''.join(chr(xor_value) for xor_value in xor_list)\n\n"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return max(strings, key=len)\n\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a, b):\n    if a < b:\n        (a, b) = (b, a)\n    while b:\n        while a % b == 0:\n            a /= b\n        b /= 2\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n\n    if not string:\n        return []\n\n    return [s for s in string if s!= ''] + all_prefixes(string[1:])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    if n == 0:\n        return \"0\"\n    else:\n        return f\"{n-1} {*range(1, n+1)}\"\n\n"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\n    # +++your code here+++\n\n    return len(set(string.lower()))\n\n"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Expects a string in the format of a musical score, where each note is represented by a single character.\n    The characters are as follows:\n\n    o - whole note, lasts four beats\n    o| - half note, lasts two beats\n   .| - quarter note, lasts one beat\n\n    :param music_string: The musical score as a string\n    :return: A list of the durations of the notes in the score, in beats\n    \"\"\"\n    note_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    note_durations = []\n    for note in music_string:\n        if note in note_map:\n            note_durations.append(note_map[note])\n\n    return note_durations\n\n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string, substring):\n    counter = 0\n    i = 0\n    j = 0\n\n    while i < len(string) and j < len(substring):\n        if string[i:i+len(substring)] == substring:\n            counter += 1\n            i += len(substring)\n        j += 1\n\n    return counter\n\n"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    numbers = numbers.replace(\" \", \"\")\n    numbers = numbers.split(\"\")\n    numbers.sort(key=int)\n    return \" \".join(numbers)\n\n"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"At least two elements are required\")\n\n    # find the two closest numbers\n    closest_pair = (min(numbers, key=lambda x: x - numbers[1:]),\n                    max(numbers, key=lambda x: x - numbers[1:]))\n\n    return closest_pair\n\n"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return [0.0]\n    min_value, max_value = min(numbers), max(numbers)\n    return (numbers - min_value) * (1.0 / (max_value - min_value)) + [0.0]\n\n"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n\n    return [x for x in values if isinstance(x, int)]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n\n    if string == '':\n        return 0\n    else:\n        return len(string)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n):\n    if n < 2:\n        return n\n    while n % 2 == 0:\n        n /= 2\n    return n\n\n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\"\n    Return a list of all the prime factors of n, in order from smallest to largest,\n    and the number of times each factor appears in the factorization of n.\n\n    n must be the product of all the factors.\n\n    :param n: the number to factorize\n    :return: a list of prime factors and their multiplicities\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Sieve of Eratosthenes to find all the primes up to n\n    primes = [True] * n\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i - 1]:\n            primes[i] = False\n\n    # Factorize n using the primes\n    factors = [1]\n    for i in range(1, n + 1):\n        while primes[i - 1]:\n            i = i / primes[i - 1]\n\n        if i > 1:\n            factors.append(i)\n\n    # Return the factors and their multiplicities\n    return [x for x, y in zip(factors, range(1, len(factors) + 1)) if y > 1]\n\n"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    return [x for x in numbers if x not in seen and not (x,) in seen]\n\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n    return string.upper() if string.isupper() else string.lower()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    if not strings:\n        return \"\"\n    return \"\".join(strings)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings, prefix):\n    return [string for string in strings if string.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l):\n    return [x for x in l if x > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for i in range(3, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    :param xs: list of coefficients\n    :param x: point at which to evaluate\n    :return: sum of all terms in the polynomial\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    :param xs: list of coefficients\n    :return: the x-value for which the polynomial is 0\n    \"\"\"\n    if len(xs) % 2!= 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n    if xs[0]!= 0:\n        raise ValueError(\"The list of coefficients must have a non-zero first element.\")\n    for i in range(1, len(xs), 2):\n        if xs[i]!= 0:\n            break\n    else:\n        raise ValueError(\"The list of coefficients must have at least two non-zero elements.\")\n    x = 0.0\n    for i in range(1, len(xs), 2):\n        x += (xs[i] / (i + 1.0)) * x\n    return x\n\n"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    l_ = l[:]\n    for i in range(len(l_)):\n        if i % 3 == 0:\n            l_[i] = l[i]\n        else:\n            l_[i] = l[i - 1]\n    return l_\n\n"}
{"task_id": "HumanEval/34", "completion": "def unique(l):\n    seen = set()\n    for item in l:\n        if item not in seen:\n            seen.add(item)\n            yield item\n\n"}
{"task_id": "HumanEval/35", "completion": "def max_element(l):\n    if not l:\n        return None\n    else:\n        return max(l)\n\n"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    if n < 10:\n        return n if n % 11 == 0 and n % 13 == 0 else \"FizzBuzz\"\n    if n < 20:\n        return \"Fizz\" if n % 11 == 0 else \"Buzz\" if n % 13 == 0 else n\n    return \"Fizz\" if n % 11 == 0 and n % 13!= 0 else \"Buzz\" if n % 13 == 0 and n % 11!= 0 else n\n\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    l_copy = l.copy()\n    for i in even_indices:\n        l_copy[i] = l[i]\n    l_copy.sort()\n    return l_copy\n\n"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    :param s: the string to be encoded\n    :return: the encoded string\n    \"\"\"\n    if not s:\n        return s\n\n    # split string to groups. Each of length 3.\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [list(itertools.chain.from_iterable(\n        (g[1:], g[:1]) if len(g) == 3 else g for g in groups))]\n\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    :param s: the string to be decoded\n    :return: the decoded string\n    \"\"\"\n    if not s:\n        return s\n\n    # split string to groups. Each of length 3.\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [list(itertools.chain.from_iterable(\n        (g[1:], g[:1]) if len(g) == 3 else g for g in groups))]\n\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    if n < 2:\n        return n\n\n    a, b = 0, 1\n    c = 1\n\n    while True:\n        c = a + b\n\n        if c % n == 0:\n            return c\n\n        if is_prime(c):\n            return c\n\n        a, b = b, c\n\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    if not l:\n        return False\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    if n < 2:\n        return 0\n    return n * (n - 1) // 2\n\n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l):\n    return [x + 1 for x in l]\n\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    if not l:\n        return False\n    for i in range(1, len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/44", "completion": "def change_base(x, base):\n    if base < 2 or base > 36:\n        raise ValueError(f\"Invalid base {base}, must be between 2 and 36\")\n\n    if base == 10:\n        return str(x)\n\n    if base == 2:\n        return \"1\" + bin(x).zfill(len(x))\n\n    if base == 3:\n        return \"1\" + \"\".join(str(ord(c) % 3) for c in x)\n\n    if base == 4:\n        return \"1\" + \"\".join(str(int(c) % 4) for c in x)\n\n    if base == 5:\n        return \"1\" + \"\".join(str(c % 5 + 5 * (c / 5)) for c in x)\n\n    if base == 6:\n        return \"1\" + \"\".join(str(c % 6 + 6 * (c / 6)) for c in x)\n\n    if base == 7:\n        return \"1\" + \"\".join(str(c % 7 + 7 * (c / 7)) for c in x)\n\n    if base == 8:\n        return \"1\" + \"\".join(str(c % 8 + 8 * (c / 8)) for c in x)\n\n    if base == 9:\n        return \"1\" + \"\".join(str(c % 9 + 9 * (c / 9)) for c in x)\n\n    if base == 10:\n        return str(x)\n\n    if base == 11:\n        return \"1\" + \"\".join(str(c % 11 + 11 * (c / 11)) for c in x)\n\n    if base == 12:\n        return \"1\" + \"\".join(str(c % 12 + 12 * (c / 12)) for c in x)\n\n    if base == 13:\n        return \"1\" + \"\".join(str(c % 13 + 13 *"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h\n\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n):\n    if n < 4:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\n"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    l.sort()\n    return l[len(l) // 2]\n\n"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    if not text:\n        return True\n    if len(text) < 2:\n        return False\n    if text[0]!= text[-1]:\n        return False\n    for i in range(1, len(text) / 2):\n        if text[i]!= text[len(text) - i - 1]:\n            return False\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/49", "completion": "def modp(n, p):\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p == 1:\n        return n\n    if p == 2:\n        return (n % 2)\n    if p == 3:\n        return (n * 2) % 3\n    if p == 5:\n        return (n * 2) % 5\n    if p == 7:\n        return (n * 2) % 7\n    if p == 11:\n        return (n * 2) % 11\n    if p == 13:\n        return (n * 2) % 13\n    if p == 17:\n        return (n * 2) % 17\n    if p == 19:\n        return (n * 2) % 19\n    if p == 23:\n        return (n * 2) % 23\n    if p == 29:\n        return (n * 2) % 29\n    if p == 31:\n        return (n * 2) % 31\n    if p == 37:\n        return (n * 2) % 37\n    if p == 41:\n        return (n * 2) % 41\n    if p == 43:\n        return (n * 2) % 43\n    if p == 47:\n        return (n * 2) % 47\n    if p == 53:\n        return (n * 2) % 53\n    if p == 59:\n        return (n * 2) % 59\n    if p == 61:\n        return (n * 2) % 61\n    if p == 67:\n        return (n * 2) % 67\n    if p == 71:\n        return (n * 2) % 71\n    if p == 73:\n        return (n * 2) % 7"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n    return \"\".join(chr(ord(c) + 5 - ord(\"a\") + i for c in s) for i in range(26))\n\n\ndef decode_shift(s: str) -> str:\n    return \"\".join(chr(i - 5 + ord(c)) for i, c in enumerate(s, 26))\n\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiou\"\n    return \"\".join(ch.lower() not in vowels for ch in text)\n\n"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l, t):\n    if not l:\n        return True\n    if l[0] > t:\n        return False\n    for i in range(1, len(l)):\n        if l[i] > t:\n            return False\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/53", "completion": "def add(x, y):\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0, s1):\n    if s0 and s1:\n        if s0.lower() == s1.lower():\n            return True\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets):\n    if not brackets:\n        return True\n    if brackets[0]!= '>':\n        return False\n    for i in range(1, len(brackets)):\n        if brackets[i] == '>':\n            if i + 1 < len(brackets) and brackets[i + 1] == '>':\n                continue\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l):\n    if len(l) < 2:\n        return True\n    if l[0] > l[1]:\n        return True\n    if l[0] < l[1]:\n        return False\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n        if l[i] > l[i-1]:\n            return True\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    l1.sort()\n    l2.sort()\n    common_set = set(l1).intersection(l2)\n    return list(common_set)\n\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    if n < 2:\n        return 0\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if (n % i) == 0:\n            p = i\n\n            while (n % i) == 0:\n                n /= i\n\n            if (n > 1) and (p > 1):\n                return p\n\n    return 0\n\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    s = 0\n    for i in range(1, n + 1):\n        s += i\n    return s\n\n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets):\n    if not brackets:\n        return True\n    if brackets[0]!= '(':\n        return False\n    for i in range(1, len(brackets)):\n        if brackets[i] == '(' and brackets[i+1] == ')':\n            i += 1\n        else:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    if not xs:\n        return []\n    x0 = xs[0]\n    d = [0]\n    for i in range(1, len(xs)):\n        d.append(x0 + i * x0 * xs[i] / 2)\n    return d\n\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    if n < 3:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = \"aeiouy\"\n    vowels_count = 0\n\n    for i in s:\n        if i in vowels and i!= \"y\" or i == \"y\" and s.rindex(i) == len(s) - 1:\n            vowels_count += 1\n\n    return vowels_count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n\n    :param x: the integer to circular shift\n    :param shift: the number of places to shift\n    :return: the circularly shifted integer as a string\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:].zfill(len(str(x)) - shift)\n\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) - ord('0') + 1 for c in s.upper())\n\n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples, oranges, mangoes = s.split(' and ')\n    apples = int(apples)\n    oranges = int(oranges)\n    mangoes = n - apples - oranges\n    return mangoes\n\n"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n\n    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n\n    smallest_even_value = min(even_values)\n    index = [i for i, x in enumerate(even_values) if x == smallest_even_value][0]\n\n    return [smallest_even_value, index]\n\n"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    if not lst:\n        return -1\n    v = max(lst, key=lambda x: lst.count(x))\n    return v if v > 0 else -1\n\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n\n    min_val, max_val = lst[0], lst[-1]\n    for i in range(1, len(lst)):\n        if min_val > lst[i]:\n            min_val = lst[i]\n        if max_val < lst[i]:\n            max_val = lst[i]\n\n    return [min_val, max_val] + [lst[i] for i in range(1, len(lst), 2)]\n\n"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a + b > c) and (b + c > a) and (c + a > b):\n        return math.sqrt(0.5 * (a * c + b * b))\n    else:\n        return -1\n\n"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if not is_balanced(q):\n        return False\n\n    if sum(q) > w:\n        return False\n\n    return True\n\n\ndef is_balanced(q):\n    if not q:\n        return True\n\n    if q[0]!= q[-1]:\n        return False\n\n    for i in range(1, len(q) - 1):\n        if q[i]!= q[i - 1] + q[i + 1]:\n            return False\n\n    return True\n\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    if arr[0] == arr[-1]:\n        return 0\n\n    i = 0\n    j = len(arr) - 1\n\n    while i < j:\n        if arr[i]!= arr[j]:\n            i += 1\n            continue\n\n        i += 1\n\n        if i == len(arr):\n            return i\n\n        if arr[i]!= arr[i - 1]:\n            i -= 1\n\n    return i + 1\n\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) > len(lst2):\n        return total_match(lst2, lst1)\n    if len(lst2) > len(lst1):\n        return total_match(lst1, lst2)\n    if len(lst1) == len(lst2):\n        if all(c1 <= c2 for c1, c2 in zip(lst1, lst2)):\n            return lst1\n    return lst2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 100 and a % 2 == 0:\n        return False\n    for i in range(3, int(a / 2) + 1):\n        if i not in [2, 3, 5] and a % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == n:\n        return True\n    if x % n == 0:\n        return False\n    else:\n        for i in range(2, int(n ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a < 0:\n        a = -a\n    while True:\n        if a % 1 == 0:\n            break\n        a = a + 1\n    return a == 1"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    if not num:\n        return 0\n    if num.isalpha():\n        if num.upper() in \"ABDEF\":\n            return 1\n    if num.isdigit():\n        if num in [2, 3, 5, 7, 11, 13]:\n            return 1\n    return 0\n\n"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    s = \"db\" + \"\".join([\"1\" if i else \"0\" for i in str(decimal)]) + \"db\"\n    return s\n\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i:i+3] == s[i+1:i+4]:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    grades = list(grades)\n    if not grades:\n        return []\n\n    # sort the grades in descending order\n    grades.sort(reverse=True)\n\n    # the first and last grades are A+ and E respectively\n    a = 4.0\n    e = 0.0\n\n    # the grades in between are B+, B, C-, C, D+, D, D-\n    b = 3.7\n    d = 1.3\n\n    # the grades in between are B+, B, C-, C, D+, D, D-\n    c = 3.3\n    f = 1.7\n\n    # the grades in between are B+, B, C-, C, D+, D, D-\n    d = 2.7\n    h = 2.0\n\n    # the grades in between are"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    if not string:\n        return False\n\n    for i in range(1, len(string)):\n        if string[i] % i == 0:\n            return False\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (1 + starts_one_ends(n-1)) * 2\n\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    if N < 10:\n        return N\n    elif N < 100:\n        return N // 2 + 1\n    else:\n        return (N // 2) + (N % 2)\n\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_indices = [i for i in range(len(lst)) if i % 2 == 0]\n    return sum(lst[i] for i in even_indices)\n\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    s = s.replace(' ', '')\n    s = s.lower()\n    s = ''.join(sorted(s, key=lambda x: ord(x)))\n    return s\n\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    if not lst:\n        return []\n\n    x_coords = [i for i, row in enumerate(lst) if row and i == x]\n    x_coords.sort(reverse=True)\n\n    y_coords = [i for i, row in enumerate(lst) if row and i in x_coords]\n    y_coords.sort(reverse=True)\n\n    return [(x_coords.index(i), y_coords.index(i)) for i in x_coords]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n\n    first, last = array[0], array[-1]\n    if first + last in [1, 0]:\n        return array\n\n    array.sort(key=lambda x: (x, x[-1]))\n\n    return array\n\n"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    # The alphabet is a list of 26 characters\n    alphabet = list(string.ascii_lowercase)\n\n    # The rotated alphabet is the original alphabet shifted by two\n    # characters to the right\n    rotated_alphabet = alphabet[2:26] + alphabet[0:2]\n\n    # The encrypted string is the original string, but with each\n    # character replaced by the character in the rotated alphabet\n    # that is two places to the left of it\n    encrypted = ''.join(\n        [rotated_alphabet[i] if i in range(2, 27) else c\n         for i, c in enumerate(s)\n    )\n\n    return encrypted\n\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    else:\n        return min(lst[1:])\n\n"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    for i, word in enumerate(S.split()):\n        if word.lower() == \"i\":\n            boredoms += 1\n    return boredoms\n\n"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if (x + y) == z and (x, y, z) == (int(x), int(y), int(z)):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    # Converting to a list\n    message = list(message)\n\n    # Swapping case\n    for i in range(len(message)):\n        if message[i].isalpha():\n            message[i] = message[i].upper()\n\n    # Replacing vowels\n    vowels = \"aeiou\"\n    for i in range(len(message)):\n        if message[i] in vowels:\n            message[i] = (vowels.index(message[i]) + 2) % 5\n\n    # Joining the list\n    return \"\".join(message)\n\n"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    if not lst:\n        return 0\n\n    prime_sum = 0\n    for i in lst:\n        if i > 0 and all(i % j!= 0 for j in range(2, int(math.sqrt(i)) + 1)):\n            prime_sum += sum(map(int, str(i)))\n\n    return prime_sum\n\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    if all(k.isupper() if k.lower() == k else k == k.upper() for k in dict):\n        return True\n\n    return False\n\n"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2]\n    else:\n        primes = [2]\n        for i in range(3, n, 2):\n            if all(i % j!= 0 for j in primes):\n                primes.append(i)\n        return primes\n\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    if a < 10 and b < 10:\n        return a * b\n    elif a < 10 and b > 10:\n        return 0\n    elif a > 10 and b < 10:\n        return 10 * b\n    else:\n        return a * b\n\n"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] == s[i+1].upper():\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    if value.isdigit():\n        return int(value)\n    else:\n        return float(value)\n\n    if value.is_integer():\n        return value\n\n    if value.is_floating():\n        if value.is_nan:\n            return 0\n\n        if value.is_infinite:\n            if value > 0:\n                return 1\n            else:\n                return -1\n\n        if value.is_negative:\n            return -closest_integer(fabs(value))\n\n        if value.is_positive:\n            return closest_integer(fabs(value))\n\n    raise ValueError(\"{} is not a number\".format(value))\n\n"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n, (n + 1) * 2, (n + 1) * 3]\n    else:\n        return [n, (n + 1) * 2, (n + 1) * 3, (n + 1) * 5]\n\n"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(',') if s.find('|') < 0 else s.split(' ')"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x < y:\n        raise ValueError(\"x and y must be positive\")\n\n    if x % 2 == 0 and y % 2 == 0:\n        return x\n\n    while True:\n        n = (x + y) // 2\n        if n % 2 == 0 and n > x:\n            return n\n        if n % 2!= 0:\n            x = n\n\n    return -1\n\n"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = 0\n    for i in range(n, m + 1):\n        total += i\n\n    avg = total / (m + 1)\n\n    return str(int(avg + 0.5))\n\n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    # +++your code here+++\n\n    # STEP 1:\n    # 1. \u5c1d\u8bd5\u628ax\u4e2d\u7684\u5143\u7d20\u6392\u597d\u5e8f\n    # 2. \u904d\u5386x\n    # 3. \u5982\u679c\u5f53\u524d\u5143\u7d20\u662f0\uff0c\u8bf4\u660e\u5b83\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u4e14\u4ec5\u5305\u542b\u6574\u6570\u90e8\u5206\n    # 4. \u5982\u679c\u5f53\u524d\u5143\u7d20\u662f1\uff0c\u8bf4\u660e\u5b83\u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u4e14\u4ec5\u5305\u542b\u6574\u6570\u90e8\u5206\n    # 5. \u5982\u679c\u5f53\u524d\u5143\u7d20\u662f2\uff0c\u8bf4\u660e\u5b83\u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u4e14\u4ec5\u5305\u542b\u6574\u6570\u90e8\u5206\n    # 6. \u5982\u679c\u5f53\u524d\u5143\u7d20\u662f3\uff0c\u8bf4\u660e\u5b83\u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u4e14\u4ec5\u5305\u542b\u6574\u6570\u90e8\u5206\n    # 7. \u5982\u679c\u5f53\u524d\u5143\u7d20\u662f4\uff0c\u8bf4\u660e\u5b83\u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u4e14\u4ec5\u5305\u542b\u6574\u6570\u90e8\u5206\n    # 8. \u5982\u679c\u5f53\u524d\u5143\u7d20\u662f5\uff0c\u8bf4\u660e\u5b83\u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u4e14\u4ec5\u5305\u542b\u6574\u6570\u90e8\u5206\n    # 9. \u5982\u679c\u5f53\u524d\u5143\u7d20\u662f6\uff0c\u8bf4\u660e\u5b83\u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u4e14\u4ec5\u5305\u542b\ufffd\ufffd"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    arr.sort(key=lambda x: 1 if 1 <= x < 10 else 10)\n    arr.reverse()\n    return [x if 1 <= x < 10 else 'X' for x in arr]\n\n"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    if n == 0:\n        return []\n    else:\n        even_indices = [i for i in range(1, n) if i % 2 == 0]\n        odd_indices = [i for i in range(1, n) if i % 2!= 0]\n        even_factors = [i for i in range(1, n) if i % 2 == 0]\n        odd_factors = [1] + [i for i in range(2, n) if i % 2!= 0]\n        return even_factors + [f(i) if i in odd_indices else sum(odd_factors) for i in odd_indices]\n\n"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_palindromes = 0\n    odd_palindromes = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n\n    return (even_palindromes, odd_palindromes)\n\n"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    # +++your code here+++\n    #\n    # complete the code\n    #\n\n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[-1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            arr.insert(0, arr.pop())\n            return True\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n\n    for i in range(len(lst1)):\n        if i in lst2:\n            if (lst1[i] + lst2[i]) % 2 == 0:\n                lst1[i] = lst1[i] + lst2[i]\n                del lst2[i]\n                return \"YES\"\n\n    return \"NO\"\n\n"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    hist = {}\n    for letter in test.lower():\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return hist\n\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    \"\"\"\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    if not s:\n        return (s, False)\n\n    if c:\n        s = [c for c in s if c!= c[0]]\n\n    if s:\n        s.reverse()\n\n    if s == s[::-1]:\n        return (s, True)\n\n    return (s, False)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    odd_counts = []\n    for i, s in enumerate(lst):\n        if s.isdigit():\n            odd_counts.append(int(s))\n    for i, c in enumerate(odd_counts):\n        if c % 2:\n            odd_counts[i] = f\"the number of odd elements {i+1}n the str{i+1}ng {i+1} of the {i+1}nput.\"\n    return odd_counts\n\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    mx = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > mx:\n            mx = nums[i]\n    min_so_far = mx\n    for i in range(1, len(nums)):\n        if i > 0 and nums[i] < mx:\n            min_so_far += nums[i]\n    return min_so_far\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    if not grid:\n        return 0\n    m, n = len(grid), len(grid[0])\n    if m == 1:\n        return 0\n    if n == 1:\n        return 1\n    if m == 2:\n        return 1\n    if n == 2:\n        return 2\n    if m > 2 or n > 2:\n        return 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                if i == 0 and j == 0:\n                    continue\n                if i == 0 and j > 0:\n                    if capacity - grid[0][j - 1] > 0:\n                        grid[0][j] = 0\n                        capacity -= 1\n                if i > 0 and j == 0:\n                    if capacity - grid[i - 1][0] > 0:\n                        grid[i][0] = 0\n                        capacity -= 1\n                if i > 0 and j > 0:\n                    if capacity - grid[i - 1][j - 1] > 0:\n                        grid[i][j] = 0\n                        capacity -= 1\n    return max(max_fill(grid[1:m + 1, 1:n + 1], capacity) for i in range(m))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    if not arr:\n        return []\n\n    # 1. sort by the number of ones\n    # 2. sort by the decimal value for similar number of ones\n    # 3. stable sort\n    # 4. O(n log n)\n    # 5.\n    n = len(arr)\n    if n == 1:\n        return [arr[0]]\n\n    b = [bin(i).count('1') for i in arr]\n    b.sort()\n    result = [i for i, j in enumerate(b) if j == 0 or b[j - 1] + 1 == j]\n\n    for i in range(1, n):\n        if arr[i - 1] < arr[i]:\n            result.insert(i, i - 1)\n\n    return result\n\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if s:\n        words = s.split()\n        res = []\n        for i, word in enumerate(words):\n            if len(word) == n and word[n-1] in \"BCDFGHJKLMNPQRSTVWXYZ\":\n                res.append(word)\n        return res\n    else:\n        return []\n\n"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    if not word:\n        return \"\"\n\n    vowels = \"aeiou\"\n    if word[0] in vowels and word[-1] in vowels:\n        return \"\"\n\n    i = 0\n    while i < len(word) - 1:\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i:i+2]\n\n        i += 1\n\n    return \"\"\n\n"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    if not lst:\n        return \"No\"\n    if len(lst) == 1:\n        return \"Yes\"\n    if len(lst) == 2 and (lst[0] == \"(\" and lst[1] == \")\" or lst[0] == \")\" and lst[1] == \"(\"):\n        return \"Yes\"\n    return \"No\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k must be a positive integer and less than or equal to the length of the array\")\n\n    if k == 1:\n        return [x for x in arr if x!= 0]\n\n    arr.sort()\n    result = [arr[i] for i in range(k)]\n\n    return result\n\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    even_indices = [i for i, x in enumerate(lst) if x % 2 == 0]\n    odd_indices = [i for i in range(len(lst)) if i not in even_indices]\n    return sum(lst[i] for i in odd_indices)\n\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    if k > len(arr):\n        return 0\n\n    total = 0\n    for i in range(k):\n        total += arr[i]\n\n    return total\n\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    if n == 1:\n        return [1]\n\n    if n % 2 == 0:\n        return [n / 2]\n\n    else:\n        return [3 * n + 1]\n\n    # pylint: disable=unused-variable\n    # pylint: disable=unreachable\n    # pylint: disable=inconsistent-return-statements\n    # pylint: disable=too-many-statements\n    # pylint: disable=too-many-locals\n    # pylint: disable=too-many-arguments\n    # pylint: disable=redefined-outer-scope\n    # pylint: disable=no-self-use\n    # pylint: disable=unused-variable\n    # pylint: disable=too-many-branches\n    # pylint: disable=too-many-statements\n    # pylint: disable=too-many-arguments\n    # pylint: disable=redefined-outer-scope\n    # pylint: disable=unused-variable\n    # pyl"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date.strip():\n        return False\n\n    month = date.split(\"-\")[0]\n    day = date.split(\"-\")[1]\n    year = date.split(\"-\")[2]\n\n    if int(month) < 1 or int(month) > 12:\n        return False\n\n    if int(day) < 1 or int(day) > 31:\n        if (int(month) == 1 or int(month) == 3 or int(month) == 5 or int(month) == 7 or int(month) == 8 or int(month) == 10 or int(month) == 12):\n            return False\n        else:\n            if int(year) % 4 == 0:\n                if int(month) == 1 or int(month) == 12:\n                    return False\n            else:\n                if int(year) % 400 == 0 or (int(year) % 100 == 0 and int(year) % 4 == 0):\n                    if int(month) == 2:\n                        return False\n\n    return True\n\n"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if not txt:\n        return []\n    if'' in txt:\n        return txt.split(' ')\n    if ',' in txt:\n        return txt.split(',').map(lambda x: x.lower().strip())\n    return len(txt) - (ord('a') + (ord('z') - ord('a'))) % 2"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i - 1]:\n            return False\n\n    return True\n\n"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    if not (interval1 and interval2):\n        return \"NO\"\n\n    if not (interval1[1] > interval2[0] and interval2[1] > interval1[0]):\n        return \"NO\"\n\n    if (interval1[1] - interval1[0] + interval2[1] - interval2[0]) % 2 == 0:\n        return \"NO\"\n\n    if (interval1[1] - interval1[0] + interval2[1] - interval2[0]) % 3 == 0:\n        return \"NO\"\n\n    if (interval1[1] - interval1[0] + interval2[1] - interval2[0]) % 5 == 0:\n        return \"NO\"\n\n    if (interval1[1] - interval1[0] + interval2[1] - interval2[0]) % 7 == 0:\n        return \"NO\"\n\n    if (interval1[1] - interval1["}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    sgn = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    return sum(sgn[i] * sgn[j] for i, j in zip(arr, arr))\n\n"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    if not grid or k < 1 or k > len(grid):\n        return None\n\n    m = len(grid)\n    n = len(grid[0])\n\n    if k == 1:\n        return [i for i in range(m * n) if i in grid]\n\n    # find the first cell\n    i = 0\n    while i < m * n:\n        if i in grid:\n            break\n        i += 1\n\n    # find the last cell\n    j = m * n - 1\n    while j >= 0:\n        if j in grid:\n            break\n        j -= 1\n\n    # find the k-th cell\n    for i in range(k):\n        for j in range(i + 1, m * n):\n            if j in grid:\n                break\n\n        if j in grid:\n            break\n\n        i += 1\n\n    # find the k-th cell\n    for i in range(k):\n        for j in range(i + 1, m * n):\n            if j in grid:\n                break\n\n        if j in grid:\n            break\n\n        i += 1\n\n    # find the k-th cell\n    for i in range(k):\n        for j in range(i + 1, m * n):\n            if j in grid:\n                break\n\n        if j in grid:\n            break\n\n        i += 1\n\n    # find the k-th cell\n    for i in range(k):\n        for j in range(i + 1, m * n):\n            if j in grid:\n                break\n\n        if j in grid:\n            break\n\n        i += 1\n\n    # find the k-th cell\n    for i in range(k):\n        for j in range(i + 1, m * n):\n            if j in grid:\n                break\n\n        if j in grid:\n            break\n\n        i += 1\n\n    # find the k-th cell\n    for i in range(k):\n        for j in range(i + 1, m"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0 or n == 1:\n        return 0, 1\n    if n % 2 == 0:\n        return 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1), 1 + n / 2\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    if n < 1:\n        return 0\n    odd_digits = 0\n    even_digits = 0\n    for i in range(1, int(n) + 1):\n        if i % 2 == 1:\n            odd_digits *= i\n        else:\n            even_digits *= i\n    return odd_digits if odd_digits > even_digits else 0\n\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    if not string:\n        return False\n    if string[0]!= '[':\n        return False\n    if string[-1]!= ']':\n        return False\n    for i in range(1, len(string)):\n        if string[i] == '[' and i < len(string) - 1 and string[i + 1] == ']':\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    if not lst:\n        return 0\n    else:\n        return (sum(map(lambda x: int(x * x + 0.5), lst)) + sum_squares(lst[1:]))\n\n"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    if not (len(set(txt) - set(map(str.strip, txt.split()))) > 0):\n        return False\n    return (txt[-1].isalpha() and not (txt[-1] in set(map(str.strip, txt.split()))))\n\n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    if not arr:\n        return -1\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] >= arr[i + 1]:\n            i += 1\n        else:\n            return i\n    return -1\n\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return None, None\n\n    neg_ints = [x for x in lst if x < 0]\n    pos_ints = [x for x in lst if x >= 0]\n\n    if neg_ints:\n        largest_int = max(neg_ints)\n    else:\n        largest_int = None\n\n    if pos_ints:\n        smallest_int = min(pos_ints)\n    else:\n        smallest_int = None\n\n    return largest_int, smallest_int\n\n"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if a.is_integer() and b.is_integer():\n        if a > b:\n            return a\n        elif b > a:\n            return b\n    elif a.is_float() and b.is_float():\n        if a > b:\n            return a\n        elif b > a:\n            return b\n    elif a.is_string() and b.is_string():\n        if a.value > b.value:\n            return a\n        elif b.value > a.value:\n            return b\n    else:\n        return None\n\n"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n < 4:\n        return False\n    for i in range(1, n // 2 + 1):\n        if n - i in [0, i, 2 * i]:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    return re.sub(r\" +\", \"_\", text)\n\n"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return \"No\"\n    if not file_name.find(\".\")!= -1:\n        return \"No\"\n    if not (file_name[0].isalpha() or file_name[0].isdigit()):\n        return \"No\"\n    if file_name[0] not in \"a-z\" and file_name[0] not in \"A-Z\":\n        return \"No\"\n    if file_name.find(\"txt\")!= -1 or file_name.find(\"exe\")!= -1 or file_name.find(\"dll\")!= -1:\n        return \"Yes\"\n    return \"No\"\n\n"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    if not lst:\n        return 0\n    elif (3 in [i for i in range(len(lst)) if i % 3 == 0]) or (4 in [i for i in range(len(lst)) if i % 4 == 0 and i % 3!= 0]):\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                lst[i] = lst[i] ** 2\n            elif i % 4 == 0 and i % 3!= 0:\n                lst[i] = lst[i] ** 3\n        return sum(lst)\n    else:\n        return sum_squares(lst[1:])\n\n"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    prime_words = []\n    for word in sentence.split():\n        if gcd(len(word), 2) == 1:\n            prime_words.append(word)\n    return''.join(prime_words)\n\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x, n = x.strip(), n.strip()\n    if x == \"1\" and n == \"1\":\n        return True\n    if x == \"0\" or n == \"0\":\n        return False\n    if x.find(\"/\")!= -1:\n        x = int(x.replace(\"/\", \"\"))\n    if n.find(\"/\")!= -1:\n        n = int(n.replace(\"/\", \"\"))\n    if x * n == int(x) * int(n):\n        return True\n    return False\n\n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    # get the sum of each number's digits\n    # and sort the list based on that\n    nums_with_digits_sum = [int(n) for n in nums]\n    nums_with_digits_sum.sort(key=lambda x: sum(map(int, str(x))), reverse=True)\n\n    # now that we have the list sorted,\n    # we can just use a list comprehension to\n    # re-create the original list\n    return [n for n in nums if n in nums_with_digits_sum]\n\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    return len([num for num in nums if (num > 10 and (num % 100 // 10 == 1 or num % 100 // 10 == 3 or num % 100 // 10 == 5 or num % 100 // 10 == 7 or num % 100 // 10 == 9))])\n\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i*i-i+1 for i in range(n)]\n    triples = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    triples += 1\n    return triples\n\n"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    if not isinstance(planet1, str) or not isinstance(planet2, str):\n        return ()\n\n    if planet1 == 'Jupiter' and planet2 == 'Neptune':\n        return ('Saturn', 'Uranus')\n\n    if planet1 == 'Earth' and planet2 == 'Mercury':\n        return ('Venus')\n\n    if planet1 == 'Mercury' and planet2 == 'Uranus':\n        return ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n\n    return ()\n\n"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    if not lst:\n        return []\n\n    # Odd length words will be filtered out\n    even_words = [w for w in lst if len(w) % 2 == 0]\n\n    # Words will be sorted by length\n    even_words.sort(key=len, reverse=True)\n\n    # Words will be joined and sorted\n    return [*[w +'' for w in even_words]]\n\n"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n % 2 == 0:\n        return y\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return x\n    return x\n\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    return sum(i**2 for i in lst if i%2 and isinstance(i, int))\n\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    if game == guess:\n        return [0] * len(game)\n    else:\n        return [abs(x - y) for x, y in zip(game, guess)]\n\n"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n\n    if not class_name or not extensions:\n        return None\n\n    strongest_extension = None\n    for extension in extensions:\n        cap, sm = extension.cap, extension.sm\n        strength = cap - sm\n        if strength > 0 and strongest_extension is None or strength < strongest_extension.strength:\n            strongest_extension = {\n                'extension': extension,\n               'strength': strength\n            }\n\n    if strongest_extension:\n        return class_name + '.' + strongest_extension['extension']\n\n    return None\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if a.find(b)!= -1:\n        return True\n\n    for i in range(1, len(b) + 1):\n        rotated = b[i - 1] + b[i:len(b)]\n        if rotated in a:\n            return True\n\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count, odd_count = 0, 0\n    while num:\n        if num % 10 in [0, 2, 8]:\n            even_count += 1\n        else:\n            odd_count += 1\n        num /= 10\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    if number < 1 or number > 1000:\n        raise ValueError(f\"{number} is out of range\")\n\n    # 1-9\n    if 1 <= number < 4:\n        return f\"{number}\"\n\n    # 4-9\n    if 4 <= number < 10:\n        return f\"{number:d}a\"\n\n    # 10-99\n    if 10 <= number < 100:\n        return f\"{number:d}c\"\n\n    # 100-999\n    if 100 <= number < 1000:\n        return f\"{number:d}d\"\n\n    # 1000+\n    if number >= 1000:\n        raise ValueError(f\"{number} is too large\")\n\n    return \"?\"\n\n"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if (a**2 + b**2 - c**2) < 0:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    if not words:\n        return \"\"\n    if len(set(words[0])) > len(set(words[1:])):\n        return words[0]\n    return max(words, key=len)\n\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if need <= 0:\n        return [0, 0]\n\n    if number >= need:\n        return [need, 0]\n\n    if remaining <= 0:\n        eaten = need\n        remaining = 0\n    else:\n        eaten = min(need, remaining)\n        remaining -= eaten\n\n    return [eaten, remaining]\n\n"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator) == 0:\n        return 0\n    if len(operand) < 2:\n        return 0\n    if len(operator)!= len(operand) - 1:\n        return 0\n\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            return operand[0] + operand[1]\n        elif operator[i] == '*':\n            return operand[0] * operand[1]\n        elif operator[i] == '-':\n            return operand[0] - operand[1]\n        elif operator[i] == '//':\n            return operand[0] // operand[1]\n        elif operator[i] == '**':\n            return operand[0] ** operand[1]\n    return 0\n\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not s:\n        return s\n    s = s.lower() if s[0] in \"abcdefghijklmnopqrstuvwxyz\" else s\n    s = s[::-1] if s and s[0] in \"abcdefghijklmnopqrstuvwxyz\" else s\n    return s\n\n"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n\n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a < b:\n        return [i for i in range(a, b+1) if i % 2 == 0 and i > 0]\n    else:\n        return []\n\n"}
