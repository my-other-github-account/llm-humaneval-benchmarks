{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack[-1]!= '(':\n                groups.append(paren_string[stack.index('(') + 1: -1])\n            stack.pop()\n        elif char =='':\n            if not stack:\n                groups.append(paren_string)\n            else:\n                groups.append(paren_string[stack.index('(') + 1: -1])\n        else:\n            stack.append(char)\n    if stack:\n        groups.append(paren_string[stack.index('(') + 1: -1])\n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        if operation < 0:\n            balance -= operation\n        else:\n            balance += operation\n    return balance < 0"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum([abs(x - mean) for x in numbers]) / len(numbers)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i == 0 or i == len(numbers) - 1:\n            result.append(numbers[i])\n        else:\n            result.append(numbers[i])\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    stack = []\n    levels = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return levels\n            level = len(stack)\n            stack.pop()\n            levels.append(level)\n    return levels"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    max_so_far = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            rolling_max_list.append(max_so_far)\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest palindromic postfix of the string\n    postfix = string[1:]\n    while is_palindrome(postfix):\n        postfix = postfix[1:]\n    # If the postfix is empty, return the original string\n    if not postfix:\n        return string\n    # Find the length of the palindromic postfix\n    palindrome_length = len(postfix)\n    # Find the length of the prefix that comes before the palindromic suffix\n    prefix_length = len(string) - palindrome_length\n    # Reverse the prefix and append it to the end of the palindromic postfix\n    return postfix + string[:prefix_length][::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '1':\n            result += '0'\n        elif a[i] == '0' and b[i] == '0':\n            result += '1'\n        elif a[i] == '1' and b[i] == '0':\n            result += '1'\n        elif a[i] == '0' and b[i] == '1':\n            result += '0'\n        else:\n            result += a[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string)+1):\n        prefix = string[:i]\n        if prefix not in prefixes:\n            prefixes.append(prefix)\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return''.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase to ignore case\n    string = string.lower()\n    # Create a set of unique characters in the string\n    unique_chars = set(string)\n    # Return the length of the set\n    return len(unique_chars)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    beats = []\n    for char in music_string:\n        if char in notes:\n            beats.append(notes[char])\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if substring in string[i:i+len(substring)]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    words = numbers.split()\n    words.sort()\n    return''.join(words)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    smallest_distance = float('inf')\n    closest_pair = None\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if i == j:\n                continue\n            distance = abs(numbers[i] - numbers[j])\n            if distance < smallest_distance:\n                smallest_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return scaled_numbers"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while n % i == 0:\n        factors.append(i)\n        n //= i\n    if n > 1:\n        factors.append(n)\n    return [f for f in factors if f > 1]"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join(chr(ord(c) ^ 0x20) if c.islower() else c for c in string)"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2!= 0:\n        raise ValueError(\"List of coefficients must have even number of elements\")\n    if xs[0] == 0:\n        raise ValueError(\"Polynomial must have non zero constant term\")\n    for i in range(1, len(xs)):\n        if xs[i] == 0:\n            continue\n        if i == len(xs) // 2:\n            return -xs[i] / (xs[i-1] * math.sqrt(xs[i-2]))\n        else:\n            return -xs[i] / (xs[i-1] * math.sqrt(xs[i-2] * math.pow(xs[i-1], 2)))\n    return None"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l_sorted = sorted(l[::3])\n    l_unsorted = [l[i] if i % 3!= 0 else l_sorted[i // 3] for i in range(len(l))]\n    return l_unsorted"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_sorted = sorted(even_values)\n    odd_indices = [i for i in range(len(l)) if i % 2!= 0]\n    odd_values = [l[i] for i in odd_indices]\n    odd_sorted = sorted(odd_values)\n    return [even_sorted[i] if i % 2 == 0 else odd_sorted[i] for i in range(len(l))]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split encoded string to groups of 3.\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups to form decoded string.\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    fib = [0, 1]\n    for i in range(2, n+1):\n        fib.append(fib[i-1] + fib[i-2])\n    is_prime = [False] * (n+1)\n    is_prime[0] = True\n    is_prime[1] = True\n    for i in range(2, n+1):\n        if fib[i] > 1:\n            is_prime[fib[i]] = False\n    return fib[n] if is_prime[fib[n]] else None"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    left_to_right = [0] * n\n    right_to_left = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                left_to_right[i] += 1\n                right_to_left[j] += 1\n    return left_to_right.count(0) - right_to_left.count(0)"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if base < 10:\n        # convert input number to string\n        x_str = str(x)\n        # remove leading zeros\n        while x_str.startswith('0'):\n            x_str = x_str[1:]\n        # convert to new base\n        new_str = ''\n        while x_str:\n            digit = int(x_str[0]) % base\n            new_str = str(digit) + new_str\n            x_str = x_str[1:]\n        return new_str\n    else:\n        return \"Error: base must be less than 10\""}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    a = 0\n    b = 1\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        if i == 4 or i == 5 or i == 6 or i == 7:\n            d = a + b + c + d\n        else:\n            d = a + b + c\n        a, b, c = b, c, d\n    return d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2\n    else:\n        return sorted_l[n//2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 ** n % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    if len(s0)!= len(s1):\n        return False\n    for char in s0:\n        if char not in s1:\n            return False\n    return True"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Check if every opening bracket has a corresponding closing bracket.\n    :param brackets: A string of \"<\" and \">\".\n    :return: True if every opening bracket has a corresponding closing bracket, False otherwise.\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack or stack[-1]!= \"<\":\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\"\"\"\n    if len(l) < 2:\n        return True\n    elif l[0] > l[-1]:\n        return False\n    elif l[0] < l[-1]:\n        return True\n    else:\n        return monotonic(l[1:])"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    if n <= 1:\n        return None\n    elif n == 2:\n        return 2\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return i\n        return None"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Check if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    n = len(xs)\n    derivative = []\n    for i in range(n):\n        if i == 0:\n            derivative.append(0)\n        elif i == 1:\n            derivative.append(xs[i])\n        else:\n            derivative.append(sum(xs[j] * (i - j) for j in range(i)))\n    return derivative"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n <= 2:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels and (i == len(s) - 1 or not s[i:i+2].isalpha()):\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # split the string into a list of words\n    words = s.split()\n    # count the number of apples and oranges\n    num_apples = int(words[0].split(' ')[1])\n    num_oranges = int(words[1].split(' ')[1])\n    # calculate the number of mango fruits\n    num_mango = n - num_apples - num_oranges\n    return num_mango"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if len(arr) == 0:\n        return []\n    even_nodes = [node for node in arr if node % 2 == 0]\n    if len(even_nodes) == 0:\n        return []\n    smallest_even_node = min(even_nodes, key=lambda node: node[1])\n    return [smallest_even_node[0], smallest_even_node[1]]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_freq = 0\n    max_val = 0\n    for val in lst:\n        if val > 0:\n            freq = lst.count(val)\n            if freq >= val:\n                if freq > max_freq:\n                    max_freq = freq\n                    max_val = val\n    if max_val == 0:\n        return -1\n    else:\n        return max_val"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    if len(sorted_lst) == 1:\n        return sorted_lst\n    elif len(sorted_lst) == 2:\n        return [sorted_lst[0], sorted_lst[1]]\n    else:\n        max_val = sorted_lst[-1]\n        min_val = sorted_lst[0]\n        sorted_lst = [min_val]\n        for i in range(1, len(sorted_lst)):\n            if sorted_lst[-1] == max_val:\n                sorted_lst.append(min_val)\n            else:\n                sorted_lst.append(sorted_lst[-1])\n        return sorted_lst"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return round((a * b * c) / 2, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if len(q) == len(q[::-1]):\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    # Create a copy of the array and make it palindromic\n    palindromic_arr = arr[:]\n    for i in range(n//2):\n        if arr[i]!= arr[n-i-1]:\n            palindromic_arr[i], palindromic_arr[n-i-1] = arr[n-i-1], arr[i]\n    # Count the number of changes made to the palindromic array\n    change_count = 0\n    for i in range(n):\n        if palindromic_arr[i]!= arr[i]:\n            change_count += 1\n    # Return the minimum number of changes needed to make the original array palindromic\n    return change_count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 100:\n        return any(all(i > 2 for j in range(2, int(i**0.5) + 1) if i % j == 0) for i in range(3, int(a**0.5) + 1))\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n ** int(n)"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return a == int(a**3)"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for digit in num:\n        if str(digit) in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # get binary representation without '0b'\n    return 'db' + binary + 'db'  # add extra 'db' characters at beginning and end"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) >= 3:\n        for i in range(len(s) - 2):\n            if s[i] == s[i+1] == s[i+2]:\n                return False\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grade_map = {\n        4.0: 'A+',\n        > 3.7: 'A',\n        > 3.3: 'A-',\n        > 3.0: 'B+',\n        > 2.7: 'B',\n        > 2.3: 'B-',\n        > 2.0: 'C+',\n        > 1.7: 'C',\n        > 1.3: 'C-',\n        > 1.0: 'D+',\n        > 0.7: 'D',\n        > 0.0: 'D-',\n        0.0: 'E'\n    }\n    letter_grades = []\n    for gpa in grades:\n        if gpa in letter_grade_map:\n            letter_grades.append(letter_grade_map[gpa])\n        else:\n            letter_grades.append('N/A')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    if len(string) <= 1:\n        return False\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10**n):\n        if i % 10 == 1 or i // 10 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary = bin(N)[2:]  # convert N to binary string\n    binary_sum = sum(int(digit) for digit in binary)  # sum the digits in binary string\n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum([lst[i] for i in range(len(lst)) if i % 2!= 0 and i < len(lst)])"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = ''\n        for char in word:\n            new_word += chr(ord(char) - (ord(char) % len(word)))\n        new_words.append(new_word)\n    return''.join(new_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    row = []\n    for i in range(len(lst)):\n        if lst[i][0] == x:\n            for j in range(1, len(lst[i])):\n                row.append((lst[i][j], j))\n    row.sort(key=lambda x: (x[1], -x[0]))\n    return row"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) == 0:\n        return array\n    elif len(array) == 1:\n        return array\n    elif sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shift = 2 * 2\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            index = alphabet.find(char)\n            shifted_index = (index + shift) % 26\n            encrypted += alphabet[shifted_index]\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    words = S.split()\n    for i in range(len(words)):\n        if words[i] == \"I\" and i < len(words) - 1 and words[i+1] in [\".\", \"?\", \"!\"]:\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or x == z + y:\n            return True\n        else:\n            return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2) % 26 + ord('a'))\n            else:\n                encoded_message += chr(ord(char) - 32)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    max_prime = 0\n    max_sum = 0\n    for num in lst:\n        if num > 1:\n            for i in range(2, num):\n                if num % i == 0:\n                    break\n            else:\n                if max_prime < num:\n                    max_prime = num\n                    max_sum = sum(str(digit) for digit in str(num))\n    return max_sum"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    if all(isinstance(key, str) and (key.islower() or key.isupper()) for key in dict):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = [2, 3]\n    count = 0\n    for i in range(4, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n            count += 1\n    return primes[:count]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    product = 1\n    while a > 0 and b > 0:\n        if a % 10 == 0 and b % 10 == 0:\n            product *= 0\n        else:\n            product *= (a % 10) * (b % 10)\n        a //= 10\n        b //= 10\n    return product"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i+1].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    try:\n        return int(round(float(value)))\n    except ValueError:\n        return None"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    levels = []\n    if n % 2 == 0:\n        n_stones = 2\n    else:\n        n_stones = 3\n    for i in range(n_stones, n+1, 2):\n        levels.append(i)\n    return levels"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x <= y:\n        return 2 * (x // 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        return int(round((n + m) / 2))\n    return bin(int(round((n + m) / 2)))"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2!= 0 for digit in str(num))])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if len(arr) == 0:\n        return []\n    elif all(x >= 1 and x <= 9 for x in arr):\n        sorted_arr = sorted(arr)\n        reversed_arr = sorted_arr[::-1]\n        return [str(x+1) for x in reversed_arr]\n    else:\n        return ['One']"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(i * i * (i-1) * (i-2) * (i-3) * (i-4) * (i-5) * (i-6) * (i-7) * (i-8) * (i-9) * (i-10))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if i == str(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            count += sum(int(digit) for digit in str(num)[::-1])\n        else:\n            count += sum(int(digit) for digit in str(num))\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        if arr[1] >= arr[0]:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(arr)):\n            if arr[i] >= arr[i+1]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n                if i == len(arr)-1:\n                    return True\n                else:\n                    return move_one_ball(arr[i+1:])\n        return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Check if all elements of lst1 are even\n    if all(x % 2 == 0 for x in lst1):\n        # If all elements of lst1 are even, return \"YES\"\n        return \"YES\"\n    # Otherwise, check if there are any odd elements in lst2\n    elif any(x % 2!= 0 for x in lst2):\n        # If there are odd elements in lst2, return \"NO\"\n        return \"NO\"\n    else:\n        # If there are no odd elements in lst2, it is possible to exchange elements\n        # between lst1 and lst2 to make all elements of lst1 even\n        # Perform the exchange and return \"YES\"\n        return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letters = {}\n    for char in test.lower():\n        if char in letters:\n            letters[char] += 1\n        else:\n            letters[char] = 1\n    return letters"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Remove all characters in s that are equal to any character in c\n    result = ''.join([char for char in s if char not in c])\n    \n    # Check if the result string is palindrome\n    is_palindrome = result == result[::-1]\n    \n    return (result, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_count_s = sum(int(d) % 2!= 0 for d in s)\n        result.append(f\"the number of odd elements {odd_count_s} in the string {i} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return float('inf')\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        min_sum = float('inf')\n        curr_sum = nums[0]\n        for i in range(1, len(nums)):\n            curr_sum = math.fmin(curr_sum, nums[i])\n            if i > 1 and curr_sum == nums[i-1]:\n                continue\n            if i > 1 and curr_sum == nums[i-2]:\n                continue\n            if i > 2 and curr_sum == nums[i-1] + nums[i-2]:\n                continue\n            min_sum = math.fmin(min_sum, curr_sum)\n        return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    max_fill_count = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                if capacity >= 1:\n                    grid[i][j] = 0\n                    max_fill_count += 1\n                else:\n                    max_fill_count += math.floor(capacity / 2)\n    return max_fill_count"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    def sort_helper(arr):\n        # sort based on number of ones in binary representation\n        sorted_arr = sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))\n        # sort based on decimal value for similar number of ones\n        if len(set(sorted_arr)) == len(sorted_arr):\n            sorted_arr = sorted(sorted_arr, key=lambda x: x)\n        return sorted_arr\n    return sort_helper(arr)"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if len([c for c in word if c.isalpha() and not c.isvowel()]) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    left = \"\"\n    right = \"\"\n    for i in range(len(word)):\n        if word[i] in vowels:\n            if i > 0 and word[i-1] not in vowels:\n                left = word[i-1]\n            elif i < len(word)-1 and word[i+1] not in vowels:\n                right = word[i+1]\n            else:\n                return word[i]\n    return left or right or \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        if s == '(':\n            stack.append(s)\n        elif s == ')':\n            if not stack or stack[-1]!= '(':\n                return 'No'\n            stack.pop()\n    if len(stack)!= 0:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum([num for i, num in enumerate(lst) if i % 2 == 0 and num % 2!= 0])"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(arr[:k])"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n <= 1:\n        return [n]\n    elif n % 2 == 1:\n        return [n]\n    else:\n        sequence = [n]\n        while n!= 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n        return sorted(sequence)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"\n    Validates a given date string and returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \"\"\"\n    if not date:\n        return False\n    months = ['01', '03', '05', '07', '08', '10', '12']\n    days = [31, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 3"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if'' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if ord(c) % 2!= 0)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e true\n    is_sorted([1, 2, 3, 4, 5]) \u279e true\n    is_sorted([1, 3, 2, 4, 5]) \u279e false\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e true\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e true\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e false\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e true\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e false\n    '''\n    if len(lst) <= 1:\n        return True\n    elif lst[0] > lst[-1]:\n        return False\n    else:\n        for i in range(1, len(lst)):\n            if lst[i]!= lst[i-1]:\n                return False\n        return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if not interval1[0] <= interval1[1] or not interval2[0] <= interval2[1]:\n        return \"NO\"\n    if interval1[0] >= interval2[1] or interval2[0] >= interval1[1]:\n        return \"NO\"\n    length = interval2[1] - interval1[0]\n    if length <= 1:\n        return \"NO\"\n    for i in range(2, length):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    else:\n        result = 1\n        for num in arr:\n            if num == 0:\n                result *= 0\n            elif num > 0:\n                result *= 1\n            else:\n                result *= -1\n        return result"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # Find the minimum path of length k in the grid\n    # Initialize the visited set to empty set\n    visited = set()\n    # Initialize the parent dictionary to empty dictionary\n    parent = {}\n    # Initialize the path list to empty list\n    path = []\n    # Initialize the current cell to the top-left corner\n    current = (0, 0)\n    # Loop through all cells in the grid\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            # If the cell is not visited and has not been marked as visited\n            # and has not been marked as a parent of any other cell\n            if (i, j) not in visited and (i, j) not in parent and (i, j) not in path:\n                # Mark the cell as visited\n                visited.add((i, j))\n                # Loop through all neighbor cells\n                for di, dj in [(0, -1), (0, 1), (-1, 0), (1, 0), (-1, -1), (1, -1), (-1, 1), (1, 1)]:\n                    # If the neighbor cell is not off the grid and has not been visited\n                    if (i + di, j + dj) in range(len(grid)):\n                        # If the neighbor cell has not been marked as a parent of any other cell\n                        if (i + di, j + dj) not in parent:\n                            # Mark the neighbor cell as a parent of the current cell\n                            parent[(i + di, j + dj)] = (i, j)\n                            # If the neighbor cell has not been visited\n                            if (i + di, j + dj) not in visited:\n                                # Mark the neighbor cell as visited\n                                visited.add((i + di, j + dj))\n                                # If the neighbor cell is not the current cell\n                                if (i + di, j + dj)!= (i, j):\n                                    # Add the neighbor cell to the path\n                                    path.append((i + di, j + dj))\n                                    # If"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n % 2 == 0:\n        return [3, 1] + [1 + (i / 2) for i in range(2, n + 1)]\n    else:\n        return [3] + [1 + (i / 2) for i in range(2, n + 1)] + [3] + [1 + (i / 2) for i in range(2, n + 2)]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    if n < 10:\n        return n\n    else:\n        return reduce(lambda x, y: x * (y % 2 == 1), str(n), 1)"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1]!= '[':\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum([round(x**2) for x in lst])"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) > 0:\n        last_char = txt[-1]\n        if last_char.isalpha() and not last_char.isword():\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    max_index = len(arr) - 1\n    for i in range(max_index):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    a = None\n    b = None\n    for num in lst:\n        if num < 0:\n            if a is None or num > a:\n                a = num\n        elif num > 0:\n            if b is None or num < b:\n                b = num\n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif a == b:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        if float(a) > float(b):\n            return a\n        elif float(a) == float(b):\n            return None\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    example:\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        # check if n can be written as the sum of 4 positive even numbers\n        # we can start with the largest possible even number and work our way down\n        max_even = 2 * (n // 2)\n        for i in range(max_even, 1, -1):\n            if i * i == n:\n                # check if we can add 3 more even numbers to get the desired sum\n                if i * i + 2 * i + 2 * i == n:\n                    return True\n                elif i * i + 2 * i + i * i == n:\n                    return True\n                elif i * i + 2 * i + i * i + i * i == n:\n                    return True\n            elif i * i + 2 * i + i * i == n:\n                return True\n            elif i * i + 2 * i + i * i + i * i == n:\n                return True\n        return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n < 1:\n        return None\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace all consecutive spaces with -\n    while \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    \n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3 or not '.' in file_name or not file_name.startswith(('a-zA-Z', 'A-Za-z')) or not file_name.endswith(('txt', 'exe', 'dll')):\n        return 'No'\n    else:\n        return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            result += num ** 3\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    new_sentence = \"\"\n    for word in words:\n        if len(set(word)) == 1:\n            new_sentence += word + \" \"\n    return new_sentence.strip()"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    numerator = int(x.split('/')[0])\n    denominator = int(x.split('/')[1])\n    if numerator == 0 or denominator == 0:\n        return False\n    if numerator == 1 and denominator == n.split('/')[1]:\n        return True\n    if denominator == 1 and numerator == n.split('/')[0]:\n        return True\n    if numerator % denominator == 0:\n        return True\n    return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    \n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits(x))\n    if len(sorted_nums) > 1:\n        return sorted_nums[::-1]\n    else:\n        return sorted_nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 == 1 and (num // 10) % 2 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(n)]\n    max_triples = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    max_triples += 1\n    return max_triples"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        between_planets = [planet for planet in planets if planet1 in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] and planet2 in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] and planet in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]]\n        between_planets.sort(key=lambda x: abs(x.index(planet1) - x.index(planet2)))\n        return tuple(between_planets)\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort()\n    return lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            if num % 2 == 1:\n                sum_of_squares += num ** 2\n    return sum_of_squares"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = \"\"\n    for extension in extensions:\n        strength = 0\n        for char in extension:\n            if char.isupper():\n                strength += 1\n            elif char.islower():\n                strength -= 1\n        if strength > 0:\n            strongest_extension = extension\n            break\n    if strongest_extension == \"\":\n        return class_name\n    else:\n        return class_name + \".\" + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => true\n    cycpattern_check(\"whassup\",\"psus\") => false\n    cycpattern_check(\"abab\",\"baa\") => true\n    cycpattern_check(\"efef\",\"eeff\") => false\n    cycpattern_check(\"himenss\",\"simen\") => true\n    \"\"\"\n    for i in range(len(b)):\n        for j in range(len(b)):\n            if i == 0 and j == len(b)-1:\n                continue\n            if b[i:j+1] in a:\n                return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x',\n        40: 'XL', 50: 'L', 90: 'XC', 100: 'C',\n        400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'\n    }\n    roman_numeral = ''\n    while number > 0:\n        if number in roman_numerals:\n            roman_numeral += roman_numerals[number]\n        else:\n            roman_numeral += str(number)\n        number -= 1\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if a == 0 or b == 0 or c == 0:\n        return False\n    elif a == b or b == c or c == a:\n        return True\n    elif (a + b) == c or (b + c) == a or (a + c) == b:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        num_unique_chars = len(set(word))\n        if num_unique_chars > max_unique_chars:\n            max_word = word\n            max_unique_chars = num_unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining <= 0:\n        return [number, 0]\n    elif need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"Operator and operand lists must have the same length, except for the last element of operand list.\")\n    if not all(isinstance(op, str) and op in ['+', '-', '*', '/', '**'] for op in operator):\n        raise ValueError(\"Operator list must contain only basic algebra operations.\")\n    if not all(isinstance(num, int) and num >= 0 for num in operand):\n        raise ValueError(\"Operand list must contain only non-negative integers.\")\n    result = []\n    for i in range(len(operator)):\n        if i == len(operator) - 1:\n            result.append(operand[i])\n        else:\n            result.append(operand[i] * operator[i])\n    return result[-1]"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        result = \"\"\n        for char in s:\n            if char.isalpha():\n                if char.islower():\n                    result += char.upper()\n                else:\n                    result += char.lower()\n            else:\n                result += char\n        return result"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return sorted(result)"}
