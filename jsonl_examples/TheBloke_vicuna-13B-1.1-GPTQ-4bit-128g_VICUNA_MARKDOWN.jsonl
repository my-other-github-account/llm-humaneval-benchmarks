{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    if not numbers:\n        return False\n    for i, num1 in enumerate(numbers):\n        for j, num2 in enumerate(numbers[i+1:]):\n            if (num1 - num2).sqrt() < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    group = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            group += char\n        elif char == \")\":\n            if group == \"\":\n                result.append(group)\n            else:\n                result.append(group[:-1])\n                group = \"\"\n    if group!= \"\":\n        result.append(group)\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = math.floor(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        elif op < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviation = [abs(x - mean) for x in numbers]\n    return sum(deviation) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i % delimeter == 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    nested_paren_count = {}\n    result = []\n    for char in paren_string:\n        if char == '(':\n            current_depth = nested_paren_count.get(char, 0) + 1\n            nested_paren_count[char] = current_depth\n            result.append(current_depth)\n        else:\n            if char in nested_paren_count:\n                nested_paren_count[char] -= 1\n            if nested_paren_count[char] == 0:\n                del nested_paren_count[char]\n    return result"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return (numbers[0] * numbers[1] + numbers[2] * numbers[3], numbers[0] * numbers[1] * numbers[2] * numbers[3])"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_vals = []\n    for i in range(len(numbers)):\n        max_val = max(numbers[:i+1])\n        max_vals.append(max_val)\n        numbers.remove(max_val)\n    return max_vals"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string:\n        return ''\n    prefix = string[0:1]\n    suffix = string[1:]\n    while prefix in suffix:\n        prefix = prefix[1:]\n        suffix = suffix[1:]\n    return prefix + suffix[::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == \"1\" and b[i] == \"1\":\n            result += \"0\"\n        elif a[i] == \"0\" and b[i] == \"0\":\n            result += \"1\"\n        else:\n            result += a[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        max_len = max(len(s) for s in strings)\n        for s in strings:\n            if len(s) == max_len:\n                return s\n        return strings[0]"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    prefix = string[0]\n    for i in range(1, len(string)):\n        prefixes.append(prefix + string[i])\n        prefix = prefixes[-1]\n    prefixes.append(prefix)\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    result = \"\"\n    for i in range(n):\n        result += str(i)\n    return result.strip()"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    char_counts = {}\n    for char in string:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n    return len(char_counts)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.replace(\"o\", \"\").replace(\"|\", \"\").split(\"\")\n    beat_counts = [0] * len(notes)\n\n    for i in range(len(notes)):\n        if notes[i] == \"o\":\n            beat_counts[i] = 4\n        elif notes[i] == \"|\":\n            if i < len(notes) - 1 and notes[i+1] == \"|\":\n                beat_counts[i+1] = 2\n            else:\n                beat_counts[i] += 1\n        else:\n            beat_counts[i] += 1\n\n    return beat_counts"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    end = 0\n    while end < len(string):\n        start = end + 1\n        end = string.find(substring, start)\n        if end == -1:\n            break\n        count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    numbers = numbers.replace(\" \", \"\").split(\" \")\n    sorted_numbers = sorted(numbers, key=lambda x: int(x))\n    return \" \".join(sorted_numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"At least two numbers are required.\")\n    min_dist = float('inf')\n    min_dist_idx = None\n    for i, num in enumerate(numbers):\n        for j, other_num in enumerate(numbers):\n            if i!= j:\n                dist = abs(num - other_num)\n                if dist < min_dist:\n                    min_dist = dist\n                    min_dist_idx = (i, j)\n    return (numbers[min_dist_idx[0]], numbers[min_dist_idx[1]])"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"At least two numbers are required\")\n    min_num, max_num = min(numbers), max(numbers)\n    return [x / (max_num - min_num) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    if n <= 1:\n        return n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n    factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    return [x for x in numbers if not (x in seen or seen.add(x))]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string[::-1].upper()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\"Concatenate list of strings into a single string\n\n    Parameters:\n    strings (List[str]): List of strings to be concatenated\n\n    Returns:\n    str: Concatenated string\n\n    Examples:\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    if not strings:\n        return \"\"\n    else:\n        return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees a solution.\n    \"\"\"\n    if len(xs) % 2!= 0:\n        raise ValueError(\"List of coefficients must have an even number of elements.\")\n    coeffs = [x[1] for x in xs]\n    x_min, x_max = min(coeffs), max(coeffs)\n    for x in range(x_min, x_max + 1, 0.01):\n        if poly(xs, x) == 0:\n            return x\n    raise ValueError(\"No zero found.\")"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list) -> list:\n    return sorted(l, key=lambda x: x if not x % 3 else x - (x // 3) * (3 - x % 3))"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list) -> list:\n    seen = set()\n    return list(seen)"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list) -> int:\n    return max(l, key=lambda x: x)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    result = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            result += 1\n        if i % 7 == 0:\n            result += 1\n    return result"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    l_even = [i for i in l if i % 2 == 0]\n    l_odd = [i for i in l if i % 2 == 1]\n    return sorted(l_even) + sorted(l_odd)"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups to form encoded string\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    Takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string into groups of length 3\n    groups = [s[i:i+3] for i in range(len(s)-2)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups to form decoded string\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    if n <= 1:\n        return 0\n    elif n % 2 == 0:\n        return prime_fib(n // 2) + prime_fib(n // 2)\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return prime_fib(n // i)\n        return n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    \"\"\"\n    if len(l) < 3:\n        return False\n    if all(x == 0 for x in l):\n        return True\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if sum(l[i:j]) == 0:\n                k = l[i] - l[j]\n                if k in l and k > 0:\n                    return False\n                elif k < 0 and (l[i] + l[j] + l[i+1]) % 2 == 0:\n                    return False\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j and (i > j or i < j):\n                continue\n            if (i > j) and (j > i):\n                count += 1\n                break\n            if (i < j) and (j < i):\n                count += 1\n                break\n    return count"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    # check if the list has an even length\n    if len(l) % 2 == 0:\n        # if it does, there can't be any pairs that sum to zero\n        return False\n    # create a dictionary to store the sum of each pair of elements\n    # the key is the pair of elements, and the value is the sum\n    pairs_sum = {}\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            # check if the elements sum to zero\n            if l[i] + l[j] == 0:\n                # if they do, add the pair of elements to the dictionary\n                # with a value of 0\n                pairs_sum[(l[i], l[j])] = 0\n    # check if there are any pairs that sum to zero\n    for pair in pairs_sum:\n        if pairs_sum[pair] == 0:\n            # if there are, return True\n            return True\n    # if there aren't any pairs that sum to zero, return False\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    result = \"\"\n    while x > 0:\n        result = (result + (x % base)) + (base - 1)\n        x = x // base\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    a, b, c, d = 0, 1, 1, 0\n    result = a + b + c + d\n    return (n >= 4) and (n % 2 == 0) and (result - (a + b + c + d)) or result"}
{"task_id": "HumanEval/47", "completion": "def median(l: list) -> float:\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    text = text.lower()\n    reversed_text = text[::-1]\n    for i in range(len(text)):\n        if text[i]!= reversed_text[i]:\n            return False\n    return True"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n\n    Args:\n        n: An integer representing 2^n.\n        p: An integer representing a prime number.\n\n    Returns:\n        An integer representing 2^n modulo p.\n\n    Examples:\n        modp(3, 5) -> 3\n        modp(1101, 101) -> 2\n        modp(0, 101) -> 1\n        modp(3, 11) -> 8\n        modp(100, 101) -> 1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return (n // 2) % p\n    else:\n        return (n // 2) + 1 % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n    \"\"\"\n    Returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    Takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(int(ch)) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char.lower() in vowels:\n            continue\n        result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    if len(s0)!= len(s1):\n        return False\n    d0 = {}\n    d1 = {}\n    for c0 in s0:\n        if c0 in d0:\n            d0[c0] += 1\n        else:\n            d0[c0] = 1\n    for c1 in s1:\n        if c1 in d1:\n            d1[c1] += 1\n        else:\n            d1[c1] = 1\n    return len(d0) == len(d1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            if stack:\n                stack.pop()\n            if not stack:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n\n    Args:\n    l (list): A list of numbers.\n\n    Returns:\n    bool: True if the elements in the list are monotonically increasing or decreasing, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True  # empty list or single point\n    sorted_l = sorted(l)\n    for i in range(1, len(sorted_l)):\n        if sorted_l[i] <= sorted_l[i - 1]:\n            continue\n        else:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    return sorted(set(l1).intersection(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    if n <= 1:\n        return 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            for j in range(i ** 2, n + 1, i):\n                if n % j == 0:\n                    return j\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n\n    Args:\n        n: An integer representing the last number to sum.\n\n    Returns:\n        An integer representing the sum of numbers from 1 to n.\n\n    Examples:\n        sum_to_n(30)\n        sum_to_n(100)\n        sum_to_n(5)\n        sum_to_n(10)\n        sum_to_n(1)\n\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    count = {}\n    for char in brackets:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count == {\n        '(': 0,\n        ')': 0\n    }"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    result = [0] * (len(xs) - 1)\n    for i in range(len(xs) - 1):\n        result[i] = xs[i + 1]\n    return result"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = set(\"aeiou\")\n    count = 0\n    for char in s:\n        if char in vowels and char!= 'y' or char == 'y' and s.endswith(char):\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[shift:] + x_str[:shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    result = 0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            result += int(s[i])\n        else:\n            result += int(s[i-1])\n    return result"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    fruit_type = {\"apples\": 0, \"oranges\": 0, \"mango\": 0}\n    for fruit in s.split():\n        if fruit in fruit_type:\n            fruit_type[fruit] += 1\n        else:\n            fruit_type[fruit] = 1\n    return fruit_type[\"mango\"]"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] < smallest_value:\n            smallest_value = arr[i]\n            smallest_index = i\n    return [smallest_value, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    if not lst:\n        return -1\n    freq = {}\n    max_val = 0\n    for val in lst:\n        if val in freq:\n            freq[val] += 1\n        else:\n            freq[val] = 1\n        max_val = max(max_val, val)\n    for val in freq:\n        if freq[val] >= val:\n            return max_val\n    return -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    n = len(lst)\n    # Traverse through the list, starting from the last element\n    for i in range(n-1, -1, -1):\n        # Swap the last element with the i-th element\n        lst[i], lst[n-1] = lst[n-1], lst[i]\n        # Decrement the size of the list by 1\n        n -= 1\n    # Repeat the process until the list has only one element\n    while n > 1:\n        # Swap the last two elements\n        lst[n-1], lst[0] = lst[0], lst[n-1]\n        # Decrement the size of the list by 1\n        n -= 1\n    # Return the sorted list in the strange order\n    return lst"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a + b > c) or (a + c > b) or (b + c > a):\n        return -1\n    else:\n        return round(abs((a*b*c)/3), 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if len(q) % 2!= 0:\n        return False\n    sum = 0\n    for i in range(len(q)):\n        sum += int(q[i])\n    return sum <= w and ''.join(str(x) for x in q) == ''.join(str(x) for x in q)[::-1]"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    count = 0\n    while left < right:\n        if arr[left]!= arr[right]:\n            count += 1\n        if arr[left] < arr[right]:\n            arr[left], arr[right] = arr[right], arr[left]\n            count += 1\n        left += 1\n        right -= 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 100:\n        for i in range(3, int(a) + 1, 2):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return n**int(np.log(x, n)) == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a % 3 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for i in num:\n        if i in \"0123456789ABCDEF\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_string = \"db\"\n    while decimal > 0:\n        binary_string += str(decimal % 2)\n        decimal = decimal // 2\n    binary_string += \"db\"\n    return binary_string"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    elif any(c not in s[i:i+3] for i in range(0, len(s), 3)):\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grade_table = {\n        \"A+\": 4.0,\n        \"A\": 3.7,\n        \"A-\": 3.3,\n        \"B+\": 3.0,\n        \"B\": 2.7,\n        \"B-\": 2.3,\n        \"C+\": 2.0,\n        \"C\": 1.7,\n        \"C-\": 1.3,\n        \"D+\": 1.0,\n        \"D\": 0.7,\n        \"D-\": 0.3,\n        \"E\": 0.0,\n    }\n\n    grades = list(grades)\n    letter_grades = []\n    for grade in grades:\n        gpa = grade\n        letter_grade = letter_grade_table.get(str(gpa), \"E\")\n        letter_grades.append(letter_grade)\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"\n    Returns True if the string length is a prime number, False otherwise.\n    \"\"\"\n    # Check if the string length is prime\n    if len(string) > 1:\n        for i in range(2, len(string)):\n            if string[i] == string[i - 1]:\n                continue\n            for j in range(i + 1, len(string)):\n                if string[i] == string[j]:\n                    return False\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**n):\n        num = int(str(i)[-1])\n        if num == 1 or (num > 9 and num % 10 == 1):\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    digits = []\n    while N > 0:\n        i = N % 10\n        digits.append(i)\n        N = N // 10\n    digits.reverse()\n    result = ''.join(map(str, digits))\n    return result"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    result = []\n    for i in range(len(lst) // 2):\n        if i % 2 == 0:\n            result.append(lst[i])\n    return sum(result)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # create a dictionary to map each word to its sorted version\n    word_dict = {}\n    for i in range(len(s)):\n        word = s[i].lower().replace(' ', '_')\n        sorted_word = ''.join([chr(ord(c) - 97 + i) for i in range(len(word))])\n        word_dict[word] = sorted_word\n\n    # use a join to concatenate the sorted words and spaces\n    return''.join(word_dict.values())"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    rows = sorted(set(map(lambda x: x[0], lst)), key=lambda x: x)\n    row_cols = [(row, col) for row, col in zip(rows, x)]\n    row_cols.sort(key=lambda x: (-x[0], x[1]))\n    return [tuple(row_cols) for row_cols in row_cols]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) <= 1:\n        return array\n    else:\n        middle_index = len(array) // 2\n        sorted_left = sort_array(array[:middle_index])\n        sorted_right = sort_array(array[middle_index:])\n        if sum(sorted_left[-1], sorted_right[0]) % 2 == 0:\n            return sorted_left + sorted_right\n        else:\n            return sorted_left + sorted_right[::-1]"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shift = 2\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += alphabet[ord(char) - 97 + shift]\n            else:\n                result += alphabet[ord(char) - 65 + shift]\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    for i in S.split():\n        if i.startswith(\"I\"):\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x == int(x) and y == int(y) and z == int(z):\n        if x + y == z and x + z == y and y + z == x:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    output = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() == char.upper():\n                char = char.upper()\n            else:\n                vowel = \"aeiou\"\n                index = \"abcdefghijklmnopqrstuvwxyz\".index(char.lower()) + 2\n                char = \"\".join([\"\".join(i for i in \"abcdefghijklmnopqrstuvwxyz\" if i.isalpha())[index % 12]:index // 12 + 1] if index % 12 == 0 else \"\".join([\"\".join(i for i in \"abcdefghijklmnopqrstuvwxyz\" if i.isalpha())[index % 12 + 12:index % 12 + 12 + 1] if index % 12 == 1 else \"\"])\n            output += char\n        else:\n            output += char\n    return output"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    if not lst:\n        return 0\n    d = max(lst)\n    return sum(int(d) for d in str(d))"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    else:\n        for key in dict:\n            if not isinstance(key, str) or key.islower()!= all(t.islower() for t in dict.values()):\n                return False\n        return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    prime_numbers = [p for p in range(2, n+1) if is_prime(p)]\n    return prime_numbers\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    if a < 0:\n        a = -a\n        b = -b\n        result = a * b\n        if result > 0:\n            return -result\n    else:\n        result = a * b\n        if b > 0:\n            return result\n    if result > 1000:\n        return 0\n    else:\n        return result"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] in 'aeiou':\n            if i % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    if value.is_integer():\n        return value\n    else:\n        return round(value, 0)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n <= 1:\n        return [n]\n    else:\n        if n % 2 == 0:\n            return [n, (n // 2) + (n // 2)]\n        else:\n            return [n, (n // 2) + 1]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(', ')"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x % 2 == 0 and y % 2 == 0:\n        return max(x, y)\n    elif x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        for i in range(n, m+1):\n            sum += i\n        avg = sum/m\n        rounded_avg = (avg + (m-1)/2) / m\n        binary = str(rounded_avg).zfill(m)\n        return binary"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if i % 2!= 0])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    arr.sort(key=lambda x: x in ['1', '2', '3', '4', '5', '6', '7', '8', '9' and x or -1])\n    arr = arr[::-1]\n    result = []\n    for i in arr:\n        if i >= '1' and i <= '9':\n            result.append('' + str(i))\n        else:\n            result.append('One')\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(1 + sum(i for i in range(1, i)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num >= 0:\n            sum_of_digits = sum(int(d) for d in str(num))\n            if sum_of_digits > 0:\n                count += 1\n        else:\n            # If the number is negative, count it as a positive number\n            sum_of_digits = sum(int(d) for d in str(abs(num)))\n            if sum_of_digits > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    shifted = [0] * len(arr)\n    for i in range(len(arr)):\n        # find the first 1 in the array\n        j = arr.index(1)\n        if j == 0:\n            # if the first element is 1, shift all elements to the right\n            for k in range(i, len(arr)):\n                shifted[k] += 1\n        else:\n            # if the first element is not 1, we can only shift the first element\n            # to the right\n            shifted[0] += 1\n            j += 1\n            for k in range(i, len(arr)):\n                shifted[k] = arr[j]\n                j += 1\n    return shifted[-1] <= arr[-1]"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if all(num % 2 == 0 for num in lst1) and all(num % 2 == 0 for num in lst2):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    hist = {}\n    max_count = 0\n    max_letter = ''\n    for letter in test.lower():\n        if letter not in hist:\n            hist[letter] = 0\n        hist[letter] += 1\n        if hist[letter] > max_count:\n            max_count = hist[letter]\n            max_letter = letter\n    return {'%s': max_count} % max_letter if max_count > 0 else {}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = s.replace(c, '')\n    if result == s:\n        return (s, True)\n    elif len(result) % 2 == 0:\n        return (result, False)\n    else:\n        return (result, True)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i in lst:\n        odd_count = 0\n        for j in i:\n            if j % 2 == 1:\n                odd_count += 1\n        result.append(\"the number of odd elements in the string \" + str(i) + \" of the input is \" + str(odd_count))\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sub_sum = sum(nums[i:j+1])\n            if sub_sum < min_sum:\n                min_sum = sub_sum\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # Create a list to store the maximum number of times each well can be filled\n    max_fill_list = []\n    # Iterate through each row of the grid\n    for i in range(len(grid)):\n        # Initialize a variable to store the maximum number of times the current well can be filled\n        max_fill_current = 0\n        # Iterate through each column of the grid\n        for j in range(len(grid[0])):\n            # If the current well is 1, add its row and column indices to the max_fill_current list\n            if grid[i][j] == 1:\n                max_fill_current += 1\n                max_fill_list.append((i, j))\n            # If the current well is 0 and the capacity of the bucket is greater than or equal to the number of wells that can be filled in the current row, subtract the number of wells that can be filled from the capacity of the bucket\n            elif grid[i][j] == 0 and capacity >= max_fill_current:\n                capacity -= max_fill_current\n                max_fill_current = 0\n            # If the current well is 0 and the capacity of the bucket is less than the number of wells that can be filled in the current row, subtract the number of wells that can be filled from the capacity of the bucket\n            elif grid[i][j] == 0 and capacity < max_fill_current:\n                capacity -= max_fill_current\n                max_fill_current = 0\n        # Add the current well's row and column indices to the max_fill_current list if it is a 1\n        if grid[i][j] == 1:\n            max_fill_current += 1\n            max_fill_list.append((i, j))\n        # Update the max_fill_current list with the maximum number of times the current well can be filled\n        max_fill_current = max(max_fill_current, max_fill_list[-1])\n    # Return the maximum number of times the buckets need to be lowered\n    return max_fill_current"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: len(str(x).zfill(max(len(str(x)) for x in arr))), reverse=True)"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        if len(word) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    for i in range(len(word)-1):\n        if word[i] in consonants and word[i+1] in vowels:\n            return word[i+1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    good_lst = [x for x in lst if x in '()']\n    if len(good_lst) % 2 == 0:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    odd_sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            odd_sum += lst[i]\n        else:\n            odd_sum += lst[i]\n    return odd_sum"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    if len(arr) <= k:\n        return sum(arr[:k])\n    else:\n        return sum(arr[:k-1]) + sum(arr[k-1:])"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    if n <= 1:\n        return [n]\n    else:\n        odd_numbers = []\n        while n!= 1:\n            if n % 2 == 0:\n                n = n / 2\n            else:\n                n = 3 * n + 1\n            odd_numbers.append(n)\n        odd_numbers.sort()\n        return odd_numbers"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"\n    Validates a given date string and returns True if the date is valid, otherwise False.\n    \"\"\"\n    # Check if the date string is not empty\n    if date.strip() == \"\":\n        return False\n    \n    # Check if the number of days is within the valid range for each month\n    month_days_range = {\n        1: (31, 31),\n        3: (31, 31),\n        5: (31, 31),\n        7: (31, 31),\n        8: (31, 31),\n        10: (31, 31),\n        12: (31, 31),\n        4: (30, 30),\n        6: (30, 30),\n        9: (30, 30),\n        11: (30, 30),\n        2: (29, 29),\n        12: (31, 31)\n    }\n    month = date[5]\n    day = date[7:10]\n    year = date[8:10]\n    if month in month_days_range[month] and int(day) >= int(month_days_range[month][0]) and int(day) <= int(month_days_range[month][1]):\n        if int(year) >= 1 and int(year) <= 12:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [word.lower().strip() for word in txt.split() if word.lower()[::-1].isalnum()]"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    else:\n        sorted_lst = sorted(lst)\n        return len(lst) == len(sorted_lst) and all(x == sorted_lst[0] for x in lst)"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] and interval1[1] >= interval2[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    result = 0\n    for i in arr:\n        sign = 1 if i > 0 else -1 if i < 0 else 0\n        result += abs(i) * sign\n    return result"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # create a dictionary to store visited cells\n    visited = {}\n\n    # create a list to store the path\n    path = []\n\n    # iterate over the grid\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            # if the cell has not been visited\n            if (row, col) not in visited:\n                # mark the cell as visited\n                visited[(row, col)] = True\n\n                # if the current cell is not out of bounds\n                if (row, col) not in [(0, 0), (0, len(grid)), (len(grid) - 1, 0), (len(grid) - 1, len(grid[0]))]:\n                    # check the neighboring cells\n                    for n_row in [-1, 1]:\n                        for n_col in [-1, 1]:\n                            if (row + n_row, col + n_col) not in visited:\n                                # if a neighboring cell is not visited\n                                if (row + n_row, col + n_col) not in grid:\n                                    # add the neighboring cell to the path\n                                    path.append((row + n_row, col + n_col))\n                                    # mark the neighboring cell as visited\n                                    visited[(row + n_row, col + n_col)] = True\n\n    # sort the path by the lexicographic order\n    path = sorted(path, key=lambda x: x[0] * 10000 + x[1])\n\n    return path"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n  if n <= 0:\n    return []\n  else:\n    if n % 2 == 0:\n      return [1 + n / 2] + tri(n - 1)\n    else:\n      return tri(n - 1) + tri(n - 2) + tri(n + 1)"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        odd_digits = 0\n        while n > 0:\n            n, remainder = divmod(n, 10)\n            odd_digits = odd_digits * remainder\n        return odd_digits\n\ndef main():\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                if char == stack[-1]:\n                    stack.pop()\n                else:\n                    return False\n        else:\n            if stack:\n                stack.pop()\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(map(lambda x: x**2 if math.is_integer(x) else math.ceil(x)**2, lst))"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) < 2:\n        return False\n    elif txt[-1].isalpha() and not txt[-1].isspace():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    if not arr:\n        return -1\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    max_index = -1\n    for i in range(n-1):\n        if arr[i] <= arr[i+1]:\n            max_index = i\n    if max_index == -1:\n        return -1\n    return max_index+1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    a, b = None, None\n    for num in lst:\n        if num < 0:\n            a = max(a, num)\n        else:\n            b = min(b, num)\n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif type(a) == str and type(b) == str:\n        a_parts = a.split(\",\")\n        b_parts = b.split(\",\")\n        if len(a_parts) > len(b_parts):\n            return a\n        elif len(a_parts) < len(b_parts):\n            return b\n        else:\n            return None\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    x = 2\n    y = 2\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            x += 2\n        else:\n            y += 2\n        if x == n:\n            return True\n        if y == n:\n            return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    return n * (n-1) * (n-2) *... * 1"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3 or file_name.startswith(\"0\"):\n        return \"No\"\n    elif not file_name or not file_name.startswith(\"a\"):\n        return \"No\"\n    elif file_name.endswith((\"txt\", \"exe\", \"dll\")) and not file_name.endswith(\".\"):\n        return \"No\"\n    else:\n        return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            result += (i ** 2)\n        elif i % 4 == 0:\n            result += i\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    prime_words = []\n    for word in sentence.split():\n        if len(word) > 1:\n            for i in range(len(word)-1):\n                if word[i] == word[i+1]:\n                    continue\n            else:\n                prime_words.append(word)\n    return \" \".join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    numerator, denominator = map(int, x.split(\"/\"))\n    if denominator == 1:\n        return True\n    elif numerator * denominator == n:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    nums.sort(key=lambda x: sum(int(digit) for digit in str(x)))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    result = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 and num % 100 == 1) or (num % 10 == 1 and num % 100 == 3) or (num % 10 == 3 and num % 100 == 1) or (num % 10 == 3 and num % 100 == 3):\n            result += 1\n    return result"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i*i-i+1 for i in range(1,n+1)]\n    count = 0\n    for i in range(1,n+1):\n        for j in range(i+1,n+1):\n            for k in range(j+1,n+1):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = []\n    if planet1 == \"Jupiter\" and planet2 == \"Neptune\":\n        planets.append(\"Saturn\")\n        planets.append(\"Uranus\")\n    elif planet1 == \"Earth\" and planet2 == \"Mercury\":\n        planets.append(\"Venus\")\n    elif planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        planets.extend([\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        planets.extend([\"Saturn\", \"Venus\", \"Earth\", \"Mars\", \"Mercury\"])\n    elif planet1 == \"Saturn\" and planet2 == \"Neptune\":\n        planets.extend([\"Jupiter\", \"Uranus\", \"Earth\", \"Mars\"])\n    elif planet1 == \"Uranus\" and planet2 == \"Neptune\":\n        planets.extend([\"Saturn\", \"Jupiter\", \"Earth\", \"Mars\"])\n    elif planet1 == \"Neptune\" and planet2 == \"Uranus\":\n        planets.extend([\"Saturn\", \"Jupiter\", \"Earth\", \"Mars\"])\n    elif planet1 == \"Mercury\" and planet2 == \"Saturn\":\n        planets.extend([\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Uranus\"])\n    elif planet1 == \"Venus\" and planet2 == \"Mercury\":\n        planets.extend([\"Earth\", \"Mars\", \"Jupiter\", \"Uranus\", \"Neptune\"])\n    elif planet1 == \"Earth\" and planet2 == \"Saturn\":\n        planets.extend([\"Venus\", \"Mercury\", \"Mars\", \"Jupiter\", \"Uranus\"])\n    elif planet1 == \"Mars\" and planet2 == \"Jupiter\":\n        planets.extend([\"Earth\","}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n % 2 == 0:\n        return y\n    else:\n        return x"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(abs(x)**2 for x in lst if x % 2 == 1 and abs(x) > 1)"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if guess[i]!= game[i] else 0 for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    cap = 0\n    s_cap = 0\n    for ext in extensions:\n        cap = len(ext.upper())\n        s_cap = len(ext.lower())\n        if cap > s_cap:\n            cap -= s_cap\n        if cap == s_cap:\n            if ext in class_name:\n                return class_name + '.' + ext\n            else:\n                return class_name + '.' + extensions[0]"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if a.lower()!= b.lower():\n        return False\n    else:\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i:i+1] in b[j:j+1]:\n                    return True\n        return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    odd_count = 0\n    even_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 2\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numeral_map = {\n        'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000\n    }\n\n    roman_numeral = str(number)\n    roman_numeral_list = roman_numeral.split('')\n\n    for i in range(len(roman_numeral_list)):\n        roman_numeral_list[i] = roman_numeral_map[roman_numeral_list[i]]\n\n    return ''.join(roman_numeral_list).lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if (a + b > c) or (a + c > b) or (b + c > a):\n        return False\n    elif (a - b > c) or (a - c > b) or (b - c > a):\n        return False\n    elif (a**2 + b**2 + c**2 >= ab**2 + bc**2 + ac**2):\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = max(words, key=len)\n    if len(max_word) > max_word.count(' '):\n        return max_word\n    else:\n        return max(words, key=max_word.count)"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining <= 0:\n        return [number, 0]\n    else:\n        return [number + remaining, remaining]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator) == 0:\n        return operand[0]\n    if len(operator) == 1:\n        return operator[0](*operand)\n    result = operand[0]\n    for i in range(1, len(operand)):\n        result = operator[0](result, operand[i])\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = s.lower() if s.isalpha() else s.upper()\n    return result"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if not text:\n        return None\n    else:\n        hash_obj = hashlib.md5()\n        hash_obj.update(text.encode('utf-8'))\n        return hash_obj.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
