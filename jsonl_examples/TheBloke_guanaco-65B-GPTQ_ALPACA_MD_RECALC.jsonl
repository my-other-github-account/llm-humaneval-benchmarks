{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_groups = []\n    group = []\n    for char in paren_string:\n        if char == '(':\n            group.append(char)\n        elif char == ')':\n            paren_groups.append(''.join(group))\n            group.clear()\n    if group:\n        paren_groups.append(''.join(group))\n    return paren_groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - math.floor(number)\n"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    current_balance = 0\n    for operation in operations:\n        current_balance += operation\n        if current_balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = float(sum(numbers)) / len(numbers)\n    deviation = 0.0\n    for number in numbers:\n        deviation += abs(number - mean)\n    return deviation / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i % 2 == 0:\n            result.append(numbers[i])\n        else:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    parens = {'(': 1, ')': -1}\n    stack = []\n    depths = []\n    for char in paren_string:\n        if char in parens:\n            stack.append(parens[char])\n        elif stack:\n            depth = stack.pop()\n            if char == ')':\n                depths.append(len(stack))\n            else:\n                stack.append(depth)\n    return depths"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers))"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    current_max = numbers[0]\n    result.append(current_max)\n    for i in range(1, len(numbers)):\n        if numbers[i] > current_max:\n            current_max = numbers[i]\n            result.append(current_max)\n        else:\n            result[-1] = current_max\n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    while not is_palindrome(string):\n        prefix_len = len(string) // 2\n        suffix_len = len("}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Concat the two strings and split them into individual characters.\n    Apply the bitwise XOR operation to each pair of corresponding characters.\n    Join the resulting list of characters back into a string.\n    \"\"\"\n    a_bits = [e for e in a if e in '01']\n    b_bits = [e for e in b if e in '01']\n    xored_bits = [a_bits[i] ^ b_bits[i] for i in range(len(a_bits))]\n    return ''.join(xored_bits)\n"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Args:\n        string (str): the input string\n\n    Returns:\n        List[str]: a list of all prefixes from shortest to longest of the input string\n\n    \"\"\"\n    prefixes = [string]\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    music_notes = music_string.split('|')\n    beat_counts = []\n    for note in music_notes:\n        if note == '.':\n            beat_counts.append(1)\n        elif note.startswith('o'):\n            beat_counts.append(4)\n        elif note.startswith('.'):\n            beat_counts.append(2)\n    return beat_counts"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    return string.count(substring)"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least 2 elements\")\n    closest_diff = float(\"inf\")\n    closest_numbers = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < closest_diff:\n                closest_diff = diff\n                closest_numbers = (numbers[i], numbers[j])\n    return closest_numbers"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n    min_value = min(numbers)\n    max_value = max(numbers)\n    scale_factor = 1.0 / (max_value - min_value)\n    return [number * scale_factor for number in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    if n <= 1:\n        return 1\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    seen_add = seen.add\n    return [n for n in numbers if seen_add(n) or n not in seen]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return \"\".join(c.upper() if c.islower() else c.lower() for c in string)"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l_div3 = [i for i in l if i % 3 == 0]\n    l_div3.sort()\n    l_rem = [i for i in l if i % 3!= 0]\n    return l_div3 + l_rem"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if i % 7 == 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    l_copy = l[:]\n    for i in range(len(l) // 2):\n        l_copy[2*i] = sorted(l_copy[2*i:2*i+2])\n    return l_copy"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    if n <= 0:\n        return None\n    fib_numbers = [0, 1]\n    for i in range(2, n+1):\n        fib_numbers.append(fib_numbers[i-1] + fib_numbers[i-2])\n    for i in range(len(fib_numbers)-1):\n        if fib_numbers[i] > 0 and fib_numbers[i] % 2 == 0:\n            fib_numbers.pop(i)\n    return fib_numbers[n-1]"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    return len(set(l)) == 3 and sum(l) =="}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Define a function to calculate the number of collisions for two sets of cars\n    def collision_count(left_cars, right_cars):\n        # Initialize a counter to"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [item + 1 for item in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    return any(abs(a - b) == 0 for a in l for b in l if a!= b)"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    if base > 10 or base < 2:\n        raise ValueError(\"Invalid base value\")\n    if x < 0:\n        raise ValueError(\"Negative number not allowed\")\n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result or \"0\""}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n):\n    a = [0, 0, 2, 0]\n    for i in range(4):\n        for j in range(i, n):\n            a[i] += a[i-1]\n    return a[n-1]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n ** n) % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    return ''.join(c for c in text if not c in 'aeiou')"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    if len(s0)!= len(s1):\n        return False\n    unique_chars = set(s0)\n    for char in s1:\n        if char not in unique_chars:\n            return False\n    return True"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def is_increasing(l):\n        for i in range(1, len(l)):\n            if l[i] < l[i-1]:\n                return False\n        return True\n\n    def is_decreasing(l):\n        for i in range(1, len(l)):\n            if l[i] > l[i-1]:\n                return False\n        return True\n\n    if is_increasing(l) or is_decreasing("}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    if n <= 1:\n        return 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i if is_prime(i) else largest_prime_factor(i)\n    return n\n\ndef is_prime(n: int):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"\n    Derivative of a polynomial.\n\n    Args:\n        xs (list): List of coefficients of the polynomial in descending order.\n\n    Returns:\n        list: Derivative of the polynomial in the same form.\n\n    \"\"\"\n    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [sum(xs[i + 1:] * (i + 1) for i in range(n - 1)) / (n - 1)]\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n < 3:\n        return n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    return len([c for c in s if c in 'aeiouy' and (not s.endswith('y') or c!= 'y')])"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[shift:] + str(x)[:shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s.upper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples, oranges = s.split()\n    apples = int(apples)\n    oranges = int(oranges)\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_values = [value for value in arr if value % 2 == 0]\n    if not even_values:\n        return []\n    smallest_index = min(arr, key=lambda x: x // 2)\n    return [smallest_index, arr.index(smallest_index)]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    count = {x: 0 for x in lst}\n    for x in lst:\n        count[x] += 1\n    max_freq = 0\n    for x in lst:\n        if count[x] >= x and count[x] > max_freq:\n            max_freq = count[x]\n    if max_freq == 0:\n        return -1\n    return max(x for x in lst if count[x] == max_freq)"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return lst\n    min_value = min(lst)\n    max_value = max(lst)\n    return [min_value] + [max_value] + strange_sort_list(lst[1:-1])\n"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return round(0.5 * (a + b + c) * (a * b - c * c / 4), 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return (len(set(q)) == 1 and sum(q) <= w)"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    if n % 2 == 1:\n        return 0\n    else:\n        return min(smallest_change(arr[:i]) + 1 for i in range(1, n//2+1) if not is_palindrome(arr[:i]))\n\ndef is_palindrome(arr):\n    return arr == arr[::-1]\n\ndef smallest_change2(arr):\n    n = len(arr)\n    if n % 2 == 1:\n        return 0\n    else:\n        return min(smallest_change2(arr[:i]) + 1 for i in range(1, n//2+1) if not is_palindrome2(arr[:i]))\n\ndef is_palindrome2(arr):\n    return all(arr[i] == arr["}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) == 0 or len(lst2) == 0:\n        return lst1 if len(lst1) == len(lst2) else lst2\n    return [s for s in lst1 if s in lst2 and len(s) <= total_match(lst1[1:], lst2)[0][0].len()]"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 2 or a % 2 == 0:\n        return False\n    for i in range(3, int(a ** 0.5) + 1, 2):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return (x % n == 0 and math.log(x, n) == int(math.log(x, n)))"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return (a ** 3).is_integer()"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for char in num:\n        if char in '0123456789ABCDEF':\n            if char in '2357BDF':\n                count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = f\"db{bin(decimal)[2:]}{db}\"\n    return binary\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    letters = set(s)\n    return len(letters) == 3 and all(c1!= c2!= c3 for c1, c2, c3 in zip(s[0::3], s[1::3], s[2::3]))"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    grade_table = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n    }\n    letter_grades = [grade_table.get(grade, 'E') for grade in grades]\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    return len(string) == 2 or len(string) == 3"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    return int(10**n - 10**(n-1)) // 9"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(N).replace('-', '').zfill(len(bin(N)) - 2)"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    if not lst or len(lst) % 2 == 0:\n        return 0\n    return lst[1::2].sum()"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return''.join(sorted(s.split(), key=lambda x: (ord(x[0]), x)))"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if (len(array) % 2) == 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    return ''.join([chr((ord(c) - 97 + 2) % 26) for c in s])\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) == 1:\n        return None\n    elif len(lst) == 2:\n        return lst[1]\n    else:\n        return sorted(lst)[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    count = 0\n    for sentence in S.split(\".\"):\n        if sentence.startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if not all(map(int, (x, y, z))):\n        return False\n    return x == y + z or y == x + z or z == x + y"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    message = message.lower()\n    for char in message:\n        if char in 'aeiou':\n            char = chr(ord(char) + 2)\n        char = char.upper()\n    return message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,3"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict_):\n    if not dict_:\n        return False\n    return all(isinstance(key, str) and key.islower() for key in dict_) or all(isinstance(key, str) and key.isupper() for key in dict_)"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = [2]\n    for i in range(3, n):\n        if all(i % j!= 0 for j in primes if j <= i):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (a // 10 ** (len(a) - 1)) * (b // 10 ** (len(b) - 1))"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    return sum(c.isupper() and (i % 2 == 0) for i, c in enumerate(s) if c.isalpha())"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    value = float(value)\n    if value.is_integer():\n        return int(value)\n    return int(value + (1 if value > 0 else -1) / 2)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    levels = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = (n + 1) // 2\n        levels.append(n)\n    return levels"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if x == y:\n        return x\n    if x % 2 == 0:\n        return x\n    if y % 2 == 0:\n        return y\n    if x > y:\n        return y\n    return (x + y) // 2"}
{"task_id": "HumanEval/103", "completion": ""}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def is_even(n):\n        return n % 2 == 0\n    \n    return sorted([n for n in x if not is_even(n)])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    sorted_arr = sorted(arr)\n    reversed_arr = sorted_arr[::-1]\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [digit_names[i-1] for i in reversed_arr if i in range(1, 10)]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = [1] * n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result[i] = math.factorial(i)\n        else:\n            result[i] = sum(math.factorial(i) for i in range(1, i + 1))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_palindromes = [i for i in range(1, n+1) if str(i) == str(i)[::-1] and i % 2 == 0]\n    odd_palindromes = [i for i in range(1, n+1) if str(i) == str(i)[::-1] and i % 2!= 0]\n    return len(even_palindromes), len(odd_palindromes)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return len([n for n in arr if sum(n) > 0])"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    if len(set(arr))!= len(arr):\n        return False\n    if arr[0] >= arr[1]:\n        return False\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    even_count = len([x for x in lst1 if x % 2 == 0])\n    if even_count == len(lst1):\n        return \"YES\"\n    if even_count == 0:\n        return \"NO\"\n    for i in range(len(lst2)):\n        if lst2[i] % 2 == 0:\n            if lst1[i] % 2 == 1:\n                lst1[i], lst2[i] = lst2[i], lst1[i]\n                even_count += 1\n                if even_count == len(lst1):\n                    return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    return counts"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Deleting all the characters in s that are equal to any character in c\n    s = ''.join(c for c in set(s) if c not in set(c))\n\n    # Checking if the result string is palindrome\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    output = []\n    for i in range"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    return min(sum(nums[i:j+1]) for i in range(len(nums)) for j in range(i, len(nums)) if j-i+1)"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\""}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set('aeiou')\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels and word[-1] not in vowels:\n            return word[i]\n    return ''"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for char in lst[0] + lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort()\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(elem for i, elem in enumerate(lst) if i % 2 == 0 and i!= 0 and elem % 2 == 1)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(arr[:k])"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    month, day, year = date.split(\"-\")\n    if month not in range(1, 13):\n        return False\n    if day not in range(1, 32 if (month in [1, 3, 5, 7, 8, 10, 12]) else 31 if (month in [4, 6, 9, 11]) else 29 if (month == 2) else 0):\n        return False\n    if year not in range(1900, 2021):\n        return False\n    if len(date)!= 10 or date[2]!= \"/\":\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if'' in txt:\n        return txt.split()\n    if ',' in txt:\n        return txt.split(',')\n    return len([c for c in txt if not (c.isupper() or c.isdigit()) and ord(c) % 2 == 1])"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(set(lst))!= len(lst):\n        return False\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if not interval1[1] >= interval1[0] or not interval2[1] >= interval2[0]:\n        return \"NO\"\n    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    return \"YES\" if math.gcd(interval1[1] - interval1[0] + 1, interval2[1] - interval2[0] + 1)!= 1 else \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    return sum(abs(x) for x in arr) * reduce(lambda x, y: x * y, signs)"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    def get_paths(grid, k, path, visited):\n        if len(path) == k:\n            if not visited:\n                return path\n            else:\n                return None\n\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] not in visited and (i == 0 or grid[i-1][j] or grid[i][j-1] or grid[i][j+1] or grid[i-1][j-1] or grid[i-1][j+1]):\n                    visited.append(grid[i][j])\n                    path.append(grid[i][j])\n                    if get_paths(grid, k, path, visited):\n                        return path\n                    visited.pop()\n\n    visited ="}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    a = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            a.append(i // 2 + 1)\n        else:\n            a.append(a[-1] + a[-2] + a[i - 1])\n    return a"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    n_str = str(n)\n    odd_digits = [int(digit) for digit in n_str if int(digit) % 2 == 1]\n    return 1 if len(odd_digits) > 0 and all(odd_digits) else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n    \"\"\"\n    return sum(int(math.ceil(x))**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    words = txt.split()\n    last_char = txt[-1]\n    return last_char.isalpha() and not words[-1].endswith(last_char)"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] > arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    positive = [x for x in lst if x > 0]\n    negative = [x for x in lst if x < 0]\n    if positive:\n        return (max(positive), min(positive))\n    if negative:\n        return (min(negative), None)\n    return (None, None)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        return a if float(a) > float(b) else b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n    elif isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return (n % 2 == 0 and n >= 8) or (n // 2 + n // 4 == n and n >= 12)"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n <= 0:\n        return 1\n    return n * special_factorial(n-1)\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    if not re.search(r'^\\w+\\.', file_name):\n        return 'No'\n    ext = file_name.split('.')[-1]\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum(i ** 2 for i in lst if not (len(lst) - 1) % (i // 3 or i % 4))"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if all(ord(c) in {'a', 'e', 'i', 'o', 'u'} for c in word) and len(word) == 2]\n    return''.join(prime_words)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_den = x.split(\"/\")\n    n_num, n_den = n.split(\"/\")\n    if x_den == n_den:\n        return True\n    if x_den == \"1\" or n_den == \"1\":\n        return False\n    if int(x_num) * int(n_den) == int(n_num) * int(x_den):\n        return True\n    return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    nums.sort(key=lambda x: (x, len(str(x)) if str(x) else 0))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 2!= 0 and num % 2!= 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return len([(i, j, k) for i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0])"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    if planet1 == planet2:\n        return ()\n    if planet1 > planet2:\n        planet1, planet2 = planet2, planet1\n    planets = [planet for planet in planets if planet1 < planet < planet2]\n    return planets"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted(lst, key=len, reverse=True)"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    return x if is_prime(n) else y\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(n ** 2 for n in lst if n > 0 and n % 2 == 1)"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    extensions.sort(key=lambda x: (x.upper().count('A') - x.lower().count('a'), x))\n    return f\"{class_name}.{extensions[0]}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if len(a) < len(b):\n        return False\n    if b in a:\n        return True\n    for i in range(len(b)):\n        if a[i:i + len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    count_even = 0\n    count_odd = 0\n    while num:\n        digit = num % 10\n        if digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num //= 10\n    return count_even, count_odd"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    if number < 1 or number > 1000:\n        raise ValueError(\"Number must be between 1 and 1000\")\n    roman_numeral = \"\"\n    if number < 5:\n        roman_numeral = {\"I\": 1, \"II\": 2, \"III\": 3, \"IV\": 4, \"V\": 5}[number]\n    else:\n        roman_numeral = int_to_mini_roman(number // 5) + int_to_mini_roman(number % 5)\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return (a * a) + (b * b) == (c * c)"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    unique_chars = [len(set(word)) for word in words]\n    max_unique_chars = max(unique_chars)\n    max_words = [word for word in words if len(set(word)) == max_unique_chars]\n    return max(max_words, key=lambda x: x)"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if need > remaining:\n        need = remaining\n    if need - number > 0:\n        return [number + need, need]\n    return [number, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    expression = operand[0]\n    for i in range(1, len(operand)):\n        operator_i = operator[i-1]\n        if operator_i == '+':\n            expression = expression + operand[i]\n        elif operator_i == '-':\n            expression = expression - operand[i]\n        elif operator_i == '*':\n            expression = expression * operand[i]\n        elif operator_i == '//':\n            expression = expression // operand[i]\n        elif operator_i == '**':\n            expression = expression ** operand[i]\n    return expression"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not any(c.isalpha() for c in s) else ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s)"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        return []\n    if a % 2 == 0 and b % 2 == 0:\n        return [i for i in range(a // 2, b // 2 + 1) if i % 2 == 0]\n    else:\n        return [i for i in range(a, b + 1) if i % 2 == 0]"}
