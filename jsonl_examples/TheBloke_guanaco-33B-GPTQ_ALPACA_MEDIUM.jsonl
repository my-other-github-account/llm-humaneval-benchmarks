{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1]!= '(':\n                stack.pop()\n            if not stack:\n                paren_groups.append(char)\n                stack.append(char)\n        elif char =='':\n            pass\n        else:\n            raise ValueError(f'Unexpected character {char}')\n    return paren_groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return truncate_number(abs(number))\n\n"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        if operation < 0:\n            return True\n        balance += operation\n    return balance >= 0\n\n"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [*numbers, delimeter, *[numbers[i+1] for i in range(len(numbers)-1)]]\n\n"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    # TODO: Complete the function\n    #...\n\n    return output"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n\n"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    return [max(num for num in numbers[i:]) for i in range(len(numbers))]\n\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    # Find the longest palindromic postfix of the string\n    postfix_length = 0\n    postfix = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:len(string)]):\n            postfix_length = i\n            postfix = string[i:len(string)]\n\n    # Find the longest palindromic prefix of the string\n    prefix_length = 0\n    prefix = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[0:i]):\n            prefix_length = i\n            prefix = string[0:i]\n\n    # Reverse the string prefix and append it to the palindromic postfix\n    return prefix[::-1] + postfix\n\n"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert a and b, \"Input strings cannot be empty\"\n    assert set(a) | set(b) == set('01'), \"Input strings cannot contain other characters\"\n    return ''.join(\n        c if c in a and c not in b or c not in a and c in b else''\n        for c in '01'\n    )\n\n\n"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    return max(strings, key=len)\n\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    # Your code here\n    while a!= 0 and b!= 0:\n        if a > b:\n            a, b = b, a\n        if a % b == 0:\n            a, b = b, a\n    return a"}
{"task_id": "HumanEval/14", "completion": "def all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['c', 'b', 'a']\n    \"\"\"\n\n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return''.join(str(i) for i in range(0, n+1))\n\n"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o o|.|.|.| o o| o"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x) if x in ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine'] else 1000000000, reverse=True)\n    return''.join(numbers)\n\n"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must have at least two elements\")\n\n    numbers.sort()\n    first_index = 0\n    second_index = 1\n    first_number = numbers[first_index]\n    second_number = numbers[second_index]\n\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - first_number) < abs(numbers[first_index] - second_number):\n            first_index = i\n            first_number = numbers[i]\n        elif abs(numbers[i] - second_number) < abs(numbers[second_index] - first_number):\n            second_index = i\n            second_number = numbers[i]\n\n    return (first_number, second_number)"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must have at least two elements\")\n\n    min_val, max_val = min(numbers), max(numbers)\n    scale_factor = 1.0 / (max_val - min_val)\n    return [min_val + (x - min_val) * scale_factor for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n\n"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": ""}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        factor = 2\n        while n % factor == 0:\n            factors.append(factor)\n            n //= factor\n        if n == 1:\n            break\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return [*set(numbers)][:len(numbers)]\n\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join(\n        {\n            ''.join(\n                [\n                    ''.join(\n                        [\n                            ''.join(\n                                [\n                                    ''.join(\n                                        [\n                                            ''.join(\n                                                [\n                                                    ''.join(\n                                                        [\n                                                            ''.join(\n                                                                [\n                                                                    ''.join(\n                                                                        [\n                                                                            ''.join(\n                                                                                [\n                                                                                    ''.join(\n                                                                                        [\n                                                                                            ''.join(\n                                                                                                [\n                                                                                                    ''.join(\n                                                                                                        [\n                                                                                                            ''.join(\n                                                                                                                [\n                                                                                                                    ''.join(\n                                                                                                                        [\n                                                                                                                            ''.join(\n                                                                                                                                [\n                                                                                                                                    ''.join(\n                                                                                                                                        [\n                                                                                                                                            ''.join(\n                                                                                                                                                [\n                                                                                                                                                    ''.join(\n                                                                                                                                                        [\n                                                                                                                                                            ''.join(\n                                                                                                                                                                [\n                                                                                                                                                                    ''.join(\n                                                                                                                                                                        [\n                                                                                                                                                                            ''.join(\n                                                                                                                                                                                [\n                                                                                                                                                                                    ''.join(\n                                                                                                                                                                                        [\n                                                                                                                                                                                            ''.join(\n                                                                                                                                                                                                [\n                                                                                                                                                                                "}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n\n"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return_list = []\n    for item in l:\n        if item > 0:\n            return_list.append(item)\n    return return_list\n\n"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 == 1:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if max(xs) < 0:\n        raise ValueError(\"find_zero only guarantees a solution when largest non zero coefficient is positive\")\n\n    x_guess = 0\n    while poly(xs, x_guess)!= 0:\n        x_guess += 0.1\n    return x_guess"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    return sorted(l[i:i+3] for i in range(len(l)//3))"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    divisors = [11, 13]\n    count = 0\n    for i in range(1, n + 1):\n        for divisor in divisors:\n            if i % divisor == 0:\n                count += 1\n                break\n    return count\n\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    return sorted(l[::2])\n\n\ndef sort_even(l: list):\n    return sorted(l[::2])"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    return s"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\n    # TODO: Complete the function\n\n    # define the Fibonacci sequence\n    def fib(n):\n        a = 0\n        b = 1\n        while n > 0:\n            n -= 1\n            a, b = b, a + b\n        return a\n\n    # define the prime numbers\n    def is_prime(n):\n        if n < 2:\n            return False\n        return all(n % i for i in range(2, int(n ** 0.5) + 1))\n\n    # find the n-th Fibonacci number that is also prime\n    for i in range(1, n + 1):\n        if is_prime(fib(i)):\n            return fib(i)\n\n    return None\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # TODO\n    pass\n\n"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    # Imagine a road that's a perfectly straight infinitely long line.\n    # n cars are driving left to right;  simultaneously, a different set of n cars\n    # are driving right to left.   The two sets of cars start out being very far from\n    # each other.  All cars move in the same speed.  Two cars are said to collide\n    # when a car that's moving left to right hits a car that's moving right to left.\n    # However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    # in their trajectory as if they did not collide.\n\n    # This function outputs the number of such collisions.\n    if n == 0:\n        return 0\n    else:\n        return (n - 1) * car_race_collision(n - 1) + 1"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    if base < 2:\n        raise ValueError(\"base must be greater than or equal to 2\")\n    \n    # convert to string\n    x_str = str(x)\n    \n    # convert to base\n    return_val = \"\"\n    while x_str!= \"\":\n        # get the last digit\n        last_digit = int(x_str[-1])\n        \n        # convert to base\n        return_val = (last_digit // base) + return_val\n        x_str = x_str[:-1]\n    \n    return return_val"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    c = (a ** 2 + h ** 2).sqrt()\n    return a ** 2 * h / 2\n\n\ndef triangle_area(a, h):\n    c = (a ** 2 + h ** 2).sqrt()\n    return (a ** 2 + h ** 2) / 2\n\n\ndef triangle_area(a, h):\n    c = (a ** 2 + h ** 2).sqrt()\n    return (a ** 2 + h ** 2) / 2\n\n\ndef triangle_area(a, h):\n    c = (a ** 2 + h ** 2).sqrt()\n    return (a ** 2 + h ** 2) / 2\n\n\ndef triangle_area(a, h):\n    c = (a ** 2 + h ** 2).sqrt()\n    return (a ** 2 + h ** 2) / 2\n\n\ndef triangle_area(a, h):\n    c = (a ** 2 + h ** 2).sqrt()\n    return (a ** 2 + h ** 2) / 2\n\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return float(\"inf\")\n    if len(l) == 1:\n        return l[0]\n    if len(l) % 2 == 0:\n        return (l[(len(l) // 2) - 1] + l[(len(l) // 2)]) / 2\n    else:\n        return l[(len(l) // 2)]\n\n"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p\n\n"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) - ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(c for c in text if c not in vowels)\n\n\ndef remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(c for c in text if c not in vowels)\n\n\ndef remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(c for c in text if c not in vowels)\n\n\ndef remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(c for c in text if c not in vowels)\n\n\ndef remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(c for c in text if c not in vowels)\n\n\ndef remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(c for c in text if c not in vowels)\n\n"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.6666666666666666\n    >>> divide(5, 7)\n    0.7142857142857143\n    \"\"\"\n    return x / y\n\n\ndef modulus(x: int, y: int):\n    \"\"\"Find the modulus of two numbers x and y\n    >>> modulus(2, 3)\n    2\n    >>> modulus(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef power(x: int, y: int):\n    \"\"\"Raise a number x to the power of y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    125\n    \"\"\"\n    return x ** y\n\n"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    if len(s0)!= len(s1):\n        return False\n    return all(c in s1 for c in s0) and all(c in s0 for c in s1)\n\n"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    a = 0\n    b = 1\n    i = 1\n    while i < n:\n        i += 1\n        t = a + b\n        a = b\n        b = t\n    return t\n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    count_left = brackets.count(\"<\")\n    count_right = brackets.count(\">\")\n    if count_left!= count_right:\n        return False\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n    if l[0] == l[-1]:\n        return True\n    if all(x <= y for x, y in zip(l[1:], l[:-1])):\n        return True\n    if all(x >= y for x, y in zip(l[1:], reversed(l[:-1]))):\n        return True\n    return False\n\n"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return None\n    if n == 2:\n        return 2\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n - 1\n\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n\n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    count_left = brackets.count('(')\n    count_right = brackets.count(')')\n    if count_left == count_right:\n        return True\n    else:\n        return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n    if len(xs) == 0:\n        return []\n\n    if len(xs) == 1:\n        return [xs[0]]\n\n    return [xs[i] * (i + 1) for i in range(len(xs) - 1)]\n\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1 or n == 2:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for letter in s:\n        if letter in vowels or (letter == 'y' and s.endswith(letter)):\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    if shift >= len(x):\n        return reversed(x)\n    return ''.join([x[i:i + shift] for i in range(len(x))])\n\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) - ord('0') for c in s if c.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    fruit_counts = {\n        \"apples\": 0,\n        \"oranges\": 0,\n        \"mangoes\": 0,\n    }\n    for fruit, count in [x.split(\" \") for x in s.split(\",\"):\n        fruit_counts[fruit] = int(count)\n    return n - sum(fruit_counts.values())"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_nodes = [node for node in arr if node % 2 == 0]\n    if len(even_nodes) == 0:\n        return [0, 0]\n    smallest_even_node = min(even_nodes, key=lambda node: node[1])\n    return [smallest_even_node[0], smallest_even_node[1]]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    # define a dictionary to count the frequency of each number in the list\n    freq = {}\n    for num in lst:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n\n    # find the greatest number that has a frequency greater than or equal to its value\n    greatest_num = 0\n    for num, freq_num in freq.items():\n        if freq_num >= num and greatest_num < num:\n            greatest_num = num\n\n    # if no such number exists, return -1\n    if greatest_num == 0:\n        return -1\n    else:\n        return greatest_num"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    else:\n        sorted_list = []\n        min_val = min(lst)\n        sorted_list.append(min_val)\n        new_lst = [i for i in lst if i!= min_val]\n        sorted_list.extend(strange_sort_list(new_lst))\n        return sorted_list"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a + b) >= c and (a + c) >= b and (b + c) >= a:\n        return round(0.5 * (a * b), 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if not is_balanced(q):\n        return False\n    total_weight = sum(q)\n    return total_weight <= w\n\n\ndef is_balanced(q):\n    return q[0::2] == [*reversed(q[1::2])]"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n-1, -1):\n            if arr[i]!= arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n    return n - arr.count(arr[0])"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst2\n\n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 100:\n        factors = [i for i in range(1, a+1) if a % i == 0]\n        if len(factors) == 3 and all(i in [2, 3, 5] for i in factors):\n            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == round(n**(1/x))"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return a == 0 or a == (int(a / 3) ** 3)\n"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    hex_digits = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for digit in num:\n        if digit in hex_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:].zfill(10) + \"db\"\n\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) // 3):\n        if s[i * 3:(i + 1) * 3].count(s[i * 3:(i + 1) * 3]) >= 2:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    gpa_letters = {\n        4.0: 'A+',\n        '> 3.7': 'A',\n        '> 3.3': 'A-',\n        '> 3.0': 'B+',\n        '> 2.7': 'B',\n        '> 2.3': 'B-',\n        '> 2.0': 'C+',\n        '> 1.7': 'C',\n        '> 1.3': 'C-',\n        '> 1.0': 'D+',\n        '> 0.7': 'D',\n        '> 0.0': 'D-',\n        0.0: 'E'\n    }\n\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append(gpa_letters[4.0])\n        elif gpa >= 3.7:\n            letter_grades.append(gpa_letters['> 3.7'])\n        elif gpa >= 3.3:\n            letter_grades.append(gpa_letters['> 3.3'])\n        elif gpa >= 3.0:\n            letter_grades.append(gpa_letters['> 3.0'])\n        elif gpa >= 2.7:\n            letter_grades.append(gpa_letters['> 2.7'])\n        elif gpa >= 2.3:\n            letter_grades.append(gpa_letters['> 2.3'])\n        elif gpa >= 2.0:\n            letter_grades.append(gpa_letters['> 2.0'])\n        elif gpa >= 1.7:\n            letter_grades.append(gpa_letters['> 1.7'])\n        elif gpa >= 1.3:\n            letter_grades.append(gpa_letters['> 1.3'])\n        elif gpa >= 1.0:\n            letter_grades.append(gpa_"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    return len(string) not in [3, 5, 7]\n\n"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, n + 1):\n        if i[0] == '1' or i[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_representation = bin(N)[2:].zfill(32)\n    return sum(int(x) for x in binary_representation.split('0b'))"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(x for x in lst if x % 2 == 0 and x >= 0)\n\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ''.join(sorted(i) for i in s.split())"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    def get_coordinates(row):\n        return [(i, j) for i, j in enumerate(row) if i == x]\n\n    def sort_coordinates(coordinates):\n        return sorted(coordinates, key=lambda tup: (tup[0], -tup[1]))\n\n    if not lst:\n        return []\n\n    coordinates = [get_coordinates(row) for row in lst if row[x]]\n    return sorted(itertools.chain.from_iterable(coordinates), key=sort_coordinates)\n\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    middle = len(array) // 2\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = [alphabet[i+2*j for j in range(len(alphabet))] for i in range(len(alphabet))]\n    return ''.join([rotated_alphabet.index(c) for c in s])"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    return min(lst[1:], default=lst[-1])"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    for word in S.split():\n        if word.strip().startswith(\"I\") and (word.endswith(\".\") or word.endswith(\"?\") or word.endswith(\"!\")):\n            boredoms += 1\n    return boredoms\n\n"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if (x + y == z or x + z == y or y + z == x) and (x, y, z).all_integers:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = \"\"\n    for letter in message:\n        if letter.isalpha():\n            if letter.isupper():\n                encoded_letter = letter.lower()\n            else:\n                encoded_letter = chr(ord(letter) + 2)\n            encoded_message += encoded_letter\n        else:\n            encoded_message += letter\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    # find the largest prime number in the list\n    largest_prime = max(\n        [\n            n\n            for n in lst\n            if is_prime(n)\n        ]\n    )\n\n    # return the sum of the digits of the largest prime number\n    return sum(\n        [\n            digit\n            for digit in str(largest_prime)\n        ]\n    )\n\n\ndef is_prime(n):\n    # check if n is a prime number\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    if all(isinstance(key, str) for key in keys):\n        lower_keys = [key.lower() for key in keys]\n        upper_keys = [key.upper() for key in keys]\n        if set(lower_keys) == set(keys) or set(upper_keys) == set(keys):\n            return True\n    return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n == 0:\n        return []\n    primes = [2, 3]\n    for i in range(3, int(n ** 0.5) + 1):\n        if n % i!= 0:\n            primes.append(i)\n    return primes[:n]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    if a < 10 and b < 10:\n        return a * b\n    a = str(a)\n    b = str(b)\n    return int(a[0]) * int(b[0])"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    try:\n        return int(float(value))\n    except ValueError:\n        return 0"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n, n//2 + 1, n//2 + 2]\n    else:\n        return [n, n + 1, n + 3]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(maxsplit=0)"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x >= y:\n        return -1\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)[2:].zfill(len(bin(avg)))[::-1].replace('b', '')"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted(set([i for i in x if not any(i % 2 == 0 for j in str(i).split(''))]))\n\n"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    else:\n        sorted_arr = sorted(arr)\n        if sorted_arr[0] < 1 or sorted_arr[-1] > 9:\n            return ['One']\n        else:\n            sorted_arr = sorted_arr[::-1]\n            return [f'{i+1}'for i in sorted_arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    return [\n        i * (i % 2 == 0) for i in range(1, n + 1)\n    ]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    nums_with_positive_sum = 0\n    for num in arr:\n        if num >= 0:\n            num_digits = len(str(num))\n            num_digits_sum = sum(int(d) for d in str(num))\n            if num_digits_sum > 0:\n                nums_with_positive_sum += 1\n    return nums_with_positive_sum"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n):\n        if arr[i] >= arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    return \"YES\" if all(x % 2 == 0 for x in sorted(lst1 + lst2))"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    histogram_dict = {}\n    test_list = test.split()\n    for letter in set(test_list):\n        if letter in histogram_dict:\n            histogram_dict[letter] += 1\n        else:\n            histogram_dict[letter] = 1\n    return histogram_dict"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Create a set of characters to delete\n    deleted_chars = set(c)\n    \n    # Loop through each character in s\n    for i in range(len(s)):\n        # If the character is not in the set of deleted characters, keep it\n        if s[i] not in deleted_chars:\n            # Keep track of the new string\n            new_string = s[0:i] + s[i+1:]\n            \n        # If the character is in the set of deleted characters, delete it\n        else:\n            new_string = s[0:i] + s[i+1:]\n    \n    # Return the new string and whether it is a palindrome\n    return (new_string, new_string == new_string[::-1])"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [\n        f\"the number of odd elements {count} in the string {i} of the input.\"\n        for i, count in enumerate(\n            [\n                len(\n                    filter(\n                        lambda x: x % 2!= 0,\n                        [int(x) for x in re.findall(r\"[0-9]+\", lst[i])],\n                    )\n                )\n                for i, lst in enumerate(lst)\n            ]\n        )\n    ]\n\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # initialize the minimum sum to the first element in the array\n    minimum_sum = nums[0]\n\n    # loop through all the elements in the array\n    for i in range(1, len(nums)):\n        # if the current element is less than the minimum sum, update the minimum sum\n        if nums[i] < minimum_sum:\n            minimum_sum = nums[i]\n\n        # if the current element is greater than the minimum sum, update the minimum sum\n        # with the sum of the current element and the minimum sum\n        if nums[i] > minimum_sum:\n            minimum_sum = minimum_sum + nums[i]\n\n    return minimum_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    buckets = [[] for _ in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                buckets[i].append(1)\n    while buckets:\n        for i in range(rows):\n            if buckets[i] and capacity >= 1:\n                capacity -= 1\n                buckets[i] = [x for x in buckets[i] if x < capacity]\n    return capacity"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: int(bin(x)[2:].count('1'), 2), reverse=True)\n\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = []\n    for word in s.split():\n        if len(word) == n:\n            words.append(word)\n    return words"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'aeiou'\n    word = word.lower()\n    for i in range(len(word)):\n        if word[i] in vowels and word[i] not in 'aeiou':\n            return word[i]\n    return ''"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    if len(lst) == 0:\n        return \"No\"\n    if len(lst) == 1:\n        return \"Yes\" if lst[0] == \")\" else \"No\"\n    if lst[0] == \"(\" and lst[1] == \")\":\n        return match_parens(lst[2:])\n    if lst[0] == \")\" and lst[1] == \"(\":\n        return match_parens(lst[1:])\n    return \"No\""}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    if k >= len(arr):\n        return arr[:k]\n    else:\n        return sorted(arr[k:])[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(x for x in lst if x % 2 == 1 and x % 2 == 0)\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(x for x in arr[0:k] if x < 100 and x // 10 in [2, 5])\n\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    odd_collatz = []\n    while n!= 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3*n + 1\n        if n not in odd_collatz:\n            odd_collatz.append(n)\n    return sorted(odd_collatz)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"\n    Check if the date is valid\n    :param date: date in the format of mm-dd-yyyy\n    :return: True if the date is valid, False otherwise\n    \"\"\"\n    try:\n        day, month, year = [int(x) for x in date.split('-')]\n    except ValueError:\n        return False\n\n    if not date:\n        return False\n\n    if not (1 <= day <= 31 and 1 <= month <= 12 and 1970 <= year <= 2023):\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12] and day not in [1, 30, 31]:\n        return False\n\n    if month in [4, 6, 9, 11] and day not in [1, 30, 29]:\n        return False\n\n    if month == 2 and day not in [1, 29]:\n        return False\n\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if txt.count(' ') > 0:\n        return txt.split()\n    elif txt.count(',') > 0:\n        return txt.split(',')\n    else:\n        return [i for i in txt.lower() if ord(i) % 2 == 1]"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) == 0:\n        return True\n    if len(lst) == 1:\n        return True\n    if len(lst) > 1:\n        for i in range(1, len(lst)):\n            if lst[i - 1] > lst[i]:\n                return False\n        return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[1] >= interval2[0] or interval2[1] >= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    magnitude = [abs(x) for x in arr]\n    product = [x * (x > 0 - 1) for x in magnitude]\n    return sum(product)"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # Start from any cell\n    start = (0, 0)\n    # Find the minimum path of length k\n    path = [grid[start[0]][start[1]]]\n    min_path = [grid[start[0]][start[1]]]\n    for _ in range(k):\n        # Find the cell with the minimum value\n        cell = (0, 0)\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == path[-1] and (i, j) not in path:\n                    cell = (i, j)\n                    break\n        path.append(grid[cell[0]][cell[1]])\n        if len(path) == k:\n            min_path = path\n            break\n    return min_path"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return []\n    if n % 2 == 0:\n        return [1] + tri(n // 2)\n    else:\n        return [1] + tri(n - 1) + tri(n - 2) + tri(n + 1)"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    odd_digits = [d for d in str(n) if not d.isdigit()]\n    if len(odd_digits) == 0:\n        return 0\n    return reduce(lambda x, y: x * int(y), odd_digits, 1)"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum([i**2 for i in lst if i >= 0])"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Get the last character of the string\n    last_char = txt[-1]\n    \n    # Check if the last character is an alphabetical character\n    if last_char.isalpha():\n        # Check if the last character is not part of a word\n        if not last_char in txt.split():\n            return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n    if negative_integers:\n        a = max(negative_integers)\n    else:\n        a = None\n    if positive_integers:\n        b = min(positive_integers)\n    else:\n        b = None\n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, int) and isinstance(b, int):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    else:\n        raise ValueError(\"Invalid input type\")"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    even_numbers = (2, 4, 6, 8, 10, 12, 14, 16, 18, 20)\n    return n in [x for x in even_numbers if x <= n]"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\n\ndef brazilian_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (n-1) * brazilian_factorial(n-2)\n\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\n\ndef brazilian_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (n-1) * brazilian_factorial(n-2)\n\n\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\n\ndef brazilian_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (n-1) * brazilian_factorial(n-2)\n\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    return re.sub(r\" +\", \"_\", re.sub(r\" {2,}\", \"-\", text))\n\n"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3 and file_name.count('.')!= 1:\n        return 'No'\n    if not (file_name[0].isalpha() and file_name.endswith(('txt', 'exe', 'dll'))):\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] *= lst[i]\n        if i % 4 == 0 and i % 3!= 0:\n            lst[i] *= lst[i] * lst[i]\n        total += lst[i]\n    return total"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if is_prime(len(word)):\n            result += word + \" \"\n    return result.rstrip()\n\n\ndef is_prime(n):\n    if n == 1 or n == 2 or n % 1:\n        return True\n    return all(n % i for i in range(2, int(n ** 0.5) + 1))"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    try:\n        num1 = float(x.split('/')[0])\n        den1 = float(x.split('/')[1])\n        num2 = float(n.split('/')[0])\n        den2 = float(n.split('/')[1])\n        if num1 == int(num1) and den1 == int(den1) and num2 == int(num2) and den2 == int(den2):\n            return num1 * num2 == int(num1 * num2)\n        else:\n            return False\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Sort the list according to the sum of their digits\n    nums = sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n    # If there are several items with the same sum of their digits,\n    # order them based on their index in the original list\n    return sorted(nums, key=lambda x: (nums.index(x), x))\n\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    nums = [x for x in nums if x > 10 and (x % 10) in (1, 3, 5, 7, 9)]\n    return len(nums)\n\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(n)]\n    return len(\n        filter(\n            lambda x, y, z: x + y + z % 3 == 0 and y > x and z > y,\n            itertools.combinations(a, 3),\n        )\n    )"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    if planet1 == planet2:\n        return (planet1,)\n    between_planets = [p for p in planets if p!= planet1 and p!= planet2 and (planet1 in planet_orbits(p) and planet2 in planet_orbits(p) or planet2 in planet_orbits(p) and planet1 in planet_orbits(p))]\n    return tuple(sorted(between_planets, key=lambda p: get_distance_from_sun(p)))\n\n\ndef planet_orbits("}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted(set([x for x in lst if len(x) % 2 == 0]))"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n is True:\n        return x\n    else:\n        return y\n\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    total = 0\n    for i in lst:\n        if i % 2 == 1 and isinstance(i, int):\n            total += i ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    score_guess_pairs = list(zip(game, guess))\n    return [abs(score - guess) for score, guess in score_guess_pairs if score!= guess]\n\n"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_extension_strength = 0\n    for extension in extensions:\n        extension_strength = len(extension) - len(extension.lower())\n        if strongest_extension is None or strongest_Extension_strength < extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = extension_strength\n\n    return f'{class_name}.{strongest_extension}'\n\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    a_len = len(a)\n    b_len = len(b)\n    if a_len < b_len:\n        return False\n    for i in range(a_len):\n        if b in a[i:a_len-b_len+1:a_len-b_len+1] or b in a[::-1][i:a_len-b_len+1:a_len-b_len+1]:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    count_even = 0\n    count_odd = 0\n    while num > 0:\n        last_digit = num % 10\n        num //= 10\n        if last_digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000:'m'\n    }\n\n    roman_numeral = ''\n    while number > 0:\n        for key, value in roman_numerals.items():\n            if number >= key:\n                roman_numeral += value\n                number -= key\n                break\n\n        if number == 0:\n            break\n\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if (a == b) and (b == c):\n        return True\n    elif (a == c) and (b == c):\n        return True\n    elif (a == b) and (a == c):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    unique_chars = {}\n    max_word = None\n    for word in words:\n        unique_chars.update(set(word))\n        if len(unique_chars) == len(set(words[0])):\n            max_word = word\n            unique_chars = {}\n\n    return max(words, key=lambda x: x.lower())"}
{"task_id": "HumanEval/159", "completion": "def get_next_palindrome(x):\n    if x < 1000:\n        return (x * 10 + 1) * 10 + 1\n    else:\n        return (x // 1000 * 1000 + 1) * 1000 + 1\n\n"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"The length of operator list is not equal to the length of operand list minus one.\")\n    if any(x < 0 for x in operand):\n        raise ValueError(\"Operand is a list of of non-negative integers.\")\n    if len(operator) < 1 or len(operand) < 2:\n        raise ValueError(\"Operator list has at least one operator, and operand list has at least two operands.\")\n    result = 0\n    for i in range(len(operand) - 1):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '/':\n            result /= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    return ''.join(\n        (c.upper() if c.isalpha() and c.lower()!= c else c)\n        for c in s[::-1]\n    )"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        return []\n    return [a, a + 2, a + 4, a + 6, b]"}
