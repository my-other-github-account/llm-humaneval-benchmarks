{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n given threshold.\n \"\"\"\n numbers.sort() # sort the list in ascending order\n for i in range(len(numbers)-1):\n if numbers[i] < numbers[i+1] < numbers[i] + threshold:\n return True\n return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n separate those group into separate strings and return the list of those.\n Separate groups are balanced (each open brace is properly closed) and not nested within each other\n Ignore any spaces in the input string.\n >>> separate_paren_groups('( ) (( )) (( )( ))')\n ['()', '(())', '(()())']\n \"\"\"\n # Remove any spaces from the input string\n paren_string = paren_string.replace(\" \", \"\")\n \n # Define a stack to keep track of nested parentheses\n stack = []\n \n # Define a list to store the separated groups\n separated_groups = []\n \n # Loop through each character in the input string\n for char in paren_string:\n # If the character is an opening parenthesis\n if char == \"(\":\n # If the stack is empty, add the opening parenthesis to the separated groups\n if not stack:\n separated_groups.append(\"(\")\n # Push the opening parenthesis onto the stack\n stack.append(\"(\")\n # If the stack is not empty and the top of the stack is also an opening parenthesis, add the opening parenthesis to the separated groups\n elif stack and stack[-1] == \"(\":\n separated_groups.append(\"(\")\n # Push the opening parenthesis onto the stack\n stack.append(\"(\")\n # If the stack is not empty and the top of the stack is a closing parenthesis, add the separated group to the list of separated groups and pop the stack\n elif stack and stack[-1] == \")\":\n separated_group = \"\".join(stack)\n separated_groups.append(separated_group)\n stack.pop()\n # If the character is a closing parenthesis\n elif char == \")\":\n # If the stack is not empty and the top of the stack is an opening parenthesis, add the closing parenthesis to the separated groups\n if stack:\n if stack[-1] == \"(\":\n separated_groups.append(\")\")\n stack.pop()\n # If the stack is not empty and the top of the stack is a closing"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n \"\"\" Given a positive floating point number, it can be decomposed into\n and integer part (largest integer smaller than given number) and decimals\n (leftover part always smaller than 1).\n\n Return the decimal part of the number.\n >>> truncate_number(3.5)\n 0.5\n \"\"\"\n integer_part = int(number)\n decimal_part = number - integer_part\n return decimal_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n at that point function should return True. Otherwise it should return False.\n >>> below_zero([1, 2, 3])\n False\n >>> below_zero([1, 2, -4, 5])\n True\n \"\"\"\n balance = 0\n for operation in operations:\n if operation < 0:\n balance += operation\n if balance < 0:\n return True\n return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n around the mean of this dataset.\n Mean Absolute Deviation is the average absolute difference between each\n element and a centerpoint (mean in this case):\n MAD = average | x - x_mean |\n \n >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n 1.0\n \"\"\"\n\n # Calculate the mean of the dataset\n mean = sum(numbers) / len(numbers)\n \n # Calculate the mean absolute deviation\n mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n \n return mad"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n \"\"\"\n n = len(numbers)\n result = []\n for i in range(n):\n if i == n - 1:\n result.append(numbers[i])\n else:\n result.append(numbers[i])\n result.append(delimeter)\n result.append(numbers[i + 1])\n return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n For each of the group, output the deepest level of nesting of parentheses.\n E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n >>> parse_nested_parens('(()()) ((())) () ((())()())')\n [2, 3, 1, 3]\n \"\"\"\n # Initialize an empty list to store the nesting levels\n nesting_levels = []\n # Split the input string by spaces\n tokens = paren_string.split()\n # Iterate over each token and count the number of nesting levels\n for token in tokens:\n # Check if the token is a left parenthesis\n if token.isdigit():\n nesting_levels.append(0)\n # If the token is a left parenthesis, increment the nesting level\n elif token == '(':\n nesting_levels[-1] += 1\n # If the token is a right parenthesis, decrement the nesting level\n elif token == ')':\n nesting_levels[-1] -= 1\n # If the token is neither a left nor right parenthesis, ignore it\n else:\n pass\n # Return the list of nesting levels\n return nesting_levels"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n \"\"\" Filter an input list of strings only for ones that contain given substring\n \"\"\"\n\n return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n Empty sum should be equal to 0 and empty product should be equal to 1.\n >>> sum_product([])\n (0, 1)\n >>> sum_product([1, 2, 3, 4])\n (10, 24)\n \"\"\"\n if not numbers:\n return (0, 1)\n product = 1\n sum_ = 0\n for num in numbers:\n sum_ += num\n product *= num\n return (sum_, product)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n in the sequence.\n \"\"\"\n max_list = []\n max_so_far = numbers[0]\n for i in range(len(numbers)):\n if i == 0:\n max_list.append(numbers[i])\n elif numbers[i] > max_so_far:\n max_list = [numbers[i]] + max_list\n else:\n max_list = max_list\n return max_list"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n \"\"\" Test if given string is a palindrome \"\"\"\n return string == string[::-1]\n \ndef make_palindrome(string: str) -> str:\n \"\"\" Find the shortest palindrome that begins with a supplied string.\n Algorithm idea is simple:\n - Find the longest postfix of supplied string that is a palindrome.\n - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n \"\"\"\n # Find the longest postfix that is a palindrome\n start = len(string)\n while start > 0 and is_palindrome(string[start:]) == True:\n start -= 1\n # Find the shortest palindrome that begins with the postfix\n end = start + 1\n while end < len(string) and is_palindrome(string[end:]) == True:\n end += 1\n # Reverse the prefix and append it to the palindrome\n return string[start:end] + string[start:end][::-1]\n "}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n Perform binary XOR on these inputs and return result also as a string.\n \"\"\"\n a_list = list(a)\n b_list = list(b)\n result_list = []\n for i in range(len(a)):\n if a[i] == '1' and b[i] == '1':\n result_list.append('0')\n else:\n result_list.append('1')\n result = ''.join(result_list)\n return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n strings of the same length. Return None in case the input list is empty.\n \"\"\"\n if not strings:\n return None\n longest_string = strings[0]\n for string in strings:\n if len(string) > len(longest_string):\n longest_string = string\n return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n \"\"\" Return a greatest common divisor of two integers a and b\n \"\"\"\n if a == 0 or b == 0:\n return max(a, b)\n else:\n return greatest_common_divisor(a % b, b)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n \"\"\" Return list of all prefixes from shortest to longest of the input string\n \"\"\"\n # Define a list to store the prefixes\n prefixes = []\n # Initialize a variable to store the length of the current prefix\n current_length = 0\n # Loop through each character in the string\n for i in range(len(string)):\n # If the current character is not the first character, add the previous characters to the prefixes list\n if i > 0:\n # Add the previous characters to the prefixes list\n prefixes.append(string[i-1:i])\n # Update the length of the current prefix\n current_length = i\n # If the current character is the first character, add it to the prefixes list\n elif i == 0:\n # Add the current character to the prefixes list\n prefixes.append(string[i])\n # Update the length of the current prefix\n current_length = 1\n # Return the list of prefixes\n return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n \"\"\"\n if n < 0:\n raise ValueError(\"n must be non-negative\")\n elif n == 0:\n return \"0\"\n else:\n return \" \".join([str(i) for i in range(n+1)])"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n \"\"\"\n # Remove all non-alphanumeric characters and convert to lowercase\n string = re.sub(r'[^a-zA-Z0-9]', '', string).lower()\n # Count the number of distinct characters\n return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n Your task is to parse this string and return list of integers corresponding to how many beats does each\n not last.\n\n Here is a legend:\n 'o' - whole note, lasts four beats\n 'o|' - half note, lasts two beats\n '.|' - quater note, lasts one beat\n\n >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n \"\"\"\n # Define a dictionary to map each note to its corresponding beat count\n note_beats = {\n 'o': 4,\n 'o|': 2,\n '|.': 1\n }\n \n # Split the music string by'' to get a list of individual notes\n notes = music_string.split()\n \n # Initialize an empty list to store the beat counts for each note\n beat_counts = []\n \n # Iterate through each note in the list and add its beat count to the beat_counts list\n for note in notes:\n beat_counts.append(note_beats[note])\n \n return beat_counts"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n \n >>> how_many_times('', 'a')\n 0\n >>> how_many_times('aaa', 'a')\n 3\n >>> how_many_times('aaaa', 'aa')\n 3\n \"\"\"\n \n count = 0\n \n for i in range(len(string)):\n if string[i:i+len(substring)] == substring:\n count += 1\n \n return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n Return the string with numbers sorted from smallest to largest\n >>> sort_numbers('three one five')\n 'one three five'\n \"\"\"\n numbers_list = numbers.split()\n numbers_list.sort()\n sorted_numbers =''.join(numbers_list)\n return sorted_numbers"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n other and return them in order (smaller number, larger number).\n \"\"\"\n numbers.sort() # sort the list in ascending order\n closest_1 = numbers[0] # assume the first number is the closest to all other numbers\n closest_2 = numbers[0]\n for i in range(len(numbers)):\n if i == 0:\n continue # skip the first number since it is already the closest to all other numbers\n for j in range(i+1, len(numbers)):\n if abs(numbers[i] - numbers[j]) < abs(closest_1 - numbers[j]):\n closest_1 = numbers[j]\n elif abs(numbers[i] - numbers[j]) < abs(closest_2 - numbers[j]):\n closest_2 = numbers[j]\n return closest_1, closest_2"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n such that the smallest number will become 0 and the largest will become 1\n >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n [0.0, 0.25, 0.5, 0.75, 1.0]\n \"\"\"\n # Find the range of the numbers\n min_num = min(numbers)\n max_num = max(numbers)\n scale = (max_num - min_num) / len(numbers)\n # Apply the transform to each number in the list\n rescaled_numbers = [min_num + (num - min_num) * scale for num in numbers]\n return rescaled_numbers"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n \"\"\" Filter given list of any python values only for integers\n \"\"\"\n return [v for v in values if isinstance(v, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n \"\"\" Return length of given string\n >>> strlen('')\n 0\n >>> strlen('abc')\n 3\n \"\"\"\n return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n \"\"\"\n largest_divisor = n\n while n % largest_divisor!= 0:\n largest_divisor = largest_divisor - 1\n return largest_divisor\n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n Input number should be equal to the product of all factors\n \"\"\"\n factors = []\n i = n\n while i % 2 == 0:\n factors.append(2)\n i = i / 2\n for j in range(3,int(i**0.5)+1,2):\n while i % j == 0:\n factors.append(j)\n i = i / j\n if i > 2:\n factors.append(i)\n return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n \"\"\" From a list of integers, remove all elements that occur more than once.\n Keep order of elements left the same as in the input.\n >>> remove_duplicates([1, 2, 3, 2, 4])\n [1, 3, 4]\n \"\"\"\n\n # Create a set to store unique values\n unique_values = set()\n \n # Iterate over the list of numbers and add unique values to the set\n for num in numbers:\n if num not in unique_values:\n unique_values.add(num)\n \n # Convert the set back to a list and return it\n return list(unique_values)"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n \"\"\"\n # Convert the string to lowercase\n lowercase_string = string.lower()\n \n # Create a new string with the flipped case\n flipped_string = ''\n for char in lowercase_string:\n if char.islower():\n flipped_string += chr(ord(char) - 32)\n else:\n flipped_string += char\n \n return flipped_string"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n \"\"\" Concatenate list of strings into a single string\n >>> concatenate([])\n ''\n >>> concatenate(['a', 'b', 'c'])\n 'abc'\n \"\"\"\n return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n \"\"\"\n return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n \"\"\"Return only positive numbers in the list.\n >>> get_positive([-1, 2, -4, 5, 6])\n [2, 5, 6]\n >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n [5, 3, 2, 3, 9, 123, 1]\n \"\"\"\n return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n \"\"\"Return true if a given number is prime, and false otherwise.\n >>> is_prime(6)\n False\n >>> is_prime(101)\n True\n >>> is_prime(11)\n True\n >>> is_prime(13441)\n True\n >>> is_prime(61)\n True\n >>> is_prime(4)\n False\n >>> is_prime(1)\n False\n \"\"\"\n if n < 2:\n return False\n for i in range(2, int(n**0.5)+1):\n if n % i == 0:\n return False\n return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n \"\"\"\n Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n \"\"\"\n return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n \"\"\" xs are coefficients of a polynomial.\n find_zero find x such that poly(x) = 0.\n find_zero returns only only zero point, even if there are many.\n Moreover, find_zero only takes list xs having even number of coefficients\n and largest non zero coefficient as it guarantees\n a solution.\n \"\"\"\n if len(xs) % 2 == 0:\n max_coeff = max(xs)\n if max_coeff == 0:\n return None\n else:\n return -max_coeff / (max_coeff * max_coeff - max_coeff)\n else:\n return None"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n \"\"\"This function takes a list l and returns a list l' such that\n l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n to the values of the corresponding indicies of l, but sorted.\n >>> sort_third([1, 2, 3])\n [1, 2, 3]\n >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n [2, 6, 3, 4, 8, 9, 5]\n \"\"\"\n for i in range(len(l)):\n if i % 3 == 0:\n l[i] = sorted([l[i]])\n elif i % 3!= 0:\n l[i] = l[i]\n return l"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n \"\"\"Return sorted unique elements in a list\n \"\"\"\n return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n \"\"\"Return maximum element in the list.\n \"\"\"\n return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n \"\"\"\n count = 0\n for i in range(1, n):\n if i % 11 == 0 or i % 13 == 0:\n count += count_digit(i, 7)\n return count\n \ndef count_digit(num, digit):\n \"\"\"Return the number of times the digit appears in the given number.\"\"\"\n while num > 0:\n if num % 10 == digit:\n count += 1\n num /= 10\n return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n \"\"\"This function takes a list l and returns a list l' such that\n l' is identical to l in the odd indicies, while its values at the even indicies are equal\n to the values of the even indicies of l, but sorted.\n >>> sort_even([1, 2, 3])\n [1, 2, 3]\n >>> sort_even([5, 6, 3, 4])\n [3, 6, 5, 4]\n \"\"\"\n even_indices = [i for i in range(len(l)) if i % 2 == 0]\n odd_indices = [i for i in range(len(l)) if i % 2 == 1]\n even_values = l[even_indices]\n odd_values = l[odd_indices]\n even_values.sort()\n l_prime = list(odd_values)\n for i in range(len(even_indices)):\n l_prime[even_indices[i]] = even_values[i]\n return l_prime"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n \"\"\"\n returns encoded string by cycling groups of three characters.\n \"\"\"\n # split string to groups. Each of length 3.\n groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n # cycle elements in each group. Unless group has fewer elements than 3.\n groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n \"\"\"\n takes as input string encoded with encode_cyclic function. Returns decoded string.\n \"\"\"\n # split string to groups. Each of length 3.\n groups = [s[i:i+3] for i in range(0, len(s), 3)]\n # cycle elements in each group. Unless group has fewer elements than 3.\n groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n \"\"\"\n prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n \"\"\"\n fib = [0, 1]\n for i in range(2, n+1):\n fib.append(fib[i-1] + fib[i-2])\n for i in range(len(fib)):\n if fib[i] > 1 and all(fib[i] % c!= 0 for c in range(2, int(fib[i]**0.5)+1)):\n return fib[i]\n return None"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n \"\"\"\n triples_sum_to_zero takes a list of integers as an input.\n it returns True if there are three distinct elements in the list that\n sum to zero, and False otherwise.\n \"\"\"\n \n # Initialize a variable to check if three distinct elements\n # have been found that sum to zero\n found = False\n \n # Iterate through the list and check for triples that sum to zero\n for i in range(len(l)-2):\n for j in range(i+1, len(l)-1):\n for k in range(j+1, len(l)):\n # Check if the three elements (l[i], l[j], l[k]) add up to zero\n if l[i] + l[j] + l[k] == 0:\n found = True\n break\n \n # If three distinct elements are found that sum to zero,\n # return True\n if found:\n return True\n else:\n return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n \"\"\"\n Imagine a road that's a perfectly straight infinitely long line.\n n cars are driving left to right;  simultaneously, a different set of n cars\n are driving right to left.   The two sets of cars start out being very far from\n each other.  All cars move in the same speed.  Two cars are said to collide\n when a car that's moving left to right hits a car that's moving right to left.\n However, the cars are infinitely sturdy and strong; as a result, they continue moving\n in their trajectory as if they did not collide.\n \n This function outputs the number of such collisions.\n \"\"\"\n \n # Implement the function here\n # You can use a loop to iterate over the cars and check for collisions\n # You can use a variable to keep track of the number of collisions\n # You can use a conditional statement to check if two cars are on a collision course\n # You can use the modulo operator to check if a car is moving left or right\n # You can use the function len(set(car_list)) to check if there are any collisions\n # You can use the function len(car_list) to check if there are any cars left\n # You can use the function sum(car_list) to check if there are any cars left\n # You can use the function car_list.remove(car) to remove a car from the list\n # You can use the function car_list.append(car) to add a car to the list\n # You can use the function car_list.count(car) to check if a car is in the list\n # You can use the function car_list.index(car) to get the index of a car in the list\n # You can use the function car_list[:] = [] to clear the list of cars\n # You can use the function car_list.pop(index) to remove a car from the list at a specific index\n # You can use the function car_list.insert(index, car) to add a car to the list at a specific index\n # You can use the function car_list.sort() to sort the list of cars\n # You can use the function car_list.reverse() to reverse the order of cars in the"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n \"\"\"Return list with elements incremented by 1.\n >>> incr_list([1, 2, 3])\n [2, 3, 4]\n >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n [6, 4, 6, 3, 4, 4, 10, 1, 124]\n \"\"\"\n for i in range(len(l)):\n l[i] += 1\n return l"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n \"\"\"\n pairs_sum_to_zero takes a list of integers as an input.\n it returns True if there are two distinct elements in the list that\n sum to zero, and False otherwise.\n \"\"\"\n for i in range(len(l)):\n for j in range(i+1, len(l)):\n if l[i] + l[j] == 0:\n return True\n return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n \"\"\"Change numerical base of input number x to base.\n return string representation after the conversion.\n base numbers are less than 10.\n \"\"\"\n if base < 2:\n raise ValueError(\"Base should be greater than or equal to 2\")\n if x < 0:\n raise ValueError(\"Input number cannot be negative\")\n if base == 10:\n return str(x)\n else:\n return (\"%d\" % x).replace(\"d\", str(x)[::base])"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n \"\"\"Given length of a side and high return area for a triangle.\n \"\"\"\n return 0.5 * a * h\n\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n if n <= 4:\n return n\n else:\n return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n \"\"\"Return median of elements in the list l.\n >>> median([3, 1, 2, 4, 5])\n 3\n >>> median([-10, 4, 6, 1000, 10, 20])\n 15.0\n \"\"\"\n sorted_l = sorted(l)\n n = len(l)\n if n % 2 == 0:\n median_value = (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2\n else:\n median_value = sorted_l[n//2]\n return median_value"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n \"\"\"\n Checks if given string is a palindrome\n >>> is_palindrome('')\n True\n >>> is_palindrome('aba')\n True\n >>> is_palindrome('aaaaa')\n True\n >>> is_palindrome('zbcd')\n False\n \"\"\"\n # Remove all non-alphanumeric characters from the text\n text = re.sub(r'[^a-zA-Z0-9]', '', text)\n \n # Convert the text to lowercase\n text = text.lower()\n \n # Check if the text is empty or has only one character\n if len(text) <= 1:\n return True\n \n # Compare the first and last characters of the text\n if text[0]!= text[-1]:\n return False\n \n # Recursively check the substring\n return is_palindrome(text[1:-1])"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n \"\"\"Return 2^n modulo p (be aware of numerics).\n \n >>> modp(3, 5)\n 3\n >>> modp(1101, 101)\n 2\n >>> modp(0, 101)\n 1\n >>> modp(3, 11)\n 8\n >>> modp(100, 101)\n 1\n \"\"\"\n if n == 0:\n return 1\n elif n < 0:\n raise ValueError(\"n must be non-negative\")\n elif p == 1:\n return 0\n elif p == 2:\n return 1\n else:\n return (modp(n-1, p) * modp(n-1, p)) % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n \"\"\"\n returns encoded string by shifting every character by 5 in the alphabet.\n \"\"\"\n return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n \ndef decode_shift(s: str):\n \"\"\"\n takes as input string encoded with encode_shift function. Returns decoded string.\n \"\"\"\n # implementation\n pass"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n \"\"\"\n remove_vowels is a function that takes string and returns string without vowels.\n \"\"\"\n vowels = 'aeiouAEIOU'\n text = text.lower()\n text = ''.join([char for char in text if char not in vowels])\n return text"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n \"\"\"Return True if all numbers in the list l are below threshold t.\n \"\"\"\n return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n \"\"\"Add two numbers x and y\n >>> add(2, 3)\n 5\n >>> add(5, 7)\n 12\n \"\"\"\n return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n \"\"\"\n Check if two words have the same characters.\n \"\"\"\n s0 = s0.lower()\n s1 = s1.lower()\n return s0 == s1"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n \"\"\"Return n-th Fibonacci number.\n >>> fib(10)\n 55\n >>> fib(1)\n 1\n >>> fib(8)\n 21\n \"\"\"\n if n <= 2:\n return n\n else:\n return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n \"\"\" brackets is a string of \"<\" and \">\".\n return True if every opening bracket has a corresponding closing bracket.\n\n brackets = brackets.replace(\" \", \"\")\n # Remove all non-bracket characters\n brackets = \"\".join(filter(lambda x: x in brackets, \"><\"))\n \n # Count the number of opening brackets\n count_open = brackets.count(\"[\")\n # Count the number of closing brackets\n count_close = brackets.count(\"]\")\n \n # Check if the number of opening brackets is equal to the number of closing brackets\n if count_open == count_close:\n return True\n else:\n return False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n \"\"\"Return True is list elements are monotonically increasing or decreasing.\n \"\"\"\n if len(l) < 2:\n return True\n if l[0] > l[-1]:\n return True\n for i in range(len(l)-1):\n if l[i+1] < l[i]:\n return False\n return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n \"\"\"Return sorted unique common elements for two lists.\n >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n [1, 5, 653]\n >>> common([5, 3, 2, 8], [3, 2])\n [2, 3]\n \"\"\"\n \n # Create a set of all elements in both lists\n common_set = set(l1) & set(l2)\n \n # Convert the set to a sorted list\n common_list = sorted(list(common_set))\n \n return common_list"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n \"\"\"\n if n < 2:\n return 1\n elif n == 2:\n return 2\n else:\n factors = []\n i = 2\n while i * i <= n:\n if n % i:\n i += 1\n else:\n n //= i\n factors.append(i)\n if n > 1:\n factors.append(n)\n return max(factors)"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n total = 0\n for i in range(1, n+1):\n total += i\n return total"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n \"\"\" brackets is a string of \"(\" and \")\".\n return True if every opening bracket has a corresponding closing bracket.\n\n brackets = brackets.replace(\"()\", \"\").replace(\"  \", \"\").replace(\" \", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\" \", \"\")."}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n \"\"\" xs represent coefficients of a polynomial.\n xs[0] + xs[1] * x + xs[2] * x^2 +....\n Return derivative of this polynomial in the same form.\n \"\"\"\n n = len(xs)\n derivative_xs = []\n for i in range(n):\n if i == 0:\n derivative_xs.append(0)\n for j in range(i+1, n):\n derivative_xs.append(j * xs[j])\n return derivative_xs"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n if n == 0:\n return 0\n elif n == 1:\n return 0\n elif n == 2:\n return 1\n else:\n return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n \"\"\"Write a function vowels_count which takes a string representing\n a word as input and returns the number of vowels in the string.\n Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n vowel, but only when it is at the end of the given word.\n\n Example:\n >>> vowels_count(\"abcde\")\n 2\n >>> vowels_count(\"ACEDY\")\n 3\n \"\"\"\n count = 0\n for char in s:\n if char in 'aeiou' or (char == 'y' and s.endswith(('y', ''])):\n count += 1\n return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n and return the result as a string.\n If shift > number of digits, return digits reversed.\n \"\"\"\n # Calculate the number of digits in x\n n_digits = len(str(x))\n # Check if shift is greater than the number of digits\n if shift > n_digits:\n # If so, reverse the digits and return as a string\n return int(x) % 10**n_digits * 10**(n_digits-shift) % 10**n_digits\n # Otherwise, circular shift the digits and return as a string\n return int(x) % 10**n_digits * 10**(shift-n_digits) % 10**n_digits"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n \"\"\"Task\n Write a function that takes a string as input and returns the sum of the ASCII codes of the upper characters only.\n Examples:\n - digitSum(\"\") => 0\n - digitSum(\"abAB\") => 131\n - digitSum(\"abcCd\") => 67\n - digitSum(\"helloE\") => 69\n - digitSum(\"woArBld\") => 131\n - digitSum(\"aAaaaXa\") => 153\n \"\"\"\n total = 0\n for char in s:\n if char.isupper():\n total += ord(char) - 64\n return total"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n \"\"\"\n In this task, you will be given a string that represents a number of apples and oranges \n that are distributed in a basket of fruit this basket contains \n apples, oranges, and mango fruits. Given the string that represents the total number of \n the oranges and apples and an integer that represent the total number of the fruits \n in the basket return the number of the mango fruits in the basket.\n for examble:\n fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n \"\"\"\n # Split the string into a list of words\n words = s.split()\n # Initialize the count of mango fruits to 0\n mango_count = 0\n # Loop through each word in the list\n for word in words:\n # Check if the word contains the word \"mango\"\n if \"mango\" in word:\n # Increment the count of mango fruits\n mango_count += 1\n # Return the count of mango fruits\n return mango_count"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n even_nodes = [node for node in arr if node % 2 == 0]\n if not even_nodes:\n return []\n smallest_even_node = min(even_nodes, key=lambda node: (node % 2 == 0, node))\n return [smallest_even_node]\n else:\n smallest_even_node = min(even_nodes, key=lambda node: (node % 2 == 0, node))\n return [smallest_even_node, even_nodes.index(smallest_even_node)]\n else:\n return []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n freq = {}\n for num in lst:\n if num in freq:\n freq[num] += 1\n else:\n freq[num] = 1\n max_freq = 0\n max_num = -1\n for num in freq:\n if freq[num] > max_freq and freq[num] >= num:\n max_freq = freq[num]\n max_num = num\n return max_num if max_freq > 0 else -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n if not lst:\n return lst\n \n min_val = lst[0]\n max_val = lst[0]\n \n for i in range(len(lst)):\n if lst[i] < min_val:\n min_val = lst[i]\n elif lst[i] > max_val:\n max_val = lst[i]\n \n lst = [min_val] + lst.filter(lambda x: x!= min_val) + [max_val]\n \n return lst"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n if a + b < c or a + c < b or b + c < a:\n return -1\n else:\n return (a * b * c) / 4"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n if len(q) > len(set(q)):\n return False\n elif sum(q) > w:\n return False\n else:\n return True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n n = len(arr)\n # Initialize variables to keep track of the number of swaps and the number of inversions\n swaps = 0\n inversions = 0\n # Loop through the array to find the number of inversions\n for i in range(n):\n for j in range(i+1, n):\n if arr[i] > arr[j]:\n inversions += 1\n # If there are no inversions, then the array is already palindromic\n if inversions == 0:\n return 0\n # If there are inversions, then try to fix them by swapping elements\n # Swap elements if it makes the array closer to being palindromic\n while inversions > 0 and swaps < n-1:\n # Find the pair of elements that can be swapped to make the array closer to being palindromic\n i = 0\n j = n-1\n while i == 0 and j == n-1:\n if arr[i] > arr[j]:\n i += 1\n j -= 1\n if i > j:\n # Swap the elements\n arr[i], arr[j] = arr[j], arr[i]\n inversions -= 2\n swaps += 1\n # If the array is still not palindromic, then there are no more swaps that can be made\n if inversions > 0:\n return swaps\n else:\n return smallest_change(arr)"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n if len(lst1) > len(lst2):\n return lst1\n elif len(lst1) < len(lst2):\n return lst2\n else:\n return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n and false otherwise.\n Knowing that (a) is less then 100. \n Example:\n is_multiply_prime(30) == True\n 30 = 2 * 3 * 5\n \"\"\"\n if a < 100:\n prime_factors = []\n for i in range(2, a+1):\n while a % i == 0:\n prime_factors.append(i)\n a = a / i\n if len(prime_factors) == 3:\n for i in range(len(prime_factors)):\n for j in range(i, len(prime_factors)):\n if prime_factors[i] * prime_factors[j] == a:\n return True\n return False\n else:\n return False\n else:\n return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n \"\"\"Your task is to write a function that returns true if a number x is a simple\n power of n and false in other cases.\n x is a simple power of n if n**int=x\n For example:\n is_simple_power(1, 4) => true\n is_simple_power(2, 2) => true\n is_simple_power(8, 2) => true\n is_simple_power(3, 2) => false\n is_simple_power(3, 1) => false\n is_simple_power(5, 3) => false\n \"\"\"\n if x == 1:\n return True\n elif x == n:\n return True\n else:\n return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n \"\"\"\n Write a function that takes an integer a and returns True \n if this ingeger is a cube of some integer number.\n Note: you may assume the input is always valid.\n Examples:\n iscube(1) ==> True\n iscube(2) ==> False\n iscube(-1) ==> True\n iscube(64) ==> True\n iscube(0) ==> True\n iscube(180) ==> False\n \"\"\"\n if a == 0:\n return True\n elif a == 1:\n return True\n else:\n return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n hex_digits = []\n prime_digits = []\n for digit in num:\n if digit in '0123456789ABCDEF':\n hex_digits.append(digit)\n elif digit in '2357111317':\n prime_digits.append(digit)\n count = len(hex_digits) - len(prime_digits)\n return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n \"\"\"You will be given a number in decimal form and your task is to convert it to\n binary format. The function should return a string, with each character representing a binary\n number. Each character in the string will be '0' or '1'.\n\n There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n The extra characters are there to help with the format.\n\n Examples:\n decimal_to_binary(15)   # returns \"db1111db\"\n decimal_to_binary(32)   # returns \"db100000db\"\n \"\"\"\n # Add the extra characters 'db' at the beginning and at the end of the string\n binary = 'db' + str(decimal) + 'db'\n # Convert the decimal number to binary\n while decimal > 0:\n remainder = decimal % 2\n binary = str(remainder) + binary\n decimal //= 2\n return binary"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n \"\"\"You are given a string s.\n Your task is to check if the string is happy or not.\n A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n For example:\n is_happy(a) => False\n is_happy(aa) => False\n is_happy(abcd) => True\n is_happy(aabb) => False\n is_happy(adb) => True\n is_happy(xyy) => False\n \"\"\"\n if len(s) >= 3:\n for i in range(len(s)-2):\n if s[i] == s[i+1] and s[i+1] == s[i+2]:\n return False\n return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n \"\"\"It is the last week of the semester and the teacher has to give the grades\n to students. The teacher has been making her own algorithm for grading.\n The only problem is, she has lost the code she used for grading.\n She has given you a list of GPAs for some students and you have to write \n a function that can output a list of letter grades using the following table:\n \n GPA | Letter grade\n ----------------\n 4.0 | A+\n > 3.7 | A\n > 3.3 | A-\n > 3.0 | B+\n > 2.7 | B\n > 2.3 | B-\n > 2.0 | C+\n > 1.7 | C\n > 1.3 | C-\n > 1.0 | D+\n > 0.7 | D\n > 0.0 | D-\n 0.0 | E\n \n\n Example:\n grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n \"\"\"\n \n grades = sorted(grades, key=lambda x: x)\n \n for i in range(len(grades)):\n if grades[i] >= 4:\n letter_grade = 'A+'\n elif grades[i] > 3.7:\n letter_grade = 'A'\n elif grades[i] > 3.3:\n letter_grade = 'A-'\n elif grades[i] > 3:\n letter_grade = 'B+'\n elif grades[i] > 2.7:\n letter_grade = 'B'\n elif grades[i] > 2.3:\n letter_grade = 'B-'\n elif grades[i] > 2:\n letter_grade = 'C+'\n elif grades[i] > 1.7:\n letter_grade = 'C'\n elif grades[i] > 1.3:\n letter_grade = 'C-'\n elif grades[i] > 1:\n letter_grade ="}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n \"\"\"Write a function that takes a string and returns True if the string\n length is a prime number or False otherwise\n Examples\n prime_length('Hello') == True\n prime_length('abcdcba') == True\n prime_length('kittens') == True\n prime_length('orange') == False\n \"\"\"\n string_length = len(string)\n if string_length == 1:\n return True\n elif string_length == 2:\n return True\n elif string_length == 3:\n return True\n elif string_length == 5:\n return True\n elif string_length == 7:\n return True\n else:\n return False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n \"\"\"\n Given a positive integer n, return the count of the numbers of n-digit\n positive integers that start or end with 1.\n \"\"\"\n \n # initialize a variable to store the count of numbers that start with 1\n count_start_one = 0\n \n # initialize a variable to store the count of numbers that end with 1\n count_end_one = 0\n \n # loop through all possible n-digit positive integers\n for i in range(10**n):\n # check if the number starts with 1\n if i == 1000000000 + i % 1000000:\n count_start_one += 1\n # check if the number ends with 1\n elif i % 1000000 == 1000000000:\n count_end_one += 1\n \n # return the sum of the counts\n return count_start_one + count_end_one"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n \n Example\n For N = 1000, the sum of digits will be 1 the output should be \"1\".\n For N = 150, the sum of digits will be 6 the output should be \"110\".\n For N = 147, the sum of digits will be 12 the output should be \"1100\".\n \n Variables:\n @N integer\n Constraints: 0 \u2264 N \u2264 10000.\n Output:\n a string of binary number\n \"\"\"\n # Convert N to binary\n binary_num = bin(N)[2:]\n # Remove any leading zeros\n binary_num = binary_num.zfill(len(binary_num))\n # Convert binary_num to a list\n binary_list = list(binary_num)\n # Initialize sum to 0\n sum = 0\n # Loop through each digit in binary_list\n for digit in binary_list:\n # If the digit is 1, add it to the sum\n if digit == '1':\n sum += 1\n # Return the sum in binary\n return binary_num"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n \n\n Examples:\n add([4, 2, 6, 7]) ==> 2 \n \"\"\"\n even_odd_indices = [i for i in range(len(lst)) if i % 2 == 0 and i % len(lst)!= 0]\n even_elements = [lst[i] for i in even_odd_indices]\n return sum(even_elements)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n # split the string into a list of words\n words = s.split()\n # create a new list to store the ordered words\n ordered_words = []\n # iterate through each word in the list\n for word in words:\n # split the word into a list of characters\n characters = list(word)\n # sort the characters in ascending order based on their ASCII value\n characters.sort()\n # join the sorted characters back into a string and add it to the ordered_words list\n ordered_words.append(''.join(sorted(characters)))\n # join the ordered words back into a string and return it\n return''.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n \"\"\"\n You are given a 2 dimensional data, as a nested lists,\n which is similar to matrix, however, unlike matrices,\n each row may contain a different number of columns.\n Given lst, and integer x, find integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that\n each tuple is a coordinate - (row, columns), starting with 0.\n Sort coordinates initially by rows in ascending order.\n Also, sort coordinates of the row by columns in descending order.\n \n Examples:\n get_row([\n [1,2,3,4,5,6],\n [1,2,3,4,1,6],\n [1,2,3,4,5,1]\n ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n get_row([], 1) == []\n get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n \"\"\"\n \n # Initialize an empty list to store the coordinates\n coordinates = []\n \n # Loop through each row in the data\n for i in range(len(lst)):\n # Check if the current row contains the given x value\n if lst[i][x]:\n # Initialize an empty list to store the coordinates of the current row\n row_coordinates = []\n # Loop through each column in the current row\n for j in range(len(lst[i])):\n # If the column contains the given x value, add the coordinate to the list\n if lst[i][j] == x:\n row_coordinates.append((i, j))\n # Sort the coordinates of the current row by columns in descending order\n row_coordinates.sort(key=lambda x: lst[i].index(x[1]), reverse=True)\n # Add the sorted coordinates to the list of all coordinates\n coordinates.append(row_coordinates)\n \n # Sort the coordinates initially by rows in ascending order\n coordinates.sort(key=lambda x: x[0], reverse=False)\n \n return"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n \"\"\"\n Given an array of non-negative integers, return a copy of the given array after sorting,\n you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n or sort it in descending order if the sum( first index value, last index value) is even.\n \n Note:\n - don't change the given array.\n \n Examples:\n - sort_array([]) => []\n - sort_array([5]) => [5]\n - sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n - sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n \"\"\"\n # Initialize a new array to store the sorted array\n sorted_array = array.copy()\n \n # Check if the sum of the first and last indices is odd or even\n if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n # Sort the array in descending order if the sum is even\n for i in range(len(sorted_array)):\n for j in range(i, len(sorted_array)):\n if sorted_array[i] > sorted_array[j]:\n sorted_array[i], sorted_array[j] = sorted_array[j], sorted_array[i]\n elif (sorted_array[0] + sorted_array[-1]) % 2 == 1:\n # Sort the array in ascending order if the sum is odd\n for i in range(len(sorted_array)):\n for j in range(i, len(sorted_array)):\n if sorted_array[i] < sorted_array[j]:\n sorted_array[i], sorted_array[j] = sorted_array[j], sorted_array[i]\n \n return sorted_array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n alphabet = 'abcdefghijklmnopqrstuvwxyz'\n encrypted_alphabet = alphabet[2:] + alphabet[:2]\n encrypted_s = ''\n for c in s:\n if c in alphabet:\n encrypted_c = alphabet.find(c) + 13\n elif c in 'aeiou':\n encrypted_c = 97\n elif c in 'bcdfghjklmnpqrstvwxyz':\n encrypted_c = 13\n else:\n encrypted_c = 0\n encrypted_s += encrypted_alphabet[encrypted_c]\n return encrypted_s"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n smallest = lst[0]\n second_smallest = lst[1]\n for i in range(2, len(lst)):\n if lst[i] < smallest:\n second_smallest = smallest\n smallest = lst[i]\n elif lst[i] < second_smallest and lst[i]!= smallest:\n second_smallest = lst[i]\n return second_smallest"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n count = 0\n words = S.split()\n for i in range(len(words)):\n if words[i] == \"I\" and i < len(words) - 1 and words[i+1] in [\".\", \"?\", \"!\"]:\n count += 1\n return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n if x + y == z or x + z == y or y + z == x:\n return True\n else:\n return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n \"\"\"\n Write a function that takes a message, and encodes in such a \n way that it swaps case of all letters, replaces all vowels in \n the message with the letter that appears 2 places ahead of that \n vowel in the english alphabet. \n Assume only letters. \n \n Examples:\n >>> encode('test')\n 'TGST'\n >>> encode('This is a message')\n 'tHKS KS C MGSSCGG'\n \"\"\"\n encoded_message = ''\n for letter in message:\n if letter.isalpha():\n if letter.isupper():\n encoded_message += letter.lower()\n else:\n encoded_message += letter.upper()\n elif letter in 'aeiouAEIOU':\n try:\n index = ord(letter) - 97\n if index % 2 == 0:\n encoded_message += chr(index + 1)\n else:\n encoded_message += chr(index - 1) + chr(index + 1)\n except:\n pass\n return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n \"\"\"You are given a list of integers.\n You need to find the largest prime value and return the sum of its digits.\n \n Examples:\n For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n For lst = [0,81,12,3,1,21] the output should be 3\n For lst = [0,8,1,2,1,7] the output should be 7\n \"\"\"\n \n def is_prime(num):\n if num < 2:\n return False\n for i in range(2, int(num**0.5)+1):\n if num % i == 0:\n return False\n return True\n \n def sum_digits(num):\n while num > 0:\n num = num % 10 + 1\n return num\n \n largest_prime = 0\n largest_prime_sum = 0\n for num in lst:\n if is_prime(num):\n if num > largest_prime:\n largest_prime = num\n largest_prime_sum = sum_digits(num)\n return largest_prime_sum"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n \"\"\"\n Given a dictionary, return True if all keys are strings in lower \n case or all keys are strings in upper case, else return False.\n The function should return False is the given dictionary is empty.\n Examples:\n check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n \"\"\"\n if not dict:\n return False\n for key in dict:\n if isinstance(key, str) and not (key.islower() or key.isupper()):\n return False\n return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n primes = []\n num = 2\n while len(primes) < n:\n if num > n:\n break\n for i in range(num, num+num, 2):\n if all(j!= k for j, k in zip(primes, [i])):\n primes.append(i)\n return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n if a == 0 or b == 0:\n return 0\n elif a == 1 or b == 1:\n return 1\n else:\n return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n count = 0\n for i in range(len(s)):\n if i % 2 == 0 and s[i].isupper():\n count += 1\n return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n try:\n value = int(value)\n return value\n except:\n pass\n \n decimal_part = value.split('.')\n whole_part = int(decimal_part[0])\n if len(decimal_part) == 2:\n fraction = int(decimal_part[1])\n if fraction >= 5:\n whole_part += 1\n elif fraction <= -5:\n whole_part -= 1\n return whole_part\n \n # If the value is not a number, return None\n return None"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n \"\"\"\n Given a positive integer n, you have to make a pile of n levels of stones.\n The first level has n stones.\n The number of stones in the next level is:\n - the next odd number if n is odd.\n - the next even number if n is even.\n Return the number of stones in each level in a list, where element at index\n i represents the number of stones in the level (i+1).\n \n Examples:\n >>> make_a_pile(3)\n [3, 5, 7]\n \"\"\"\n if n % 2 == 0:\n levels = [n]\n for i in range(1, n+1):\n levels.append(levels[i-1] + 2*(i-1))\n else:\n levels = [n]\n for i in range(1, n+1):\n levels.append(levels[i-1] + 2*i-1)\n return levels"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n \"\"\"\n You will be given a string of words separated by commas or spaces. Your task is\n to split the string into words and return an array of the words.\n \n For example:\n words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n \"\"\"\n return s.split(\", \")"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n \"\"\"This function takes two positive numbers x and y and returns the\n biggest even integer number that is in the range [x, y] inclusive. If \n there's no such number, then the function should return -1.\n \n For example:\n choose_num(12, 15) = 14\n choose_num(13, 12) = -1\n \"\"\"\n # Check if the input is valid\n if x > y:\n return -1\n \n # Loop through all even numbers between x and y\n for i in range(x, y+1, 2):\n # Check if the number is even and in the range\n if i % 2 == 0 and i >= x and i <= y:\n return i\n \n # If no even number is found, return -1\n return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n \"\"\"You are given two positive integers n and m, and your task is to compute the\n average of the integers from n through m (including n and m). \n Round the answer to the nearest integer and convert that to binary.\n If n is greater than m, return -1.\n Example:\n rounded_avg(1, 5) => \"0b11\"\n rounded_avg(7, 5) => -1\n rounded_avg(10, 20) => \"0b1111\"\n rounded_avg(20, 33) => \"0b11010\"\n \"\"\"\n if n > m:\n return -1\n else:\n avg = (n + m) // 2\n return bin(round(avg))[2:] if avg % 1 == 0 else bin(round(avg))"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n \"\"\"Given a list of positive integers x. return a sorted list of all \n elements that hasn't any even digit.\n \n Note: Returned list should be sorted in increasing order.\n \n For example:\n >>> unique_digits([15, 33, 1422, 1])\n [1, 15, 33]\n >>> unique_digits([152, 323, 1422, 10])\n []\n \"\"\"\n # Initialize an empty list to store the unique digits\n unique_list = []\n # Loop through each element in the input list\n for i in x:\n # Check if the element has any even digit\n if not any(int(digit) % 2 == 0 for digit in str(i)):\n # If the element has no even digit, add it to the unique list\n unique_list.append(i)\n # Sort the unique list in increasing order\n unique_list.sort()\n return unique_list"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n \"\"\"\n Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n reverse the resulting array, and then replace each digit by its corresponding name from\n \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n \n For example:\n arr = [2, 1, 1, 4, 5, 8, 2, 3] -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1] -> return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n \n If the array is empty, return an empty array:\n arr = [] -> return []\n \n If the array has any strange number ignore it:\n arr = [1, -1, 55] -> sort arr -> [-1, 1, 55] -> reverse arr -> [55, 1, -1] -> return = ['One']\n \"\"\"\n # Sort the array and ignore any strange numbers\n arr = sorted([num for num in arr if num >= 1 and num <= 9])\n # Reverse the array\n arr = arr[::-1]\n # Replace each digit by its corresponding name\n names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n result = [names[num] for num in arr]\n # If the array is empty, return an empty array\n if len(arr) == 0:\n return []\n # If the array has any strange number, ignore it and return only the valid digits\n else:\n return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n result = []\n for i in range(n):\n if i % 2 == 0:\n result.append(i * (i-1) * (i-2) *... * 1)\n else:\n result.append(sum(range(1, i+1)))\n return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n count_even = 0\n count_odd = 0\n for i in range(1, n+1):\n if i == i[::-1]:\n count_even += 1\n count_odd += 1\n if i % 2 == 0:\n count_even -= 1\n return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n count = 0\n for num in arr:\n if num < 0:\n num = abs(num)\n count += len(str(num)) - 1\n return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will be randomly ordered. Your task is to determine if\n it is possible to get an array sorted in non-decreasing order by performing \n the following operation on the given array:\n \n One right shift operation means shifting all elements of the array by one\n position in the right direction. The last element of the array will be moved to\n the starting position in the array i.e. 0th index. \n \n If it is possible to obtain the sorted array by performing the above operation\n then return True else return False.\n If the given array is empty then return True.\n \n Note: The given list is guaranteed to have unique elements.\n \n For Example:\n \n move_one_ball([3, 4, 5, 1, 2])==>True\n Explanation: By performin 2 right shift operations, non-decreasing order can\n be achieved for the given array.\n move_one_ball([3, 5, 4, 1, 2])==>False\n Explanation:It is not possible to get non-decreasing order for the given\n array by performing any number of right shift operations.\n \"\"\"\n # Base case\n if len(arr) == 0:\n return True\n # Perform right shift operation\n for i in range(len(arr)):\n if arr[i] > arr[i+1]:\n return False\n arr = arr[1:len(arr)+1]\n # Check if array is sorted in non-decreasing order\n if arr == sorted(arr):\n return True\n else:\n return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n and determines whether it is possible to perform an exchange of elements\n between them to make lst1 a list of only even numbers.\n There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to make\n all the elements of lst1 to be even, return \"YES\".\n Otherwise, return \"NO\".\n For example:\n exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n It is assumed that the input lists will be non-empty.\n \"\"\"\n # Check if all elements of lst1 are even\n if not all(x % 2 == 0 for x in lst1):\n return \"NO\"\n # Check if all elements of lst2 are odd\n if not all(x % 2 == 1 for x in lst2):\n return \"NO\"\n # If all elements of lst1 are even and all elements of lst2 are odd,\n # it is possible to exchange elements to make lst1 a list of only even numbers\n return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n words = test.lower().split()\n hist = {}\n max_count = 0\n max_letters = []\n for letter in set(words):\n count = words.count(letter)\n if count > max_count:\n max_count = count\n max_letters = [letter]\n elif count == max_count:\n max_letters.append(letter)\n hist[letter] = max_count\n return hist"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n # Remove all characters in s that are equal to any character in c\n s = ''.join([c for c in s if c not in c])\n \n # Check if the result string is palindrome\n if s == s[::-1]:\n return (s, True)\n else:\n return (s, False)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n Each element i of the output should be \"the number of odd elements in the\n string i of the input.\" where all the i's should be replaced by the number\n of odd digits in the i'th string of the input.\n\n >>> odd_count(['1234567'])\n [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n >>> odd_count(['3',\"11111111\"])\n [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n \"\"\"\n result = []\n for i in range(len(lst)):\n odd_count_i = len(set(lst[i]))\n result.append(f\"the number of odd elements {odd_count_i} in the string {i+1} of the input.\")\n return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n \"\"\"\n Given an array of integers nums, find the minimum sum of any non-empty sub-array\n of nums.\n Example\n minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n minSubArraySum([-1, -2, -3]) == -6\n \"\"\"\n \n def helper(nums, start, end):\n if start >= end:\n return nums[start]\n return math.min(nums[start], helper(nums, start+1, end)) + nums[start]\n \n return helper(nums, 0, len(nums)-1)"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n import math\n \n # Find the number of wells with at least one unit of water\n num_wells = 0\n for row in grid:\n if any(row):\n num_wells += 1\n \n # Initialize the number of buckets needed to empty the wells\n num_buckets = num_wells\n \n # Fill the wells with water until they are full\n while num_buckets > 0:\n # Find the number of wells that can be filled with one bucket of water\n num_wells_filled = 0\n for row in grid:\n if sum(row) <= capacity:\n num_wells_filled += 1\n \n # Fill the wells with water\n for i in range(num_wells_filled):\n row = [0]*grid[0].length\n for j in range(grid.length):\n if grid[j][i]:\n row[j] = 1\n grid[i][j] = 0\n \n # Decrement the number of buckets needed to empty the wells\n num_buckets -= 1\n \n # Return the number of buckets needed to empty the wells\n return num_buckets"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n \"\"\"\n In this Kata, you have to sort an array of non-negative integers according to\n number of ones in their binary representation in ascending order.\n For similar number of ones, sort based on decimal value.\n \n It must be implemented like this:\n >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n \"\"\"\n # Create a dictionary to store the count of ones for each number\n ones_count = {num: 0 for num in range(1, arr[0] + 1)}\n # Iterate over the array and update the count of ones for each number\n for num in arr:\n ones_count[num] += 1\n # Sort the array based on the count of ones and then based on the decimal value\n sorted_arr = sorted(arr, key=lambda x: (ones_count[x], x))\n return sorted_arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n # Initialize an empty list to store the words that contain exactly n consonants\n words_list = []\n # Split the string s into a list of words\n words_list = s.split()\n # Loop through each word in the list and check if it contains exactly n consonants\n for word in words_list:\n # Initialize a variable to count the number of consonants in the word\n consonant_count = 0\n # Loop through each character in the word and check if it is a consonant\n for char in word:\n # Check if the character is a consonant\n if char.isalpha() and char.isupper():\n # If the character is a consonant, increment the consonant count\n consonant_count += 1\n # If the word contains exactly n consonants, add it to the list of words\n if consonant_count == n:\n words_list.append(word)\n # Return the list of words that contain exactly n consonants\n return words_list"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n vowels = ['a', 'e', 'i', 'o', 'u']\n has_vowel = False\n closest_vowel = ''\n \n for i in range(len(word) - 1, -1, -1):\n if word[i] in vowels and not has_vowel:\n has_vowel = True\n closest_vowel = word[i]\n \n return closest_vowel"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n left = '('\n right = ')'\n good = False\n for i in range(len(lst)):\n if lst[i] == left:\n good = True\n elif lst[i] == right:\n good = False\n elif lst[i] =='':\n continue\n else:\n return 'No'\n if good:\n return 'Yes'\n else:\n return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n if len(arr) <= k:\n return arr\n elif k > len(arr):\n return arr[:k]\n else:\n return sorted(arr)[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n odd_even_sum = 0\n for i in range(len(lst)):\n if i % 2 == 0 and lst[i] % 2!= 0:\n odd_even_sum += lst[i]\n return odd_even_sum"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n \"\"\"\n Given a non-empty array of integers arr and an integer k, return\n the sum of the elements with at most two digits from the first k elements of arr.\n \n Example:\n \n Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n Output: 24 # sum of 21 + 3\n \n Constraints:\n 1. 1 <= len(arr) <= 100\n 2. 1 <= k <= len(arr)\n \"\"\"\n \n # Initialize sum to 0\n sum = 0\n \n # Loop through the first k elements of arr\n for i in range(k):\n # Get the i-th element of arr\n arr_i = arr[i]\n \n # Check if the element has at most two digits\n if len(str(arr_i)) <= 2:\n # Add the element to the sum\n sum += arr_i\n \n return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n \"\"\"\n Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n \n The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n as follows: start with any positive integer n. Then each term is obtained from the \n previous term as follows: if the previous term is even, the next term is one half of \n the previous term. If the previous term is odd, the next term is 3 times the previous\n term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n \n Note: \n 1. Collatz(1) is [1].\n 2. returned list sorted in increasing order.\n \n For example:\n get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n \"\"\"\n # Initialize the list to store the odd numbers in collatz sequence\n odd_collatz_list = []\n # Check if n is odd or even\n if n % 2 == 0:\n # If n is even, add n/2 to the list\n odd_collatz_list.append(n/2)\n else:\n # If n is odd, add n to the list\n odd_collatz_list.append(n)\n # Check if the list is empty or not\n if len(odd_collatz_list) == 0:\n # If the list is empty, return an empty list\n return []\n else:\n # If the list is not empty, sort the list in increasing order and return it\n odd_collatz_list.sort()\n return odd_collatz_list"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n \"\"\"You have to write a function which validates a given date string and\n returns True if the date is valid otherwise False.\n The date is valid if all of the following rules are satisfied:\n 1. The date string is not empty.\n 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n 3. The months should not be less than 1 or higher than 12.\n 4. The date should be in the format: mm-dd-yyyy\n\n for example: \n valid_date('03-11-2000') => True\n\n valid_date('15-01-2012') => False\n\n valid_date('04-0-2040') => False\n\n valid_date('06-04-2020') => True\n\n valid_date('06/04/2020') => False\n \"\"\"\n # Check if the date string is not empty\n if not date:\n return False\n # Split the date string into three parts (month, day, year)\n month, day, year = map(int, date.split('-'))\n # Check if the number of days is valid for the given month\n if month == 2:\n if day > 29:\n return False\n elif month == 4 or month == 6 or month == 9 or month == 11:\n if day > 30:\n return False\n elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n if day > 31:\n return False\n elif month < 1 or month > 12:\n return False\n # Check if the year is valid (four digits)\n if len(year)!= 4:\n return False\n # Check if the date"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n # split on whitespace\n words = txt.split()\n # if no whitespace exists, split on commas\n if not words:\n words = txt.split(\",\")\n # if no commas exists, count lower-case letters with odd order in the alphabet\n if not words:\n return len([word for word in txt if word.islower() and ord(word[0]) % 2 == 1])\n return words"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n # Create a set of unique values in the list\n unique_values = set(lst)\n # Check if the length of the list is equal to the length of the set\n if len(lst)!= len(unique_values):\n return False\n # Check if the first and last values are the same\n if lst[0]!= lst[-1]:\n return False\n # Iterate through the list and check if each value is greater than or equal to the previous value\n for i in range(len(lst)):\n if lst[i] < lst[i+1]:\n return False\n return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n \"\"\"You are given two intervals,\n where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n The given intervals are closed which means that the interval (start, end)\n includes both start and end.\n For each given interval, it is assumed that its start is less or equal its end.\n Your task is to determine whether the length of intersection of these two \n intervals is a prime number.\n Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n which its length is 1, which not a prime number.\n If the length of the intersection is a prime number, return \"YES\",\n otherwise, return \"NO\".\n If the two intervals don't intersect, return \"NO\".\n\n\n [input/output] samples:\n intersection((1, 2), (2, 3)) ==> \"NO\"\n intersection((-1, 1), (0, 4)) ==> \"NO\"\n intersection((-3, -1), (-5, 5)) ==> \"YES\"\n \"\"\"\n start1, end1 = interval1\n start2, end2 = interval2\n \n if start1 > end2 or start2 > end1:\n return \"NO\"\n \n intersection_start = max(start1, start2)\n intersection_end = min(end1, end2)\n \n intersection_length = intersection_end - intersection_start + 1\n \n if intersection_length == 1:\n return \"NO\"\n \n for i in range(2, int(intersection_length ** 0.5) + 1):\n if intersection_length % i == 0:\n return \"NO\"\n \n return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n if len(arr) == 0:\n return None\n else:\n product = 1\n for num in arr:\n if num == 0:\n product *= 0\n elif num > 0:\n product *= 1\n else:\n product *= -1\n return product * sum(abs(num) for num in arr)"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n # Initialize a queue to store the cells to visit\n queue = [[0, 0]] # Start from the top-left cell\n # Initialize an empty list to store the values on the cells that the minimum path go through\n path = []\n # Initialize a dictionary to store the values on each cell\n grid = [[0] * (k + 1) for _ in range(k + 1)]\n # Fill the grid with the values from the input grid\n for i in range(k + 1):\n for j in range(k + 1):\n grid[i][j] = grid[j][i] = (i + 1) * (j + 1)\n # Initialize a dictionary to store the visited cells\n visited = {(0, 0): True}\n # Initialize a dictionary to store the values on the visited cells\n visited_values = {(0, 0): 0}\n # Initialize a dictionary to store the neighbors of each cell\n neighbors = {(0, 0): [(1, 0), (0, 1)]}\n # Initialize a dictionary to store the values on the neighbors of each cell\n neighbors_values = {(0, 0): [(1, 0), (0, 1)]}\n # Initialize a dictionary to store the paths of length k\n paths = {}\n # Initialize a dictionary to store the values on the paths of length k\n path_values = {}\n # Initialize a dictionary to store the paths of length k that are less than the current path\n less_paths = {}\n # Initialize a dictionary to store the values on the paths of length k that are less than the current path\n less_path_values = {}\n # Initialize a dictionary to store the paths of length k that are greater than the current path\n greater_paths = {}\n # Initialize a dictionary to store the values on the paths of length k that are greater than the current path\n greater_path_values = {}\n # Initialize a dictionary to store the paths of length k that are equal to the current path\n equal_paths = {}\n # Initialize a dictionary to store the values on the paths of length k that are equal to the current path\n equal_path_values = {}\n # Initialize a dictionary to store the paths of length k that are greater than"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n the last couple centuries. However, what people don't know is Tribonacci sequence.\n Tribonacci sequence is defined by the recurrence:\n tri(1) = 3\n tri(n) = 1 + n / 2, if n is even.\n tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n For example:\n tri(2) = 1 + (2 / 2) = 2\n tri(4) = 3\n tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n You are given a non-negative integer number n, you have to a return a list of the \n first n + 1 numbers of the Tribonacci sequence.\n Examples:\n tri(3) = [1, 3, 2, 8]\n \"\"\"\n if n == 1:\n return [3]\n elif n == 2:\n return [3, 2]\n else:\n result = [3]\n for i in range(2, n+1):\n if i % 2 == 0:\n result.append(1 + i / 2)\n else:\n result.append(result[-1] + result[-2] + result[i-1])\n return result"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n odd_digits = 1\n for digit in str(n):\n if int(digit) % 2!= 0:\n odd_digits *= int(digit)\n return odd_digits\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n # Define a helper function to check if a given string is nested or not\n def is_nested_helper(string):\n # Initialize a flag to check if a nested bracket is found\n nested = False\n # Iterate through each character in the string\n for i in range(len(string)):\n # If the character is an opening bracket\n if string[i] == '[':\n # Initialize a flag to check if a closing bracket is found\n closed = False\n # Iterate through each character until a closing bracket is found\n for j in range(i + 1, len(string)):\n # If the character is a closing bracket and it is not the opening bracket\n if string[j] == ']' and j!= i + 1:\n closed = True\n # If a closing bracket is found and it is nested\n if nested and closed:\n nested = False\n # If a closing bracket is found and it is not nested\n elif closed:\n nested = True\n # If a closing bracket is not found and it is nested\n elif not closed and nested:\n nested = False\n # If a closing bracket is not found and it is not nested\n else:\n nested = True\n # If a nested bracket is found, return True\n if nested:\n return True\n # If no nested bracket is found, return False\n else:\n return False\n # Call the helper function to check if the given string is nested\n return is_nested_helper(string)"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n \"\"\"You are given a list of numbers.\n You need to return the sum of squared numbers in the given list,\n round each element in the list to the upper int(Ceiling) first.\n Examples:\n For lst = [1,2,3] the output should be 14\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1.4,4.2,0] the output should be 29\n For lst = [-2.4,1,1] the output should be 6\n \"\"\"\n total = 0\n for num in lst:\n total += num**2\n return round(total)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n # Remove all non-alphabetical characters from the string\n txt = ''.join(filter(str.isalpha, txt))\n \n # Check if the last character is a letter and is not part of a word\n return not txt.endswith(' ') and txt.endswith(str.isalpha([txt]))"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n \"\"\"Create a function which returns the largest index of an element which\n is not greater than or equal to the element immediately preceding it. If\n no such element exists then return -1. The given array will not contain\n duplicate values.\n\n Examples:\n can_arrange([1,2,4,3,5]) = 3\n can_arrange([1,2,3]) = -1\n \"\"\"\n \n for i in range(len(arr)-1):\n if arr[i] > arr[i+1]:\n return i\n return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n if not lst:\n return (None, None)\n elif all(x >= 0 for x in lst):\n return (None, lst[0])\n elif all(x <= 0 for x in lst):\n return (lst[-1], None)\n else:\n return (lst[0], lst[-1])"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n \"\"\"\n Create a function that takes integers, floats, or strings representing\n real numbers, and returns the larger variable in its given variable type.\n Return None if the values are equal.\n Note: If a real number is represented as a string, the floating point might be. or,\n \"\"\"\n if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n if a > b:\n return a\n elif b > a:\n return b\n elif isinstance(a, str) and isinstance(b, str):\n a = float(a.replace(\",\", \".\"))\n b = float(b.replace(\",\", \".\"))\n if a > b:\n return a\n elif b > a:\n return b\n else:\n return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n Example\n is_equal_to_sum_even(4) == False\n is_equal_to_sum_even(6) == False\n is_equal_to_sum_even(8) == True\n \"\"\"\n # code to be added here\n sum_even = 0\n count = 0\n for i in range(n):\n if i % 2 == 0 and i > 0:\n sum_even += i\n count += 1\n if count == 4:\n return True\n return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n \"\"\"The Brazilian factorial is defined as:\n brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n where n > 0\n\n For example:\n >>> special_factorial(4)\n 288\n\n The function will receive an integer as input and should return the special\n factorial of this integer.\n \"\"\"\n if n <= 0:\n return 0\n else:\n return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n \"\"\"\n Given a string text, replace all spaces in it with underscores, \n and if a string has more than 2 consecutive spaces, \n then replace all consecutive spaces with - \n \n fix_spaces(\"Example\") == \"Example\"\n fix_spaces(\"Example 1\") == \"Example_1\"\n fix_spaces(\" Example 2\") == \"_Example_2\"\n fix_spaces(\" Example   3\") == \"_Example-3\"\n \"\"\"\n # split the string into a list of words\n words = text.split()\n # iterate through the words and replace spaces with underscores\n fixed_words = [word.replace(\" \", \"_\") for word in words]\n # join the words back into a string\n fixed_text = \" \".join(fixed_words)\n # replace all consecutive spaces with -\n new_text = \"\"\n last_char = \"\"\n for char in fixed_text:\n if char == \" \":\n if last_char == \" \":\n new_text += \"-\"\n else:\n new_text += \" \"\n last_char = \" \"\n else:\n new_text += char\n last_char = char\n return new_text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n # Check if the file name contains more than three digits\n if file_name.count('0') > 3 or file_name.count('1') > 3 or file_name.count('2') > 3 or file_name.count('3') > 3 or file_name.count('4') > 3 or file_name.count('5') > 3 or file_name.count('6') > 3 or file_name.count('7') > 3 or file_name.count('8') > 3 or file_name.count('9') > 3:\n return 'No'\n \n # Check if the file name contains exactly one dot\n if file_name.count('.')!= 1:\n return 'No'\n \n # Check if the substring before the dot starts with a letter from the latin alphapet\n if not file_name.startswith(file_name.split('.')[0].isalpha()):\n return 'No'\n \n # Check if the substring after the dot is valid\n if not file_name.split('.')[1].lower() in ['txt', 'exe', 'dll']:\n return 'No'\n \n return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n \"\"\"\n This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n \n Examples:\n For lst = [1,2,3] the output should be 6\n For lst = []  the output should be 0\n For lst = [-1,-5,2,-1,-5]  the output should be -126\n \"\"\"\n total = 0\n for i in range(len(lst)):\n if i % 3 == 0:\n lst[i] = lst[i] ** 2\n elif i % 4 == 0 and i % 3!= 0:\n lst[i] = lst[i] ** 3\n total += lst[i]\n return total"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n words = sentence.split()\n prime_words = []\n for word in words:\n if len(word) == 1 or all(len(word) % i!= 0 for i in range(2, int(len(word))+1)):\n prime_words.append(word)\n return''.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n x_num = int(x.split('/')[0])\n x_den = int(x.split('/')[1])\n n_num = int(n.split('/')[0])\n n_den = int(n.split('/')[1])\n \n if x_den == 1 and n_den == 1:\n return True\n elif x_num % n_num == 0 and n_den == 1:\n return True\n elif x_den == 1 and x_num % n_num == 0:\n return True\n else:\n return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n \"\"\"\n Write a function which sorts the given list of integers\n in ascending order according to the sum of their digits.\n Note: if there are several items with similar sum of their digits,\n order them based on their index in original list.\n \n For example:\n >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n >>> order_by_points([]) == []\n \"\"\"\n # Create a dictionary to store the sum of digits for each number\n # and its index in the original list\n digit_sum = {}\n for i, num in enumerate(nums):\n # Get the sum of digits for the current number\n if num < 0:\n num = abs(num)\n digit_sum[num] = i\n \n # Sort the list of numbers based on their sum of digits\n sorted_nums = sorted(digit_sum.items(), key=lambda x: x[1])\n \n # Get the sorted list of original numbers\n sorted_nums = [nums[i] for i in sorted_nums[0]]\n \n return sorted_nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n count = 0\n for num in nums:\n if num > 10 and (num % 10) % 2 == 0 and (num // 10) % 2 == 0:\n count += 1\n return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n a = [i * i - i + 1 for i in range(n)]\n max_triples = 0\n for i in range(n):\n for j in range(i + 1, n):\n for k in range(j + 1, n):\n if a[i] + a[j] + a[k] % 3 == 0:\n max_triples += 1\n return max_triples"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n # Define a list of the eight planets in our solar system\n planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n \n # Check if planet1 and planet2 are valid planet names\n if planet1 not in planets or planet2 not in planets:\n return ()\n \n # Define a dictionary to store the orbits of each planet\n planet_orbits = {\n \"Mercury\": 0.39,\n \"Venus\": 0.72,\n \"Earth\": 1.00,\n \"Mars\": 1.52,\n \"Jupiter\": 5.20,\n \"Saturn\": 9.58,\n \"Uranus\": 19.18,\n \"Neptune\": 30.07\n }\n \n # Calculate the orbits of planet1 and planet2\n planet1_orbit = planet_orbits[planet1]\n planet2_orbit = planet_orbits[planet2]\n \n # Define a list of planets whose orbits are located between the orbit of planet1 and the orbit of planet2\n result = []\n for planet in planets:\n if planet_orbits[planet] >= planet1_orbit and planet_orbits[planet] <= planet2_orbit:\n result.append(planet)\n \n # Sort the result list by the proximity to the sun\n result.sort()\n \n return tuple(result)"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n \"\"\"Write a function that accepts a list of strings as a parameter,\n deletes the strings that have odd lengths from it,\n and returns the resulted list with a sorted order,\n The list is always a list of strings and never an array of numbers,\n and it may contain duplicates.\n The order of the list should be ascending by length of each word, and you\n should return the list sorted by that rule.\n If two words have the same length, sort the list alphabetically.\n The function should return a list of strings in sorted order.\n You may assume that all words will have the same length.\n For example:\n assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n \"\"\"\n # Create a new list to store the sorted words\n sorted_lst = []\n # Loop through the input list\n for word in lst:\n # Check if the length of the word is even\n if len(word) % 2 == 0:\n # Add the word to the sorted list if it has even length\n sorted_lst.append(word)\n # Sort the list by length of each word, and then alphabetically\n sorted_lst.sort(key=lambda x: (len(x), x))\n return sorted_lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n \"\"\"A simple program which should return the value of x if n is \n a prime number and should return the value of y otherwise.\n \n Examples:\n for x_or_y(7, 34, 12) == 34\n for x_or_y(15, 8, 5) == 5\n \"\"\"\n \n if n == 2 or n == 3 or n == 5 or n == 7 or n == 11 or n == 13 or n == 17 or n == 19 or n == 23 or n == 29 or n == 31:\n return x\n else:\n return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n '''\n Given a list of numbers, return the sum of squares of the numbers\n in the list that are odd. Ignore numbers that are negative or not integers.\n \n double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n double_the_difference([-1, -2, 0]) == 0\n double_the_difference([9, -2]) == 81\n double_the_difference([0]) == 0\n \n If the input list is empty, return 0.\n '''\n \n sum_of_squares = 0\n \n for num in lst:\n if num >= 0 and isinstance(num, int):\n if num % 2!= 0:\n sum_of_squares += num**2\n \n return sum_of_squares"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n \"\"\"I think we all remember that feeling when the result of some long-awaited\n event is finally known. The feelings and thoughts you have at that moment are\n definitely worth noting down and comparing.\n Your task is to determine if a person correctly guessed the results of a number of matches.\n You are given two arrays of scores and guesses of equal length, where each index shows a match. \n Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n the value is 0, and if not, the value is the absolute difference between the guess and the score.\n \n example:\n \n compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n \"\"\"\n \n diffs = []\n for i in range(len(game)):\n if game[i] == guess[i]:\n diffs.append(0)\n else:\n diffs.append(abs(game[i] - guess[i]))\n \n return diffs"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n \"\"\"You will be given the name of a class (a string) and a list of extensions.\n The extensions are to be used to load additional classes to the class. The\n strength of the extension is as follows: Let CAP be the number of the uppercase\n letters in the extension's name, and let SM be the number of lowercase letters \n in the extension's name, the strength is given by the fraction CAP - SM. \n You should find the strongest extension and return a string in this \n format: ClassName.StrongestExtensionName.\n If there are two or more extensions with the same strength, you should\n choose the one that comes first in the list.\n For example, if you are given \"Slices\" as the class and a list of the\n extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n (its strength is -1).\n Example:\n for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n \"\"\"\n \n class_name = class_name.split('.')[-1] # get the last part of the class name\n extensions = sorted(extensions, key=lambda x: (len(x.upper()-len(x.lower())))/len(x)) # sort the extensions by strength\n \n for extension in extensions:\n if extension[0].isupper(): # check if the extension starts with an uppercase letter\n return class_name + '.' + extension # return the class name with the strongest extension\n \n return class_name + '.' + extensions[0] # return the class name with the first extension if there are no strong extensions"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n cycpattern_check(\"abcd\",\"abd\") => False\n cycpattern_check(\"hello\",\"ell\") => True\n cycpattern_check(\"whassup\",\"psus\") => False\n cycpattern_check(\"abab\",\"baa\") => True\n cycpattern_check(\"efef\",\"eeff\") => False\n cycpattern_check(\"himenss\",\"simen\") => True\n\n \"\"\"\n # Convert both the strings to lowercase to avoid case sensitivity\n a = a.lower()\n b = b.lower()\n # Check if the second word is present in the first word\n if a.find(b)!= -1:\n return True\n # Check if any rotation of the second word is present in the first word\n for i in range(len(b)):\n for j in range(len(b)):\n if i == 0 and j == 0:\n continue\n if a.find(b[i:j+1])!= -1:\n return True\n return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n \n Example:\n even_odd_count(-12) ==> (1, 1)\n even_odd_count(123) ==> (1, 2)\n \"\"\"\n count = 0\n odd_count = 0\n for digit in str(num):\n if int(digit) % 2 == 0:\n count += 1\n else:\n odd_count += 1\n return (count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n roman = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n result = \"\"\n while number > 0:\n digit = number % 10\n number //= 10\n if digit in [1, 2, 3, 4, 5, 6, 7, 8, 9]:\n result = roman[digit] + result\n else:\n result = roman[10 - digit] + result\n return result.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n '''\n Given the lengths of the three sides of a triangle. Return True if the three\n sides form a right-angled triangle, False otherwise.\n A right-angled triangle is a triangle in which one angle is right angle or \n 90 degree.\n Example:\n right_angle_triangle(3, 4, 5) == True\n right_angle_triangle(1, 2, 3) == False\n '''\n \n # Check if the triangle is a right-angled triangle\n if (a**2 + b**2) == c**2:\n return True\n else:\n return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n unique_chars = {}\n max_chars = 0\n max_word = \"\"\n for word in words:\n ch = set(word)\n if len(ch) > max_chars:\n max_chars = len(ch)\n max_word = word\n return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n if remaining >= need:\n remaining -= need\n return [number + need, remaining]\n else:\n remaining = 0\n return [number + need, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n \"\"\"\n Given two lists operator, and operand. The first list has basic algebra operations, and \n the second list is a list of integers. Use the two given lists to build the algebric \n expression and return the evaluation of this expression.\n \n The basic algebra operations:\n Addition ( + ) \n Subtraction ( - ) \n Multiplication ( * ) \n Floor division ( // ) \n Exponentiation ( ** ) \n \n Example:\n operator['+', '*', '-']\n array = [2, 3, 4, 5]\n result = 2 + 3 * 4 - 5\n => result = 9\n \n Note:\n The length of operator list is equal to the length of operand list minus one.\n Operand is a list of of non-negative integers.\n Operator list has at least one operator, and operand list has at least two operands.\n \"\"\"\n # Initialize the result variable to 0\n result = 0\n # Iterate over the operator list\n for op in operator:\n # Initialize the operand list for this operator\n operand_list = operand\n # Iterate over the operand list\n for i in range(len(operand)):\n # If the operator is addition, subtraction or multiplication, add the operand to the result\n if op == '+' or op == '-' or op == '*':\n result += operand_list[i]\n # If the operator is floor division, divide the operand to the result\n elif op == '//':\n result /= operand_list[i]\n # If the operator is exponentiation, raise the result to the power of the operand\n elif op == '**':\n result = result ** operand_list[i]\n # If the operator is not recognized, return an error\n else:\n return \"Error: Unrecognized operator\"\n # Return the result\n return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n \"\"\"You are given a string s.\n if s[i] is a letter, reverse its case from lower to upper or vise versa, \n otherwise keep it as it is.\n If the string contains no letters, reverse the string.\n The function should return the resulted string.\n Examples\n solve(\"1234\") = \"4321\"\n solve(\"ab\") = \"AB\"\n solve(\"#a@C\") = \"#A@c\"\n \"\"\"\n # Check if the string contains any letters\n if not any(char.isalpha() for char in s):\n # If the string contains no letters, reverse it\n return s[::-1]\n else:\n # Otherwise, reverse the case of each letter\n return ''.join(chr(ord(char) ^ (ord(char) & 1)) for char in s)"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n \"\"\"\n Given a string 'text', return its md5 hash equivalent string.\n If 'text' is an empty string, return None.\n \n >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n \"\"\"\n if text == '':\n return None\n else:\n import hashlib\n return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n \"\"\"\n Given two positive integers a and b, return the even digits between a\n and b, in ascending order.\n \n For example:\n generate_integers(2, 8) => [2, 4, 6, 8]\n generate_integers(8, 2) => [2, 4, 6, 8]\n generate_integers(10, 14) => []\n \"\"\"\n \n even_digits = []\n \n for i in range(a, b+1):\n if i % 2 == 0:\n even_digits.append(i)\n \n return sorted(even_digits)"}
