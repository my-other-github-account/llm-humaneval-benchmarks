{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    separated_groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return separated_groups\n            group = stack.pop()\n            if len(stack) % 2 == 0:\n                separated_groups.append(group)\n            else:\n                stack.append(group)\n    return separated_groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        if operation < 0:\n            return True\n        balance += operation\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(num - mean) for num in numbers) / len(numbers)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return [numbers[0]]\n    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + [numbers[2]] + [delimeter] + [numbers[3]] + [delimeter] + [numbers[4]] + [delimeter] + [numbers[5]] + [delimeter] + [numbers[6]] + [delimeter] + [numbers[7]] + [delimeter] + [numbers[8]] + [delimeter] + [numbers[9]] + [delimeter] + [numbers[10]] + [delimeter] + [numbers[11]] + [delimeter] + [numbers[12]] + [delimeter] + [numbers[13]] + [delimeter] + [numbers[14]] + [delimeter] + [numbers[15]] + [delimeter] + [numbers[16]] + [delimeter] + [numbers[17]] + [delimeter] + [numbers[18]] + [delimeter] + [numbers[19]] + [delimeter] + [numbers[20]] + [delimeter] + [numbers[21]] + [delimeter] + [numbers[22]] + [delimeter] + [numbers[23]] + [delimeter] + [numbers[24]] + [delimeter] + [numbers[25]] + [delimeter] + [numbers[26]] + [delimeter] + [numbers[27]] + [delimeter] + [numbers[28]] + [delimeter] + [numbers[29]] + [delimeter] + [numbers[30]] + [delimeter] + [numbers[31]] + [delimeter] + [numbers["}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_levels = []\n    current_level = 0\n    paren_stack = []\n\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if not paren_stack:\n                current_level += 1\n            else:\n                paren_stack.pop()\n\n        if current_level == 0:\n            nested_levels.append(len(paren_stack))\n\n    return nested_levels"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    # Initialize the result list with the first element of the input list\n    result = [numbers[0]]\n    # Initialize the maximum element seen so far\n    max_element = numbers[0]\n    # Iterate over the input list\n    for i in range(1, len(numbers)):\n        # If the current element is greater than the maximum element seen so far, update the maximum element\n        if numbers[i] > max_element:\n            max_element = numbers[i]\n            # Update the result list with the new maximum element\n            result = [max_element] + result\n    # Return the result list\n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    \n    # find the longest palindrome postfix\n    max_len = 0\n    for i in range(len(string)):\n        # check if the substring from i to the end is a palindrome\n        if is_palindrome(string[i:]) and len(string[i:]) > max_len:\n            max_len = len(string[i:])\n    \n    # find the reverse of the prefix\n    prefix_len = len(string) - max_len\n    prefix_rev = string[prefix_len:]\n    prefix_rev = prefix_rev[::-1]\n    \n    # combine the palindrome postfix and the reversed prefix\n    palindrome = string[:max_len]\n    palindrome += prefix_rev\n    \n    return palindrome"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += a[i]\n        elif i < len(b):\n            result += b[i]\n        else:\n            result += \"0\"\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = min(strings, key=len)\n    for s in strings:\n        if len(s) > len(longest_string):\n            longest_string = s\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return a greatest common divisor of two integers a and b\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    return greatest_common_divisor(a, b - a)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list of all prefixes from shortest to longest of the input string\n    \"\"\"\n    if not string:\n        return []\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[i])\n        prefix = prefixes[-1]\n        for j in range(i, len(string)):\n            prefixes.append(prefix + string[j])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    sequence =''.join(str(i) for i in range(n+1))\n    return sequence"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    distinct_characters = set(string.lower())\n    return len(distinct_characters)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = []\n    for note in music_string:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"Find how many times a given substring can be found in the original string. Count overlaping cases.\"\"\"\n    count = 0\n    current_count = 0\n    current_substring_start = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            current_count += 1\n            if current_count == 1:\n                count += 1\n            current_substring_start = i\n\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(num) for num in numbers]\n    numbers.sort()\n    return''.join(str(num) for num in numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    numbers.sort()\n    closest_pair = numbers[-1], numbers[-2]\n    for i in range(len(numbers)-2):\n        diff = numbers[i+1] - numbers[i]\n        if not closest_pair[0] or diff < closest_pair[1]:\n            closest_pair = numbers[i], numbers[i+1]\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list of numbers should have at least two elements\")\n\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scaled_numbers = [num - min_num for num in numbers]\n    scaled_numbers = [num / (max_num - min_num) for num in scaled_numbers]\n    return scaled_numbers"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    result = []\n    for value in values:\n        if type(value) == int:\n            result.append(value)\n    return result"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    largest_divisor = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i > largest_divisor:\n                largest_divisor = i\n    return largest_divisor"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    if n <= 1:\n        return []\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    seen = set()  # set to keep track of seen elements\n    result = []  # list to store unique elements\n    for num in numbers:\n        if num not in seen:  # if element not seen before\n            seen.add(num)  # add element to set\n            result.append(num)  # add element to result list\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    if not strings:\n        return []\n    if not prefix:\n        return strings\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    result = []\n    for num in l:\n        if num >= 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have an even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have a non-zero coefficient\")\n    \n    # find_zero uses binary search to find the zero point\n    left, right = xs[0], xs[-1]\n    while left < right:\n        mid = (left + right) / 2\n        if poly(xs, mid) < 0:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    # Create a new list to store the sorted values\n    l_sorted = sorted(l[::3])\n    # Create a list to store the indices of the original list that need to be sorted\n    indices_to_sort = [i for i in range(len(l)) if i % 3 == 0]\n    # Iterate over the indices and sort the values\n    for i in indices_to_sort:\n        l_sorted[i] = l[i]\n    # Return the sorted list\n    return l_sorted"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0) and (i % 13 == 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    even_indices = [i for i in range(0, len(l), 2)]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    return [l[i] for i in even_indices if i % 2 == 0] + [even_values[i] for i in even_indices if i % 2!= 0]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse the elements in each group.\n    groups = [group[::-1] for group in groups]\n    # join the elements in each group.\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        fib = [0, 1]\n        for i in range(2, n+1):\n            fib.append(fib[i-1] + fib[i-2])\n        for i in range(2, len(fib)):\n            if is_prime(fib[i]):\n                return fib[i]\n    return None\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime returns True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if i!= j and i!= k and j!= k and l[i] + l[j] + l[k] == 0 and l[i] not in seen and l[j] not in seen and l[k] not in seen:\n                    return True\n                elif l[i] + l[j] + l[k] == 0:\n                    seen.add(l[i])\n                    seen.add(l[j])\n                    seen.add(l[k])\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Your code here\n    # Initialize a variable to keep track of the number of collisions\n    collisions = 0\n    \n    # Iterate through the cars\n    for i in range(n):\n        # If a car from the left set is moving to the right and there is a car from the right set moving to the left\n        if (i < n // 2 and (i + 1) % 2 == 1):\n            # Increment the number of collisions\n            collisions += 1\n    \n    # Return the number of collisions\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    for i in range(len(l)):\n        l[i] += 1\n    return l"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    # Find the smallest multiple of base that is greater than or equal to x\n    multiple = 1\n    while multiple < x:\n        multiple *= base\n    \n    # Divide x by the multiple to get the remainder\n    remainder = x - multiple * (x // multiple)\n    \n    # Convert the remainder to base\n    remainder_str = ''\n    while remainder > 0:\n        remainder_str = str(remainder % base) + remainder_str\n        remainder //= base\n    \n    # Combine the multiple and remainder to get the final result\n    return str(multiple) + remainder_str"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    # Calculate the area of the triangle using the formula (1/2) * base * height\n    area = (0.5 * a * h)\n    return area"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    # Initialize the first four values of the sequence\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    \n    # Compute the n-th element of the sequence\n    for i in range(5, n+1):\n        # Update the values of the sequence\n        a = b\n        b = c\n        c = d\n        d = a + b + c + d\n        \n        # Return the n-th element of the sequence\n        if i >= 5:\n            return d\n"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        middle_index = len(l) // 2\n        return (l[middle_index - 1] + l[middle_index]) / 2\n    else:\n        middle_index = int(len(l) / 2)\n        return l[middle_index]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Remove all non-alphanumeric characters\n    text = re.sub('[^a-zA-Z0-9]', '', text)\n    # Check if the string is a palindrome\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n    # Handle edge cases\n    if n == 0:\n        return 1\n    if n % 2 == 1:\n        return 1\n\n    # Compute result using binary exponentiation\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * 2) % p\n        n //= 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    text_without_vowels = [char for char in text if char not in vowels]\n    return ''.join(text_without_vowels)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    # Create a set of characters from the first string\n    char_set0 = set(s0.lower())\n    \n    # Check if the second string has the same characters as the first string\n    for char in s1.lower():\n        if char not in char_set0:\n            return False\n    \n    # Reverse the strings and repeat the above step\n    char_set1 = set(s1.lower())\n    for char in s0.lower():\n        if char not in char_set1:\n            return False\n    \n    # If both strings have the same characters, return True\n    return True"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0 or stack[-1]!= \"<\":\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return False\n    prev_element = l[0]\n    for element in l[1:]:\n        if (prev_element < element and element < prev_element) or (prev_element > element and element > prev_element):\n            return False\n        prev_element = element\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    # find the intersection of the two lists\n    common_elements = set(l1) & set(l2)\n    # sort the common elements\n    sorted_common_elements = sorted(list(common_elements))\n    return sorted_common_elements"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n            if is_prime(n):\n                return n\n        else:\n            i += 1\n    return n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return float('inf')\n    else:\n        return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"(\" and \"(\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\"}"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    n = len(xs)\n    res = [xs[n-2] * (2*i+1) for i in range(n-1)]\n    return res"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n < 3:\n        return 0\n    a = 0\n    b = 1\n    c = 1\n    for i in range(3, n+1):\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    return c"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = 'aeiouy'\n    count = 0\n    for c in s:\n        if c in vowels:\n            count += 1\n    if 'y' in s and s.endswith('y'):\n        count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # Get the number of digits in x\n    num_digits = len(str(x))\n    # Check if shift is greater than number of digits\n    if shift > num_digits:\n        # Reverse the digits and return\n        return ''.join(str(x)[-shift:])\n    # Create a list of the digits in x\n    digits = [int(c) for c in str(x)]\n    # Shift the digits\n    for i in range(shift):\n        digits.append(digits.pop(0))\n    # Convert the list of digits back to a string\n    return ''.join(str(digits))"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the ASCII codes of the upper characters only.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    # split the string by the 'and' word\n    s_list = s.split(\"and\")\n    # initialize a variable to store the number of mango fruits\n    mango_fruits = 0\n    # loop through the list of strings\n    for f in s_list:\n        # convert the string to an integer\n        f_num = int(f.strip())\n        # subtract the number of mango fruits from the total number of fruits\n        n -= f_num\n        # if the string represents oranges, add the number of oranges to the mango_fruits\n        if \"oranges\" in f:\n            mango_fruits += f_num\n        # if the string represents apples, subtract the number of apples from the total number of fruits\n        elif \"apples\" in f:\n            n -= f_num\n    # return the number of mango fruits\n    return mango_fruits"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_nodes = [node for node in arr if node % 2 == 0]\n    if not even_nodes:\n        return []\n\n    smallest_even_node = min(even_nodes)\n    smallest_even_node_index = even_nodes.index(smallest_even_node)\n    return [smallest_even_node, smallest_even_node_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    for num, freq in freq.items():\n        if freq >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Initialize variables\n    result = []\n    temp = []\n\n    # Iterate through the list\n    for item in lst:\n        # Append item to temp list if it is the minimum or maximum\n        if len(temp) == 0 or (len(temp) == 1 and item!= temp[0]):\n            temp.append(item)\n        # Append item to result list if it is the minimum or maximum\n        elif len(result) == 0 or (len(result) == 1 and item!= result[-1]):\n            result.append(item)\n\n    # Return the result\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Check if the three sides make a valid triangle\n    if (a + b > s) and (a + c > s) and (b + c > s):\n        # Calculate the area\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        \n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    \n    # If the three sides do not make a valid triangle, return -1\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n    # Check if the list is balanced\n    if q[0]!= q[-1]:\n        return False\n    \n    # Check if the sum of elements is less than or equal to the maximum possible weight\n    total_weight = sum(q)\n    if total_weight > w:\n        return False\n    \n    return True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Initialize variables\n    n = len(arr)\n    # Initialize variables\n    left = 0\n    right = n - 1\n    # Initialize variables\n    max_len = 0\n    max_left = 0\n    max_right = 0\n    # Initialize variables\n    count = 0\n    # Loop through the array\n    while left <= right:\n        # Check if the subarray is palindromic\n        if arr[left] == arr[right]:\n            # Update the maximum subarray length\n            if (right - left + 1) > max_len:\n                max_len = right - left + 1\n                max_left = left\n                max_right = right\n        else:\n            # If not palindromic, increment the count\n            count += 1\n        # Move the left pointer and right pointer towards center\n        if left < right:\n            if arr[left] < arr[right]:\n                left += 1\n            else:\n                right -= 1\n    # Return the minimum number of elements to be changed\n    return max_len - count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    # Initialize a variable to store the total number of characters\n    total_chars = 0\n    \n    # Iterate through the first list\n    for item in lst1:\n        # Check if the item is in the second list\n        if item in lst2:\n            # If the item is in the second list, add its length to the total\n            total_chars += len(item)\n    \n    # Iterate through the second list\n    for item in lst2:\n        # Check if the item is in the first list\n        if item in lst1:\n            # If the item is in the first list, add its length to the total\n            total_chars += len(item)\n    \n    # Return the list with the lower total number of characters\n    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # Check if a is less than 100\n    if a < 100:\n        # Check if a is a multiple of 3\n        if a % 3 == 0:\n            # Check if a is the product of 3 prime numbers\n            prime_factors = []\n            for i in range(2, int(a**0.5) + 1):\n                while a % i == 0:\n                    prime_factors.append(i)\n                    a //= i\n            if len(prime_factors) == 3:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    # Check if x is a simple power of n\n    return x == n**int(n.__class__.__name__[5:])"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0:\n        return True\n    for i in range(1, int(a**(1/3))+1):\n        if a == i*i*i:\n            return True\n    return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    hex_digits = \"0123456789ABCDEF\"\n    hex_primes = \"2357111317\"\n    count = 0\n    for digit in num:\n        if digit in hex_digits:\n            if digit in hex_primes:\n                count += 1\n        else:\n            count += 0.5 # count half for non-hexadecimal digits\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Convert decimal to binary string\n    binary_str = bin(decimal)[2:][::-1]\n\n    # Add 'db' to the start and end of the string\n    binary_str = 'db' + binary_str + 'db'\n\n    return binary_str"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    seen = set()\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n        seen.add(s[i+1])\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa >= 3.7:\n            letter_grades.append(\"A\")\n        elif gpa >= 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa >= 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa >= 2.7:\n            letter_grades.append(\"B\")\n        elif gpa >= 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa >= 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa >= 1.7:\n            letter_grades.append(\"C\")\n        elif gpa >= 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa >= 1.0:\n            letter_grades.append(\"D+\")\n        elif gpa >= 0.7:\n            letter_grades.append(\"D\")\n        elif gpa >= 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Create a list of prime numbers up to the length of the input string\n    primes = [2, 3, 5, 7]\n    n = len(string)\n    # Check if the length of the string is in the list of prime numbers\n    if n in primes:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Initialize count to 0\n    count = 0\n    \n    # Iterate through all possible n-digit numbers\n    for i in range(10**n):\n        # Check if the number starts or ends with 1\n        if str(i)[:1] == '1' or str(i)[-1:] == '1':\n            # Increment count\n            count += 1\n    \n    # Return count\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 10 * (1 << (2 * digit_index))\n        N //= 10\n        digit_index += 1\n    return bin(binary_sum)[2:].zfill(len(bin(binary_sum)) - 2)"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_odd_pairs = []\n    for i, num in enumerate(lst):\n        if i % 2 == 1 and num % 2 == 0:\n            even_odd_pairs.append(num)\n    return sum(even_odd_pairs)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # split the string into words\n    words = s.split()\n    # create an empty list to store the ordered words\n    ordered_words = []\n    # iterate through each word\n    for word in words:\n        # create an empty list to store the ordered characters\n        ordered_chars = []\n        # iterate through each character in the word\n        for char in word:\n            # add the character to the ordered_chars list\n            # and then sort the list based on the ASCII value of the characters\n            ordered_chars.append(char)\n            ordered_chars.sort(key=lambda x: ord(x))\n        # add the ordered characters to the ordered_words list\n        ordered_words.append(''.join(ordered_chars))\n    # join the ordered words to create the final string\n    return''.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    row_coordinates = []\n    for i, row in enumerate(lst):\n        for j, x_coordinate in enumerate(row):\n            if x_coordinate == x:\n                row_coordinates.append((i, j))\n    row_coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return [(row, col) for row, col in row_coordinates]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return []\n    \n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    shifted_alphabet = alphabet[2:] + alphabet[:2]\n    encrypted_string = \"\"\n    for char in s:\n        encrypted_string += shifted_alphabet[alphabet.index(char)]\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    lst.sort()\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    words = S.split('.')\n    count = 0\n    for sentence in words:\n        if sentence.startswith(\"I\") and sentence.endswith(\".\") or sentence.endswith(\"?\") or sentence.endswith(\"!\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x == y + z or x == z + y or y == x + z or y == z + x:\n        return True\n    elif type(x)!= int or type(y)!= int or type(z)!= int:\n        return False\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = \"\"\n    for char in message:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            encoded_message += chr(ord('a') + index * 2)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    # Initialize a variable to store the sum of digits of largest prime\n    sum_digits = 0\n    \n    # Iterate through the list\n    for num in lst:\n        # Check if the number is prime\n        if all(num % i!= 0 for i in range(2, num)):\n            # If the number is prime, add its digits to sum_digits\n            digit_sum = sum(int(digit) for digit in str(num))\n            sum_digits += digit_sum\n    \n    # Return the sum of digits of largest prime\n    return sum_digits"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:  # if dictionary is empty\n        return False\n\n    if len(dict) == 1:  # if dictionary has only one key-value pair\n        return str(list(dict.keys())[0]) in [\"STATE\", \"ZIP\"]\n\n    # check if all keys are in lowercase or uppercase\n    for key in dict.keys():\n        if not key.islower() and not key.isupper():\n            return False\n\n    # check if all values are strings\n    for value in dict.values():\n        if not isinstance(value, str):\n            return False\n\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    i = 2\n    while len(primes) < n:\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        if len(primes) == n:\n            break\n        i += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    # Get the unit digits of the two numbers\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    \n    # If either of the unit digits is 0, the product will be 0\n    if unit_digit_a == 0 or unit_digit_b == 0:\n        return 0\n    \n    # Multiply the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    # If the product is greater than 9, the last digit will be 9\n    if product > 9:\n        return 9\n    else:\n        return product"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].upper() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # Convert the string value to a float\n    value = float(value)\n\n    # Round the value to the nearest integer\n    rounded_value = round(value)\n\n    # Check if the original value and the rounded value are equidistant from two integers\n    if abs(value - rounded_value) == 0.5:\n        # If the original value is equidistant from two integers, round it away from zero\n        if value < rounded_value:\n            return rounded_value + 0.5\n        else:\n            return rounded_value - 0.5\n    else:\n        # If the original value is not equidistant from two integers, return the rounded value\n        return rounded_value"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # Initialize an empty list to store the number of stones in each level\n    levels = []\n    \n    # Add n stones to the first level\n    levels.append(n)\n    \n    # Determine the next number to add to the pile\n    next_num = n + 1\n    \n    # If n is odd, add the next odd number to the pile\n    if n % 2 == 1:\n        next_num = get_next_odd_number(next_num)\n    \n    # If n is even, add the next even number to the pile\n    else:\n        next_num = get_next_even_number(next_num)\n    \n    # Add the next number to the pile and append it to the levels list\n    while len(levels) < n:\n        levels.append(next_num)\n        next_num = get_next_odd_or_even(next_num)\n    \n    # Return the list of levels\n    return levels\n\ndef get_next_odd_number(num):\n    \"\"\"\n    Returns the next odd number greater than num.\n    \"\"\"\n    return (num + 1) if num % 2 == 0 else num\n\ndef get_next_even_number(num):\n    \"\"\"\n    Returns the next even number greater than num.\n    \"\"\"\n    return (num + 1) if num % 2 == 1 else num\n\ndef get_next_odd_or_even(num):\n    \"\"\"\n    Returns the next number (either odd or even) greater than"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the string by comma or space\n    words = s.split()\n    # Remove any empty strings\n    words = [word for word in words if word]\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    # Initialize the max number to the smaller of the two inputs\n    max_num = min(x, y)\n\n    # Loop through all even integers between x and y\n    for i in range(max_num, x - 1, -1):\n        if i % 2 == 0:\n            # If the even integer is greater than the current max, update max\n            if i > max_num:\n                max_num = i\n\n    # If no even integer was found, return -1\n    if max_num == min(x, y):\n        return -1\n    else:\n        return max_num"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    num_integers = m - n + 1\n    sum_integers = (num_integers * (num_integers + 1)) // 2\n    return int(sum_integers)/2"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    # create a set of all digits in the input list\n    digits = set()\n    for num in x:\n        for digit in str(num):\n            if int(digit) % 2 == 1:\n                digits.add(int(digit))\n    \n    # create a list of tuples with each digit as the key and a list of indices where the digit appears\n    indices = {}\n    for i in range(len(x)):\n        for j in range(len(str(x[i]))):\n            if int(str(x[i])[j]) in digits:\n                if int(str(x[i])[j]) not in indices:\n                    indices[int(str(x[i])[j])] = [i]\n                indices[int(str(x[i])[j])].append(i)\n    \n    # create a list of unique elements\n    unique_elements = []\n    for digit in digits:\n        for i in indices[digit]:\n            if x[i] not in unique_elements:\n                unique_elements.append(x[i])\n    \n    # sort the list and return it\n    return sorted(unique_elements)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Sort the array of integers between 1 and 9\n    arr = sorted(arr)\n    \n    # Reverse the sorted array\n    arr.reverse()\n    \n    # Create a dictionary to map integers to their corresponding names\n    names = {\"One\": \"One\", \"Two\": \"Two\", \"Three\": \"Three\", \"Four\": \"Four\", \"Five\": \"Five\", \"Six\": \"Six\", \"Seven\": \"Seven\", \"Eight\": \"Eight\", \"Nine\": \"Nine\"}\n    \n    # Create an empty list to store the names of the integers\n    result = []\n    \n    # Iterate through the sorted and reversed array\n    for num in arr:\n        # If the number is not between 1 and 9, ignore it\n        if num < 1 or num > 9:\n            continue\n        # Get the name of the number\n        name = names[num]\n        # Append the name to the result list\n        result.append(name)\n    \n    # Return the list of names\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = [1] * n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result[i-1] = math.factorial(i)\n        else:\n            for j in range(1, i+1):\n                result[i-1] += j\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if i == str(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num < 0:\n            signed_digits = [num]\n            while signed_digits and signed_digits[-1] == -1:\n                signed_digits.pop()\n            sum_of_digits = sum(int(digit) for digit in signed_digits)\n            if sum_of_digits > 0:\n                count += 1\n        elif sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    # Check if the array is empty\n    if not arr:\n        return True\n\n    # Find the maximum element in the array\n    max_elem = max(arr)\n\n    # Check if the maximum element is at the first index\n    if max_elem == arr[0]:\n        return True\n\n    # If the maximum element is not at the first index,\n    # we can't sort the array by performing right shifts\n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # initialize result\n    result = \"NO\"\n\n    # iterate through lst1\n    for i in range(len(lst1)):\n        # check if lst1[i] is odd\n        if lst1[i] % 2!= 0:\n            # check if lst2 has an even number\n            for j in range(len(lst2)):\n                # check if lst2[j] is even\n                if lst2[j] % 2 == 0:\n                    # swap lst1[i] with lst2[j]\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    # update result\n                    result = \"YES\"\n                    break\n        else:\n            # if lst1[i] is even, check if lst2 has an odd number\n            for j in range(len(lst2)):\n                if lst2[j] % 2!= 0:\n                    # swap lst1[i] with lst2[j]\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    # update result\n                    result = \"YES\"\n                    break\n\n    # return result\n    return result"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    # Create an empty dictionary to store the counts\n    counts = {}\n    # Split the string by space and loop through each word\n    words = test.split()\n    for word in words:\n        # If the word is not in the dictionary, add it with a count of 1\n        if word not in counts:\n            counts[word] = 1\n        # If the word is already in the dictionary, increase its count by 1\n        else:\n            counts[word] += 1\n    # Find the letter with the highest count\n    max_count = 0\n    max_letter = ''\n    for letter in counts:\n        if counts[letter] > max_count:\n            max_count = counts[letter]\n            max_letter = letter\n    # Return the dictionary with the letter with the highest count and its count\n    return {max_letter: max_count}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s: str, c: str) -> tuple:\n    # Create a set of characters in c for efficient lookup\n    char_set = set(c)\n\n    # Initialize the result string and the palindrome flag\n    result = \"\"\n    is_palindrome = False\n\n    # Iterate through the characters in s\n    for char in s:\n        # If the character is in the character set, skip it\n        if char in char_set:\n            continue\n        # Otherwise, add it to the result string\n        else:\n            result += char\n\n        # Check if the result string is a palindrome\n        if len(result) > 1 and result[-1] == result[0]:\n            is_palindrome = True\n\n    # Return the result string and the palindrome flag\n    return (result, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_digits = [int(d) for d in s if d in '123456789']\n        odd_count = sum(1 for d in odd_digits if d % 2!= 0)\n        result.append(f\"the number of odd elements {odd_count} in the string {i+1} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Initialize variables\n    min_so_far = float('inf')\n    current_sum = 0\n    # Iterate through the array\n    for num in nums:\n        current_sum += num\n        # Update the minimum sum seen so far\n        min_so_far = min(min_so_far, current_sum)\n        # If the current sum is negative, update the minimum sum seen so far\n        if current_sum < 0:\n            min_so_far = min(min_so_far, current_sum)\n        # If the current sum is positive, reset the sum\n        else:\n            current_sum = 0\n    # Return the minimum sum seen so far\n    return min_so_far"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # initialize variables\n    num_buckets = 0\n    row_index = 0\n    col_index = 0\n    current_row = 0\n    current_col = 0\n    current_sum = 0\n\n    # loop through the grid\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            # if the current cell is 1 and the sum of the current row is less than the capacity\n            if grid[row][col] == 1 and current_sum < capacity:\n                # increment the sum\n                current_sum += 1\n                # increment the number of buckets needed\n                num_buckets += 1\n                # move to the next cell\n                if row == row_index:\n                    row_index += 1\n                if col == col_index:\n                    col_index += 1\n                current_row = row\n                current_col = col\n                current_sum = 0\n            else:\n                # reset the variables\n                current_row = row\n                current_col = col\n                current_sum = 0\n\n    # return the number of buckets needed\n    return num_buckets"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Count the number of ones in the binary representation of each number\n    binary_ones = [bin(num).count('1') for num in arr]\n\n    # Sort the array based on the number of ones and then on the decimal value\n    return sorted(arr, key=lambda x: (binary_ones[x], x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    # split the string into a list of words\n    words = s.split()\n    # initialize an empty list to store the words that have n consonants\n    result = []\n    # iterate through the words\n    for word in words:\n        # count the number of consonants in the word\n        num_consonants = 0\n        for c in word:\n            if c.isalpha() and c not in \"aeiou\":\n                num_consonants += 1\n        # if the number of consonants is n, append the word to the result list\n        if num_consonants == n:\n            result.append(word)\n    # return the result list\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    left_index = 0\n    right_index = len(word) - 1\n    closest_vowel = ''\n    \n    while left_index <= right_index:\n        if word[left_index] in vowels and word[right_index] in vowels:\n            if abs(left_index - right_index) < abs(closest_vowel_index - right_index):\n                closest_vowel_index = left_index\n        elif word[left_index] in vowels:\n            closest_vowel_index = left_index\n        elif word[right_index] in vowels:\n            closest_vowel_index = right_index\n        else:\n            break\n        left_index += 1\n        right_index -= 1\n    \n    if closest_vowel_index!= '' and abs(closest_vowel_index - right_index) < abs(closest_vowel_index - left_index):\n        return word[closest_vowel_index]\n    else:\n        return ''"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    # Initialize stacks\n    open_stack = []\n    close_stack = []\n\n    # Iterate through the strings in the list\n    for s in lst:\n        # If the string is open parenthesis\n        if s == '(':\n            # Push the string to the open stack\n            open_stack.append(s)\n        # If the string is close parenthesis\n        elif s == ')':\n            # If the open stack is not empty and the top of the stack is also a close parenthesis\n            if open_stack and open_stack[-1] == '(':\n                # Pop the open parenthesis from the stack\n                open_stack.pop()\n            # If the open stack is empty or the top of the stack is not a close parenthesis\n            else:\n                # Return 'No'\n                return 'No'\n\n    # If the stacks are empty, it means the strings can be concatenated to form a good string\n    # Return 'Yes'\n    return 'Yes'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # Create a max heap and add first k elements of arr to it\n    max_heap = []\n    for i in range(k):\n        max_heap.append(arr[i])\n    heapify(max_heap)\n\n    # Add remaining elements of arr to max heap if its size is less than k\n    for i in range(k, len(arr)):\n        if max_heap[0] < arr[i]:\n            max_heap[0] = arr[i]\n            heapify(max_heap)\n        elif len(max_heap) < k:\n            max_heap.append(arr[i])\n            heapify(max_heap)\n\n    # Return the k maximum elements\n    return max_heap\n\ndef heapify(max_heap):\n    # This function will be called to maintain the heap property\n    # It will be called with the index of the last element of the heap\n    # and the index of the parent of the last element\n    # It will return the index of the parent of the last element\n    # after the heap is rearranged\n    pass\n\n    # For example, if the last element is at index 6 and its parent is at index 4\n    # then the function should return 4\n    # If the last element is at index 0 and its parent is at index 1\n    # then the function should return 1\n    # If the last element is at index 0 and its parent is at index -1\n    # then the function should return -1"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 0 and num % 2!= 0:\n            sum += num\n    return sum"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum_ = 0\n    for i in range(min(k, len(arr))):\n        if arr[i] >= 0 and len(str(arr[i])) <= 2:\n            sum_ += arr[i]\n    return sum_"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    # Create a list to store the collatz sequence\n    collatz_sequence = [n]\n    # Create a list to store the odd numbers in the collatz sequence\n    odd_numbers = []\n    # Keep iterating until the previous number is odd\n    while collatz_sequence[-1] % 2 == 0:\n        # Get the last number in the sequence\n        last_num = collatz_sequence[-1]\n        # If the last number is even, calculate the next number\n        if last_num % 2 == 0:\n            next_num = last_num // 2\n        # If the last number is odd, calculate the next number\n        else:\n            next_num = 3 * last_num + 1\n        # Append the next number to the sequence\n        collatz_sequence.append(next_num)\n        # Check if the next number is odd and add it to the list of odd numbers\n        if next_num % 2 == 1:\n            odd_numbers.append(next_num)\n    # Return the list of odd numbers in sorted order\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    # Check if the date string is not empty\n    if not date:\n        return False\n\n    # Split the date string into its components (month, day, year)\n    month, day, year = date.split(\"-\")\n\n    # Check if the month is valid\n    if not (1 <= int(month) <= 12):\n        return False\n\n    # Check if the day is valid for the given month\n    if not (1 <= int(day) <= 31):\n        if month in [2, 4, 6, 8, 10, 12]:\n            if not (1 <= int(day) <= 30):\n                return False\n        else:\n            return False\n\n    # Check if the year is valid\n    if not (1900 <= int(year) <= 2100):\n        return False\n\n    # If all checks pass, return True\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    # Split on whitespace\n    words = txt.split()\n    # Split on commas\n    words = [word.strip() for word in words if word.strip()!= '']\n    # Check if there are any words\n    if len(words) == 0:\n        # Count the number of lower-case letters with odd order in the alphabet\n        count = 0\n        for letter in txt.lower():\n            if ord(letter) % 2!= 0:\n                count += 1\n        return count\n    else:\n        return words"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # check if intervals intersect\n    if start1 <= end2 and start2 <= end1:\n        # calculate length of intersection\n        intersection_length = end1 - start1\n        \n        # check if intersection length is prime\n        for i in range(2, intersection_length + 1):\n            if intersection_length % i == 0:\n                return \"NO\"\n        return \"YES\"\n    \n    # if intervals don't intersect, return \"NO\"\n    return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n\n    magnitude_product = 1\n    sign_product = 1\n\n    for num in arr:\n        if num == 0:\n            magnitude_product *= 0\n            sign_product *= 0\n        elif num > 0:\n            magnitude_product *= abs(num)\n            sign_product *= 1\n        else:\n            magnitude_product *= abs(num)\n            sign_product *= -1\n\n    return magnitude_product * sign_product"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # Initialize a dictionary to store the minimum path found so far\n    min_path = {}\n    \n    # Initialize a dictionary to store the maximum distance from each cell\n    # to the nearest cell with a smaller value\n    dist = {}\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            dist[i*len(grid[0])+j] = float('inf')\n    \n    # Initialize a queue to store the cells to be processed\n    queue = []\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            # Add the cell to the queue with a distance of 0\n            queue.append((i*len(grid[0])+j, 0))\n    \n    # Process the cells in the queue\n    while queue:\n        # Get the cell with the minimum distance\n        curr_dist = float('inf')\n        curr_cell = None\n        for i in range(len(queue)):\n            dist_val = queue[i][0]\n            if dist[dist_val] < curr_dist:\n                curr_dist = dist[dist_val]\n                curr_cell = (dist_val // len(grid[0]), dist_val % len(grid[0]))\n        \n        # Remove the cell from the queue\n        queue.remove((curr_cell[0], curr_dist))\n        \n        # Add the cell to the minimum path if its value is less than k\n        if len(min_path) < k:\n            min_path[curr_cell[0]*len(grid[0])+curr_cell[1]] = grid[curr_cell[0]][curr_cell[1]]\n            if len(min_path) == k:\n                break\n        \n        # Update the distances of the neighbors of the current cell\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            x = curr_cell[0] + dx\n            y = curr_cell[1] + dy\n            if 0 <= x < len(grid) and"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 1:\n        return [3]\n    elif n % 2 == 0:\n        return [1 + n // 2] + [tri(n - i) for i in range(1, n//2+1)]\n    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1)] + [tri(n - i) for i in range(1, n+1)]\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Convert the integer to a string\n    num_str = str(n)\n    # Initialize the product to 1\n    product = 1\n    # Loop through each digit in the string\n    for digit in num_str:\n        # Check if the digit is odd\n        if int(digit) % 2!= 0:\n            # Multiply the product by the digit\n            product *= int(digit)\n    # Return the product\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top == '(':\n                stack.append(char)\n            elif top == '[':\n                if len(stack) == 0 or stack[-1]!= ']':\n                    return True\n                stack.pop()\n                stack.append(char)\n            else:\n                return False\n    if stack:\n        return False\n    return True"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    result = 0\n    for num in lst:\n        # Round up the number to the nearest integer using ceil function\n        num_rounded = math.ceil(num)\n        # Calculate the square of the rounded number\n        square = num_rounded ** 2\n        # Add the square to the result\n        result += square\n    return result"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Split the string by space to get the words\n    words = txt.split()\n    # Get the last word\n    last_word = words[-1]\n    # Check if the last character is a letter and is not a part of a word\n    if last_word[-1].isalpha() and last_word[-1] not in last_word[:-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    # Initialize variables\n    largest_negative = None\n    smallest_positive = None\n    \n    # Iterate through the list\n    for num in lst:\n        # Check if the number is negative and larger than the current largest negative\n        if num < 0 and (not largest_negative or num > largest_negative):\n            largest_negative = num\n        # Check if the number is positive and smaller than the current smallest positive\n        elif num > 0 and (not smallest_positive or num < smallest_positive):\n            smallest_positive = num\n    \n    # Return the results\n    if largest_negative is None and smallest_positive is None:\n        return (None, None)\n    elif largest_negative is None:\n        return (None, smallest_positive)\n    elif smallest_positive is None:\n        return (largest_negative, None)\n    else:\n        return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    # Convert strings to float or int if possible\n    a = float(a) if \".\" in a else int(a)\n    b = float(b) if \".\" in b else int(b)\n\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n < 4 * (2 + (2 * 2)) or n > 4 * (2 * 2):\n        return False\n    for i in range(1, 2 * 2 + 1):\n        if n - i < 0 or n - i > 4 * (2 * 2):\n            return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n > 0:\n        result = 1\n        for i in range(1, n+1):\n            result *= i-1\n        return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # If there are more than 2 consecutive spaces, replace them with -\n    text = text.replace(\"  \", \"_\").replace(\"   \", \"_\").replace(\"------\", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # split the file name into two parts, before and after the dot\n    before_dot = file_name.split('.')[0]\n    after_dot = file_name.split('.')[1]\n    \n    # check if the file name has more than 3 digits\n    if re.search(r'\\d{4}', file_name):\n        return 'No'\n    \n    # check if the file name has exactly one dot\n    if len(file_name.split('.'))!= 2:\n        return 'No'\n    \n    # check if the substring before the dot starts with a latin alphapet letter\n    if not before_dot.isalpha():\n        return 'No'\n    \n    # check if the substring after the dot is valid\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # if all conditions are met, return 'Yes'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n        result += lst[i]\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if is_prime(len(word)):\n            result += word + \" \"\n    return result[:-1]\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/144", "completion": "def simplify(x: str, n: str) -> bool:\n    x_numerator, x_denominator = map(int, x.split(\"/\"))\n    n_numerator, n_denominator = map(int, n.split(\"/\"))\n    if x_denominator == n_denominator:\n        return True\n    if x_numerator % n_denominator == 0 and n_numerator % x_denominator == 0:\n        return True\n    return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Sort the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, order them based on their index in original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), x))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and abs(num % 10) in [1, 3, 5, 7, 9] and (num % 10) == (num % 10) % 10:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets and planet2 not in planets:\n        return []\n    result = []\n    for planet in planets:\n        if (planet1 < planet and planet < planet2) or (planet2 < planet and planet < planet1):\n            result.append(planet)\n    return sorted(result)"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Create a list to store the filtered strings\n    filtered_lst = []\n    \n    # Iterate through the list\n    for word in lst:\n        # Check if the length of the word is even\n        if len(word) % 2 == 0:\n            # Append the word to the filtered list\n            filtered_lst.append(word)\n    \n    # Sort the filtered list by length and then alphabetically\n    filtered_lst.sort(key=lambda x: (len(x), x))\n    \n    return filtered_lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    sum = 0\n    for num in lst:\n        if num >= 0 and isinstance(num, int):\n            if num % 2!= 0:\n                sum += num ** 2\n    return sum"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    cap_count = 0\n    sm_count = 0\n    strongest_extension = ''\n    for extension in extensions:\n        cap_count += len(extension.upper())\n        sm_count += len(extension.lower())\n        strength = cap_count - sm_count\n        if not strongest_extension or strength > len(strongest_extension) / len(class_name):\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    # Create a set of the characters in the first string\n    char_set = set(a)\n    # Iterate over the characters in the second string\n    for char in b:\n        # Check if the current character is in the set of characters in the first string\n        if char in char_set:\n            # If the character is in the set, return True\n            return True\n    # If no characters in the second string are in the set of characters in the first string, return False\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    num_str = str(num)\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Create a dictionary to map integer values to their corresponding Roman numerals\n    roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cx',\n        1000:'m'\n    }\n    \n    # Create an empty string to store the Roman numeral\n    roman_numeral = ''\n    \n    # Iterate through the Roman numerals dictionary and add the corresponding Roman numeral to the string\n    for key in roman_numerals.keys():\n        while number >= key:\n            roman_numeral += roman_numerals[key]\n            number -= key\n    \n    # Return the Roman numeral in lowercase\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    # Create a dictionary to store the unique characters and their count\n    unique_chars = {}\n\n    # Get the word with maximum unique characters\n    max_word = None\n    for word in words:\n        # Count the number of unique characters in the word\n        unique_char_count = len(set(word))\n        # Check if the word has maximum unique characters\n        if unique_char_count > len(unique_chars) or (unique_char_count == len(unique_chars) and word < max_word):\n            max_word = word\n        # Update the dictionary with the unique characters and their count\n        for char in set(word):\n            if char in unique_chars:\n                unique_chars[char] += 1\n            else:\n                unique_chars[char] = 1\n\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining < need:\n        remaining = 0\n    return [number + need, remaining]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = 0\n    for i in range(len(operand) - 1):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '/':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    # Initialize a new string to store the result\n    result = \"\"\n    \n    # Iterate through the characters in the string\n    for char in s:\n        # If the character is a letter\n        if char.isalpha():\n            # Check if the character is lowercase\n            if char.islower():\n                # Convert the character to uppercase\n                result += char.upper()\n            else:\n                # Convert the character to lowercase\n                result += char.lower()\n        # If the character is not a letter\n        else:\n            # Keep the character as it is\n            result += char\n    \n    # If the resulting string has no letters\n    if not any(char.isalpha() for char in s):\n        # Reverse the string\n        result = result[::-1]\n    \n    return result"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    import hashlib\n    md5 = hashlib.md5()\n    md5.update(text.encode())\n    return md5.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    # Initialize an empty list to store the even digits\n    even_digits = []\n    \n    # Iterate over the range between a and b\n    for i in range(a, b+1):\n        # Convert the integer to a string to extract its digits\n        digits = str(i)\n        \n        # Check if the last digit is even\n        last_digit = int(digits[-1])\n        if last_digit % 2 == 0:\n            # Append the integer to the list of even digits\n            even_digits.append(i)\n            \n    # Return the list of even digits in ascending order\n    return sorted(even_digits)"}
