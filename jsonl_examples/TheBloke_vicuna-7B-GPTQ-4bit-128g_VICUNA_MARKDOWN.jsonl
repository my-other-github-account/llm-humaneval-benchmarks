{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n\n    :param numbers: List[float] list of numbers\n    :param threshold: float threshold\n    :return: bool\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            distance = ((numbers[i] - numbers[j])**2).mean()\n            if distance < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    return [\n        '(',\n        '(',\n        '('\n    ]"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return math.floor(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n    balance = 0\n    for op in operations:\n        balance += op\n\n    return balance > 0"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    sum_of_squares = sum([(x - numbers[0]) ** 2 for x in numbers])"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list 'numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0 or i == len(numbers) - 1:\n            result.append(numbers[i])\n        else:\n            result.append(numbers[i] + delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n        elif char =='':\n            if depth == 0:\n                result.append(0)\n            elif depth == 1:\n                result.append(1)\n            else:\n                result.append(depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if s.lower() in substring.lower()]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n\n    :param numbers: List[int] The list of integers\n    :return: Tuple[int, int] The tuple of sum and product\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return sum, product"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    Args:\n        numbers (List[int]): A list of integers\n    Returns:\n        List[int]: A list of the rolling maximum elements found until the given moment in the sequence.\n    Example:\n        >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n        [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list = []\n    for i in range(len(numbers)):\n        rolling_max_list.append(max(numbers[i:]))\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # check if string is empty\n    if len(string) == 0:\n        return string\n    \n    # find the longest palindromic substring\n    longest_palindrome = ''\n    start = 0\n    while start < len(string) and string[start:].endswith(string[start:len(string)-1]):\n        start += 1\n    if start < len(string):\n        longest_palindrome = string[start:len(string)-1]\n    \n    # append the longest palindromic substring to the end of the string\n    new_string = string[:-1] + longest_palindrome[::-1"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\"Inputs are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n\n    Args:\n        a (str): First string.\n        b (str): Second string.\n\n    Returns:\n        str: The result of binary XOR operation.\n\n    Example:\n        string_xor('010', '110')\n        '100'\n    \"\"\"\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += a[i]\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n\n    Args:\n        strings (List[str]): List of strings to check for the longest one.\n\n    Returns:\n        str or None: The longest string in the input list, or None if the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a, b):\n    # Check if b is divisible to a\n    if b % a == 0:\n        return a\n    # Check if a is divisible to b\n    if a % b == 0:\n        return b\n    # Check if a is divisible to a\n    if a % a == 0:\n        return a\n    # If none of the above conditions are met, return None\n    return None"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list of all prefixes from shortest to longest of the input string\n\n    :param string: the input string\n    :return: the list of all prefixes from the input string\n    \"\"\"\n\n    prefixes = []\n    current_length = len(string)\n\n    for i in range(current_length, 0, -1):\n        prefix = string[0:i]\n        if prefix == string:\n            break\n        prefixes.append(prefix)\n\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\"Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    result = \"\"\n    for i in range(n):\n        result += str(i)\n    return result"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) does it consist of.\n\n    :param string: the string to analyze\n    :return: the number of distinct characters in the string\n    \"\"\"\n    distinct_chars = set(string)\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    count = 0\n    beats = 0\n    for note in music_string:\n        if note == 'o':\n            beats = 4\n        elif note == 'o|':\n            beats = 2\n        elif note == '.|':\n            beats = 1\n        elif note == '.':\n            beats = 2\n        else:\n            break\n        count += beats\n    return [count, beats]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for char in string:\n        if char in substring:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\"Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    sorted_numbers = sorted(numbers, key=lambda x: x.isdigit())\n    return \", \".join(sorted_numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n\n    Args:\n        numbers (list): A list of floating point numbers.\n\n    Returns:\n        Tuple[float, float]: A tuple containing the two closest numbers.\n\n    Example:\n       "}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given a list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n\n    :param numbers: List[float] The list of numbers to be rescaled\n    :return: List[float] The list of rescaled numbers\n    \"\"\"\n    min_value = min(numbers)\n    max_value = max(numbers)\n    scale_factor = (max_value - min_value) / (max_value - numbers[0])\n    rescaled_numbers = [scale_factor * x for x in numbers]\n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [int(x) for x in values if x.isdigit()]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\"\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    while divisor <= n / 2:\n        divisor *= 2\n    return divisor\n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    p = 2\n    while p**2 <= n:\n        if n % p:\n            factors.append(p)\n        p += 1\n    factors.extend(factors[:n//p])\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n\n    Args:\n        numbers (list): A list of integers to remove duplicates from.\n\n    Returns:\n        A list of integers without any duplicates.\n\n    Example:\n        >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    \"\"\"\n    seen = set()\n    return [x for x in numbers if not (x in seen or seen.add(x))]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\n    Args:\n        string: A string.\n\n    Returns:\n        A string with the characters flipped.\n\n    Example:\n        flip_case('Hello')\n        'hELLO'\n    \"\"\"\n    string = string.lower() # convert string to lowercase\n    return string.upper() # convert uppercase characters to uppercase"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate list of strings into a single string\n\n    :param strings: List[str] of strings to be concatenated\n    :return: The concatenated string\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"Filter an input list of strings only for ones that start with a given prefix.\n    Args:\n        strings (list): A list of strings to filter\n        prefix (str): The prefix to match\n\n    Returns:\n        A list of strings from the input list that start with the given prefix\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    positive_list = []\n    for item in l:\n        if item > 0:\n            positive_list.append(item)\n    return positive_list\n"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    # Sieve of Eratosthenes\n    sieve = [True] * (100000 + 1)\n    for i in range(100000, n + 1, -1):\n        sieve[i] = False\n\n    # Check if the number is prime\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            for j in range(i ** "}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    n = len(xs)\n    for i in range(n-1, -1, -1):\n        x_val = xs[i]\n        for j in range(i+1, n):\n            x_val = xs[j] / x_val\n        if x_val == 0:\n            return x_val\n    return None"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l_index_3 = [i for i in range(len(l)) if i % 3 == 0]\n    l_not_3 = [i for i in range(len(l)) if i % 3!= 0]\n    return [l[i] if i in l_index_3 else l_not_3[i] for i in range(len(l))]\n"}
{"task_id": "HumanEval/34", "completion": "def merge(merged: list, left: list, right: list):\n    \"\"\"Merge two lists while removing duplicates\n    >>> merged, left, right = merge([1, 2, 3], [4, 5], [6, 7, 8])\n    >>> merged\n    [1, 2, 3, 4, 5, 6, 7, 8]\n    \"\"\"\n    i = 0\n    while i < len(left) and i < len(right) and merged[-1] not in set(right[i:]) and set(left[i:]).issubset(set(right[:i+1])):\n        merged.append(right[i])\n        i += 1\n    for element in left:\n        merged.append(element)\n    return merged"}
{"task_id": "HumanEval/35", "completion": "def merge(m: list, n: list) -> list:\n    \"\"\"Merge two lists into a single list.\n    Args:\n        m: A list of elements.\n        n: A list of elements.\n\n    Returns:\n        A single list containing all the elements of both m and n.\n\n    Example:\n        >>> merge([1, 2, 3], [4, 5, 6])\n        [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    return m + n"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "def merge(merged: list, left: list, right: list):\n    \"\"\"This function takes two lists and a merged list and returns the merged list.\n    It merges the two lists by taking elements from the left list and adding them to the\n    merged list, and then taking elements from the right list and adding them to the merged\n    list.\n    >>> merge([1, 2], [3, 4], [5, 6])\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n\n    for i in range(len(left)):\n        merged.append(left[i] + right[i])\n\n    return merged"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split input string into groups. Each of length 3.\n    groups = [s"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    if n < 2:\n        return 2\n    elif n < 4:\n        return 3\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            for j in range(2, int(n**0.5) + 1):\n                if i > j:\n                    continue\n                if (i % j) % 2 == 0:\n                    continue\n        return 1"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    Check if there are three distinct elements in the list that sum to zero.\n\n    Args:\n        l (list): A list of integers.\n\n    Returns:\n        bool: True if there are three distinct elements in the list that sum to zero, False otherwise.\n\n    Examples:\n        >>> triples_sum_to_zero([1, 3, 5, 0])\n        False\n        >>> triples_sum_to_zero([1, 3, -2, 1])\n        True\n        >>> triples_sum_to_zero([1, 2, 3, 7])\n        False\n        >>>"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n\n    :param n: the number of cars in the race\n    :return: the number of collisions\n    \"\"\"\n\n    # initialize variables to keep track of the positions of the cars\n    left_positions = []\n    right_positions = []\n\n    # simulate the movement of the cars\n    for i in range(n):\n        if i % 2 == 0:\n            left_positions.append(i)\n            right_positions.append(i)\n        else:\n            left_positions.append(i)\n            right_positions.append(i + 1)\n\n    # calculate the number of collisions\n    collisions = 0\n    for i in range(n):\n        if i % 2 == 0:\n            collision = (left_positions[i] - right_positions[i]) / 2\n        else:\n            collision = (left_positions[i] - right_positions[i + 1]) / 2\n        collisions += collision\n\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    Returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    Arguments:\n    l (list): A list of integers.\n\n    Returns:\n    bool: True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    Examples:\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # implementation details\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x, base):\n    return str(x * (10 ** len(str(base)) - len(base)))\n"}
{"task_id": "HumanEval/45", "completion": "def fibonacci(n):\n    \"\"\"Return the nth Fibonacci number.\n    >>> fibonacci(5)\n    8\n    \"\"\"\n    a, b = 0, 1\n    result = a\n    for i in range(n):\n        result = b\n        b = a\n        a = result\n    return result"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n <= 0:\n        return n\n    a, b = fib4(n-1), fib4(n-2)\n    return a + b + fib4(n-3) + fib4(n-4)\n"}
{"task_id": "HumanEval/47", "completion": "def median(l: list) -> float:\n    \"\"\"\n    Return the median of the elements in the list l.\n\n    l: list\n    Returns: float\n    \"\"\"\n    # sort the list in non-decreasing order\n    l = sorted(l)\n    # get the middle element of the sorted list\n    return l[0]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return (n // p) % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s.lower()])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n\n    # convert string to lowercase and remove vowels\n    text = text.lower()\n    vowels = 'aeiouAEIOU'\n    return ''.join(text.translate(v for v in vowels))"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num > t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    :param brackets: A string of \"<\" and \">\"\n    :return: True if every opening bracket has a corresponding closing bracket, False otherwise.\n    \"\"\"\n    for open_bracket in brackets:\n        if not re.match(r'^<>$', open_bracket):\n            return False\n    return True"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n\n    Args:\n        l: A list of elements.\n\n    Returns:\n        A boolean indicating whether the list elements are monotonically increasing or decreasing.\n\n    Examples:\n        >>> monotonic([1, 2, 4, 20])\n        True\n        >>> monotonic([1, 20, 4, 10])\n        False\n        >>> monotonic([4, 1, 0, -10])\n        True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] < l[i+1]:\n            return True\n        elif l[i] > l[i+1]:\n            return True\n    return False"}
{"task_id": "HumanEval/58", "completion": "def merge(lst1, lst2):\n    \"\"\"Merge two lists into a single list.\n    >>> merge([1, 2, 3], [4, 5, 6])\n    [1, 2, 3, 4, 5, 6]\n\n    \"\"\"\n    return lst1 + lst2"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    if n < 2:\n        return 2\n    p = 2\n    while p ** 2 <= n:\n        p += 1\n    return p\n\ndef largest_prime_factor(n: int) -> int:\n    if n < 2:\n        return 2\n    p = 2\n    while p ** 2 <= n:\n        p += 1\n    return p\n\ndef largest_prime_factor(n: int) -> int:\n    if n < 2:\n        return 2\n    p = 2\n    while p ** 2 <= n:\n        p += 1\n    return p\n\ndef largest_prime_factor(n: int) -> int:\n    if n < 2:\n        return 2\n    p = 2\n    while p ** 2 <= n:\n        p += 1\n    return p\n\ndef largest_prime_factor(n: int) -> int:\n    if n < 2:\n        return 2\n    p = 2\n    while p ** 2 <= n:\n        p += 1\n    return p\n\ndef largest_prime_factor(n: int) -> int:\n    if n < 2:\n        return 2\n    p = 2\n    while p ** 2 <= n:\n        p += 1\n    return p\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    :param brackets: A string of open and close brackets.\n                   Must contain at least one open bracket and one close bracket.\n                   The open bracket must be immediately followed by the close bracket.\n                   The close bracket must be immediately preceded by the open bracket.\n                   The open and close brackets must be the same.\n\n    :return: True if the input string is a valid bracketing, False otherwise.\n    \"\"\"\n    for opening in brackets:\n        if not any(c in '(' in c for c in opening):\n            return False\n    return True"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    \n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n    return [f'{x}*{xs[0]}' for x in xs[1:]] + [f'{x*xs[0]}' for x in xs[1:]] + [f'{xs[0]**2}*{x}' for x in xs[1:]] + [f'{x*xs[0]**2}*{x}' for x in xs[1:]]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        a, b = fibfib(n-1), fibfib(n-2)\n        return a + b + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    result = \"\"\n    for i in range(shift, len(str(x)) + shift):\n        result = str(x)[i:i + shift] + result\n    if len(result) < shift:\n        result = \"0\" * (shift - len(result)) + result\n    return result\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum = 0\n    for char in s:\n        sum += ord(char) - ord('A') + 1\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    \"\"\"\n    This function takes in a string representing the number of apples and oranges in a basket of fruit,\n    as well as an integer representing the total number of fruits in the basket. It returns the number of \n    mango fruits in the basket.\n\n    For example:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    # Initialize the count of mango fruits to 0\n    count = 0\n\n    # Split the input string into a list of strings, where each string represents a type of fruit\n    fruits = s.split()\n\n    # Iterate through each fruit type\n    for i in fruits:\n        if i.startswith(\"a\"):\n            count += int(i.split(\":\")[1])\n        elif i.startswith(\"o\"):\n            count -= int(i.split(\":\")[1])\n\n    # Return the count of mango fruits\n    return count"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_value = arr[0]\n    smallest_index = arr[0].index\n    result = [smallest_value, smallest_index]\n    \n    for node in arr[1:]:\n        if node.value < smallest_value:\n            smallest_value = node.value\n            smallest_index = node.index\n    \n    return result"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_val = -1\n    max_freq = -1\n    \n    for val in lst:\n        freq = 0\n        for i in range(len(lst)):\n            if lst[i] == val:\n                freq += 1\n        if freq > max_freq:\n            max_val = val\n            max_freq = freq\n    \n    if max_freq >= max_val:\n        return max_val\n    else:\n        return -1"}
{"task_id": "HumanEval/70", "completion": "def merge\\_sort(lst):\n    if not lst:\n        return lst\n    mid = len(lst) // 2\n    left = merge_sort(lst[:mid])\n    right = merge_sort(lst[mid:])\n    return merge(left, right)"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a**2 + b**2 > c**2) or (a**2 + c**2 > b**2) or (b**2 + c**2 > a**2):\n        return -1\n    else:\n        return round(float(a)*(float(b)/float(a))*float(c)/float(b-a), 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    \"\"\"\n    Returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Args:\n        q (list): A list of integers representing the object's weight.\n        w (int): The maximum possible weight of the object.\n\n    Returns:\n        bool: True if the object will fly, and False otherwise.\n    \"\"\"\n    sum_weight = sum(q)\n    balanced = sum_weight == len(q) // 2\n    return sum_weight <= w and balanced"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            dp[i] = min(dp[i], dp[j] + dp[i-j])\n    return dp[0]"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1)!= len(lst2):\n        return lst1\n    total = 0\n    for i in range(len(lst1)):\n        total += sum(c in string for string in lst2 if c in string)\n    return [string for string in lst1 if total < len(lst2) and c in string]\n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"\n    Returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n\n    :param a: The number to check\n    :return: True if the given number is the multiplication of 3 prime numbers, False otherwise\n    \"\"\"\n\n    # Check if the number is less than 100\n    if a < 100:\n        # Check if the number is the product of 3 prime numbers\n        for i in range(100, a // 3):\n            if a % i == 0:\n                return True\n        return False\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return n ** int(n**int) == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return a % 2 == 0 or a % 3 == 0 or a % 4 == 0"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for i in range(len(num)):\n        if num[i] in '0123456789ABCDEF':\n            if num[i] == 'B' or num[i] == 'D':\n                count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = str(decimal)\n    return \"db\" + binary"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    length = len(s)\n    distinct_char = 0\n    for i in range(length - 1):\n        if s[i]!= s[i + 1]:\n            distinct_char += 1\n            if distinct_char == 3:\n                return True\n    return distinct_char == 3"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = {\"A\": 4.0, \"A-\": 3.7, \"B+\": 3.3, \"B\": 3.0, \"B-\": 2.7, \"C+\": 2.3, \"C\": 2.0, \"C-\": 1.7, \"D+\": 1.3, \"D\": 1.0, \"D-\": 0.7, \"E\": 0.0}\n    return [letter_grades[str(gpa)] for gpa in grades]\n"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"\n    Returns True if the string length is a prime number or False otherwise\n    \"\"\"\n    # Define the function\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Check if the string length is a prime number\n    for i in range(2, int(string) ** 0.5) + 1:\n        if string[i]!= string[i - 1] and is_prime(int(string[i] ** 2) - int(string[i - 1] ** 2)):\n            return True\n    return False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            count += 1\n        elif i % 2 == 1:\n            count += 2\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    sum = 0\n    binary = str(N)\n    for i in range(len(binary)):\n        sum += int(binary[i])\n    return sum\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    result = 0\n    for i in range(len(lst)):\n        if (lst[i] % 2 == 0 and lst[i]!= lst[i-1]):\n            result += lst[i]\n    return result\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    result = \"\"\n    for word in s.split(\" \"):\n        sorted_characters = sorted(word, key=lambda x: ord(x) - ord(\"A\"))\n        result += \"-\".join(sorted_characters)\n    return result"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    return [(y, x) for y in lst for x in y if x == x]"}
{"task_id": "HumanEval/88", "completion": ""}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            new_char = chr((ord(char) - 97 + 2) % 26 + 97)\n            result += new_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list.\n    Returns None if there is no such element.\n    \n    Args:\n        lst (list): A list of integers.\n    \n    Returns:\n        int or None: The 2nd smallest element of the list, or None if there is no such element.\n    \"\"\"\n\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n\n    # If the list has only one element, it must be the smallest and the second smallest elements are None\n    if len(sorted_lst) == 1:\n        return None\n\n    # If"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    count = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x == y + z:\n        return True\n    elif x == y - z:\n        return True\n    elif x == z + y:\n        return True\n    elif x == z - y:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes it in such a way that it swaps the case of all letters and replaces all vowels with the letter that appears 2 places ahead of that vowel in the English alphabet.\n\n    Args:\n        message (str): The message to encode.\n\n    Returns:\n        str: The encoded message.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n    # Convert the message to lowercase\n    message = message.lower()\n\n    # Create a dictionary that maps each vowel to the letter that appears 2 places ahead of it in the English alphabet\n    vowel_map = {\n        'a': 'b',\n        'b': 'c',\n        'c': 'd',\n        'd': 'e',\n        'e': 'f',\n        'f': 'g',\n        'g': 'h',\n        'h': 'i',\n        'i': 'j',\n        'j': 'k',\n        'k': 'l',\n        'l':'m',\n       'm': 'n',\n        'n': 'o',\n        'o': 'p',\n        'p': 'q',\n        'q': 'r',\n        'r':'s',\n       's': 't',\n        't': 'u',\n        'u': 'v',\n        'v': 'w',\n        'w': 'x',\n        'x': 'y',\n        'y': 'z'\n    }\n\n    # Iterate over each character in the message\n    for char in message:\n        # If the character is a vowel, replace it with the corresponding vowel in the English alphabet\n        if char in vowel_map:\n            encoded_char = vowel_map[char]\n        # If the character is not a vowel, leave it as is\n        else:\n            encoded_char = char\n\n        # If the character is uppercase, convert it to lowercase\n       "}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_digits(n):\n        return str(n)\n\n    def get_largest_prime(lst):\n        max_val = 0\n        max_index = 0\n        for val in lst:\n            if is_prime(val) and val > max_val:\n                max_val = val\n                max_index = lst.index(val)\n        return max_index, max_val\n\n    def sum_digits(lst):\n        sum = 0\n        for val in lst:\n            sum = sum * 10 + val\n        return sum\n\n    max_index, max_val = get_largest_prime(lst)\n    return sum_digits(lst[:max_index])"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \n    \"\"\"\n    \n    for key in dict.keys():\n        if not dict[key].lower() == dict[key]."}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    prime_numbers = []\n    for i in range(1, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(i)\n    return prime_numbers[:n]"}
{"task_id": "HumanEval/97", "completion": ""}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+2] in \"aeiouAEIOU\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    return int(value) // 1 + int(-value) // 1\n"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n+1):\n        if n % 2 == 0:\n            stones[i] = stones[i-1] + 2\n        else:\n            stones[i] = stones[i-1] + 1\n    return stones\n"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.split(\",\") or s.split()\n    return [word for word in words if word.strip()]"}
{"task_id": "HumanEval/102", "completion": ""}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    # Check if n is greater than m\n    if n > m:\n        return -1\n    \n    # Compute the average of n and m\n    total = n + m\n    average = total / 2\n    \n    # Round the average to the nearest integer\n    rounded_average = average + (average % 2 == 0)\n    \n    # Convert the rounded average to binary\n    binary_string = str(rounded_average).zfill(20)\n    \n    return binary_string"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return list(x)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # sort the array\n    arr = sorted(arr)\n    # reverse the array\n    arr = reversed(arr)\n    # create a list of names\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    # iterate through the array and replace each number with its corresponding name\n    return [names[i] for i in arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(i):\n    if i == 0:\n        return 1\n    else:\n        return i * factorial(i-1)\n"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n        else:\n            count -= 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return True\n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines whether it is possible to perform an exchange of elements\n    between two lists of numbers to make lst1 a list of only even numbers.\n\n    :param lst1: List of numbers\n    :param lst2: List of numbers\n    :return: \"YES\" if it is possible to perform an exchange of elements, \"NO\" otherwise\n    \"\"\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= lst2[i] % 2:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    count = {}\n    for letter in test.lower():\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    return count\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result_str = \"\"\n    for char in s:\n        if char not in c:\n            result_str += char\n    return result_str, True\n"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i in lst:\n        count = len(i) // 2\n        result.append(f\"the number of odd elements {count}n the str{count}ng {i[count:]} of the {lst}\")\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for num in nums:\n        min_sum = min(min_sum, num)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows, cols = grid.shape\n    max_fills = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_fills = max(max_fills, i + 1)\n        for i in range(rows):\n            if grid[i][j] == 1:\n                max_fills = max(max_fills, j + 1)\n    return max_fills"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    # Helper function to sort an array of integers\n    def binary_search(arr, low, high):\n        # Check if the array is empty or if the value is already in the array\n        if low == high or arr[low] == arr[high]:\n            return low\n\n        # Find the middle index of the array\n        mid = (low + high) // 2\n\n        # Compare the value with the middle element of the array\n        if arr[mid] == arr[high]:\n            # If the value is greater than all the elements in the\n            # array, it must be in the first half of the array\n            return binary_search(arr, low, mid)\n        elif arr[mid] < arr[high]:\n            # If the value is less than all the elements in the\n            # array, it must be in the second half of the array\n            return binary_"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) == n and word.isalpha() and word.islower():\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"\n    Finds the closest vowel that stands between two consonants from the right side of the given word.\n\n    :param word: The word to search for the closest vowel.\n    :return: The closest vowel that stands between two consonants from the right side of the given word, or an empty string if no vowel is found.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    start_index = len(word) - 1\n    end_index = start_index - 1\n    for i in range(start_index, len(word)):\n        for j in range(i, len(word)):\n            if word[j] in vowels and word[i:j] in vowels:\n                end_index = j\n                break\n        if end_index!= -1 and end_index < start_index:\n            break\n    return end_index if end_index!= -1 else \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    \"\"\"\n    Check if it is possible to concatenate the two strings in some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Args:\n        lst (list): A list of two strings, both strings consist of open\n            parentheses '(' or close parentheses ')' only.\n\n    Returns:\n        str: Either 'Yes' if there's a way to make a good string, or 'No' otherwise.\n    \"\"\"\n    # check if it is possible to concatenate the two strings in some order\n    # that the resulting string will be good\n    if len(lst)!= 2:\n        return 'No'\n    opening_paren = lst[0]\n    closing_paren = lst[1]\n    if not (opening_paren == '(' and closing_paren == ')') or \\\n       not (opening_paren == ')' and closing_paren == '('):\n        return 'No'\n    # check if the strings"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    sorted_arr = sorted(arr)\n    length = len(arr)\n    result = []\n    for i in range(k):\n        result.append(sorted_arr[i])\n    return result\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and lst[i + 1] % 2!= 0:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        for j in range(i+1, len(arr)):\n            sum += arr[j]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz_seq = [1]\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            collatz_seq.append(collatz_seq[-1] * 2)\n        else:\n            collatz_seq.append(3 * collatz_seq[-1] + 1)\n    return sorted(collatz_seq)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n        1. The date string is not empty.\n        2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n        3. The months should not be less than 1 or higher than 12.\n        4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n        valid_date('03-11-2000') => True\n\n        valid_date('15-01-2012') => False\n\n        valid_date('04-0-2040') => False\n\n        valid_date('06-04-2020') => True\n\n        valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n\n    month_num = date.split('-')[1]\n    if int(month_num) < 1 or int(month_num) > 12:\n        return False\n\n    day_num = date.split('-')[2]\n    if int(day_num) < 1 or int(day_num) > 31:\n        if int(month_num) in [1, 3, 5, 7, 8, 10, 12]:\n            return False\n        elif int(month_num) in [4, 6, 9, 11]:\n            if int(day_num) > 30:\n                return False\n        elif int(month_num) == 2 and int(day_num)!= 29:\n            return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    return [word for word in words if word]\n\ndef split_words(txt):\n    words = txt.split()\n    return [word for word in words if word]\n\ndef split_words(txt):\n    words = txt.split()\n    return [word for word in words if word]\n\ndef split_words(txt):\n    words = txt.split()\n    return [word for word in words if word]\n\ndef split_words(txt):\n    words = txt.split()\n    return [word for word in words if word]\n\ndef split_words(txt):\n    words = txt.split()\n    return [word for word in words if word]\n"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 < end1 or start2 < end2:\n        return \"NO\"\n    for start in range(start1, end1 + 1):\n        for end in range(start2, end2 + 1):\n            if start < end:\n                if (start, end) in intersection:\n                    return \"YES\"\n        start = start1\n        end = end1\n    return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    prod = 1\n    sign_prod = [1, -1, 0]\n    for i in arr:\n        sign = i\n        sign_prod[i] *= prod\n        prod *= i\n    return sign_prod[i] * prod"}
{"task_id": "HumanEval/129", "completion": ""}
{"task_id": "HumanEval/130", "completion": "def fib(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\ndef tri(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n        if i % 2 == 0:\n            a, b = b, a + b\n        else:\n            a, b = a, b + a\n    return a\n\ndef trib(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n        if i % 2 == 0:\n            a, b = b, a + b\n        else:\n            a, b = a, b + a\n    return a\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    result = 1\n    for i in range(1, len(str(n))):\n        if (n // i) % 2 == 1:\n            result *= (n // i) // 2\n    return result"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n            elif stack[-1] == ']':\n                stack.pop()\n            else:\n                return False\n        else:\n            if stack and stack[-1] == '[':\n                stack.pop()\n    return True"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(map(lambda x: x**2, lst))"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    return txt and not txt[-1].isdigit() and not txt[-1].lower() in 'wrd'"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    largest = -1\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            largest = i + 1\n        elif arr[i] > arr[i + 1]:\n            largest = i + 1\n    return largest"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    largest = max(lst)\n    smallest = min(lst)\n    return (largest, smallest)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return b\n        elif a < b:\n            return a\n    elif type(a) == float and type(b) == str:\n        if a > b:\n            return b\n        elif a < b:\n            return a\n    elif type(a) == str and type(b) == float:\n        if a > b:\n            return b\n        elif a < b:\n            return a\n    elif a == b:\n        return None\n    else:\n        return None\n"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n < 0 or n > 100:\n        return False\n    if n % 2 == 0 and n % 4 == 0:\n        return True\n    for i in range(1, n // 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= (n-i)\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    # Convert the string to a list of characters\n    text_list = text.split()\n    \n    # Iterate through the list of characters\n    for i, char in enumerate(text_list):\n        # If the character is a space, replace it with an underscore\n        if char =='':\n            text_list[i] = '_'\n        \n        # If the current and next characters are the same, \n        # replace the consecutive spaces with a dash\n        if i < len(text_list) - 1 and text_list[i+1] == char:\n            text_list[i:i+2] = '-'\n    \n    # Join the list of characters back into a string\n    return ''.join(text_list)"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n        - There should not be more than three digits ('0'-'9') in the file's name.\n        - The file's name contains exactly one dot '.'\n        - The substring before the dot should not be empty, and it starts with a letter from\n        the latin alphapet ('a'-'z' and 'A'-'Z').\n        - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n        file_name_check(\"example.txt\") # => 'Yes'\n        file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # Check if the file name contains more than 3 digits\n    if"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    sum = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0 or i % 4 == 0:\n            if i % 3 == 0:\n                sum += x ** 2\n            else:\n                sum += x ** 3\n        else:\n            sum += x ** 2\n    return sum"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) % 2!= 0:\n            result.append(word)\n    return \" \".join(result)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    numerator = int(x)\n    denominator = int(n)\n    if denominator == 0:\n        return False\n    if denominator == 1:\n        return True\n    if denominator == 2:\n        return numerator % 2 == 0\n    return simplify(numerator, denominator // 2) and simplify(numerator, denominator // 2 + 1)\n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    nums.sort(key=lambda x: sum(map(int, x)))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 == 1 and (num % 10) % 2 == 1:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    arr = [i * i - i + 1 for i in range(n)]\n    triples = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                    triples += 1\n                    break\n    return triples"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    # Check if planet1 and planet2 are correct planet names\n    if not isinstance(planet1, str) or not isinstance(planet2, str):\n        return ()\n    \n    # Get the sorted list of planets whose orbits are between those of planet1 and planet2\n    planets = sorted((planet1, planet2), key=lambda x: a(x[0], x[1]))\n    \n    return planets"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    sorted_lst = sorted(lst)\n    for i in range(len(lst)):\n        if lst[i].length % 2 == 0:\n            lst[i] = lst[i] + \"a\"\n        elif lst[i].length % 2 == 1:\n            lst.remove(lst[i])\n    return sorted_lst"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    numbers = [x for x in lst if x!= -1 and x!= 0 and int(x) % 2 == 1]\n    return sum(numbers)\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    diffs = []\n    for i in range(len(game)):\n        if game[i] == guess:\n            diffs.append(0)\n        else:\n            diff = abs(game[i] - guess)\n            diffs.append(diff)\n    return diffs"}
{"task_id": "HumanEval/153", "completion": "def strongest_extension(class_name, extensions):\n    \"\"\"\n    Finds the strongest extension and returns it in the format: ClassName.StrongestExtensionName\n    \"\"\"\n    strengths = []\n    for extension in extensions:\n        strength = len(extension.upper()) - len(class_name.lower())\n        strengths.append(str(strength))\n    max_strength = max(strengths)\n    return class_name + \".\" + \"StrongestExtensionName\" + \".\" + max_strength"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"\n    :type a: str\n    :type b: str\n    :rtype: bool\n    \"\"\"\n    if a == b:\n        return True\n    for i in range(len(b)):\n        if b[i:].lower() in a.lower():\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    count_even = 0\n    count_odd = 0\n    for i in range(len(str(num))):\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return count_even, count_odd"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numeral = ''\n    for i in range(len(str(number)))"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if (a/b) == (c/b) == math.pi/2:\n        return True\n    return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_char_count = max(words, key=len, default=0)\n    return words[max_char_count]"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    # initialize the number of eaten carrots and the number of remaining carrots\n    eaten = 0\n    remaining_carrots = remaining\n    \n    # loop until the number of remaining carrots is 0 or the number of eaten carrots is equal to the number of needed carrots\n    while remaining_carrots > 0:\n        # calculate the number of carrots eaten\n        eaten += min(number, remaining_carrots)\n        remaining_carrots -= min(number, remaining_carrots)\n    \n    # return the number of eaten carrots and the number of remaining carrots\n    return [eaten, remaining_carrots]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = ''.join(map(str, operator))\n    operands = [i for i in operand if i > 0]\n    result = 0\n    for op in expression:\n        if op[0] == '+':\n            result += operands.pop()\n        elif op[0] == '-':\n            result -= operands.pop()\n        elif op[0] == '*':\n            result *= operands.pop()\n        elif op[0] == '//':\n            result //= operands.pop()\n        elif op[0] == '**':\n            result **= operands.pop()\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] in {\"a\", \"b\", \"c\", \"d\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"}:\n            if s[i] == \"a\":\n                result += \"a\"\n            elif s[i] == \"b\":\n                result += \"B\"\n            elif s[i] == \"c\":\n                result += \"C\"\n            elif s[i] == \"d\":\n                result += \"D\"\n            elif s[i] == \"E\":\n                result += \"E\"\n            elif s[i] == \"F\":\n                result += \"F\"\n            elif s[i] == \"G\":\n                result += \"G\"\n            elif s[i] == \"H\":\n                result += \"H\"\n            elif s[i] == \"I\":\n                result += \"I\"\n            elif s[i] == \"J\":\n                result += \"J\"\n            elif s[i] == \"K\":\n                result += \"K\"\n            elif s[i] == \"L\":\n                result += \"L\"\n            elif s[i] == \"M\":\n                result += \"M\"\n            elif s[i] == \"N\":\n                result += \"N\"\n            elif s[i] == \"O\":\n                result += \"O\"\n            elif s[i] == \"P\":\n                result += \"P\"\n            elif s[i] == \"Q\":\n                result += \"Q\""}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    \"\"\"\n\n    if text:\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    for num in range(a, b+1):\n        digit = str(num)\n        if digit.isdigit() and digit.islower():\n            result.append(int(digit))\n    return result"}
