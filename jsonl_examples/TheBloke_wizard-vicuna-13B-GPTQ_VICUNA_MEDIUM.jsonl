{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    paren_stack = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if len(paren_stack) == 0:\n                continue\n            else:\n                groups.append(''.join(paren_stack))\n                paren_stack = []\n    if len(paren_stack)!= 0:\n        groups.append(''.join(paren_stack))\n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = math.floor(number)\n    decimal_part = number - integer_part\n    return integer_part + decimal_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(numbers[i] - mean) for i in range(len(numbers))]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i == 0 or numbers[i]!= numbers[i-1]:\n            result.append(numbers[i])\n        else:\n            result.append(numbers[i-1])\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    nested_paren_count = {}\n    result = []\n    for char in paren_string:\n       if char == '(':\n            if char in nested_paren_count:\n                nested_paren_count[char] += 1\n            else:\n                nested_paren_count[char] = 1\n        elif char == ')':\n            if char in nested_paren_count:\n                nested_paren_count[char] -= 1\n            else:\n                nested_paren_count[char] = -1\n        elif char == ')':\n            if nested_paren_count[char] == 0:\n                nested_paren_count[char] = 1\n            else:\n                nested_paren_count[char] -= 1\n        elif char == '(':\n            if nested_paren_count[char] == 0:\n                nested_paren_count[char] = 1\n            else:\n                nested_paren_count[char] += 1\n    for char in nested_paren_count:\n        if nested_paren_count[char] > 0:\n            result.append(nested_paren_count[char])\n    return result"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if len(numbers) == 0:\n        return 0, 1\n    else:\n        return (numbers[0] + sum(numbers[1:]), numbers[0] * sum(numbers[1:]))"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    current_max = numbers[0]\n    for num in numbers[1:]:\n        if num > current_max:\n            rolling_max_list.append(current_max)\n            current_max = num\n        else:\n            current_max = num\n    rolling_max_list.append(current_max)\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string.lower()\n    if string.startswith('palindrome'):\n        return string\n    elif string.startswith('reverse'):\n        return string[len(string):]\n    else:\n        start = 0\n        while True:\n            start = string.find(string[start:])\n            if start == -1:\n                break\n            end = string.find(string[start+len(string):])\n            if end == -1:\n                break\n            if string[start:end+len(string)] == string[start:end+len(string)][::-1]:\n                return string[start:end+len(string)]\n            start += len(string)\n    return ''"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        longest_string = strings[0]\n        for string in strings[1:]:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    gcd = 1\n    while b:\n        gcd = b // a % gcd\n        a = a // gcd\n    return gcd"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    current_prefix = \"\"\n    for char in string:\n        if char == \" \":\n            if current_prefix:\n                prefixes.append(current_prefix)\n                current_prefix = \"\"\n        elif current_prefix:\n            current_prefix += char\n        else:\n            current_prefix = char\n        if char.isspace():\n            current_prefix = \"\"\n        elif current_prefix:\n            current_prefix += char\n        else:\n            current_prefix = \"\"\n    if current_prefix:\n        prefixes.append(current_prefix)\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    sequence = []\n    for i in range(n):\n        sequence.append(i)\n    return''.join(sequence)"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": ""}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        if string[start:end] == substring:\n            count += 1\n        if end == len(string):\n            break\n        start = end + 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    # split the input string into a list of numbers\n    numbers_list = list(numbers)\n    # sort the list of numbers in ascending order\n    numbers_list.sort()\n    # join the sorted list of numbers back into a string\n    return ''.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        return None, None\n    \n    closest_numbers = []\n    for i in range(len(numbers)):\n        if i == 0 or numbers[i] < numbers[i-1]:\n            closest_numbers.append(numbers[i])\n        else:\n            j = i + 1\n            while j < len(numbers) and numbers[j] < numbers[i]:\n                j += 1\n            closest_numbers.append(numbers[j])\n            i = j\n        \n    if len(closest_numbers) == 2:\n        return closest_numbers[0], closest_numbers[1]\n    else:\n        return None, None"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        return numbers\n    if numbers[0] < 0 or numbers[0] > 1:\n        return numbers\n    if numbers[len(numbers) - 1] < 0 or numbers[len(numbers) - 1] > 1:\n        return numbers\n    return [x / (numbers[len(numbers) - 1] - numbers[0]) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    filtered_values = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_values.append(value)\n    return filtered_values"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    divisors = []\n    i = 2\n    while len(divisors) < n:\n        if n % i == 0:\n            divisors.append(i)\n        i += 1\n    return max(divisors)"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n % divisor == 0:\n        factors.append(divisor)\n        n //= divisor\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    if len(strings) == 0:\n        return ''\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return strings[0] + ''.join(strings[1:])"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return list(filter(lambda s: s.startswith(prefix), strings))"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    return [x for x in l if x >= 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n\n    for i in range(3, int(n**0.5) + 1, 6):\n        if n % i == 0:\n            return False\n\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"List of coefficients must have an even number of elements\")\n    if xs[n//2] == 0:\n        return 0\n    else:\n        for i in range(n):\n            if xs[i]!= 0:\n                break\n        else:\n            return -1\n        for i in range(n - 1, -1, -1):\n            if xs[i] == 0:\n                x = math.pow(-xs[i], n-i)\n                if x == 0:\n                    continue\n                if poly(xs, x) == 0:\n                    return x\n    return -1"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list) -> list:\n    l_copy = l.copy()\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_copy[i] = l[i]\n    return l_copy"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    unique_set = set(l)\n    return sorted(list(unique_set))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 and i % 13 == 0:\n            count += 1\n        elif i % 11 == 0 and i % 13!= 0:\n            count += 1\n        elif i % 13 == 0 and i % 11!= 0:\n            count += 1\n        if count == 3:\n            return count\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    return sorted(l) if len(l) % 2 == 0 else l"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # join groups of three characters.\n    s = \"\".join(s)\n    # split string into groups of three.\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups of three characters.\n    decoded_s = \"\".join(groups)\n    return decoded_s"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n):\n    if n <= 2:\n        return 2\n    elif n <= 3:\n        return 3\n    elif n <= 5:\n        return 5\n    elif n <= 15:\n        return 13\n    elif n <= 41:\n        return 89\n    else:\n        i = 0\n        while n % i == 0:\n            i += 1\n        if n % i == 0:\n            return None\n        else:\n            count = 0\n            while n % i == 0:\n                count += 1\n                n //= i\n            if count == 0:\n                return n\n            else:\n                return None"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    # check if there are three distinct elements in the list that sum to zero\n    for i in range(len(l)):\n        if l[i] + l[i+1] + l[i+2] == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue\n    moving in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    total_collisions = 0\n    for i in range(n):\n        if i < n//2:\n            car1 = i\n            car2 = n - car1 - 1\n        else:\n            car1 = n - i - 1\n            car2 = i\n        if car1 > car2:\n            total_collisions += 1\n    return total_collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    return [i + 1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n        return False\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    elif base == 2:\n        return bin(x)[2:]\n    elif base == 3:\n        return str(x)[2:]\n    elif base == 4:\n        return str(x)[3:]\n    elif base == 5:\n        return str(x)[4:]\n    elif base == 6:\n        return str(x)[5:]\n    elif base == 7:\n        return str(x)[6:]\n    elif base == 8:\n        return str(x)[7:]\n    elif base == 9:\n        return str(x)[8:]\n    else:\n        raise ValueError(\"Invalid base\")\n    \n    # Convert to string\n    return str(x)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = (a * h) / 2\n    return area"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    fib_table = [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "}
{"task_id": "HumanEval/47", "completion": "def median(l: list) -> float:\n    n = len(l)\n    if n % 2 == 0:\n        m = n // 2\n        return (l[m-1] + l[m]) / 2\n    else:\n        m = n // 2\n        return l[m]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Convert the string to lowercase\n    text = text.lower()\n    \n    # Remove all non-letter characters from the string\n    text = ''.join(c for c in text if c.isalpha())\n    \n    # Check if the string is empty or has only one character\n    if len(text) <= 1:\n        return True\n    \n    # Get the middle character of the string\n    middle = len(text) // 2\n    first_half = text[:middle]\n    second_half = text[middle:]\n    \n    # Check if the first and second halves are equal\n    return first_half == second_half"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    :param n: The integer to raise 2 to.\n    :param p: The integer to take the modulo of the result.\n    :return: The result of 2^n modulo p.\n    \"\"\"\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * 2) % p\n        n //= 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(int(c - 5 + ord(\"a\"))) for c in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num > t:\n            return False\n        else:\n            continue\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    # Convert the strings to sets to remove duplicates\n    s0_set = set(s0)\n    s1_set = set(s1)\n    \n    # Check if the sets have the same elements\n    return s0_set == s1_set"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    mapping = {}\n    for char in brackets:\n        if char in (\"<\", \">\"):\n            if mapping[char] is None:\n                mapping[char] = stack.append(char)\n            else:\n                if not mapping[char]:\n                    return False\n                mapping[char] = stack.pop()\n        elif char in (\"(\", \")\"):\n            mapping[char] = None\n    return not mapping"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    if all(x < y for x, y in zip(l[1:], l[0])) or all(x > y for x, y in zip(l[1:], l[0])):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    unique_l1 = list(set(l1))\n    unique_l2 = list(set(l2))\n    common_unique = list(set(unique_l1) & set(unique_l2))\n    return sorted(common_unique)"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == \"(\":\n            count += 1\n        elif char == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    n = len(xs)\n    if n < 2:\n        return None\n    s = 0\n    for i in range(n):\n        s += xs[i]\n    return [s * x for x in range(n)]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n <= 2:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouy\"\n    count = 0\n    for char in s:\n        if char in vowels and char!= 'y' or s.endswith('y') and char == 'y':\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    # Get the number of digits in x\n    num_digits = len(str(x))\n    \n    # Shift the digits right by shift\n    shift_amount = shift % num_digits\n    shifted_x = x >> shift_amount\n    \n    # If shift > number of digits, return digits reversed\n    if shift > num_digits:\n        shifted_x = str(int_to_base(shifted_x, 10))[::-1]\n    \n    # Return the result as a string\n    return str(shifted_x)\n\ndef int_to_base(num, base):\n    \"\"\"Convert an integer to a base representation.\"\"\"\n    return [num % base, (num // base) % base]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    # initialize variables to store the sum of upper characters\n    upper_sum = 0\n    # loop through each character in the string\n    for i in range(len(s)):\n        # check if the character is uppercase\n        if s[i].isupper():\n            # add the ASCII code of the uppercase character to the sum\n            upper_sum += ord(s[i]) - ord('A')\n        # if the character is not uppercase, add 0 to the sum\n        else:\n            upper_sum += 0\n    # return the sum of uppercase characters\n    return upper_sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    fruit_dict = {\"apples\": 0, \"oranges\": 0, \"mangoes\": 0}\n    for fruit, quantity in s.split():\n        if fruit.isdigit() and int(fruit) in fruit_dict:\n            fruit_dict[fruit.isdigit() and int(fruit)] += int(quantity)\n        else:\n            fruit_dict[\"mangoes\"] += int(quantity)\n    return fruit_dict[\"mangoes\"]"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even_value = None\n    smallest_index = None\n    for node in arr:\n        if node < 0:\n            continue\n        if node % 2 == 0 and smallest_even_value is None:\n            smallest_even_value = node\n        elif smallest_even_value is not None and node < smallest_even_value and smallest_index is None:\n            smallest_index = arr.index(node)\n    if smallest_even_value is None:\n        return []\n    if smallest_even_value == smallest_index:\n        return [smallest_even_value, smallest_index]\n    else:\n        return [smallest_even_value, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq_dict = {}\n    max_freq = 0\n    max_val = None\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_val = num\n        if freq_dict[num] >= num:\n            return -1\n    if max_val is not None:\n        return max_val\n    else:\n        return -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    min_val = lst[0]\n    max_val = lst[0]\n    for val in lst[1:]:\n        if val > max_val:\n            max_val = val\n        if val < min_val:\n            min_val = val\n    return [min_val, max_val]"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c or b + c > a or c + a > b:\n        return -1\n    \n    # Calculate the area of the triangle\n    area = (a + b + c) / 2\n    \n    # Round the area to 2 decimal points\n    area = round(area, 2)\n    \n    return area"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if len(q) < 3:\n        return True\n    elif len(q) == 3 and all(x == y for x, y in zip(q, q[::-1])) and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    # Initialize variables to store the minimum number of changes needed for palindrome\n    min_changes = len(arr)\n    # Check if the array is already a palindrome\n    if arr == arr[::-1]:\n        return 0\n    # Create a copy of the array\n    arr_copy = arr.copy()\n    # Check all possible permutations of the array\n    for i in range(len(arr)):\n        # Check if the current element can be changed to any other element\n        if i < len(arr) - 1:\n            for j in range(i+1, len(arr)):\n                arr_copy[i] = arr_copy[j]\n                if arr_copy == arr_copy[::-1]:\n                    # If the new array is a palindrome, update the minimum number of changes\n                    if len(arr_copy) == len(arr):\n                        min_changes -= 1\n                        if min_changes < 0:\n                            break\n                    else:\n                        min_changes -= 1\n    return min_changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if is_prime(i):\n                for j in range(2, i):\n                    if is_prime(j):\n                        for k in range(2, i/j):\n                            if is_prime(k):\n                                if i*j == k*a:\n                                    return True\n                                elif i*j == 2*k*a:\n                                    return True\n                                elif i*j == 3*k*a:\n                                    return True\n                                else:\n                                    return False\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    elif n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == -1:\n        return True\n    elif x == n:\n        return True\n    elif x == n*n:\n        return True\n    elif x == n*n*n:\n        return True\n    elif x == n*n*n*n:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a < 0:\n        a = -a\n    elif a == 0:\n        return True\n    elif a == 1:\n        return True\n    elif a == 2:\n        return False\n    elif a % 2 == 0:\n        return False\n    else:\n        for i in range(3):\n            if a % (i**2) == 0:\n                return True\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit.isalpha() and digit.isupper():\n            count += 1\n    if count == 0:\n        return 0\n    elif count == 1:\n        if num[0] in [2, 3, 5, 7, 11, 13]:\n            return 1\n        else:\n            return 0\n    else:\n        if num[0] in [2, 3, 5, 7, 11, 13]:\n            return 2\n        elif num[0] == 11:\n            return 3\n        elif num[0] == 13:\n            return 4\n        else:\n            return 0"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_string = \"\"\n    decimal_string = str(decimal)\n    binary_list = [decimal_string[i:i+4] for i in range(0, len(decimal_string), 4)]\n    for i in range(len(binary_list)):\n        binary_string += binary_list[i].zfill(4)\n    return binary_string.replace(\"db\", \"\").strip()"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    length = len(s)\n    if length < 3:\n        return False\n    count = 0\n    for i in range(length):\n        if i < length // 3:\n            if count == 0:\n                count += 1\n            elif count == 3:\n                count = 0\n            elif s[i] == s[i+1]:\n                count += 1\n                if count == 6:\n                    count = 0\n    return count == 0"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    # Create a dictionary to map GPA to letter grades\n    letter_grade_dict = {\n        '4.0': 'A+',\n        '3.7': 'A',\n        '3.3': 'A-',\n        '3.0': 'B+',\n        '2.7': 'B',\n        '2.3': 'B-',\n        '2.0': 'C+',\n        '1.7': 'C',\n        '1.3': 'C-',\n        '1.0': 'D+',\n        '0.7': 'D',\n        '0.0': 'D-',\n        0.0: 'E'\n    }\n    # Convert the GPA list to a list of grades\n    grades_list = [grade_equation(grade) for grade in grades]\n    # Create a list to store the letter grades\n    letter_grades = []\n    # Loop through the grades list and append the corresponding letter grade\n    for grade in grades_list:\n        if grade in letter_grade_dict:\n            letter_grades.append(letter_grade_dict[grade])\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Convert the string to a list of characters\n    chars = list(string)\n    # Initialize a variable to check if the length is prime\n    is_prime = True\n    # Check if the length is prime\n    if len(chars) > 2:\n        # Check if the length is divisible by any number other than 1 and itself\n        for i in range(2, len(chars)):\n            if chars[i]!= chars[i-1]:\n                is_prime = False\n                break\n        else:\n            is_prime = True\n    # Return the result\n    return is_prime"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**n):\n        if i >= 10**n:\n            count += 1\n            if i % 10 == 1:\n                count += 1\n        if i < 10**n:\n            count += 1\n            if i % 10 == 1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    # Convert N to binary\n    binary = bin(N)[2:]\n\n    # Initialize the sum of digits\n    total_sum = 0\n\n    # Loop through each digit in the binary string\n    for i in range(len(binary)):\n        # Get the current digit\n        digit = int(binary[i])\n\n        # Add the digit to the sum\n        total_sum += digit\n\n    # Convert the sum back to binary\n    binary_sum = bin(total_sum)[2:]\n\n    # Return the binary string of the sum of digits\n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    result = []\n    for i in range(len(lst)):\n        if i % 2 == 0 and (i+1) % 2!= 0:\n            result.append(lst[i])\n    return result"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # split the string into words\n    words = s.split()\n    \n    # create a dictionary to store the ascii values of each character\n    ascii_dict = {}\n    for char in s:\n        if char in ascii_dict:\n            ascii_dict[char] += 1\n        else:\n            ascii_dict[char] = 1\n    \n    # create a new string with the ordered words\n    ordered_words = []\n    for word in words:\n        # check if the word is already ordered\n        if word in ascii_dict:\n            # if the word is already ordered, add it to the new string\n            ordered_words.append(word)\n        else:\n            # if the word is not already ordered, sort its characters\n            # and add it to the new string\n            sorted_chars = sorted(list(word))\n            ordered_word = ''.join(sorted_chars)\n            ascii_dict[ordered_word] = 1\n            ordered_words.append(ordered_word)\n    \n    # join the ordered words to form the new string\n    new_s =''.join(ordered_words)\n    \n    return new_s"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Parameters:\n    lst (list): 2D nested list\n    x (int): x-coordinate of the point to find\n    \n    Returns:\n    list: List of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    points = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                points.append((i, j))\n    points.sort()\n    points = sorted(points, key=lambda x: (x[0], -x[1]))\n    return points"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    # create a copy of the array\n    array_copy = array.copy()\n    \n    # sort the array in ascending order if the sum of first and last elements is odd\n    if (array_copy[0] + array_copy[-1]) % 2 == 1:\n        array_copy.sort()\n    \n    # sort the array in descending order if the sum of first and last elements is even\n    else:\n        array_copy.reverse()\n        \n    return array_copy"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    # create a dictionary of the alphabet rotated by two multiplied to two places\n    alphabet = {\n        'a': 'f',\n        'b': 'g',\n        'c': 'h',\n        'd': 'i',\n        'e': 'j',\n        'f': 'k',\n        'g': 'l',\n        'h':'m',\n        'i': 'n',\n        'j': 'o',\n        'k': 'p',\n        'l': 'q',\n       'm': 'r',\n        'n':'s',\n        'o': 't',\n        'p': 'u',\n        'q': 'v',\n        'r': 'w',\n       's': 'x',\n        't': 'y',\n        'u': 'z',\n        'v': 'aa',\n        'w': 'ab',\n        'x': 'ac',\n        'y': 'ad',\n        'z': 'ae',\n        'aa': 'af',\n        'ab': 'ag',\n        'ac': 'ah',\n        'ad': 'ai',\n        'ae': 'aj',\n        'af': 'ak',\n        'ag': 'al',\n        'ah': 'am',\n        'ai': 'an',\n        'aj': 'ao',\n        'ak': 'ap',\n        'al': 'aq',\n        'am': 'ar',\n        'an': 'as',\n        'ao': 'at',\n        'ap': 'au',\n        'aq': 'av',\n        'ar': 'aw',\n        'as': 'ax',\n        'at': 'ay',\n        'au': 'az',\n        'av': 'ba',\n        'aw': 'bb',\n        'ax': 'bc',\n        'ay': 'bd',\n        'az': 'be',\n        'ba': 'bf',\n        'bb': 'c0',\n        'bc': 'c1',\n        'bd': 'c2',\n        'be': 'c3',\n        'bf': 'c4',\n        'c"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    elif len(lst) == 2:\n        return lst[0]\n    else:\n        return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    boredoms = 0\n    sentence_start = 0\n    for i in range(len(S)):\n        if S[i] in \",.?!\":\n            sentence_start = i\n            boredoms += 1\n        elif S[i] == \"I\":\n            boredoms += 1\n            sentence_start = i\n        elif S[i] == \".\":\n            boredoms += 1\n        elif S[i] == \"?\":\n            boredoms += 1\n        elif S[i] == \"!\":\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n    if x == int(sum(y, z)) or y == int(sum(x, z)) or z == int(sum(x, y)):\n        return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    # Define a list of vowels and their positions in the alphabet\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    vowel_positions = [vowel in 'AEIOU' for vowel in vowels]\n    # Create a dictionary to replace vowels with their two-place-ahead counterparts\n    vowel_dict = {vowel: chr(ord(vowel) + 2) for vowel in vowels}\n    # Define a function to encode the message\n    def encode_message(message):\n        # Split the message into words\n        words = message.split()\n        # Loop through each word\n        for i, word in enumerate(words):\n            # If the word is a vowel, replace it with its two-place-ahead counterpart\n            if word in vowels:\n                words[i] = vowel_dict[word]\n            # Swap the case of all letters\n            words[i] = word.upper()\n        # Join the words back into a message\n        encoded_message = ''.join(words)\n        return encoded_message\n    # Call the encode_message function with the input message\n    return encode_message(message)"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    prime = max_prime(lst)\n    return sum(int(digit) for digit in str(prime) if digit.isdigit())\n\ndef max_prime(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 5\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str) or not key.islower() or not key.isupper():\n            return False\n        if not isinstance(dict[key], str) or not dict[key].islower() or not dict[key].isupper():\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = []\n    for i in range(2, n+1):\n        if i == 2:\n            primes.append(i)\n        for j in range(3, int(i**0.5)+1, 6):\n            if i % j == 0:\n                break\n            for k in range(j**2, i, j):\n                if i % k == 0:\n                    break\n            else:\n                primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    product = 0\n    while b:\n        product += b % 10 * a % 10\n        b //= 10\n        a //= 10\n    return product"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(2, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # Convert the value to a float\n    value = float(value)\n\n    # Round the value away from zero\n    value = round(value)\n\n    # Check if the value is equidistant from two integers\n    if value == (value - 1) or value == (value + 1):\n        # If the value is equidistant from two integers, round it away from zero\n        value = round(value)\n\n    # Return the closest integer\n    return int(value)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    # initialize the list of stone numbers\n    stone_numbers = [n]\n\n    # find the number of stones in the next level\n    if n % 2 == 0:\n        next_number = n + 2\n    else:\n        next_number = n + 1\n\n    # append the next level's stones to the list\n    stone_numbers.append(next_number)\n\n    # repeat until all levels are calculated\n    while len(stone_numbers) < n:\n        # find the number of stones in the next level\n        if n % 2 == 0:\n            next_number = n + 2\n        else:\n            next_number = n + 1\n\n        # append the next level's stones to the list\n        stone_numbers.append(next_number)\n\n    # return the list of stone numbers\n    return stone_numbers"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words_list = s.split(\", \")\n    return words_list"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        x, y = y, x\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)\n    if n > m:\n        binary_avg = bin(n) + binary_avg[2:]\n    return binary_avg"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    # Create a copy of the input list\n    x_copy = x.copy()\n    \n    # Remove all even digits from the copy\n    x_copy = [digit for digit in x_copy if digit % 2!= 0]\n    \n    # Sort the list in increasing order\n    x_copy.sort()\n    \n    # Return the sorted list of unique digits\n    return x_copy"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    # sort by length\n    sorted_arr = sorted(arr, key=lambda x: len(str(x)), reverse=True)\n    # replace digits with their corresponding names\n    return [str(num) for num in sorted_arr if num >= 1 and num <= 9]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(1)\n            for j in range(1, i):\n                factors.append(j)\n    return factors"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and str(i)[::-1] == str(i):\n            if str(i)[::-1][::-1] == str(i):\n                even_count += 1\n            else:\n                odd_count += 1\n        elif str(i) == str(i)[::-1]:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            # check if the number has signed digits\n            digits = str(num)\n            if digits[0] == '-':\n                digits = digits[1:]\n                if digits[0] > 0:\n                    count += 1\n            else:\n                if digits[0] > 0:\n                    count += 1\n        else:\n            # check if the number has digits > 0\n            digits = str(num)\n            if digits[0] > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True if arr[0] <= 0 else False\n    if not isinstance(arr[0], int):\n        return False\n    if not isinstance(arr[-1], int):\n        return False\n    if arr[0] <= arr[-1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] < arr[i+1]:\n            return False\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] > arr[i+1]:\n            return False\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] < arr[i+1]:\n            return False\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # check if lst1 is already a list of only even numbers\n    if len(set(lst1)) % 2 == 0:\n        return \"YES\"\n    # check if it is possible to exchange elements between lst1 and lst2\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            if lst1[i] % 2 == 0 and lst2[j] % 2 == 0:\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                if is_even(lst1):\n                    return \"YES\"\n                # if lst1 is not a list of only even numbers after the exchange,\n                # continue searching for another exchange\n                continue\n    # if it is not possible to exchange elements between lst1 and lst2\n    return \"NO\"\ndef is_even(lst):\n    return len(set(lst)) % 2 == 0"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    # Convert the input string to a set to remove duplicates\n    unique_chars = set(test.lower())\n    # Count the occurrences of each character\n    counts = {}\n    for char in unique_chars:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    # Return the dictionary of most frequent character and its count\n    return counts.items()[0]"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Remove all characters in s that are equal to any character in c\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    # Check if the result string is palindrome\n    is_palindrome = True\n    if len(result) > 0:\n        result = result[::-1]\n        if result == result:\n            is_palindrome = False\n    return (result, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i in lst:\n        num_of_odd_digits = sum(1 for j in i if j % 2!= 0)\n        result.append(num_of_odd_digits)\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for num in nums[1:]:\n        min_sum = min(num_sum, num - min_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    rows = len(grid)\n    cols = len(grid[0])\n    max_value = 0\n    fill_count = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                if i == 0 or j == 0 or i == rows - 1 or j == cols - 1:\n                    max_value = max(max_value, 1)\n                else:\n                    max_value = max(max_value, 2)\n                fill_count += 1\n                if fill_count == capacity:\n                    return rows * cols - fill_count\n                for k in range(max_value):\n                    if grid[i][j+k] == 1:\n                        fill_count += 1\n                        if fill_count == capacity:\n                            return rows * cols - fill_count\n    return 0"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    # Convert array to binary representation\n    binary = [int(str(i)[-1]) for i in arr]\n    \n    # Count number of ones in binary representation\n    count = [i[0] for i in binary]\n    \n    # Sort based on number of ones\n    sorted_arr = sorted(arr, key=lambda x: count.count(int(str(x)[-1])))\n    \n    # Convert sorted array back to original values\n    return [int(str(i)[-1]) for i in sorted_arr]"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) == n:\n            if word.isalpha():\n                result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    closest_vowel = \"\"\n    for i in range(len(word)-1):\n        if word[i] in vowels and word[i+1].isalpha() and word[i+1] not in vowels:\n            if len(word[i+1]) > len(word[i]):\n                if closest_vowel == \"\":\n                    closest_vowel = word[i+1]\n                elif len(word[i+1]) > len(closest_vowel):\n                    closest_vowel = word[i+1]\n            else:\n                if len(word[i+1]) == len(closest_vowel):\n                    closest_vowel = word[i+1]\n            if i == 0 or i == len(word)-2:\n                break\n    return closest_vowel"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    # check if both strings in lst consist of only open or close parentheses\n    if len(lst)!= 2 or any(not c.isdigit() for c in lst[0]) or any(not c.isdigit() for c in lst[1]):\n        return \"No\"\n    \n    # concatenate the two strings and check if all parentheses are balanced\n    result = lst[0] + lst[1]\n    balanced = True\n    for c in result:\n        if c == '(' and balanced:\n            balanced = False\n        elif c == ')' and balanced:\n            balanced = False\n        elif c in '([{':\n            balanced = False\n        elif c in ')]}':\n            balanced = False\n        elif c == c and c.isdigit():\n            balanced = False\n    \n    return 'Yes' if balanced else 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Create a new empty list to store the k largest elements\n    k_largest = []\n    \n    # Iterate through the sorted array and add the k largest elements to k_largest\n    for i in range(k):\n        k_largest.append(arr[i])\n    \n    # Return the k_largest list\n    return k_largest"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum_of_odd_in_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            continue\n        if i < len(lst) - 1 and lst[i] % 2 == 0 and lst[i+1] % 2 == 0:\n            continue\n        if lst[i] % 2 == 1:\n            sum_of_odd_in_even += lst[i]\n    return sum_of_odd_in_even"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # check if k is within range\n    if k > len(arr):\n        return 0\n\n    # initialize sum variable\n    total_sum = 0\n\n    # iterate through first k elements of arr\n    for i in range(k):\n        # check if current element is within two digits\n        if (arr[i] >= 10) and (arr[i] <= 99):\n            # add current element to sum variable\n            total_sum += arr[i]\n\n    # return sum variable\n    return total_sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    # Define the collatz sequence for n\n    def collatz_sequence(n):\n        if n == 1:\n            return [1]\n        else:\n            return [n] + collatz_sequence(n // 2) + collatz_sequence(n // 3)\n\n    # Get the odd numbers in the collatz sequence\n    odd_collatz = []\n    for i in range(len(collatz_sequence(n))):\n        if collatz_sequence(n)[i] % 2 == 1:\n            odd_collatz.append(collatz_sequence(n)[i])\n\n    # Sort the list in increasing order\n    odd_collatz.sort()\n\n    return odd_collatz"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    # Convert date string to datetime object\n    try:\n        datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return False\n    \n    # Check if date is valid\n    if date.day < 1 or date.day > 31 or date.month < 1 or date.month > 12:\n        return False\n    \n    if date.month < 1 or date.month > 29:\n        return False\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    # Check if any whitespace exists in the text\n    if'' in txt:\n        words = txt.split()\n    else:\n        # Check if any commas exist in the text\n        words = re.findall(r'\\d+', txt)\n        if not words:\n            # If no commas or digits exist, count lower-case letters with odd order\n            words = [ord(char) for char in txt if ord(char) % 2!= 0]\n    return words"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    unique_nums = set(lst)\n    if len(unique_nums)!= len(lst):\n        return False\n    for num in unique_nums:\n        if len(set([num]*len(lst)))!= len(lst):\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if not interval1[0] <= interval2[0] or not interval2[1] >= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] and interval2[1] >= interval1[0]:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    \n    sign_prod = 1\n    for num in arr:\n        if num >= 0:\n            sign_prod *= 1\n        elif num < 0:\n            sign_prod *= -1\n        else:\n            sign_prod *= 0\n    \n    return sign_prod * sum(abs(num) for num in arr)"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # create a 2D array to represent the grid\n    rows, cols = grid.shape\n    grid_array = [grid[i:j] for i in range(rows) for j in range(cols)]\n    \n    # initialize the distances to the nearest neighbors of each cell in the grid\n    distances = [[0] * cols for i in range(rows)]\n    \n    # initialize the previous cell and the current cell\n    prev_cell = (0, 0)\n    curr_cell = (0, 0)\n    \n    # initialize the path and the visited cells\n    path = []\n    visited = set()\n    \n    # loop through each cell in the grid\n    while len(visited) < rows * cols:\n        # get the neighbors of the current cell\n        neighbors = get_neighbors(grid_array, curr_cell)\n        \n        # find the nearest neighbor\n        nearest_neighbor = None\n        nearest_distance = float('inf')\n        for n in neighbors:\n            distance = ((curr_cell[0] + n[0], curr_cell[1] + n[1]) - (prev_cell[0] + n[0], prev_cell[1] + n[1]))\n            if distance < nearest_distance:\n                nearest_neighbor = n\n                nearest_distance = distance\n        \n        # update the nearest neighbor and the previous cell\n        prev_cell = curr_cell\n        curr_cell = nearest_neighbor\n        \n        # add the current cell to the visited set\n        visited.add(curr_cell)\n        \n        # add the current cell to the path if it is not already in the path\n        if curr_cell not in path:\n            path.append(curr_cell)\n    \n    # reverse the path\n    path.reverse()\n    \n    # sort the path by the values on the cells\n    lst_path = sorted(set(path))\n    \n    # check if the path is valid\n    if len(lst_path) == k:\n        # check if the path is lexicographically smaller than any other path of length k\n        for i in"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    elif n % 2 == 0:\n        return [1 + n / 2]\n    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n        "}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for i in range(len(str(n))):\n        if str(n)[i] % 2 == 1:\n            product *= str(n)[i]\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n    while stack:\n        if stack[-1] == '[':\n            stack.pop()\n        elif stack[-1] == ']':\n            if not stack or stack[-1]!= '[':\n                return True\n            stack.pop()\n        else:\n            if not stack or stack[-1] == stack[-2]:\n                return True\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    lst_squared = [num**2 for num in lst]\n    return sum(lst_squared)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Split the string into words\n    words = txt.split()\n    \n    # Get the last character of the last word\n    last_char = words[-1][-1]\n    \n    # Check if the last character is a letter and not part of a word\n    if last_char.isalpha() and last_char not in words[-1]:\n        return True\n    \n    # If any of the above conditions are not met, return False\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    n = len(arr)\n    if n == 1:\n        return -1\n    for i in range(n-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return None, None\n    lst_neg = [x for x in lst if x < 0]\n    lst_pos = [x for x in lst if x >= 0]\n    if not lst_neg:\n        return None, None\n    if not lst_pos:\n        return lst_neg[0], lst_neg[0]\n    a = lst_neg[0]\n    b = lst_pos[0]\n    return a, b"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    :param a: The first variable to compare\n    :param b: The second variable to compare\n    :return: The larger variable in its given variable type, or None if the values are equal\n    \"\"\"\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str) and a.find('.')!= -1 and b.find('.')!= -1:\n        if float(a) > float(b):\n            return a\n        elif float(b) > float(a):\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str) and a.find(',')!= -1 and b.find(',')!= -1:\n        if float(a.replace('{', '').replace('}', '')) > float(b.replace('{', '').replace('}', '')):\n            return a\n        elif float(b.replace('{', '').replace('}', '')) > float(a.replace('{', '').replace('}', '')):\n            return b\n        else:\n            return None\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Check if n is even and greater than 4\n    if n > 4 and n % 2 == 0:\n        # Check if n can be written as the sum of 2 even numbers\n        if n % 4 == 0:\n            # Check if n can be written as the sum of 2 even numbers again\n            if n % 4 == 0:\n                # Check if n can be written as the sum of 2 even numbers again\n                if n % 4 == 0:\n                    # Check if n can be written as the sum of 2 even numbers again\n                    if n % 4 == 0:\n                        # Check if n can be written as the sum of 2 even numbers again\n                        if n % 4 == 0:\n                            # Check if n can be written as the sum of 2 even numbers again\n                            if n % 4 == 0:\n                                return True\n                            else:\n                                return False\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                # Check if n can be written as the sum of 2 even numbers\n                if n % 4 == 0:\n                    return True\n                else:\n                    return False\n        else:\n            # Check if n can be written as the sum of 2 even numbers\n            if n % 4 == 0:\n                return True\n            else:\n                return False\n    else:\n        return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    if n < 0:\n        return None\n\n    elif n == 0:\n        return 1\n\n    else:\n        result = 1\n\n        for i in range(n, -1, -1):\n            result *= i\n\n        return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"   \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3 or not file_name.isalpha():\n        return \"No\"\n    elif not file_name.startswith(\".\"):\n        return \"No\"\n    elif not file_name.split(\".\")[0].isalpha():\n        return \"No\"\n    elif not [\"txt\", \"exe\", \"dll\"].intersection(file_name.split(\".\")[1]):\n        return \"No\"\n    else:\n        return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n            sum += lst[i]**3\n    return sum"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    prime_words = []\n    for word in sentence.split():\n        if len(word) <= 1:\n            prime_words.append(word)\n    if not prime_words:\n        return \"No prime words found in sentence.\"\n    else:\n        random.shuffle(prime_words)\n        return \" \".join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    numerator, denominator = map(int, x.split('/'))\n    numerator_n, denominator_n = map(int, n.split('/'))\n    if denominator == denominator_n:\n        return numerator % denominator_n == 0 and denominator % denominator_n == 0\n    elif denominator_n == 0:\n        return False\n    else:\n        return numerator % denominator_n == 0 and denominator % denominator_n == 0"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    # sort the list in ascending order based on the sum of digits\n    nums.sort(key=lambda x: sum(int(digit) for digit in str(x)), reverse=True)\n    \n    # if there are multiple items with the same sum of digits, sort them based on their index\n    nums.sort(key=lambda x: nums.index(x))\n    \n    return nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    result = 0\n    for num in nums:\n        if num > 10 and str(num)[0] % 2!= 0 and str(num)[-1] % 2!= 0:\n            result += 1\n    return result"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i**2 - i + 1 for i in range(n)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    planets_list = sorted(planets)\n    if planet1 in planets_list and planet2 in planets_list:\n        return (planets_list.pop(planet1), planets_list.pop(planet2))\n    elif planet1 in planets_list:\n        return (planets_list.pop(planet1),)\n    elif planet2 in planets_list:\n        return (planets_list.pop(planet2),)\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Remove strings with odd length\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort by length, then alphabetically\n    lst.sort(key=lambda x: len(x), reverse=True)\n    lst.sort(key=lambda x: x)\n    \n    return lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n % 2 == 0:\n        return y\n    elif n % 2 == 1:\n        return x\n    else:\n        return None"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            if num % 2 == 1:\n                result += num**2\n    return result"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    if game == guess:\n        return [0] * len(game)\n    else:\n        return [abs(game[i] - guess[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_extension_name = None\n    for extension in extensions:\n        cap = sum(1 for letter in extension if letter.isupper())\n        sm = sum(1 for letter in extension if letter.islower())\n        strength = cap - sm\n        if strongest_extension is None or strength > strongest_extension.strength:\n            strongest_extension = extension\n            strongest_extension_name = extension\n    return class_name + '.' + strongest_extension_name"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    # convert both words to lists of characters\n    a_chars = list(a)\n    b_chars = list(b)\n\n    # check if b is a substring of a\n    for i in range(len(b)):\n        if b_chars[i] in a_chars:\n            return True\n\n    # check if any rotation of b is a substring of a\n    for i in range(len(b)):\n        for j in range(i, len(b)):\n            rotated = list(b_chars)\n            rotated.rotate(j)\n            if any(char in a_chars for char in rotated):\n                return True\n\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    digit_count = 0\n    \n    while digit_count < len(str(num)):\n        if num % 10 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        digit_count += 1\n        \n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_numeral_map = {\n        'M': 1000, 'CM': 900, 'D': 500, 'CD': 400,\n        'C': 100, 'XC': 90, 'L': 50, 'XL': 40,\n        'X': 10, 'IX': 9, 'V': 5, 'IV': 4, 'I': 1\n    }\n\n    roman_numeral = ''\n    for power, value in roman_numeral_map.items():\n        while number >= value:\n            roman_numeral += power\n            number -= value\n\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # Check if any side is zero\n    if a == 0 or b == 0 or c == 0:\n        return False\n    \n    # Check if any angle is 90 degrees\n    if a == b == c or b == c == a or c == a == b:\n        return True\n    \n    # Check if any angle is 90 degrees\n    if a == b == c or b == c == a or c == a == b:\n        return True\n    \n    # Check if any angle is 90 degrees\n    if a == b == c or b == c == a or c == a == b:\n        return True\n    \n    return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = set(word.lower().replace(\" \", \"\"))\n        if len(unique_chars) > max_unique_chars:\n            max_unique_chars = len(unique_chars)\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if number >= remaining:\n        return [remaining, 0]\n    elif need <= remaining - number:\n        return [remaining - number, remaining - number]\n    else:\n        return [remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator) == len(operand) - 1:\n        if all(isinstance(x, (int, float)) for x in operand):\n            result = eval(operator[0] +''.join(str(x) for x in operand))\n            return result\n        else:\n            return \"Error: Operand list must be a list of non-negative integers.\"\n    else:\n        return \"Error: Length of operator list must be equal to the length of operand list minus one.\""}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    for i in range(len(s)):\n        if i < len(s):\n            if s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n                if s[i] < len(s[i]) and s[i] >= 'a' and s[i] <= 'z':\n                    result += s[i].upper()\n                elif s[i] < len(s[i]) and s[i] >= 'A' and s[i] <= 'Z':\n                    result += s[i].lower()\n                else:\n                    result += s[i]\n            else:\n                result += s[i]\n        else:\n            result += s[i]\n    return result"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    if not text:\n        return None\n\n    text = text.encode('utf-8')\n    hash_object = hashlib.md5()\n    hash_object.update(text)\n    digest = hash_object.digest()\n    md5_hash = base64.b64encode(digest).decode('utf-8')\n\n    return md5_hash"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    digits = set()\n    for i in range(a, b+1, 2):\n        digits.add(i)\n    return list(digits)"}
