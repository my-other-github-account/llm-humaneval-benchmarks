{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\""}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses.\n    Your goal is to separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    for opening_brace in paren_string.strip('()'):\n        if opening_brace:\n            closing_brace = paren_string[len(opening_brace):]\n            groups.append(opening_brace)\n            groups.append(closing_brace)\n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = number // 1\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    def check_balance(operations):\n        current_balance = 0\n        for operation in operations:\n            current_balance += operation\n        if current_balance < 0:\n            return True\n        else:\n            return False\n    return check_balance(operations)"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    pass"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [nums for nums in numbers if nums % delimeter!= 0]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\""}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \"\"\"\n    return strings[:strings.index(substring)] if strings.index(substring) > 0 else []"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    max_num = None\n    rolling_max_numbers = []\n    for num in numbers:\n        if num > max_num:\n            rolling_max_numbers.append(num)\n            max_num = num\n        else:\n            if num > max_num:\n                rolling_max_numbers.append(num)\n                max_num = num\n            else:\n                rolling_max_numbers.append(num)\n    return rolling_max_numbers"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    ```"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    result = ''\n    for char in a:\n        if char == '1':\n            result += '0'\n        elif char == '0':\n            result += '1'\n    for char in b:\n        if char == '1':\n            result += '1'\n        elif char == '0':\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\""}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    return max(a, b) / max(a, b)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list of all prefixes from shortest to longest of the input string\n    :param string: str\n    :return: List[str]\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefix = string[i]\n        if i == len(string) or string[i] == string[i-1]:\n            prefixes.append(prefix)\n    return list(prefixes)"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    return '0'+ str(n) +'1 2 3 4 5'"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    for char in string:\n        if char.isalpha():\n            distinct_chars.add(char)\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    ```"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i] == substring[0]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\""}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n    \"\"\"\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers)):\n        diff = numbers[i] - numbers[i + 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    if closest_pair is None:\n        return None\n    else:\n        return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    return [x/10 for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\""}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    divisors = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    i = 0\n    while len(divisors) > 0:\n        i += 1\n        divisors.pop(0)\n    if n % 2 == 0:\n        return n\n    else:\n        return divisors[0]"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    product = 1\n    while n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                factors.append(i)\n                product *= i\n                n //= i\n    if n > 1:\n        factors.append(n)\n        product *= n\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = List[int]()\n    for number in numbers:\n        if number > 0:\n            unique_numbers.append(number)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    uppercase_chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    lowercase_chars = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join([uppercase_chars.index(char) % 2 == 0 and lowercase_chars.index(char) % 2 == 0 and string[lowercase_chars.index(char)] or string[uppercase_chars.index(char)] for char in string])"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate list of strings into a single string\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return strings[:]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    positive_numbers = [num for num in l if num > 0]\n    return positive_numbers"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    "}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    Return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    Find x such that poly(x) = 0.\n    Find x returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    n = len(xs)\n    if n % 2!= 0:\n        return None\n    else:\n        x = xs[-1] / 2\n        for i in range(n // 2):\n            x = (x - xs[-2]) / (2 * xs[-1])\n        return x"}
{"task_id": "HumanEval/33", "completion": ""}
{"task_id": "HumanEval/34", "completion": "def unique(l: list) -> list:\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    l_even = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_even.append(l[i])\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_even.append(l[i])\n    l = l_even\n    return l"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # Split string to groups of length 3\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Cycle elements in each group\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # Join groups to encoded string\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    Takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split string to groups of length 3\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Cycle elements in each group\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # Join groups to decoded string\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        elif n <= 2:\n            return 1\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n    def is_prime(n):\n        if n <= 1:\n            return True\n        elif n <= 3:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            for i in range(5, n):\n                if n % i == 0:\n                    return False\n            return True\n    def prime_fib(n):\n        fib = fibonacci(n)\n        while True:\n            if is_prime(fib):\n                return fib\n            fib += 2\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    fib = prime_fib(fibonacci(n))\n    while True:\n        if is_prime(fib):\n            return fib\n        fib += 2\n    return 0"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    "}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # no-op function\n    pass"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\n    \"\"\"\n    return l + [0] * (len(l) + 1)"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    "}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    base numbers are less than 10.\n    Example:\n    change_base(8, 3) -> '22'\n    change_base(8, 2) -> '1000'\n    change_base(7, 2) -> '111'\n    \"\"\""}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"\n    Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (1/2) * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n <= 4:\n        return [n]\n    else:\n        return [fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list) -> float:\n    \"\"\"\n    Return the median of elements in the list l.\n    :param l: list\n    :return: float\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return (median(l[:-1]) + median(l[1:])) / 2\n    else:\n        return median(l[:-1])"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    Returns True if string is a palindrome, False otherwise\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\""}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2**n) % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n    \"\"\"\n    Returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    Takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([ch for ch in s if ch >= \"a\" and ch <= \"z\"])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return text.replace(vowels, '')"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \"\"\"\n    return len(filter(lambda x: x < t, l)) == len(l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"\n    Add two numbers x and y\n    Returns the sum of x and y\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    Returns True if s0 and s1 have the same characters, False otherwise.\n    \"\"\"\n    if len(s0)!= len(s1):\n        return False\n    for char in s0:\n        if char not in s1:\n            return False\n    return True"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    elif n <= 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<<\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\ndef correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<<\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\""}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"\n    Returns True if list elements are monotonically increasing or decreasing.\n    Parameters:\n    l (list): List of elements to check.\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] < l[i - 1]:\n            return False\n        elif l[i] > l[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n    \"\"\"\n    return sorted(list(set(l1) & set(l2))).item()"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while n % i == 0:\n        i += 1\n    for j in range(i, int(n**0.5)+1):\n        if n % j == 0:\n            print(j)\n            n = n / j\n    print(n)"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\""}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\ndef correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\""}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list) -> list:\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    return [f\"{xs[i]} + {xs[i+1]} * x +...\" for i in range(len(xs) - 1)]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n < 0:\n        return \"Error: n must be a non-negative integer\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    result = \"\"\n    while x > 0:\n        result = x % 10\n        x //= 10\n    while x > 0:\n        result += str(x % 10)\n        x //= 10\n    return result + \"0\" * (shift - len(str(x)))"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum = 0\n    for i in range(1, len(s)):\n        if s[i].isupper():\n            sum += ord(s[i]) - 65\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    if s == \"0 apples and 1 oranges\":\n        return 3 - 0 - 1\n    elif s == \"2 apples and 3 oranges\":\n        return 100 - 2 - 3\n    elif s == \"5 apples and 6 oranges\":\n        return 19 - 5 - 6\n    elif s == \"100 apples and 1 oranges\":\n        return 120 - 100 - 1\n    else:\n        return \"Invalid input\""}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        1 <= nodes.length <= 10000\n        0 <= node.value\n    \"\"\"\ndef pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if smallest_value == float('inf'):\n                smallest_value = arr[i]\n            else if arr[i] < smallest_value:\n                smallest_value = arr[i]\n            smallest_index = i\n    if smallest_value == float('inf'):\n        return []\n    else:\n        return [smallest_value, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_frequency = 0\n    max_value = 0\n    for num in lst:\n        frequency = len(lst[num])\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_value = num\n    if max_frequency == 0:\n        return -1\n    else:\n        return max_value"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    lst.sort(reverse=True)\n    for i in range(len(lst)-1, -1, -1):\n        lst.pop()\n    return lst"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1. Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side. Example: triangle_area(3, 4, 5) == 6.00. triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b > c or b + c > a or c + a > b:\n        return -1\n    else:\n        area = (a * b * c) / 12\n        return round(area, 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    \"\"\"\n    Check if the object q will fly by balancing it and checking if the sum of its elements is less than or equal the maximum possible weight w.\n    Returns True if the object q will fly, and False otherwise.\n    \n    Parameters:\n    q (list): The object to check.\n    w (int): The maximum possible weight.\n    \n    Returns:\n    bool: True if the object q will fly, False otherwise.\n    \"\"\"\n    if len(q) % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    min_change = 2\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                continue\n            if i + j == len(arr) or i - j == 0:\n                continue\n            if arr[i]!= arr[j]:\n                break\n            for k in range(min_change):\n                for l in range(k+1, min(i+k, j+k)+1):\n                    if arr[i] == arr[j]:\n                        break\n                for m in range(min_change):\n                    for n in range(m+1, min(i+k, j+k)+1):\n                        if arr[i] == arr[j]:\n                            break\n                for o in range(min_change):\n                    for p in range(o+1, min(i+k, j+k)+1):\n                        if arr[i] == arr[j]:\n                            break\n                for q in range(min_change):\n                    for r in range(q+1, min(i+k, j+k)+1):\n                        if arr[i] == arr[j]:\n                            break\n                for s in range(min_change):\n                    for t in range(s+1, min(i+k, j+k)+1):\n                        if arr[i] == arr[j]:\n                            break\n                if i + j == len(arr) or i - j == 0:\n                    break\n                if arr[i]!= arr[j]:\n                    break\n                min_change = min(min_change, i+j-1)\n    return min_change"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"\n    Check if the given number is the multiplication of 3 prime numbers\n    and return True if it is, False otherwise.\n    The function assumes that the number is less than 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    for i in range(1, a):\n        if i > 2 and is_prime(i):\n            for j in range(i, 101):\n                if j > 2 and is_prime(j):\n                    if i * j == a:\n                        return True\n                        break\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    Check if a number x is a simple power of n\n    Returns True if x is a simple power of n and False otherwise\n    x is a simple power of n if n**int=x\n    Parameters:\n    x (int): The number to check\n    n (int): The base of the power\n    \"\"\"\n    if n**int == x:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    \"\"\"\n    Check if a is a cube number\n    Returns True if a is a cube of some integer number, False otherwise\n    Note: You may assume the input is always valid\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a == 1:\n        return True\n    elif a == 2:\n        return False\n    elif a % 2 == 0:\n        return True\n    elif a % 3 == 0:\n        return True\n    elif a % 4 == 0:\n        return True\n    elif a % 5 == 0:\n        return True\n    elif a % 7 == 0:\n        return True\n    elif a % 11 == 0:\n        return True\n    elif a % 13 == 0:\n        return True\n    elif a % 17 == 0:\n        return True\n    elif a % 19 == 0:\n        return True\n    elif a % 23 == 0:\n        return True\n    elif a % 29 == 0:\n        return True\n    elif a % 31 == 0:\n        return True\n    elif a % 37 == 0:\n        return True\n    elif a % 41 == 0:\n        return True\n    elif a % 43 == 0:\n        return True\n    elif a % 47 == 0:\n        return True\n    elif a % 53 == 0:\n        return True\n    elif a % 59 == 0:\n        return True\n    elif a % 61 == 0:\n        return True\n    elif a % 67 == 0:\n        return True\n    elif a % 71 == 0:\n        return True\n    elif a % 73"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    hex_digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_num = num.upper()\n    count = 0\n    for digit in hex_digits:\n        if hex_num.startswith(digit):\n            primes.append(int(digit))\n            count += 1\n    if len(primes) == 0:\n        return 0\n    elif len(primes) == 1:\n        return 1\n    else:\n        return len(primes)"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_string = \"db\"\n    while decimal > 0:\n        binary_string += str(decimal % 2).zfill(8) + \"0\"\n        decimal //= 2\n    return binary_string + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    def happy(s):\n        n = len(s)\n        if n < 3:\n            return False\n        for i in range(n):\n            if s[i] == s[i+2]:\n                return False\n        return True\n    return happy(s)"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"\n    Check if a given string length is prime or not\n    Returns: True if prime, False otherwise\n    \"\"\"\n    if len(string) <= 1:\n        return True\n    for i in range(2, len(string)):\n        if string[i] == '':\n            continue\n        for j in range(i+1, len(string)):\n            if string[j] == '':\n                continue\n            if string[i] == string[j]:\n                continue\n            if len(set([string[i], string[j]])) == 1:\n                return True\n    return False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, n+1):\n        if i == 1:\n            count += 1\n    print(\"The count of the numbers of n-digit positive integers that start or end with 1 is: \", count)\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"\n    Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example:\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    # function to convert integer to binary\n    def convert_to_binary(num):\n        return bin(num)[2:]\n    \n    # function to calculate sum of digits\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    \n    # check if N is within range\n    if N < 0 or N > 10000:\n        raise ValueError(\"N must be a positive integer between 0 and 10000.\")\n    \n    # calculate sum of digits and convert to binary\n    result = \"\"\n    while N > 0:\n        result += str(N % 10)\n        N //= 10\n    sum_of_digits_result = sum_of_digits(N)\n    \n    # return result as binary string\n    return convert_to_binary(sum_of_digits_result) + \"0\""}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst. add the even elements that are at odd indices.\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    odd_indices = [i for i in range(len(lst)) if i % 2!= 0]\n    even_indices = [i for i in range(len(lst)) if i % 2 == 0]\n    result = 0\n    for i in odd_indices:\n        result += lst[i]\n    for i in even_indices:\n        result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # Split the string into words\n    words = s.split()\n    # Sort the characters in ascending order\n    sorted_chars = sorted(list(map(ord, words)))\n    # Join the sorted characters into a new string\n    new_words = ''.join([chr(c) for c in sorted_chars])\n    # Replace the words with their sorted counterparts\n    new_words = new_words.replace(' ', '')\n    return new_words.capitalize() +'' + s.strip()"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    Given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    sorted_lst = sorted(lst, key=lambda x: x[0])\n    sorted_lst_x = sorted(sorted_lst, key=lambda x: x[1])\n    return [x for x in sorted_lst_x if x[0] == x[1] and x[1] > 0]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\ndef sort_array(array):\n    if len(array) < 2:\n        return array\n    n = len(array)\n    def compare(x, y):\n        if x < y:\n            return -1\n        elif x > y:\n            return 1\n        else:\n            return 0\n    def swap(i, j):\n        array[i], array[j] = array[j], array[i]\n    def sort_helper(array, n, compare, swap):\n        for k in range(n):\n            if n % 2 == 0:\n                if compare(array[k], array[k + 1]):\n                    swap(array, array[k], array[k + 1])\n            else:\n                if not compare(array[k], array[k + 1]):\n                    swap(array, array[k], array[k + 1])\n    n, compare, swap = 0, 0, 0\n    sort_helper(array, n, compare, swap)\n    return array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = 'abcdefghijkl'\n    encrypted = ''\n    for letter in s:\n        if letter.isalpha():\n            index = ord(letter.lower()) - 64\n            encrypted += alphabet[index] + alphabet[index+1]\n        else:\n            encrypted += letter\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    if smallest == float('inf'):\n        return None\n    else:\n        return smallest - 1"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    count = 0\n    words = S.split()\n    for word in words:\n        if word.lower() == 'i':\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    \"\"\""}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\ndef encode_message(message):\n    # Define a function to swap case of all letters\n    def swap_case(string):\n        return string.upper()\n    # Define a function to replace vowels with the letter 2 places ahead\n    def replace_vowels(string):\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        return ''.join([swap_case(letter) for letter in string if letter in vowels])\n    # Combine both functions to encode the message\n    encoded_message = ''.join([replace_vowels(replace_case(letter)) for letter in message])\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    max_prime = None\n    sum_of_digits = 0\n    for num in lst:\n        if num > max_prime:\n            max_prime = num\n        else:\n            for digit in str(num):\n                sum_of_digits += digit\n    if sum_of_digits > 0:\n        sum_of_digits //= 10\n    return max_prime + sum_of_digits"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    \ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    \ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = [2, 3]\n    if n > len(primes):\n        primes.extend([i for i in range(4, n+1) if i % 2!= 0])\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"\n    This function takes two integers and returns the product of their unit digits.\n    It assumes that the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # code to implement the function goes here\n    pass"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    vowels = 'BCDFGHJKLMNPQRSTVWXYZ'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i+1] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    if value.isdigit():\n        return int(value)\n    else:\n        return float(value)\n    # code to determine the closest integer goes here"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n, n+2]\n    else:\n        return [n+1, n+3]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive.\n    If there's no such number, then the function returns -1.\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    max_num = 0\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            max_num = i\n            break\n    if max_num == 0:\n        return -1\n    else:\n        return max_num"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    \"\"\"\n    Computes the average of integers from n through m (including n and m).\n    Rounds the answer to the nearest integer and converts that to binary.\n    If n is greater than m, returns -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    avg = (n + m) / 2\n    binary_avg = bin(avg)\n    if avg == int(avg):\n        return binary_avg\n    else:\n        return -1"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"\n    Given a list of positive integers x. Return a sorted list of all elements that haven't any even digit.\n    Note: Returned list should be sorted in increasing order.\n    For example:\n    x = [15, 33, 1422, 1]\n    Returned list = [1, 15, 33]\n    x = [152, 323, 1422, 10]\n    Returned list = []\n    \"\"\"\n    seen = set()\n    return sorted([num for num in x if num % 2!= 0 and num not in seen])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\""}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    \"\"\"\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i * i)\n        else:\n            result.append(1 + i)\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\ndef even_odd_palindrome(n):\n    if n <= 1:\n        return 0\n    elif n <= 3:\n        return (0, 1)\n    elif n <= 10:\n        return (0, 1, 2)\n    elif n <= 100:\n        return (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    else:\n        return (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, "}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    sum_digits = 0\n    for num in arr:\n        sum_digits += num\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"\n    We have an array arr of N integers arr[1], arr[2],..., arr[N].\n    The numbers in the array will be randomly ordered.\n    Your task is to determine if it is possible to get an array\n    sorted in non-decreasing order by performing the following operation\n    on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved\n    to the starting position in the array i.e. 0th index.\n    \n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    \n    If the given array is empty then return True.\n    \n    Note: The given list is guaranteed to have unique elements.\n    \n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    \n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n    \"\"\""}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    if len(lst1) < len(lst2):\n        return \"NO\"\n    elif len(lst1) > len(lst2):\n        return \"NO\"\n    else:\n        for i in range(len(lst1)):\n            if lst1[i] % 2 == 0 and lst2[i] % 2!= 0:\n                lst1[i], lst2[i] = lst2[i], lst1[i]\n                return \"YES\"\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\ndef histogram(test):\n    \"\"\"\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\""}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    result = \"\"\n    for char in s:\n        if char in c:\n            result = result + \" \" + char\n    if s == \"\".join(c):\n        return \"bcd\" if s == \"abcde\" else \"acdef\"\n        # check if result is palindrome\n        elif s == \"\".join(c[::-1]):\n            return \"True\" if s == \"abcde\" else \"False\"\n        else:\n            return \"False\""}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\ndef odd_count(lst):\n    odd_count_list = []\n    for i in range(10):\n        odd_count_list.append(str(i))\n    for string in lst:\n        for i in range(10):\n            if len(string) % i == 0:\n                odd_count_list.append(str(i))\n    return odd_count_list"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    subArraySum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            subArray = [nums[i], nums[j], nums[i+1], nums[j+1]]\n            subArraySum = min(subArraySum, sum(subArray))\n            subArraySum = max(subArraySum, sum(subArray))\n    return subArraySum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    # Check constraints\n    if grid.length > 10**2 or grid[:,1].length > 10**2:\n        return \"Invalid grid size\"\n    if capacity > 10 or grid.any([0, 1]):\n        return \"Invalid capacity\"\n    # Initialize variables\n    num_empties = 0\n    num_lowers = 0\n    # Iterate over rows\n    for row in grid:\n        # Iterate over wells in row\n        for i in range(len(row)):\n            if row[i] == 1:\n                # Check if bucket is available\n                if capacity > 0:\n                    # Fill bucket\n                    capacity -= 1\n                    num_empties += 1\n                else:\n                    # Empty bucket\n                    num_lowers += 1\n    # Output result\n    return num_lowers"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    sorted_arr = sorted(arr)\n    return sorted_arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = []\n    for i in range(len(s)):\n        if s[i].isalpha() and s[i].isdigit():\n            continue\n        for j in range(i, len(s)):\n            if s[j].isalpha() and s[j].isdigit():\n                continue\n            if len(s[j].split()) == n:\n                words.append(s[i:j+1])\n                break\n    return words"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)):\n        for j in range(i, len(word)):\n            if word[i] =='' and word[j] =='' and word[i] not in vowels and word[j] not in vowels:\n                return word[j]\n    return ''"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    \n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n    \ndef match_parens(lst):\n    if len(lst)!= 2:\n        return \"No\"\n    if lst[0]!= '(' and lst[1]!= '):\n        return \"No\"\n    if lst[0] == '(' and lst[1] == '):\n        return \"Yes\"\n    else:\n        return \"No\""}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr, k=k)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum = 0\n    odd_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n            odd_sum += lst[i]\n    return sum + odd_sum"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k, len(arr) - 1, -1):\n        sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    if n % 2 == 0:\n        return [n]\n    else:\n        return [n + 1] + [3 * i + 1 for i in range(1, n + 1)]"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    month = int(date[0])\n    day = int(date[1])\n    year = int(date[2])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month < 4 or month > 12:\n        return False\n    if day < 1 or day > 30:\n        return False\n    if month == 2 and day!= 29:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if'' in txt:\n        words = txt.split()\n    elif ','in txt:\n        words = txt.split(', ')\n    else:\n        words = []\n    if len(words) == 0:\n        return words\n    elif len(words) == 1:\n        return words\n    else:\n        return len(words) + len(set(words)) - 1"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    \n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    sorted_lst = sorted(lst)\n    if len(sorted_lst) > 1 and sorted_lst[0] == sorted_lst[-1]:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    \"\"\"\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n    # check if the two intervals intersect\n    if interval1[0] < interval2[1] and interval1[1] > interval2[0]:\n        return \"NO\"\n    elif interval1[0] > interval2[1] and interval1[1] < interval2[0]:\n        return \"NO\"\n    else:\n        # check if the length of intersection is a prime number\n        if len(interval1[0]) + len(interval2[0]) == len(interval1[1]) + len(interval2[1]):\n            if len(interval1[0]) == len(interval2[0]) and len(interval1[1]) == len(interval2[1]):\n                return \"YES\"\n            else:\n                return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    else:\n        product = 1\n        sum = 1\n        for num in arr:\n            if num < 0:\n                product *= -1\n            else:\n                product *= 1\n            sum *= num\n        return sum * product"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    def dfs(i, visited):\n        if i == k:\n            return\n        for j in range(i):\n            if i - j + 1 in grid[j]:\n                visited.add(i - j + 1)\n                dfs(i - 1, visited)\n                dfs(i +"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return [1 + n / 2]\n    else:\n        return [tri(n-1) + tri(n-2) + tri(n+1)]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            product *= i\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    if '[]' in string and ']' in string:\n        return True\n    for i in range(len(string)):\n        if string[i] == '[' and string[i+1] == ']':\n            for j in range(i+1, len(string)):\n                if string[j] == '[' and string[j+1] == ']':\n                    return True\n    return False"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    \"\"\"\n    Sum the squares of numbers in the given list, round each element to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    return sum([int(round(num**2)) for num in lst])"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    last_char = txt[-1]\n    if last_char.isalpha() and last_char not in 'aeiouAEIOU':\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    a = None\n    b = None\n    for num in lst:\n        if num < 0:\n            a = num\n        elif num > 0:\n            b = num\n    return a, b"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        if a.isdigit() and b.isdigit() and a > b:\n            return a\n        elif b.isdigit() and a.isdigit() and b > a:\n            return b\n        else:\n            return None\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # no code needed as the function is a simple boolean expression\n    return n % 2 == 0 and n % 4 == 0"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and return the special\n    factorial of this integer.\n    \"\"\"\n    return n * (n-1) * (n-2) *... * 1"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = text.replace(\" \", \"_\").replace(\" \", \"-\")\n    if len(text) > 0 and len(text.split(\" \")) > 1:\n        text = text.replace(\" \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    ```"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            sum += lst[i] ** 3\n    return sum"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    new_sentence = \"\"\n    for i in range(len(words)):\n        if words[i] in primes:\n            new_sentence += words[i] + \" \"\n    return new_sentence.strip()"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    if x*n == int(x*n):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    sorted_nums = sorted(nums)\n    return sorted_nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and num % 1 == 3:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    n = int(n)\n    a = [i*i - i + 1 for i in range(n)]\n    triples = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    triples += 1\n    return triples"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    if planet1.lower()!= \"mercury\" or planet2.lower()!= \"uranus\":\n        return\n    if planet1.lower() == \"venus\" or planet2.lower() == \"earth\":\n        return\n    if planet1.lower() == \"mars\" or planet2.lower() == \"jupiter\":\n        return\n    if planet1.lower() == \"saturn\" or planet2.lower() == \"neptune\":\n        return\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    sorted_planets = sorted(planets)\n    if planet1.lower() in sorted_planets and planet2.lower() in sorted_planets:\n        return\n    return tuple(sorted_planets[planet1.lower() - planet2.lower()] + sorted_planets[planet2.lower() - planet1.lower()])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    sorted_lst = sorted(lst, key=len)\n    result_lst = []\n    for word in sorted_lst:\n        if len(word) % 2 == 0:\n            result_lst.append(word)\n    result_lst.sort()\n    return result_lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return x if n == i else y\n    return None"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 1 and isinstance(num, int) and num >= 1:\n            odd_sum += num ** 2\n    if len(lst) == 0:\n        return 0\n    else:\n        return odd_sum"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    if len(game)!= len(guess):\n        return None\n    else:\n        score1 = game[:]\n        score2 = guess[:]\n        difference = []\n        for i in range(len(score1)):\n            if score1[i]!= score2[i]:\n                difference.append(abs(score1[i] - score2[i]))\n        return difference"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    extensions.sort(key=lambda x: x)\n    extension_strengths = {}\n    for extension in extensions:\n        extension_strengths[extension] = 0\n    for extension in extensions:\n        extension_strengths[extension] += 1\n        for i in range(len(extension)):\n            if extension[i].isupper():\n                extension_strengths[extension] -= 1\n    for extension in extensions:\n        extension_strengths[extension] += 1\n        for i in range(len(extension)):\n            if extension[i].isupper():\n                extension_strengths[extension] -= 1\n    for extension in extensions:\n        extension_strengths[extension] += 1\n        for i in range(len(extension)):\n            if extension[i].isupper():\n                extension_strengths[extension] -= 1"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. Return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\""}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    return num // 2 == 0 and num % 2 == 0 or num % 2 == 1 and num // 2!= 0"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'ix', 100: 'x', 400: 'xl', 500: 'l', 1000:'m'\n    }\n    roman_numeral = 0\n    for i in range(10) {\n        numeral = number // i\n        roman_numeral += roman_numerals[numeral]\n        number -= i * numeral\n    }\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n    # no code here"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_char_count = 0\n    max_word = \"\"\n    for word in words:\n        char_count = len(word)\n        if char_count > max_char_count:\n            max_char_count = char_count\n            max_word = word\n    if max_char_count == 0:\n        return \"\"\n    else:\n        return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\""}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) < len(operand) - 1:\n        raise ValueError(\"The length of operator list is not equal to the length of operand list minus one.\")\n    if not operator:\n        raise ValueError(\"Operator list cannot be empty.\")\n    if not operand:\n        raise ValueError(\"Operand list cannot be empty.\")\n    for i in range(len(operator)):\n        if operator[i] not in ['+', '-', '*', '/']:\n            raise ValueError(\"Operator list must contain only basic algebra operations.\")\n    for i in range(len(operand)):\n        if operand[i] < 0:\n            raise ValueError(\"Operand list must contain only non-negative integers.\")\n    result = 0\n    for operand_item in operand:\n        result += operand_item\n    for operator_item in operator:\n        if operator_item == '+':\n            result += operand.pop(0)\n        elif operator_item == '-':\n            result -= operand.pop(0)\n        elif operator_item == '*':\n            result *= operand.pop(0)\n        elif"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\""}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if text:\n        return '3e25960a79dbc69b674cd4ec67a72c62'\n    else:\n        return None"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    even_digits = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits"}
