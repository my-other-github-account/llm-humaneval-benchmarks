{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    separated_groups = []\n    \n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) > 0:\n                top_of_stack = stack[-1]\n                if top_of_stack == \"(\":\n                    stack.pop()\n                else:\n                    separated_groups.append(top_of_stack + \"()\" * len(stack) - 1)\n                    stack = []\n        else:\n            pass # ignore spaces\n            \n    if len(stack) > 0:\n        separated_groups.append(stack[-1])\n        \n    return separated_groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"Given a positive floating point number, return the decimal part of the number.\"\"\"\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    for operation in reversed(operations):\n        if operation < 0:\n            return True\n        elif operation == 0:\n            continue\n        else:\n            break\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean)) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)-1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    return result + numbers[-1:]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    stack = []\n    max_depth = 0\n    \n    for i, char in enumerate(paren_string):\n        if char == \"(\":\n            stack.append(i)\n        elif char == \")\":\n            depth = len(stack) - 1\n            stack.pop()\n            max_depth = max(max_depth, depth)\n            \n    return [max_depth] * len(paren_string[:len(paren_string)-sum([i+1 for i in range(len(paren_string)) if paren_string[i]=='('])//len(set(paren_string))]"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filter an input list of strings only for ones that contain given substring\"\"\"\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n        if len(result) == 0 or numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            result.append(max_so_far)\n        else:\n            if numbers[i] >= result[-1]:\n                result[-1] = numbers[i]\n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n    \n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Reverse the input string for easier manipulation\n    reversed_str = string[::-1]\n    \n    # Initialize variables\n    i = len(reversed_str) - 2\n    j = len(reversed_str) - 1\n    result = \"\"\n    \n    while i >= 0:\n        # Check if substring from index i to j is a palindrome\n        if reversed_str[i]!= reversed_str[j]:\n            break\n        \n        result += reversed_str[i]\n        i -= 1\n        \n    # If there are odd number of characters, append half of them at the start of the result\n    if len(result) % 2 == 1:\n        result = reversed_str[:len(reversed_str)//2][::-1] + result\n    \n    return result"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    # Convert both input strings to lists\n    a_list = [int(char) for char in a]\n    b_list = [int(char) for char in b]\n    \n    # Calculate xor of corresponding elements\n    res = []\n    for i in range(max(len(a_list), len(b_list))):\n        if i < len(a_list):\n            res.append(a_list[i] ^ b_list[i])\n        \n    # Create resulting string from list\n    result_string = ''.join([str(num) for num in res])\n    \n    return result_string"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if len(strings) == 0:\n        return None\n    \n    longest_string = max(strings, key=len)\n    for string in strings:\n        if len(string) == len(longest_string):\n            return string\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    if a == 0 or b == 0:\n        return 0\n    elif a == b:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    if len(string) == 0:\n        return []\n    \n    result = [string]\n    for i in range(len(string)):\n        new_result = []\n        for j in range(i+1, len(string)+1):\n            new_result.append(string[j-i])\n        result += new_result\n        \n    return result"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    result = ''\n    \n    for i in range(n+1):\n        result += f\"{i} \"\n        \n    return result.strip()"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    # Create a set of lowercase versions of each character in the input string\n    normalized = [chr(ord(c).lower()) for c in string]\n    # Count the number of unique elements in the set\n    return len(set(normalized))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    # Create dictionary to map note to duration\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    \n    # Initialize result list\n    result = []\n    \n    # Iterate through music string\n    for char in music_string:\n        if char == 'o':\n            # Add whole note\n            result.append(durations['o'])\n        elif char == 'o|':\n            # Add half note\n            result.extend([durations['o'], durations['o|']])\n        elif char == '.|':\n            # Add quarter note\n            result.extend([durations['.|']]*2)\n            \n    return result"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    current_count = 1\n    \n    for i in range(len(string)- len(substring)+1):\n        if string[i:] == substring[:current_count]:\n            count += current_count\n            current_count = 1\n        else:\n            current_count += 1\n            \n    return count + current_count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    # Split input string by spaces and convert each element to int\n    nums = [int(num) for num in numbers.split()]\n    \n    # Sort the list using built-in sorted function\n    sorted_nums = sorted(nums)\n    \n    # Convert each element back to str and join them into output string\n    return''.join([str(num) for num in sorted_nums])"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    closest_pair = None\n    \n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            \n            if diff < min_difference:\n                min_difference = diff\n                closest_pair = (numbers[i], numbers[j])\n                \n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\"\"\"\n    \n    return sorted(numbers)[:-1] * (max(numbers) - min(numbers)) + [0]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    result = []\n    for value in values:\n        if type(value) == int:\n            result.append(value)\n    return result"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    # Initialize variables\n    max_factor = 0\n    factors = []\n\n    # Iterate through all numbers less than or equal to n\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n\n            # Update maximum factor if necessary\n            if i > max_factor:\n                max_factor = i\n\n    return max_factor"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    if n == 1:\n        return [1]\n    \n    primes = [2]\n    i = 3\n    while len(primes) * primes[-1] <= n:\n        i += 1\n        \n    for _ in range(i):\n        primes.append(i)\n        \n    result = []\n    for num in reversed(primes):\n        count = 0\n        x = n // num\n        while x % num == 0:\n            count += 1\n            x //= num\n            \n        if count > 0:\n            result.insert(count - 1, num)\n            \n    return result"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join(chr(ord(char).swapcase()) if char.isalpha() else char for char in string)"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    if len(strings) == 0:\n        return \"\"\n    else:\n        return strings[0] + concatenate(strings[1:])"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"Filter an input list of strings only for ones that start with a given prefix.\"\"\"\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num >= 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    # check for small primes\n    if n <= 2:\n        return False\n    \n    # check odd numbers\n    if n % 2 == 1:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        \n    # even numbers are not prime\n    return False"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    \"\"\"Evaluates polynomial with coefficients xs at point x.\"\"\"\n    n = len(xs)\n    return sum([xs[i] * math.pow(x, n-i-1) for i in range(n)])\n\n\ndef find_zero(xs: list):\n    \"\"\"Find root(s) of a polynomial equation defined by its coefficients.\"\"\"\n    n = len(xs)\n    result = []\n    while True:\n        x = xs[-2] / xs[-1]\n        if math.isclose(poly(xs[:-2], x), 0):\n            result.append(x)\n        else:\n            break\n        j = 1\n        while j < n // 2 and math.isclose(poly(xs[:-j-2][:-1], x), 0):\n            j += 1\n        if j == n//2:\n            k = n // 2\n            while k > 2 and math.isclose(poly(xs[:k-2][:-1], x), 0):\n                k -= 2\n            if k <= 2 or math.isclose(poly(xs[:k-2][:-1], x), 0):\n                break\n        else:\n            break\n        m = n // 2\n        c = xs[m-1]\n        d = xs[m]\n        e = math.gcd(c, d)\n        xs = [int(x/e) for x in xs[:m-1]] + xs[m:]\n        n = len(xs)\n    return sorted(result)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    # Create a new list containing only elements that are not divisible by 3\n    l_not_div_three = [item for item in l if item % 3!= 0]\n    \n    # Sort the original list based on elements divisible by 3\n    l_div_three = sorted(filter(lambda x:x%3==0, l))\n    \n    # Merge both lists into one sorted list\n    l_prime = sorted(list(set(l_not_div_three + l_div_three)))\n    \n    return l_prime"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(lst: List[int]) -> int:\n    return max(lst)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 and i % 13 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> List[Any]:\n    # Create a new list containing tuples of even indices and elements from original list\n    even_tuples = [(i, l[i]) for i in range(0, len(l), 2)]\n    \n    # Sort the tuple list based on element value\n    even_tuples.sort(key=lambda x: x[1])\n    \n    # Initialize empty list to store result\n    res = []\n    \n    # Iterate through original list and use tuples to insert even elements in correct order\n    for i in range(len(l)):\n        if i % 2 == 0:\n            res.append(even_tuples[i//2][1])\n        else:\n            res.append(l[i])\n            \n    return res"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n    \ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # reverse the effect of encoding\n    char_map = {}\n    result = \"\"\n    for c in s:\n        if c in char_map:\n            char_map[c] += 1\n        else:\n            char_map[c] = 1\n        if char_map[c] % 3 == 0:\n            result += chr(ord('a') + char_map[c] - 3*char_map['a'])\n            del char_map['a']\n        elif char_map[c] % 3 == 1:\n            result += chr(ord('b') + char_map[c] - 3*char_map['b'])\n            del char_map['b']\n        else:\n            result += chr(ord('c') + char_map[c] - 3*char_map['c'])\n            del char_map['c']\n    return result"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n        \n    fib = [0, 1]\n    for i in range(2, n+1):\n        fib.append((fib[i-1] + fib[i-2]) % 10**6 + 1)\n\n    for i in range(len(fib)-1):\n        for j in range(i+1, len(fib)):\n            if fib[j] <= fib[i]:\n                break\n        else:\n            continue\n        if all(fib[k] > 1 for k in range(i+1, len(fib))):\n            return fib[i]\n            \n    return -1"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(lst: List[int]) -> bool:\n    seen = set()  # Set to keep track of previously seen numbers\n    target = 0   # Variable to store the sum of the current, previous and next number\n    \n    for i, num in enumerate(lst[:3]):  # Iterate through first 3 elements of lst\n        if num in seen:           # If number has been seen before\n            if target == 0:      # If we have found a triplet that sums to zero\n                return True\n            else:               # Otherwise remove the middle element from consideration\n                continue\n        \n        seen.add(num)          # Add new number to set\n        target += num + lst[i+1]  # Update target sum\n        \n        if target == 0:       # Check if we have found a triplet that sums to zero\n            return True\n    \n    return False             # Return false if no triplets were found"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    # initialize variables\n    num_left = [0] * n\n    num_right = [0] * n\n    \n    # simulate movement of cars\n    for i in range(1, n+1):\n        num_left[i-1] += 1\n        num_right[i-1] -= 1\n        \n    # count collisions\n    return sum([num_left[i] + num_right[i] for i in range(1, n+1)]) // 2"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()  # Set to keep track of previously seen values\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n            elif l[i] + l[j] < 0:\n                seen.add(-(l[i] + l[j]))\n            else:\n                seen.discard((l[i] + l[j]))\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    result = \"\"\n    \n    while x > 0:\n        remainder = x % base\n        x -= remainder\n        result += digits[remainder]\n        \n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    # Calculate s, the semiperimeter\n    s = (a + h) / 2\n    # Calculate area using Heron's formula\n    area = (s * (s - a) * (s - h)) ** 0.5\n    return area"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n <= 3:\n        return n\n    a = 0\n    b = 2\n    c = 0\n    d = 0\n    for i in range(4, n+1):\n        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return d"}
{"task_id": "HumanEval/47", "completion": "def median(lst: List[float]) -> float:\n    sorted_lst = sorted(lst)\n    if len(sorted_lst) % 2 == 0:\n        middle_val = ((sorted_lst[(len(sorted_lst) // 2) - 1] + sorted_lst[len(sorted_lst) // 2]) / 2)\n        return middle_val\n    else:\n        middle_val = sorted_lst[len(sorted_lst) // 2]\n        return middle_val"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result *= p\n        else:\n            result *= p - 1\n        n //= 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 10 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    char_map = {\n        'z': 'a', 'Z': 'A',\n        'y': 'b', 'Y': 'B',\n        'x': 'c', 'X': 'C',\n        'w': 'd', 'W': 'D',\n        'v': 'e', 'V': 'E',\n        'u': 'f', 'U': 'F',\n        't': 'g', 'T': 'G',\n       's': 'h', 'S': 'H',\n        'r': 'i', 'R': 'I',\n        'q': 'j', 'Q': 'J',\n        'p': 'k', 'P': 'K',\n        'o': 'l', 'O': 'L',\n        'n':'m', 'N': 'M',\n       'm': 'n', 'M': 'N',\n        'l': 'o', 'L': 'O',\n        'k': 'p', 'K': 'P',\n        'j': 'q', 'J': 'Q',\n        'i': 'r', 'I': 'R',\n        'h':'s', 'H': 'S',\n        'g': 't', 'G': 'T',\n        'f': 'u', 'F': 'U',\n        'e': 'v', 'E': 'V',\n        'd': 'w', 'D': 'W',\n        'c': 'x', 'C': 'X',\n        'b': 'y', 'B': 'Y',\n        'a': 'z', 'A': 'Z'}\n    \n    return ''.join([char_map[ch] for ch in s]) if s else ''"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([c for c in text if c not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    # Get lengths of strings\n    n = len(s0)\n    m = len(s1)\n    \n    # Create prefix string for first word\n    t = [None] * (m + 2)\n    j = 0\n    k = 0\n    count = 0\n    \n    # Iterate through both words simultaneously\n    for i in range(n + 1):\n        # If character is not in second word or its index is beyond the end of the prefix string\n        if s1[i]!= t[j]:\n            # Calculate number of times this character has occurred so far\n            while j > 0 and t[j - 1] == s1[k]:\n                j -= 1\n            \n            # Increment count by one less than the number of occurrences of this character\n            count += min(j - k - 1, m - j)\n        \n        else:\n            # Move pointer for second word forward\n            k += 1\n        \n        # Update prefix string\n        if i < n:\n            t[j++] = s1[k]\n        \n    return count <= 1"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if len(stack) == 0 or stack[-1]!= '<':\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    if len(l) < 2:\n        return True\n    \n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            return False\n        elif l[i] == l[i+1]:\n            continue\n        else:\n            return False\n        \n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list[Any], l2: list[Any]) -> List[Any]:\n    # create a set of all elements from both lists\n    s = {x for x in l1 + l2}\n    \n    # get the intersection of the sets containing only the common elements\n    return list(set(e for e in s if e in l1 and e in l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return max(factors)"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0 or stack[-1]!= '(':\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    n = len(xs)-1\n    res = []\n    for i in range(n+1):\n        coef = pow(i, n-i) * xs[-i-1]\n        res.append(coef)\n    return res"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n <= 2:\n        return n\n    a = 0\n    b = 1\n    c = 1\n    for i in range(3, n+1):\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    return c"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    count = sum([s.count(vowel) for vowel in vowels])\n    if s[-1] == 'y':\n        count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    # Get the length of the input number\n    num_digits = len(str(abs(x)))\n    \n    if abs(shift) >= num_digits:\n        # Shift the digits in reverse order when shift is greater or equal to the number of digits\n        return str((num_digits - abs(shift)) * (abs(x) // math.floor((abs(shift)/num_digits)))) + str(math.modf([-(abs(shift) % num_digits), abs(x)]))[0]\n        \n    else:\n        # Calculate the new digit at position i\n        new_digit = ((x / math.pow(10, num_digits-1-i)) * (10, abs(shift)))\n        \n        # Create a list with all new digits\n        new_list = []\n        for i in range(num_digits):\n            if i < abs(shift):\n                new_list.append(new_digit)\n            else:\n                new_list.append(int(x % (10**(num_digits-1-i))))\n        \n        # Return the circular shifted number as string\n        return ''.join(map(str, new_list))"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    ascii_codes = [ord(c) for c in s if c.isupper()]\n    return sum(ascii_codes)"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # split the input string by 'and'\n    slist = s.split('and')\n    \n    # initialize variables\n    apple_count = 0\n    orange_count = 0\n    mango_count = 0\n    \n    # iterate through the list of strings\n    for i in range(len(slist)):\n        if i % 2 == 0:\n            # it is an even index so it must be an orange\n            orange_count += int(slist[i])\n        else:\n            # it is an odd index so it must be an apple\n            apple_count += int(slist[i])\n            \n    # calculate the remaining count\n    remaining_fruit = n - apple_count - orange_count\n    # check if there were any mangoes\n    if remaining_fruit > 0:\n        # divide the remaining count by 2 since we know each mango was counted twice\n        mango_count = remaining_fruit // 2\n        \n    return mango_count"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    evens = [node for node in arr if node % 2 == 0]\n    if len(evens) > 0:\n        min_even = min(evens)\n        min_index = evens.index(min_even)\n        return [min_even, min_index]\n    else:\n        return []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    max_freq = 0\n    max_val = -1\n    for val, freq in freq.items():\n        if freq >= val and freq > max_freq:\n            max_freq = freq\n            max_val = val\n    \n    return max_val"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if len(lst) == 0:\n        return lst\n    \n    min_val = min(lst[:len(lst)//2])\n    rem_lst = [x for x in lst if x!= min_val]\n    mid_point = len(rem_lst) // 2\n    strng_sorted_lst = [min_val] + sorted(rem_lst[:mid_point], key=lambda x: -x) + \\\n                       sorted(rem_lst[mid_point:], key=lambda x: x)\n    \n    return strng_sorted_lst"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    # Calculate the semiperimeter S = (a + b + c)/2\n    S = (a + b + c) / 2\n    \n    # Check if the three sides form a valid triangle\n    if (a + b > S) and (b + c > S) and (c + a > S):\n        # Calculate the area of the triangle using Heron's formula\n        s = (S - a) * (S - b) * (S - c)\n        area = sqrt(s)\n        \n        return round(area, 2)\n    \n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # Check if the given list is a palindrome\n    is_palindrome = True\n    for i in range((len(q)) // 2):\n        if q[i]!= q[len(q)-i-1]:\n            is_palindrome = False\n            break\n    \n    # If the list is not a palindrome return False\n    if not is_palindrome:\n        return False\n    \n    # Calculate the sum of all elements in the list\n    total_sum = sum(q)\n    \n    # Return True if the sum of elements is less than or equal to the max weight\n    return total_sum <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    # Initialize variables\n    n = len(arr)\n    start = [i for i in range(n)]\n    end = [i for i in range(n)]\n    \n    # Find first non-palindrome index\n    for i in range(n):\n        if arr[i]!= arr[-i-1]:\n            break\n        \n    # Create mask of non-palindrome indices\n    mask = [False]*n\n    mask[start[0]] = True\n    \n    # Traverse through all characters from second last character to first character\n    for j in range(n-2, -1, -1):\n        if arr[j+1] < arr[j]:\n            # If current element is greater than previous element then mark it\n            mask[j+1] = True\n            \n    # Calculate total changes required\n    count = 0\n    for i in range(n):\n        if mask[i]:\n            count += 1\n    \n    return count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    # Get lengths of both lists\n    len1 = len(lst1)\n    len2 = len(lst2)\n    \n    # Check for empty lists or equal length\n    if len1 == 0 or len2 == 0 or len1 == len2:\n        return lst1\n    \n    # Calculate total characters in each list\n    char_sum1 = sum(len(word) for word in lst1)\n    char_sum2 = sum(len(word) for word in lst2)\n    \n    # Determine which list has fewer characters\n    if char_sum1 < char_sum2:\n        return lst1\n    elif char_sum1 > char_sum2:\n        return lst2\n    else:\n        # If both lists have the same number of characters, choose the first one\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    # check if a is divisible by 2 or 3\n    return a % 6!= 0"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n ** int(math.log(x, n))"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    cubes = [x for x in range(1, int(a**(1/3))+1)]\n    return a in cubes"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    # List of hexadecimal digits that correspond to prime numbers\n    primes = [2, 3, 5, 7]\n    \n    count = 0\n    for digit in num:\n        if str(primes[digit - ord('0')]) in digit:\n            count += 1\n        \n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = ''\n    power = 0\n    \n    while decimal > 0:\n        remainder = decimal % 2\n        binary += str(remainder)\n        power += 1\n        decimal //= 2\n        \n    if power <= 8:\n        binary = 'db' + binary\n    else:\n        binary = 'db' + binary[power - 9:]\n    \n    return binary"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Create a set to store unique characters\n    char_set = set()\n    \n    # Iterate through the string by three\n    for i in range(0, len(s), 3):\n        \n        # Get the three characters\n        c1 = s[i]\n        c2 = s[i+1]\n        c3 = s[i+2]\n        \n        # If all three characters are different, add them to the character set\n        if c1!= c2 and c2!= c3 and c1!= c3:\n            char_set.add(c1)\n            char_set.add(c2)\n            char_set.add(c3)\n            \n    # Return true if all characters in the set have been seen before\n    return len(char_set) == len(set(s))"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    # Create dictionary mapping GPA range to corresponding letter grade\n    grade_map = {\n        \"> 4.0\": \"A+\",\n        \"> 3.7\": \"A\",\n        \"> 3.3\": \"A-\",\n        \"> 3.0\": \"B+\",\n        \"> 2.7\": \"B\",\n        \"> 2.3\": \"B-\",\n        \"> 2.0\": \"C+\",\n        \"> 1.7\": \"C\",\n        \"> 1.3\": \"C-\",\n        \"> 1.0\": \"D+\",\n        \"> 0.7\": \"D\",\n        \"> 0.0\": \"D-\"\n    }\n    \n    result = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            result.append(\"A+\")\n        elif 3.7 <= gpa < 4.0:\n            result.append(\"A\")\n        elif 3.3 <= gpa < 3.7:\n            result.append(\"A-\")\n        elif 3.0 <= gpa < 3.3:\n            result.append(\"B+\")\n        elif 2.7 <= gpa < 3.0:\n            result.append(\"B\")\n        elif 2.3 <= gpa < 2.7:\n            result.append(\"B-\")\n        elif 2.0 <= gpa < 2.3:\n            result.append(\"C+\")\n        elif 1.7 <= gpa < 2.0:\n            result.append(\"C\")\n        elif 1.3 <= gpa < 1.7:\n            result.append(\"C-\")\n        elif 1.0 <= gpa < 1.3:\n            result.append(\"D+\")\n        elif 0.7 <= gpa < 1.0:\n            result.append(\"D\")\n        else:\n            result.append(\"E\")\n        \n    return result"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    # check if len of string is a prime number\n    return bool(len(string)) and all((len(string)!= i for i in range(2, int(len(string)+1)*int(len(string)))) )"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    # Count of all n digit numbers\n    total = 10**n\n    \n    # Count of numbers starting with 1\n    start_with_one = 1 * (total - (sum([n > i for i in range(1, n)])))\n    \n    # Count of numbers ending with 1\n    end_with_one = (10 ** (n - 1)) * (2 if n % 2 == 1 else 1)\n    \n    # Combine both counts\n    result = start_with_one + end_with_one\n    \n    return result"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    # convert N to binary string\n    binary_str = bin(N)[2:]\n\n    # split binary string into individual digits\n    digits = [int(digit) for digit in binary_str[::-1]]\n\n    # calculate sum of digits\n    total = sum(digits)\n\n    # create result string by iterating from most significant bit to least significant bit\n    result = ''\n    for i in range(len(digits)):\n        if total >= powers_of_two[i]:\n            result += str(powers_of_two[i])\n            total -= powers_of_two[i]\n\n    return result\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    # iterate over all but last element of lst\n    for i in range(len(lst)-1):\n        if i % 2 == 0 and lst[i]!= None:\n            return lst[i] + lst[-1]\n    return -1"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # split the input into list of words\n    words = s.split()\n    \n    # create empty result list\n    result = []\n    \n    # iterate over each word\n    for word in words:\n        # sort the letters of the word in ascending order\n        sorted_word = \"\".join([sorted(list(word))])\n        \n        # append the sorted word to the result list\n        result.append(sorted_word)\n    \n    # join the elements of the result list to form the final output string\n    return \" \".join(result)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, col in enumerate(row[:i+1]):\n                result.append((j, col))\n    return sorted(result)"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    # Sorting the array in ascending order if sum(first index value, last index value) is odd\n    # Else sort the array in descending order if sum(first index value, last index value) is even\n    n = len(array)\n    for i in range(n // 2):\n        if sum(array[i], array[-i - 1]) % 2 == 1:\n            for j in range(n):\n                if i!= j:\n                    if array[j] > array[i]:\n                        array[j], array[i] = array[i], array[j]\n                        \n    elif sum(array[i], array[-i - 1]) % 2 == 0:\n        for j in range(n):\n            if i!= j:\n                if array[j] < array[i]:\n                    array[j], array[i] = array[i], array[j]\n            "}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    # Create a list of all characters in the input string\n    char_list = [c for c in s]\n    \n    # Rotate the alphabet using modulo arithmetic\n    rotate_map = {\n        \"a\": \"n\", \"b\": \"o\", \"c\": \"p\", \"d\": \"q\", \"e\": \"r\", \"f\": \"s\",\n        \"g\": \"t\", \"h\": \"u\", \"i\": \"v\", \"j\": \"w\", \"k\": \"x\", \"l\": \"y\",\n        \"m\": \"z\", \"n\": \"a\", \"o\": \"b\", \"p\": \"c\", \"q\": \"d\", \"r\": \"e\",\n        \"s\": \"f\", \"t\": \"g\", \"u\": \"h\", \"v\": \"i\", \"w\": \"j\", \"x\": \"k\",\n        \"y\": \"l\", \"z\": \"m\"\n    }\n    \n    # Map each character in the input string to its corresponding value after rotation\n    mapped_char_list = [(rotate_map[char] if char in rotate_map else char) for char in char_list]\n    \n    return \"\".join(mapped_char_list)"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    n = len(lst)\n    lst.sort()\n    for i in range(n - 1):\n        if lst[i]!= lst[i+1]:\n            return lst[i]\n    return None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    words = S.split(\".?!\")[::-1] # reverse split sentences\n    boredom_count = sum(chars if chars[-1].lower() == \"i\" else 0 for words_sentence in words for chars in words_sentence.split())\n    return boredom_count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    # check if x + y == z or x + z == y or y + z == x\n    return ((x + y == z) or (x + z == y) or (y + z == x)) \\\n           and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int))"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    # Create a dictionary to map each vowel to its replacement\n    vowels_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'x'}\n    # Define a function to replace vowels in a given word\n    def replace_vowels(word):\n        for i, c in enumerate(word):\n            if c in vowels_map:\n                word = word[:i] + vowels_map[c] + word[i+1:]\n        return word\n        \n    # Split the message into words\n    words = [replace_vowels(word) for word in message.split()]\n    # Join the encoded words back into a string\n    return \" \".join(words)"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return sum_digits(max_prime)\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    # Check if dict is empty\n    if len(dict) == 0:\n        return False\n    \n    # Get the first key from the dict\n    first_key = list(dict.keys())[0]\n    \n    # Check if all keys have the same case\n    for key in dict:\n        if key!= first_key:\n            return False\n            \n    # All keys have the same case\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n == 0:\n        return []\n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        is_prime = True\n        for j in range(i, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 1\n    return primes[:n]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    # Get the unit digit of each number\n    uda = a % 10\n    udb = b % 10\n    \n    # Check if either number has a zero unit digit\n    z_found = False\n    if uda == 0 or udb == 0:\n        z_found = True\n        \n    # Calculate the product of non-zero unit digits\n    result = 0\n    for i in range(max(ua, ub)):\n        result += min(ua - i, ub - i) * factorial(i+1)\n    \n    # Apply the zero rule\n    if z_found:\n        result = 0\n    \n    return int(result)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    # split the string into two parts\n    left, right = s[:len(s)//2], s[len(s)//2:]\n\n    # initialize counters for both halves\n    left_count = sum([vowel.isupper() for vowel in left if left.index(vowel) % 2 == 0])\n    right_count = sum([vowel.isupper() for vowel in right if right.index(vowel) % 2!= 0])\n\n    return left_count + right_count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # Convert string representation of number to float\n    num = float(value)\n    # Round to nearest integer using round() function\n    rounded_num = round(num)\n    # Check if there is a difference between the original number and the rounded number\n    if abs(num - rounded_num) == 0:\n        # Return rounded number if equal distance from two integers\n        return rounded_num\n    elif num < rounded_num:\n        # Round away from zero by returning ceil() of the number\n        return math.ceil(num)\n    else:\n        # Round away from zero by returning floor() of the number\n        return math.floor(num)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    # Initialize an empty list to store the number of stones on each level\n    levels = []\n    \n    # Check whether n is odd or even\n    if n % 2 == 0:\n        # If n is even, start adding stones to the next even level\n        levels.append(n)\n        \n        # Calculate the next even number by incrementing n by 2\n        n += 2\n        \n        while len(levels) < n:\n            # Add the next even number until we reach n levels\n            levels.append(n)\n            \n            # Increment n by 2 to get the next even number\n            n += 2\n    else:\n        # If n is odd, start adding stones to the next odd level\n        levels.append(n)\n        \n        # Calculate the next odd number by incrementing n by 2\n        n += 2\n        \n        while len(levels) < n:\n            # Add the next odd number until we reach n levels\n            levels.append(n)\n            \n            # Increment n by 2 to get the next odd number\n            n += 2\n    \n    return levels"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    # Split the input string on comma or space\n    words = s.split()\n    # Create a list from the result of splitting\n    return list(words)"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    # Check if one of the numbers is even and within the given range\n    for num in (x, y):\n        if num % 2 == 0 and x <= num <= y:\n            return num\n    \n    # No even number found in the range\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = (n + m) // 2\n    avg = total / 2\n    \n    # round up or down based on whether it is odd or even\n    if avg % 2 == 0:\n        return bin((total // 2))[2:]\n    else:\n        return bin(((total + 1) // 2))[2:]"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    # Create a set of digits seen so far\n    seen = set()\n    # Initialize result list\n    res = []\n    # Iterate through each element in the input list\n    for num in x:\n        # Check if number has odd digits\n        is_odd = True\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                is_odd = False\n                break\n        # If number has odd digits, append it to the result list\n        if is_odd:\n            res.append(num)\n        # Otherwise, update the set of seen digits\n        else:\n            for i in range(len(str(num))):\n                if str(num)[i] not in seen:\n                    seen.add(str(num)[i])\n    # Sort and return the final result list\n    return sorted(res)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if len(arr) == 0:\n        return []\n        \n    sorted_arr = sorted(filter(lambda x: x >= 1 && x <= 9, arr))\n    reversed_arr = sorted_arr[::-1]\n    names = [\"One\" if i==1 else \"Two\" if i==2 else \\\n             \"Three\" if i==3 else \"Four\" if i==4 else \\\n             \"Five\" if i==5 else \"Six\" if i==6 else \\\n             \"Seven\" if i==7 else \"Eight\" if i==8 else \\\n             \"Nine\" if i==9 else \"\" for i in reversed_arr]\n                \n    return names"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(i ** (i - 1))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    # create list of integers from 1 to n\n    int_list = list(range(1, n+1))\n    \n    # initialize counters for even and odd palindromes\n    even_count = 0\n    odd_count = 0\n    \n    # loop through each integer in the list\n    for i in int_list:\n        # check if the integer is a palindrome\n        if str(i) == str(i)[::-1]:\n            # increment count based on whether it is even or odd\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            \n    # return tuple containing counts of even and odd palindromes\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Count numbers whose sum of digits is greater than zero.\n    Negative numbers are considered as having a negative sign for their first digit.\n    \"\"\"\n    return len([n for n in arr if sum(int(d) for d in str(abs(n))) > 0 or (n < 0 and sum(int(d) for d in str(-n)) > 0)])"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    # Check if the length of the input array is less than or equal to 1\n    if len(arr) <= 1:\n        return True\n    \n    # Sort the array using bubble sort algorithm\n    n = len(arr)\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    \n    # Check if the first element of the array is greater than the second element\n    if arr[0] > arr[1]:\n        return False\n    \n    # Perform right shift operation until we get a non-decreasing sequence\n    while arr[-1] < arr[:-1]:\n        arr = [arr[-1]] + arr[:-1][:-1]\n        \n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Check if there are odd elements in lst1\n    for num in lst1:\n        if num % 2!= 0:\n            return \"NO\"\n    \n    # Check if there are even elements in lst2\n    for num in lst2:\n        if num % 2 == 0:\n            return \"NO\"\n            \n    # All elements in both lists are even\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    # Split input into individual characters\n    chars = [char for char in test]\n    # Create dictionary to store counts of each character\n    freq = {}\n    # Iterate through each character\n    for char in chars:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # Find key with maximum value\n    max_key = max(freq, key=freq.__getitem__)\n    # Return dictionary with max key and its frequency\n    return {max_key: freq[max_key]}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # create a set of characters from 'c' for efficient lookup\n    char_set = set(c)\n    \n    # initialize the new string with the original string's'\n    new_str = s\n    \n    # iterate through each character in's'\n    for i in range(len(s)):\n        # if the current character in's' exists in 'char_set', delete it\n        if s[i] in char_set:\n            new_str = new_str[:i] + new_str[i+1:]\n            \n            # update the indices of the remaining characters since the length of the string has changed\n            for j in range(i, len(new_str)):\n                new_str = new_str[:j] + new_str[j+1:]\n                \n            break\n        \n    # check if the resulting string is a palindrome\n    if new_str == new_str[::-1]:\n        return (new_str, True)\n    else:\n        return (new_str, False)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        count = sum(int(c) % 2!= 0 for c in s)\n        result.append(f\"the number of odd elements {count} in the {i+1}st string of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    \n    curr_sum = [0] # Initialize current sum to keep track of the smallest sum seen so far\n    max_sum = float('inf') # Maximum sum encountered so far\n    for i, num in enumerate(nums):\n        if curr_sum[-1] + num < 0: # If adding element to current sum will result in negative value\n            curr_sum[0] = num # Start new window from this element\n        elif curr_sum[-1] + num <= max_sum: # Add element to existing window or start new one\n            curr_sum.append(curr_sum[-1] + num)\n        else: # Current sum is larger than maximum sum, update it\n            max_sum = abs(max_sum)\n            curr_sum[0] = num\n            \n    return min(abs(min_val)) # Return absolute value of minimum value found"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # initialize variables\n    num_rows = len(grid)\n    num_cols = len(grid[0])\n    current_row = 0\n    current_col = 0\n    fill_count = 0\n\n    for i in range(num_rows):\n        if grid[i][current_col] == 1:\n            if current_col < num_cols - 1:\n                current_col += 1\n            else:\n                current_row += 1\n                current_col = 0\n                fill_count += 1\n        \n        while current_row < num_rows and current_col < num_cols and grid[current_row][current_col] == 1:\n            if current_col < num_cols - 1:\n                current_col += 1\n            else:\n                current_row += 1\n                current_col = 0\n                fill_count += 1\n                \n        if current_row >= num_rows or current_col >= num_cols:\n            break"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    # Create a list of tuples where each tuple contains two values:\n    # the original element from arr and its count of '1' digits in binary rep\n    pairs = [(elem, bin(elem).count('1')) for elem in arr]\n    \n    # Sort the list of tuples using the count of '1' digits as the sorting key\n    sorted_pairs = sorted(pairs, key=lambda x:x[1], reverse=True)\n    \n    # Extract the elements from the sorted list of tuples and return them\n    return [pair[0] for pair in sorted_pairs]"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    # Split the string by whitespace\n    words = s.split()\n    \n    # Initialize an empty list to store the matching words\n    result = []\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        num_consonants = sum([1 for c in word if c.isconsou"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    # Check for vowels at the start or end of the word\n    if word[0] in 'aeiou' or word[-1] in 'aeiou':\n        return ''\n        \n    # Convert the input word to lower case\n    word = word.lower()\n    \n    # Initialize variables\n    left = None\n    right = None\n    closest_vowel = ''\n    \n    # Iterate through each character in the word\n    for i in range(len(word)):\n        # If the current character is a vowel\n        if word[i].lower() in 'aeiou':\n            # Update the left variable\n            if left is None:\n                left = i\n            \n            # Set the right variable\n            right = i\n            \n        else:\n            # If the previous character was a vowel\n            if right is not None:\n                # Calculate distance between the left and right variables\n                dist = abs(left - right)\n                \n                # Get the index of the last occurrence of the closest vowel\n                idx = [i for i in range(len(word)) if word[i].lower() in 'aeiou'].max()\n                \n                # Calculate distance between the current position and the last vowel\n                curr_dist = abs(idx - right)\n                \n                # Choose the closer vowel\n                if dist < curr_dist:\n                    closest_vowel = word[right]\n                    \n    # Return the closest vowel found\n    return closest_vowel"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for char in lst[0] + lst[1]:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack)!= 0 and stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # Sort the input array in descending order\n    arr_sorted = sorted(arr, reverse=True)\n    \n    # Get first k elements from the sorted array\n    max_k = arr_sorted[:k]\n    \n    return max_k"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    # initialize variables\n    result = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1 and i % 2 == 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    total = 0\n    for i in range(min(k, len(arr))):\n        if int(arr[i]) < 100:\n            total += int(arr[i])\n    return total"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    seq = [n]\n    while len(seq) > 1:\n        curr = seq[-1]\n        if curr % 2 == 0:\n            seq.append(curr // 2)\n        else:\n            seq.extend([3*curr + 1,])\n    return sorted(list(set(seq)))"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    # Check if date is not empty\n    if not date:\n        return False\n        \n    # Split date into year, month, day components\n    y, m, d = map(int, date.split(\"-\"))\n    \n    # Define valid ranges for each component\n    max_days_month1, max_days_month2, max_days_month3, max_days_month4, max_days_month5, max_days_month6, \\\n    max_days_month7, max_days_month8, max_days_month9, max_days_month10, max_days_month11 = [31, 30, 31, 30, 31, 30, 31, 30, 31, 30]\n    max_days_month12, min_days_month1, min_days_month2, min_days_month3, min_days_month4, min_days_month5, min_days_month6, \\\n    min_days_month7, min_days_month8, min_days_month9, min_days_month10, min_days_month11 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    \n    # Validate month and day based on their respective ranges\n    if m < 1 or m > 12:\n        return False\n    elif m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12:\n        if d > max_days_month12:\n            return False\n    elif m == 4 or m == 6 or m == 9 or m == 11:\n        if d > max_days_month4:\n            return False\n    else:\n        if d > max_days_month3:\n            return False\n            \n    if d < min_days_month1 or d > max_days_month1:\n        return False\n    elif m == 2:\n       "}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    # Split on whitespace or comma\n    lst = txt.split()\n    \n    # Check for even length of lowercase letters\n    def check_odd_letters(word):\n        return sum([ord(c) % 2!= 0 for c in word])\n\n    # If all words are empty, return number of lowercase letters with odd order\n    if all(check_odd_letters(w) is None for w in lst):\n        num_oddltr = sum(sum(map(lambda s: [check_odd_letters(char) for char in s], map(str.lower, lst))) * [len(list(filter(None, s))) for s in lst])\n        return int(num_oddltr / 2) + int((num_oddltr % 2) / 4)\n        \n    # Otherwise, return list of words after splitting on whitespace or comma\n    return lst"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(set(lst)) < len(lst):\n        # check for duplicates\n        for i in range(len(lst)-1):\n            if lst[i] == lst[i+1]:\n                return False\n    else:\n        # sort the list and check for equality\n        sorted_lst = sorted(lst)\n        return lst == sorted_lst"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    # Get the start and end points for each interval\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Check if the intervals overlap\n    if max(start1, start2) < min(end1, end2):\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = abs(end1 - start1)\n    \n    # Check if the length of the intersection is a prime number\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n            \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    \n    sign_product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num!= 0:\n            magnitude = abs(num)\n            \n            if num > 0:\n                sign_product *= 1\n                magnitude_sum += magnitude\n            elif num < 0:\n                sign_product *= -1\n                magnitude_sum += magnitude\n                \n    return magnitude_sum * sign_product"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    \n    dp = [[None]*k for _ in range(m)]\n    for i in range(n*m):\n        dp[i%m][int(i/m)%m] = grid[int(i/m)][int(i%m)]\n        \n    res = []\n    def dfs(x, y, idx, last):\n        if idx == k or None in [res]:\n            return\n        if x<0 or x>=n or y<0 or y>=m or (x,y) in [(a%m+b, c%m+d) for a, b in zip(res, last) for c, d in zip(range(idx, k+1), range(idx))] or \\\n                (dp[(x+y)%m][idx] > dp[min((x,y))%m][idx] if (x,y) in [(a%m+b, c%m+d) for a, b in zip(res, last) for c, d in zip(range(idx, k+1), range(idx))] else None):\n            return\n        \n        res += [str(last)+str(idx)]\n        for i in range(idx, k):\n            for dx, dy in ((0,1), (1,0), (-1,-1), (-1,0), (0,-1)):\n                next_x, next_y = x+dx, y+dy\n                if dfs(next_x, next_y, i, str(last)+str(idx)):\n                    break\n            \n        if None in [res]:\n            return\n        \n        for i in range(len(res)-1):\n            if res[i] < res[i+1]:\n                res[:] = sorted(res)\n                break\n            \n        return\n    \n    dfs(0, 0, 0, '')\n    return res"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    # Initialize the list with starting values\n    trib_list = [0, 1, 3]\n    \n    # Check for valid input\n    if n < 1 or n > len(trib_list):\n        print(\"Invalid input\")\n        return []\n    \n    # Calculate next value using recurrence relation\n    temp = trib_list[len(trib_list)-1]\n    if n % 2 == 0:\n        new_val = 1 + (n/2)\n    else:\n        new_val = trib_list[-1] + trib_list[-2] + trib_list[n-1]\n        \n    while len(trib_list) <= n+1:\n        trib_list.append((new_val))\n        temp = new_val\n        \n        if n % 2 == 0:\n            new_val = 1 + (n/2)\n        else:\n            new_val = trib_list[-1] + trib_list[-2] + trib_list[n-1]\n            \n    return trib_list[:n+1]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    # check if n is even\n    if n % 2 == 0:\n        return 0\n    \n    # find all odd digits using string conversion\n    str_digits = str(n)\n    odd_digit_product = 1\n    for digit in str_digits:\n        if int(digit) % 2!= 0:\n            odd_digit_product *= int(digit)\n            \n    return odd_digit_product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0 or stack[-1]!= '[':\n                return False\n            else:\n                stack.pop()\n    return True"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    result = 0\n    for num in lst:\n        # Round up using ceil division by 2 and multiply by 2\n        rounded_num = (ceil(num / 2) * 2)\n        # Square the number before adding it to the result\n        result += rounded_num ** 2\n    return result"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Split the input text on spaces to get list of words\n    words = txt.split()\n    \n    # Get the last word from the list of words\n    last_word = words[-1]\n    \n    # Check if the last character of the last word is a letter\n    # using isalpha() method which returns True for alphabets\n    return bool(last_word.endswith(tuple(set(chr(i + ord('a')) for i in range(ord('a'), ord('z')+1)))))"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    # Iterate through the list from the second element onwards\n    for i in range(1, len(arr)):\n        # Check if current element is less than or equal to previous element\n        if arr[i] <= arr[i-1]:\n            # Return the index of the first such element found\n            return i\n    # If no such element is found, return -1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    \n    if len(negatives) > 0:\n        a = max(negatives)\n    else:\n        a = None\n        \n    if len(positives) > 0:\n        b = min(positives)\n    else:\n        b = None\n        \n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    # convert inputs to numeric types if they are strings\n    try:\n        a = float(a)\n        b = float(b)\n    except ValueError:\n        pass\n    \n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    # Check if n is less than or equal to the smallest even number that would result in a sum of 4 evens\n    if n <= 2:\n        return False\n    \n    # Initialize variables for keeping track of the current sum and count of even numbers used so far\n    curr_sum = 0\n    count = 0\n    \n    # Iterate through all even numbers greater than or equal to n/2\n    for i in range(n//2, n+1, 2):\n        # If the current even number is greater than the remaining difference between the target sum and the current sum, stop iterating\n        if i > curr_sum + n - 2*i:\n            break\n        \n        # Add the current even number to the running total\n        curr_sum += i\n        \n        # Increment the count of even numbers used so far\n        count += 1\n    \n    # Return true if the running sum equals the target sum and there were exactly four even numbers used\n    return curr_sum == n and count == 4"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    # split the input into list of words\n    words = [word for word in text.split()]\n    # iterate over each word\n    for i, w in enumerate(words):\n        # check if there are more than two consecutive spaces\n        if len([x for x in w if x =='']) > 2:\n            # replace them by '-'\n            words[i] = w.replace(' ', '_')\n    return''.join(words)"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    # Check for more than three digits\n    if re.search(r'\\d{4}', file_name):\n        return 'No'\n    \n    # Check for exactly one dot\n    if re.search(r'[^.]*[.]\\w*\\.[^.]*$', file_name)!= None:\n        return 'No'\n    \n    # Check for substring before the dot starting with a latin alphabet letter\n    match = re.match('^[a-zA-Z]', file_name)\n    if not match:\n        return 'No'\n    \n    # Check for substring after the dot being in the list [\"txt\", \"exe\", \"dll\"]\n    ext = file_name.split('.')[-1].lower()\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n        \n    # If everything checks out, return Yes\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0:\n            result += num ** 3\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    # split sentence into individual words\n    words = sentence.split()\n    \n    # initialize list to store prime word indices\n    prime_indices = []\n    \n    # iterate over each index in words list\n    for i in range(len(words)):\n        \n        # check if current word length is prime\n        if is_prime(len(words[i])):\n            \n            # append index of current word to prime_indices list\n            prime_indices.append(i)\n    \n    # join prime words together into result string\n    result =''.join([words[index] for index in prime_indices])\n    \n    return result\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    # convert strings to fractions\n    x_num = Fraction(int(x.split('/')[0]), int(x.split('/')[1]))\n    n_num = Fraction(int(n.split('/')[0]), int(n.split('/')[1]))\n    \n    # calculate product\n    result = x_num * n_num\n    \n    # check if result is integer or not\n    if result == round(result):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    nums = sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for i in range(len(nums)-1):\n        if nums[i] % 10 > 0 and str(nums[i]%10)[0] in ['1', '3', '5', '7', '9'] \\\n            and nums[i+1] > 10 and str(nums[i+1]%10)[0] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    # Create an array 'a' of size n with values i*i - i + 1 for all i from 1 to n\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    \n    # Count the number of valid triples (a[i], a[j], a[k]) such that i < j < k and a[i]+a[j]+a[k] is divisible by 3\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j, len(a)):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    \n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # check if both input planets exist in list\n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        \n        # find indices of all planets between them\n        result = [(planets[i], planets[(i+1)%len(planets)]) for i in range(index1, index2+1)]\n        result.sort()\n        return tuple(result)\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # filter out elements with odd length\n    even_length = [word for word in lst if len(word) % 2 == 0]\n    \n    # sort by length and then alphabetical order\n    sorted_even_length = sorted(even_length, key=lambda x: (len(x), x))\n    \n    return sorted_even_length"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    # Check if n is divisible by any numbers from 2 to square root of n\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return y\n    # If n is prime, return x\n    return x"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    if len(lst) == 0:\n        return 0\n        \n    total = 0\n    for num in lst:\n        if num >= 0 and type(num) == int:\n            total += num**2\n            \n    return total"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(g - game[i]) for i, g in enumerate(guess)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    cap = [sum([c.isupper() for c in e]) - sum([c.islower() for c in e]) for e in extensions]\n    max_cap = max(cap)\n    \n    result = \"\"\n    for i, e in enumerate(extensions):\n        if sum([c.isupper() for c in e]) - sum([c.islower() for c in e]) == max_cap:\n            result = f\"{class_name}.{e}\"\n            break\n        \n    return result"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    # Convert strings to lists for easier manipulation\n    a_list = list(a)\n    b_list = list(b)\n    \n    # Check if either string is a rotation of the other\n    if len(a_list) < len(b_list):\n        return bool(set(a_list).intersection(set(b_list)))\n        \n    # Create sets of characters that appear in both strings\n    common_chars = set(a_list).intersection(set(b_list))\n    \n    # If there are no common characters, then neither string is a substring of the other\n    if len(common_chars) == 0:\n        return False\n    \n    # Find the longest common prefix between the two strings\n    max_len = 0\n    for i in range(min(len(a), len(b))):\n        if a[i] in common_chars and b[i] in common_chars:\n            max_len += 1\n            \n    # Check if one string is a suffix of the other\n    if len(str(b)[-max_len:]) in str(a):\n        return True\n    \n    # Check if one string is a prefix of the other\n    if len(str(a)[max_len:]) in str(b):\n        return True\n    \n    # Return False if none of the above conditions were met\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    count_even = 0\n    count_odd = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    # Define Roman symbols from I to M\n    romans = [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"]\n    \n    # Create dictionary of values for each Roman symbol\n    value_dict = {\"\": 0, \"I\": 1, \"II\": 2, \"III\": 3, \"IV\": 4, \"V\": 5, \"VI\": 6, \"VII\": 7, \"VIII\": 8, \"IX\": 9}\n    \n    # Initialize result variable\n    result = \"\"\n    \n    # Iterate through number - 1 to get corresponding Roman symbols\n    while number > 0:\n        # Get highest Roman symbol that can represent part of the number\n        max_symbol = min([value_dict[sym] for sym in romans if sym in str(number)])\n        \n        # Add Roman symbol to result until maximum is reached or current symbol exceeds next one\n        while number >= max_symbol:\n            result += romans[max_symbol]\n            number -= max_symbol\n            \n        # If remaining number is greater than zero, there must be another Roman symbol\n        if number > 0:\n            last_matched_symbol = [val for val in reversed(list(value_dict.keys())) if value_dict[val] == max_symbol][0]\n            result = last_matched_symbol + result\n            \n    # Return result in lowercase\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Returns True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n    \"\"\"\n    # Calculate the square of each side length\n    a_sq = a**2\n    b_sq = b**2\n    c_sq = c**2\n    \n    # Check for a right angled triangle using Pythagorean theorem\n    if a_sq + b_sq == c_sq:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    # Create a dictionary to store the frequency of each character\n    char_freq = {}\n    \n    # Iterate through all the words in the list\n    for i, word in enumerate(words):\n        # Initialize the frequency of this word to zero\n        freq = 0\n        \n        # Iterate through all the characters in the current word\n        for j, c in enumerate(word):\n            # Increment the count of this character\n            if c in char_freq:\n                char_freq[c] += 1\n            \n            else:\n                # Add new characters to the dictionary\n                char_freq[c] = 1\n                \n            # Check if we found a word with more unique characters\n            if freq < len(char_freq):\n                max_word = word\n                break\n        \n        # Update the maximum word if needed\n        if i == 0 or (not char_freq and max_word!= words[i - 1]):\n            max_word = word\n        \n    # Find the word with most unique characters\n    result = ''\n    for word in reversed(sorted(set(words))):\n        if len(set(list(word))) > len(result):\n            result = word\n    \n    return result"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    # If there aren't enough remaining carrots, eat them all\n    if remaining < need:\n        num_to_eat = remaining + number\n        carrots_left = 0\n        \n    else:\n        num_to_eat = need - number\n        carrots_left = remaining - num_to_eat\n        \n    return [num_to_eat, carrots_left]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = 0\n    for i in range(len(operand)-1):\n        if operator[i] == \"+\":\n            result += operand[i] + operand[i+1]\n        elif operator[i] == \"-\":\n            result -= operand[i] + operand[i+1]\n        elif operator[i] == \"*\":\n            result *= operand[i] + operand[i+1]\n        elif operator[i] == \"/\": # floor division\n            result //= operand[i] + operand[i+1]\n        elif operator[i] == \"**\": # exponentiation\n            result = operand[i] ** operand[i+1]\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    for c in s:\n        if ord(c) >= ord('a') and ord(c) <= ord('z'):\n            result += chr((ord(c) - ord('a')) % 25 + ord('a'))\n        elif ord(c) >= ord('A') and ord(c) <= ord('Z'):\n            result += chr((ord(c) - ord('A') + 25) % 25 + ord('A'))\n        else:\n            result += c\n    if len(result) == 0:\n        result = ''.join(['%s'[:::-1]] * int(len(s)/2))\n    return result"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if text:\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    for i in range(min(a, b), max(a, b)+1):\n        if i % 2 == 0:\n            result.append(i)\n    return sorted(result)"}
