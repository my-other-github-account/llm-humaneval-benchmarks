{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    separated_groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return None\n            group = stack.copy()\n            separated_groups.append(''.join(group))\n            stack.clear()\n    return separated_groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    for operation in reversed(operations):\n        if operation < 0:\n            return True\n        elif operation == 0:\n            continue\n        else:\n            return False\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)-1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    stack = []\n    levels = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            stack.append(i)\n        elif char == ')':\n            if not stack:\n                levels.append(len(paren_string)-1)\n            else:\n                levels.append(len(stack)-1)\n            stack.pop()\n    return levels"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), 1)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far = [numbers[0]]\n    max_ending_here = [numbers[0]]\n    for num in numbers[1:]:\n        if num > max_ending_here[-1]:\n            max_ending_here.pop()\n            max_ending_here.append(num)\n        elif num == max_ending_here[-1]:\n            max_ending_here.append(num)\n        else:\n            max_so_far.append(max_ending_here[-1])\n    return max_so_far"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    \n    # find the longest palindrome postfix\n    max_len = 0\n    for i in range(len(string)):\n        # check if the substring is a palindrome\n        if is_palindrome(string[i:i+len(string)-1]):\n            max_len = max(max_len, len(string[i:i+len(string)-1]))\n    \n    # append the reverse of the prefix\n    return string[-max_len-1:] + string[::-1][-max_len-1:]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        result += a[i] ^ b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = min(strings, key=len)\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    return greatest_common_divisor(a, b - a)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if not string:\n        return []\n    prefixes = [string]\n    for i in range(1, len(string)):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    result =''.join(str(i) for i in range(n+1))\n    return result"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    note_dict = {'o': 4, 'o|': 2, '.|': 1}\n    beats = []\n    for note in music_string:\n        if note in note_dict:\n            beats.append(note_dict[note])\n        elif note == '|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    current_count = 0\n    current_substring_index = 0\n    for index, char in enumerate(string):\n        if char == substring[current_substring_index]:\n            current_count += 1\n            if current_count == len(substring):\n                count += 1\n                current_substring_index = 0\n                current_count = 0\n        else:\n            current_substring_index = 0\n            current_count = 0\n        if index >= len(string) - len(substring):\n            current_substring_index = 0\n            current_count = 0\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numbers from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = sorted(numbers.split())\n    return''.join(numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\"\"\"\n    numbers.sort()\n    return numbers[-1], numbers[0]"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    return [num / max(numbers) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    result = []\n    for value in values:\n        if type(value) == int:\n            result.append(value)\n    return result"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            largest = i\n            break\n        i += 1\n    return largest"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    if n < 2:\n        return []\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    return list(set(numbers))"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join(chr(ord(char) ^ 32) if char.islower() else chr(ord(char) ^ 32) for char in string)"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only the unique zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2!= 0 or xs[-1]!= 0:\n        raise ValueError(\"xs must have an even number of coefficients and the last coefficient must be 0\")\n    return round(poly([-1] + xs[:-1])(0), 2)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    return sorted(list(filter(lambda x: x % 3!= 0, l)))"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list) -> int:\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 and i % 13 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    return [sorted(l[i::2]) if i % 2 == 0 else l[i] for i in range(len(l))]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # reverse the string\n    s = s[::-1]\n    # split the string into groups of three characters\n    groups = [s[3*i:3*i+3] for i in range(len(s)//3)]\n    # cycle the elements in each group\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    # reverse each group and join them\n    return \"\".join(groups)[::-1]"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a, b = 2, 3\n        for i in range(3, n+1):\n            c = a + b\n            if is_prime(c) and is_fibonacci(c):\n                a, b = b, c\n            elif is_fibonacci(c):\n                a, b = b, c\n            elif is_prime(c):\n                a, b = b, c\n        return b\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_fibonacci(n: int) -> bool:\n    a, b = 0, 1\n    for i in range(2, n+1):\n        a, b = b, a + b\n    return b == n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    seen = set()  # set to keep track of seen elements\n    for i in range(len(l) - 2):\n        a, b, c = l[i], l[i+1], l[i+2]\n        if a, b, c not in seen:\n            if a + b + c == 0:\n                return True\n            seen.add(a)\n            seen.add(b)\n            seen.add(c)\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    # initialize left and right car counts\n    left_cars = [0] * n\n    right_cars = [0] * n\n\n    # simulate left and right car movements\n    for i in range(n):\n        left_cars[i] = i\n        right_cars[i] = n - i - 1\n\n    # count collisions\n    count = 0\n    for i in range(n):\n        if left_cars[i] > right_cars[i]:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    return [l[i] + 1 if l[i]!= 0 else l[i] for i in range(len(l))]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()  # Set to keep track of seen elements\n    for i, a in enumerate(l):\n        for b in l[i+1:]:  # Iterate over the remaining elements in the list\n            if a + b == 0:\n                return True\n            elif a in seen or b in seen:\n                continue\n            else:\n                seen.add(a)\n                seen.add(b)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = ''\n    x = x % (base * 2)\n    while x >= 2:\n        result = digits[x % 64] + result\n        x //= 64\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    \"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    a = 0\n    b = 2\n    c = 0\n    d = 0\n    if n < 4:\n        return n\n    for i in range(4, n+1):\n        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list) -> float:\n    \"\"\"Return median of elements in the list l.\"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        middle = (len(l) // 2) - 1\n        return (l[middle] + l[len(l)//2]) / 2\n    else:\n        middle = len(l) // 2\n        return l[middle]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    while n > 0:\n        result *= 2\n        n -= 1\n    return (result % p + p) % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in text.lower() if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    s0_chars = sorted(set(s0))\n    s1_chars = sorted(set(s1))\n    return s0_chars == s1_chars"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack or stack[-1]!= \"<<\":\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\"\"\"\n    return len(l) == 0 or (l[0] <= l[-1] and all(l[i] <= l[i+1] for i in range(len(l)-1))) or (l[0] >= l[-1] and all(l[i] >= l[i+1] for i in range(len(l)-1)))"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> List[Any]:\n    l1_set = set(l1)\n    l2_set = set(l2)\n    common_set = l1_set.intersection(l2_set)\n    return sorted(list(common_set))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    largest_factor = max(factors)\n    return largest_factor if largest_factor > 1 else 1"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return (1 + (n * (n + 1) / 2))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    n = len(xs)\n    res = [xs[i] * (n - i - 1) for i in range(n - 1)]\n    res.append(xs[-1])\n    return res"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n <= 2:\n        return n\n    a = 0\n    b = 1\n    c = 1\n    for i in range(3, n+1):\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    return c"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = 'aeiouy'\n    count = 0\n    for c in s:\n        if c in vowels and (c == 'y' and s[-1] == c):\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    # Get the number of digits in x\n    num_digits = len(str(x))\n    \n    # If shift is greater than number of digits, reverse the digits\n    if shift > num_digits:\n        return str(x)[-num_digits:] + str(x)[:-shift]\n    \n    # Shift the digits to the right\n    shifted_digits = str(x)[-shift:]\n    remaining_digits = str(x)[:-shift]\n    \n    # Combine the shifted and remaining digits\n    return shifted_digits + remaining_digits"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    ascii_codes = [ord(c) for c in s if c.isupper()]\n    return sum(ascii_codes)"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # split the string by the 'and' word\n    s_list = s.split('and')\n    # initialize a variable to store the number of mangoes\n    mangoes = 0\n    # loop through the list of strings\n    for f in s_list:\n        # convert the string to an integer\n        f_num = int(f.strip())\n        # subtract the number of mangoes from the total number of fruits\n        mangoes += n - f_num\n    # return the number of mangoes\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_nodes = [node for node in arr if node % 2 == 0]\n    if not even_nodes:\n        return []\n\n    min_even = min(even_nodes)\n    min_even_index = even_nodes.index(min_even)\n    return [min_even, min_even_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    for num, freq in freq.items():\n        if freq >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return lst\n    \n    min_val = lst[0]\n    max_val = lst[0]\n    even_list = []\n    odd_list = []\n    for val in lst:\n        if val < min_val:\n            even_list.append(val)\n        elif val > max_val:\n            odd_list.append(val)\n        else:\n            if val % 2 == 0:\n                even_list.append(val)\n            else:\n                odd_list.append(val)\n    \n    return sorted(even_list) + sorted(odd_list)"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b < c or a + c < b or b + c < a:\n        return -1\n    else:\n        s = (a + b + c) / 2\n        return round(s * (s - a) * (s - b) * (s - c), 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # Check if the list is balanced\n    if q[-1:] == q[:-1]:\n        # Calculate the sum of the elements\n        total_weight = sum(q)\n        # Return True if the total weight is less than or equal to w\n        return total_weight <= w\n    else:\n        # Return False if the list is not balanced\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    # Initialize variables\n    n = len(arr)\n    start = [0] * n\n    for i in range(n):\n        start[i] = arr[i]\n    # Find the first element that is not palindromic\n    for i in range(n):\n        if start[i]!= arr[i]:\n            # Find the smallest change that makes the element palindromic\n            for j in range(i+1, n):\n                if start[j] == arr[i]:\n                    return 1\n    # If no element is found, return the number of elements that need to be changed\n    return n - len(set(arr))"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst2\n    else:\n        return sorted(lst1 + lst2)[:-1]"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    # check if a is a multiple of 3\n    if a % 3!= 0:\n        return False\n    \n    # find the factors of a\n    factors = []\n    d = 2\n    while a > 1:\n        if a % d == 0:\n            factors.append(d)\n            a //= d\n        else:\n            d += 1\n    \n    # check if all factors are prime\n    for factor in factors:\n        if factor <= 2:\n            continue\n        for i in range(2, factor)::\n            if factor % i == 0:\n                return False\n    \n    return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n**int(n.__class__.__name__[5:])"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0 or a == 1:\n        return True\n    if a < 0:\n        return False\n    i = 1\n    while i <= a:\n        if math.pow(i, 3) == a:\n            return True\n        i += 1\n    return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    hex_digits = [2, 3, 5, 7, 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in hex_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = ''\n    power = 0\n    while decimal > 0:\n        remainder = decimal % 2\n        binary += str(remainder)\n        power += 1\n        decimal //= 2\n    return 'db' + binary + 'db'"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    grade_map = {\n        4.0: 'A+',\n        > 3.7: 'A',\n        > 3.3: 'A-',\n        > 3.0: 'B+',\n        > 2.7: 'B',\n        > 2.3: 'B-',\n        > 2.0: 'C+',\n        > 1.7: 'C',\n        > 1.3: 'C-',\n        > 1.0: 'D+',\n        > 0.7: 'D',\n        > 0.0: 'D-',\n        0.0: 'E'\n    }\n\n    letter_grades = []\n    for gpa in grades:\n        if gpa in grade_map:\n            letter_grades.append(grade_map[gpa])\n        else:\n            letter_grades.append('N/A')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    # check if the length of the string is a prime number\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if len(string) in prime_numbers:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**n):\n        if i % 10 == 1:\n            count += 1\n        elif i % 100 == 1:\n            count += (i % 10) - 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary = bin(N)[2:]\n    return '0' + binary if binary else '0'"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_odds = [num for num in lst if (num % 2 == 0 and lst.index(num) % 2 == 1)]\n    return sum(even_odds)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # split the string into words\n    words = s.split()\n    # create a list of tuples, where each tuple contains the original word and its sorted version\n    sorted_words = [('', word) for word in sorted(words)]\n    # create a new string with the sorted words\n    sorted_s = ''.join(sorted_words)[::-1]\n    return sorted_s"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    row_tuples = []\n    for i, row in enumerate(lst):\n        for j, x_coordinate in enumerate(row):\n            if x_coordinate == x:\n                row_tuples.append((i, j))\n    return sorted(row_tuples, key=lambda tup: (tup[0], -tup[1]))"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    # Sort the array in ascending order if the sum of the first and last elements is odd\n    # Otherwise, sort the array in descending order\n    return sorted(array) if sum(array[0], array[-1]) % 2 == 1 else sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shifted = alphabet[2:] + alphabet[:2]\n    return s.translate(str.maketrans(alphabet, shifted))"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    lst.sort()\n    return lst[1] if lst[1]!= lst[0] else None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    words = S.split(\".?!\")\n    count = 0\n    for sentence in words:\n        if sentence.startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if (x + y == z) or (x + z == y) or (y + z == x):\n        return True\n    elif not all(isinstance(num, int) for num in (x, y, z)):\n        return False\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = \"AEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            encoded_message += chr(ord('A') + index * 2)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    max_prime = 0\n    max_digits_sum = 0\n    for num in lst:\n        if is_prime(num):\n            if num > max_prime:\n                max_prime = num\n                max_digits_sum = sum(int(digit) for digit in str(max_prime))\n    return max_digits_sum\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    lower = [key.lower() for key in dict.keys()]\n    upper = [key.upper() for key in dict.keys()]\n\n    return lower == lower or upper == upper"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n == 0:\n        return []\n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        for j in range(i, int(n**0.5)+1, i):\n            if all(j % i!= 0 for i in primes):\n                primes.append(j)\n        i += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    # Get the unit digits of the two numbers\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    \n    # If either of the unit digits is 0, the product is 0\n    if unit_digit_a == 0 or unit_digit_b == 0:\n        return 0\n    \n    # Multiply the unit digits\n    return unit_digit_a * unit_digit_b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # Convert the string to a float\n    value = float(value)\n    \n    # Get the closest integer\n    if value >= 0:\n        return int(value + (0.5 if value % 1 == 0 else 0))\n    else:\n        return int(value + (0.5 if value % 1 == 0 else 1))"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n == 1:\n        return [1]\n    odd_numbers = [i for i in range(1, n+1) if i%2!= 0]\n    even_numbers = [i for i in range(1, n+1) if i%2 == 0]\n    if n % 2 == 0:\n        return odd_numbers + even_numbers\n    else:\n        return odd_numbers + [n]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    # Check if x is even and y is odd or vice versa\n    if (x % 2 == 0 and y % 2!= 0) or (x % 2!= 0 and y % 2 == 0):\n        return -1\n    \n    # Find the biggest even number in the range [x, y]\n    even_num = 2\n    if x < y:\n        even_num = min(even_num, y)\n    else:\n        even_num = max(even_num, x)\n    return even_num"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m + 1) // 2\n    binary = bin(avg)[2:]\n    if binary.count('0') % 2 == 1:\n        binary = '0' + binary\n    return binary"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    # Create a set of all digits in the input list\n    digits = set()\n    for num in x:\n        for digit in str(num):\n            if int(digit) % 2 == 1:\n                digits.add(int(digit))\n    \n    # Filter the input list to only include elements with odd digits\n    filtered = [num for num in x if all(int(digit) in digits for digit in str(num))]\n    \n    # Sort and return the filtered list\n    return sorted(filtered)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n\n    sorted_arr = sorted(filter(lambda x: x in [1, 2, 3, 4, 5, 6, 7, 8, 9], arr))\n    reversed_arr = sorted_arr[::-1]\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [names[num - 1] for num in reversed_arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = [1] * n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result[i-1] = math.factorial(i)\n        else:\n            for j in range(1, i+1):\n                result[i-1] += j\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    # create a list of palindromic numbers between 1 and n\n    palindromes = [i for i in range(1, n+1) if str(i) == str(i)[::-1]]\n\n    # count the even and odd palindromes\n    even_count = 0\n    odd_count = 0\n    for palindrome in palindromes:\n        if palindrome % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # return the tuple with even and odd counts\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num < 0:\n            signed_digits = [num & 1]\n            num = num // 2\n            while num > 0:\n                signed_digits.append(num & 1)\n                num //= 2\n            count += sum(signed_digits)\n        else:\n            count += sum(int(d) for d in str(num))\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        if arr[left] <= arr[right]:\n            if left == right:\n                return True\n            if left < right:\n                arr[left], arr[right] = arr[right], arr[left]\n                left += 1\n                right -= 1\n            else:\n                arr[left], arr[right] = arr[right], arr[left]\n                left -= 1\n                right += 1\n        else:\n            if left > right:\n                return False\n            elif arr[left] < arr[right]:\n                arr[left], arr[right] = arr[right], arr[left]\n                left += 1\n                right -= 1\n            else:\n                arr[left], arr[right] = arr[right], arr[left]\n                left -= 1\n                right += 1\n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    even_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n    if even_count == len(lst1):\n        return \"YES\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i] = lst2[j]\n                    break\n            else:\n                return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    # Split the string into individual letters\n    letters = [letter.lower() for letter in test.split()]\n\n    # Count the occurrence of each letter\n    counts = {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n\n    # Find the letter with the highest count\n    max_count = 0\n    max_letter = ''\n    for letter, count in counts.items():\n        if count > max_count:\n            max_count = count\n            max_letter = letter\n\n    # Return the result\n    return {max_letter: max_count}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    s_set = set(c)\n    for char in s:\n        if char in s_set:\n            s = s.replace(char, '')\n    return s, bool(set(s[::-1]) == set(s))"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_digits = [int(d) for d in s if int(d) % 2!= 0]\n        count = len(odd_digits)\n        result.append(f\"the number of odd elements {count} in the {i+1}th string of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    curr_sum = nums[0]\n    min_sum = float('inf')\n    for num in nums[1:]:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # Find the number of rows and columns in the grid\n    num_rows = len(grid)\n    num_cols = len(grid[0])\n\n    # Initialize variables to keep track of the number of buckets needed\n    num_buckets = 0\n    current_row = 0\n    current_col = 0\n\n    # Iterate through the grid\n    for row in range(num_rows):\n        for col in range(num_cols):\n            # If the current well contains water, fill the bucket\n            if grid[row][col] == 1:\n                # If the bucket is not full, continue to the next well\n                if current_bucket < capacity:\n                    current_bucket += 1\n                else:\n                    # If the bucket is full, empty it and start a new one\n                    num_buckets += 1\n                    current_bucket = 0\n            else:\n                # If the current well does not contain water, skip it\n                current_bucket = 0\n\n            # Move to the next well\n            if current_row < num_rows - 1:\n                current_row += 1\n                current_col = 0\n            else:\n                current_col += 1\n\n    # Return the number of buckets needed\n    return num_buckets"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    # Create a list of tuples with each element and its count of ones\n    ones_count = [(num, arr.count(num)) for num in set(arr)]\n    # Sort the list based on count of ones and decimal value\n    ones_count.sort(key=lambda x: (x[1], x[0]))\n    # Create a new sorted list from the sorted tuples\n    return [x[0] for x in ones_count]"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    # Split the string by spaces to get a list of words\n    words = s.split()\n\n    # Initialize an empty list to store the matching words\n    result = []\n\n    # Iterate through the words\n    for word in words:\n        # Count the number of consonants in the word\n        num_consonants = sum(c.isalpha() and c.islower() and c not in \"aeiou\" for c in word)\n\n        # Check if the word has exactly n consonants\n        if num_consonants == n:\n            # Append the word to the result list\n            result.append(word)\n\n    # Return the list of matching words\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    left_index = 0\n    right_index = len(word) - 1\n    closest_vowel = ''\n    \n    while left_index <= right_index:\n        if word[left_index] in vowels and word[right_index] in vowels:\n            if (left_index < right_index) and (word[left_index] < word[right_index]):\n                closest_vowel = word[left_index]\n                break\n            elif (left_index > right_index) and (word[left_index] > word[right_index]):\n                closest_vowel = word[right_index]\n                break\n        elif word[left_index] in vowels:\n            closest_vowel = word[left_index]\n            break\n        elif word[right_index] in vowels:\n            closest_vowel = word[right_index]\n            break\n        else:\n            if left_index < right_index:\n                closest_vowel = word[left_index]\n                break\n            else:\n                closest_vowel = word[right_index]\n                break\n        left_index += 1\n        right_index -= 1\n    \n    return closest_vowel"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Get the first k elements\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum_ = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 0 and num % 2!= 0:\n            sum_ += num\n    return sum_"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(min(k, len(arr))):\n        sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    def collatz(n):\n        if n == 1:\n            return [1]\n        elif n % 2 == 0:\n            half = n // 2\n            return [n] + collatz(half)\n        else:\n            return [n] + collatz(3*n + 1)\n    \n    return sorted(collatz(n))"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    # Check if date is not empty\n    if not date:\n        return False\n    \n    # Check if date is in the correct format\n    if date[4:] not in ['01', '03', '05', '07', '08', '10', '12']:\n        return False\n    \n    # Check if month is valid\n    month_dict = {'01': 'January', '03': 'March', '05': 'May', '07': 'July', '08': 'August', '10': 'October', '12': 'December'}\n    month = month_dict[date[4:6].lower()]\n    days = int(date[8:-2])\n    if (month == 'January' or month == 'March' or month == 'May' or month == 'July' or month == 'August' or month == 'October' or month == 'December') and days < 1 or days > 31:\n        return False\n    elif month == 'April' or month == 'June' or month == 'September' or month == 'November' and days < 1 or days > 30:\n        return False\n    elif month == 'February' and days < 1 or days > 29:\n        return False\n    \n    # Check if number of days is valid\n    year = date[0:-6]\n    if year < '2000' or year > '2021':\n        return False\n    if int(date[6:-4]) > 365:\n        return False\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if'' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        alphabet = 'abcdefghijklmnopqrstuvwxyz'\n        result = 0\n        for i in range(26):\n            if chr(i + ord('a')) in txt:\n                result += 1\n        return result"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(set(lst)) < len(lst):\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # check if intervals intersect\n    if end1 >= start2 or end2 >= start1:\n        # calculate length of intersection\n        length = end2 - start1 if end1 >= start2 else end1 - start2\n        \n        # check if length is prime\n        for i in range(2, length+1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"\n    \n    # intervals do not intersect\n    return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n\n    sign_product = 1\n    magnitude_sum = 0\n\n    for num in arr:\n        if num == 0:\n            magnitude_sum += 0\n            sign_product *= 0\n        elif num < 0:\n            magnitude_sum += abs(num)\n            sign_product *= -1\n        else:\n            magnitude_sum += num\n            sign_product *= 1\n\n    return magnitude_sum * sign_product"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    dp = [[None] * (k+1) for _ in range(m)]\n    for i in range(m):\n        dp[i][0] = grid[i][0]\n    for i in range(1, k+1):\n        for j in range(n):\n            for l in range(m):\n                if dp[j][i-1] is None:\n                    dp[j][i] = grid[l][i-1]\n                else:\n                    dp[j][i] = min(dp[j][i-1], grid[l][i-1])\n    return dp[0][k]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 1:\n        return [3]\n    elif n % 2 == 0:\n        return [1 + n // 2] + [tri(n - i) for i in range(1, n // 2 + 1)]\n    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1)] + [tri(n - i) for i in range(1, n + 1)]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 1 or n == 1:\n        return 1\n    odd_prod = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2!= 0:\n            odd_prod *= digit\n        n //= 10\n    return odd_prod"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top == '(':\n                stack.append(char)\n            elif top == '[':\n                if stack and stack[-1] == ']':\n                    stack.pop()\n                stack.append(char)\n            else:\n                return False\n    return True"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(map(lambda x: round(x**2), lst))"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Split the string by space to get a list of words\n    words = txt.split()\n    # Get the last word and the last character of the last word\n    last_word = words[-1]\n    last_char = last_word[-1]\n    # Check if the last character is a letter and is not a part of a word\n    return not last_char.isalpha() or last_char not in last_word"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg_ints = [x for x in lst if x < 0]\n    pos_ints = [x for x in lst if x > 0]\n    if neg_ints:\n        a = max(neg_ints)\n    else:\n        a = None\n    if pos_ints:\n        b = min(pos_ints)\n    else:\n        b = None\n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    return n == 0 or (n % 2 == 0 and sum(filter(lambda x: x % 2 == 0 and x > 0, [n//4, (n//2)//2, (n//4)//2])) == n)"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n > 0:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    # split the string into a list of words\n    words = text.split()\n    # iterate through the list of words\n    for i in range(len(words)):\n        # replace all spaces in a word with underscores\n        words[i] = words[i].replace(' ', '_')\n        # if the word has more than 2 consecutive spaces\n        if len(words[i]) > 2 and words[i][1] =='':\n            # replace all consecutive spaces with -\n            words[i] = words[i][0] + '-' + words[i][-1]\n    # join the list of words back into a string\n    fixed_text =''.join(words)\n    return fixed_text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    # Check if file name contains more than 3 digits\n    if file_name.count('0123456789') > 3:\n        return 'No'\n    \n    # Check if file name contains exactly one dot\n    if '.' not in file_name:\n        return 'No'\n    dot_index = file_name.index('.')\n    \n    # Check if substring before dot starts with a latin alphapet letter\n    if not file_name[0].isalpha():\n        return 'No'\n    \n    # Check if substring after dot is valid\n    if file_name[dot_index + 1:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # If all conditions are met, return 'Yes'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0:\n            result += num ** 3\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if len(set(e for e in word if e.isalpha())) == len(word):\n            result += word + \" \"\n    return result.strip()"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    # convert strings to fractions\n    x = Fraction(x)\n    n = Fraction(n)\n    \n    # check if x * n is a whole number\n    if x * n.limit_denominator() == int(x * n):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Sort the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, order them based on their index in original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), x))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for i in range(len(nums) - 1):\n        if nums[i] % 10 % 2!= 0 and nums[i+1] % 10 % 2!= 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i*i-i+1 for i in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets and planet2 not in planets:\n        return ()\n    result = []\n    for p in planets:\n        if (planet1 < p and p < planet2) or (planet2 < p and p < planet1):\n            result.append(p)\n    return sorted(result)"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # filter out words with odd length\n    even_length = [word for word in lst if len(word) % 2 == 0]\n    \n    # sort by length and then alphabetically\n    sorted_list = sorted(even_length, key=lambda x: (len(x), x))\n    \n    return sorted_list"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    # Check if n is prime\n    is_prime = [True]\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            is_prime[i-1] = False\n    if not is_prime[n-1]:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    odd_sum = 0\n    for num in lst:\n        if num >= 0 and num == int(num):\n            odd_sum += num ** 2\n    return odd_sum ** 2"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    cap_count = 0\n    sm_count = 0\n    strongest_extension = ''\n    for extension in extensions:\n        cap_count += len([c for c in extension if c.isupper()])\n        sm_count += len([c for c in extension if c.islower()])\n        if cap_count - sm_count > strength_threshold:\n            strongest_extension = extension\n    if not strongest_extension:\n        return f\"{class_name}.None\"\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    # Convert the words to lists of characters\n    a_list = list(a)\n    b_list = list(b)\n\n    # Check if the second word is a substring of the first word\n    if b in a_list:\n        return True\n\n    # Check if any rotation of the second word is a substring of the first word\n    for i in range(len(b_list)):\n        for j in range(i, len(b_list)):\n            rotation = b_list[i:] + b_list[:i]\n            if rotation in a_list:\n                return True\n\n    # If none of the above conditions are met, return False\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    count_even, count_odd = 0, 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    # Define roman numeral conversion table\n    roman_numerals = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M'\n    }\n    \n    # Define a dictionary to store roman numeral equivalents of numbers\n    # with 3 or fewer characters\n    mini_roman_dict = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M'\n    }\n    \n    # Check if the number is between 1 and 1000\n    if 1 <= number <= 1000:\n        # Find the roman numeral equivalent of the number\n        roman_numeral = ''\n        for i in range(1, 1001):\n            if i >= number:\n                roman_numeral += roman_numerals[i]\n                number -= 1\n                \n        # Check if the number is between 1 and 3 or between 11 and 20\n        if (number == 0 and roman_numeral[-1] in ['I', 'X', 'C', 'M']) \\\n        or (number == 1 and roman_numeral[-2:] == 'XX') \\\n        or (number == 2 and roman_numeral[-2:] == 'XX' and roman_numeral[-1] in ['I', 'V', 'X']):\n            return roman_numeral\n        \n        # Check"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    # Create a dictionary to store the unique characters and their counts\n    char_count = {}\n    # Create a list to store the words with maximum unique characters\n    max_words = []\n    # Loop through the words\n    for word in words:\n        # Loop through the characters in the word\n        for char in word:\n            # Check if the character is already in the dictionary\n            if char in char_count:\n                # Increment the count for this character\n                char_count[char][\"count\"] += 1\n            else:\n                # Create a new entry in the dictionary with count 1\n                char_count[char] = {\"count\": 1}\n        # Check if the word has more unique characters than the current maximum\n        if len(char_count) > len(max_words[0]):\n            # Update the maximum word\n            max_words = [word]\n        elif len(char_count) == len(max_words[0]):\n            # Add the word to the list of words with maximum unique characters\n            max_words.append(word)\n    # Return the first word in the list of words with maximum unique characters\n    return max_words[0]"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining < need:\n        remaining = 0\n    return [number + need, remaining]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = 0\n    for i in range(len(operand) - 1):\n        operator_index = i * len(operand) - 1\n        operand_index = i\n        if operator[operator_index] == '+':\n            result += operand[operand_index]\n        elif operator[operator_index] == '-':\n            result -= operand[operand_index]\n        elif operator[operator_index] == '*':\n            result *= operand[operand_index]\n        elif operator[operator_index] == '/':\n            result //= operand[operand_index]\n        elif operator[operator_index] == '**':\n            result **= operand[operand_index]\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            result += c.upper() if c.islower() else c.lower()\n        else:\n            result += c\n    return result[::-1] if not any(c.isalpha() for c in s) else result"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if text:\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return sorted(result)"}
