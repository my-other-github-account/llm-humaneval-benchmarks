{"task_id": "HumanEval/0", "completion": "def largest_number(numbers: List[float]) -> float:\n    \"\"\"Returns the largest number in the given list of numbers.\"\"\"\n    if not numbers:\n        return float('-inf')\n    return max(numbers)"}
{"task_id": "HumanEval/1", "completion": "def to_lowercase(string: str) -> str:\n    \"\"\"\n    Converts a string to lowercase.\n\n    >>> to_lowercase('HELLO WORLD')\n    'hello world'\n    \"\"\"\n\n    return string.lower()"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - round(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n\n    return balance < 0"}
{"task_id": "HumanEval/4", "completion": ""}
{"task_id": "HumanEval/5", "completion": ""}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n        elif char =='':\n            if depth == 0:\n                result.append(0)\n            elif depth == 1:\n                result.append(1)\n            else:\n                result.append(2)\n        else:\n            result.append(1)\n    return result\n\n"}
{"task_id": "HumanEval/7", "completion": "def filter_non_palindromes(strings: List[str]) -> List[str]:\n    \"\"\"Filters a list of strings and returns a new list containing only those strings that are not palindromes.\n\n    Args:\n        strings (list): A list of strings to filter.\n\n    Returns:\n        A list of strings from the input list that are not palindromes.\n    \"\"\"\n    palindromes = [str(x) for x in strings if str(x) == str(x)[::-1]]\n    return [s for s in strings if s not in palindromes]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        Tuple[int, int]: A tuple containing the sum and product of all the integers in the list.\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return sum, product"}
{"task_id": "HumanEval/9", "completion": "def test_rolling_max():\n    assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]\n    assert rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10"}
{"task_id": "HumanEval/10", "completion": "    def test_make_palindrome(self):\n        self.assertEqual(make_palindrome(''), '')\n        self.assertEqual(make_palindrome('cat'), 'catac')\n        self.assertEqual(make_palindrome('cata'), 'catac')\n"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Perform binary XOR on two strings a and b consisting only of 1s and 0s.\n    Return the result as a string.\n\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    # Define the result string\n    result = \"\"\n\n    # Iterate through each character in the input strings\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += a[i]\n        else:\n            result += b[i]\n\n    # Return the result string\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    \"\"\"Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n\n    Args:\n        strings (list): A list of strings.\n\n    Returns:\n        str or None: The longest string in the input list, or None if the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n\n    max_len = max([len(s) for s in strings])\n    return max_len == 1 and strings or max_len == 2 and strings[:2] or max_len == 3 and strings[:3]"}
{"task_id": "HumanEval/13", "completion": "def sum_of_primes_less_than(n: int) -> int:\n    \"\"\"Return the sum of all prime numbers less than or equal to a given number.\n    >>> sum_of_primes_less_than(100)\n    287\n    \"\"\"\n\n    prime_numbers = [i for i in range(1, int(n/2)+1) if i % 2 == 0]\n    for num in prime_numbers:\n        for d"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Returns list of all prefixes from shortest to longest of the input string\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        List[str]: A list of all prefixes from the input string.\n    \"\"\"\n    prefixes = []\n    for prefix in string.split(\"\"):\n        prefixes.append(prefix[1:])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def longest_common_substring(s, t):\n    if len(s) < len(t):\n        s, t = t, s\n    n = len(s)\n    dp = [0] * (n + 1)\n    for i in range(n):\n        dp[i] = dp[i - 1] + 1\n        if i == 0:\n            dp[i] = dp[i - 1] + 1\n    for i in range(n - 1, -1, -1):\n        if s[i] == t[i]:\n            dp[i] = max(dp[i], dp[i + 1])\n    return dp[n - 1]\n"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\"Given a string, find out how many distinct characters (regardless of case) does it consist of.\n\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string)) - 1"}
{"task_id": "HumanEval/17", "completion": "def test_parse_music():\n    music_string = 'o o|.| o| o|.|.|.|.| o o'\n    expected_result = [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    result = parse_music(music_string)\n    assert result == expected_result"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for char in string:\n        if char in substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\"Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'e"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n\n    Args:\n        numbers (list): A list of floating point numbers.\n\n    Returns:\n        Tuple[float, float]: A tuple containing the two closest numbers.\n\n    Example:\n        >>> find_closest_elements([1.0, 2."}
{"task_id": "HumanEval/21", "completion": "def to_lowercase(string):\n    return string.lower()"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [int(x) for x in values if x.isdigit()]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\"\n    Returns the length of a given string.\n\n    Args:\n        string: A string object.\n\n    Returns:\n        An int representing the length of the string.\n\n    Examples:\n        >>> strlen('')\n        0\n        >>> strlen('abc')\n        3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_non_factor(n: int) -> int:\n    \"\"\"For a given number n, find the largest integer smaller than n that is not a factor of n, using largest_divisor function as a reference\"\"\"\n    return max(largest_divisor(n) - 1, 1)"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest."}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Remove all elements that occur more than once from a list of integers.\n    The order of the elements in the list is preserved.\n    \n    Arguments:\n        numbers (List[int]) -- A list of integers to remove duplicates from\n        \n    Returns:\n        A list of integers without any elements that occur more than once in the input list.\n    \"\"\"\n    seen = set()\n    return [x for x in numbers if not (x in seen or seen.add(x))]"}
{"task_id": "HumanEval/27", "completion": "def string_to_number(string: str) -> int:\n    \"\"\"Converts a string representation of a number to an actual number.\n    >>> string_to_number('10')\n    10\n    \"\"\"\n    return int(string)"}
{"task_id": "HumanEval/28", "completion": ""}
{"task_id": "HumanEval/29", "completion": "def reverse_list(strings: List[str]) -> List[str]:\n    \"\"\"Converts a list of strings to a list of their reverse order.\"\"\"\n    return [strings[::-1] for strings in strings]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    positive_indices = [i for i, x in enumerate(l) if x >= 0]\n    return l[positive_indices]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    # A number is prime if it is not divisible by any integer other than 1 and itself.\n    # We can check for divisibility by 1 by checking if the remainder is 0 when\n    # dividng by 1. For divisibility by other integers, we can check if the\n    # remainder is not 0 when dividng by the potential divisor.\n\n    # The prime number theorem states that the number of prime numbers less\n    # than n is approximately n/ln(n), where ln(n) is the natural logarithm\n    # of n. This means that, as n increases, the proportion of prime numbers\n    # among the numbers less than n also increases.\n\n    # We can use this theorem to check for primality by checking if the\n    # number of factors of a number is less than the expected number of\n    # factors for a prime number.\n\n    # For example, the number 11 has 2 factors (2 and 5), so it is not prime\n    # according to this criterion. However, it is a prime number according to\n    # the usual criterion of being divisible only by 1 and itself.\n\n    # We can use the following function to compute the number of factors of\n    # a number:\n\n    def number_of_factors(n):\n        # If n is 0, then there are no factors other than 1.\n\n        # If n is 1, then there is only 1 factor.\n\n        # If n is 2, then there are 2 factors.\n\n        # In general, the number of factors of n is the sum of the number of\n        # factors of n/2, n/3, n/4"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    \"\"\"\n    Finds the value of x that makes the polynomial equal to 0.\n    \"\"\"\n    if len(xs) % 2!= 1:\n        return None\n    zero_point = float(-xs[0])\n    for i in range(1, len(xs)):\n        if xs[i] == 0:\n            continue\n        if xs[i] * math.pow(zero_point, len(xs) - i - 1) == 0:\n            return zero_point\n    return None"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l_index_3 = [i for i in range(len(l), len(l) + 1) if i % 3 == 0]\n    l_not_3 = [i for i in range(len(l), len(l) + 1) if i % 3!= 0]\n    return l[l_index_3] + l_not_3 + [l[i] for i in l_index_3 for j in l_not_3 if j + 1 <= i and i % 3 == 0]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen]"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    if not l:\n        return None\n    return l.pop(0)"}
{"task_id": "HumanEval/36", "completion": "def f(n):\n    prime_numbers = [i for i in range(1, int(n**0.5) + 1) if i % 2 == 0 or i % 3 == 0]\n    sum = 0\n    for num in prime_numbers:\n        if num > 1:\n            sum += num\n    return sum"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    l.sort(key=lambda x: x % 2)\n    return l\n\ndef sorted_even_list(l: list) -> list:\n    l_sorted = l.copy()\n    l_sorted.sort(key=lambda x: x % 2)\n    return l_sorted\n\ndef sort_even_with_cached_list(l: list):\n    l_sorted = sorted_even_list(l)\n    return"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    s = s.encode()\n    decoded_s = \"\"\n    for group in s.split():\n        if len(group) == 3:\n            decoded_s += group[0] + group[1] + group[2]\n        else:\n            decoded_s += group[0] + group[1] + group[2] + group[0] + group[1] + group[2]\n    return decoded_s.decode()"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    if n < 2:\n        return 2\n    elif n < 3:\n        return 3\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            for j in range(2, int(n**0.5) + 1):\n                if i > j:\n                    if (i - 1) % j == 0 or (j - 1) % i == 0:\n                        return i\n        return None"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    Checks if there are three distinct elements in the list that sum to zero.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] + l[i+j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    # Initialize variables to keep track of the cars\n    left_cars = []\n    right_cars = []\n    # Initialize a 0-based counter for the number of collisions\n    collision_count = 0\n\n    # Iterate over the left and right cars\n    for i in range(n):\n        # If the current car is on the left side, add it to the left_cars list\n        if i % 2 == 0:\n            left_cars.append(i)\n        # If the current car is on the right side, add it to the right_cars list\n        else:\n            right_cars.append(i)\n\n    # Iterate over the left and right cars again\n    for i in range(n):\n        # If the current car is on the left side and it has not collided yet\n        if i in left_cars and i not in collision_count:\n            collision_count += 1\n\n    # Return the number of collisions\n    return collision_count"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l if x!= 0]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    Check if there are two distinct elements in the list that sum to zero.\n    \"\"\"\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    # Convert the input number to base-10\n    ten_power = 10 ** (len(str(base)) - len(str(x)))\n    base_x = str(x)\n    if base_x.count(str(base)) == len(base_x):\n        return base_x\n    else:\n        return base_x.replace(str(base), str(base) + ten_power)"}
{"task_id": "HumanEval/45", "completion": "def triangle_perimeter(a, h):\n    \"\"\"Given length of a side and high return perimeter for a triangle.\n    >>> triangle_perimeter(5, 3)\n    25.0\n    \"\"\"\n\n    return (a * (h + 2)) / 4"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a = fib4(n-1)\n        b = fib4(n-2)\n        c = fib4(n-3)\n        d = fib4(n-4)\n        return a + b + c + d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n\n    Args:\n        l: A list of elements.\n\n    Returns:\n        The median of the elements in the list.\n\n    Example:\n        >>> median([3, 1, 2, 4, 5])\n        3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n        15.0\n    \"\"\"\n    # Sort the list in non-decreasing order\n    l = sorted(l)\n\n    # If the list has only one element, return that element\n    if len(l) == 1:\n        return l[0]\n\n    # If the list has more than one element but less than three,\n    # it must be a single median element\n    if len(l) < 3:\n        return l[0]\n\n    # If the list has exactly three elements, return the median of\n    # the first three elements\n    if len(l) == 3:\n        return (l[0] + l[1] + l[2]) / 3\n\n    # If the list has more than three elements, it must have at\n    # least one element that is an outlier (i.e., not close to\n    # the median). Therefore, we will consider the list to be\n    # \"balanced\" if it has at most three outliers and \"unbalanced\"\n    # otherwise.\n    balanced = len(l) <= 3\n\n    # If the list is balanced, we can simply return the median of\n    # the first three elements.\n    if balanced:\n        return (l[0] + l[1] + l[2]) / 3\n\n    # If the list is unbalanced, we will first try to find the\n    # minimum and maximum elements. If these are far enough\n    # apart, we will return the median of the first three\n    # elements. Otherwise, we will return the median of the entire\n    # list.\n    min_value, max_value = l[0], l[-1]\n\n    for value in l["}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    if len(text) < 2:\n        return True\n    for i in range(len(text)):\n        if text[i:i+2]!= text[::-1][i+2:]:\n            return False\n    return True"}
{"task_id": "HumanEval/49", "completion": "def euclid(a: int, b: int) -> int:\n    # Initialize gcd and denom\n    gcd = a\n    denom = b\n\n    # Check if b is divisible by a\n    while b % a == 0:\n        # Set a to the current value of b\n        a = b\n        # Set b to the current value of denom\n        denom = b\n\n    # Return the final value of gcd\n    return gcd"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    char_pos = {\n        \"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6,\n        \"g\": 7, \"h\": 8, \"i\": 9, \"j\": 10, \"k\": 11, \"l\": 12,\n        \"m\": 13, \"n\": 14, \"o\": 15, \"p\": 16, \"q\": 17, \"r\": 18,\n        \"s\": 19, \"t\": 20, \"u\": 21, \"v\": 22, \"w\": 23, \"x\": 24,\n        \"y\": 25, \"z\": 26\n    }\n    result = \"\"\n    for char in"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    Removes vowels from a string.\n\n    Args:\n        text: A string containing the text to remove vowels from.\n\n    Returns:\n        A string with the vowels removed.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(text.lower().replace(vowels, ''))"}
{"task_id": "HumanEval/52", "completion": ""}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Adds two integers and returns their sum.\n\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n\n    :param s0: The first string.\n    :param s1: The second string.\n    :return: True if the two strings have the same characters, False otherwise.\n    \"\"\"\n\n    # Create a set of characters for the first string\n    char_set = set(s0)\n\n    # Create a set of characters for the second string\n    char_set2 = set(s1)\n\n    # Check if the two sets have the same characters\n    return char_set == char_set2"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    for op in brackets:\n        if op!= \">\":\n            return False\n    return True"}
{"task_id": "HumanEval/57", "completion": ""}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    \"\"\"\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    if n < 2:\n        return 2\n    factors = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for num in factors:\n        if n % num == 0:\n            return num\n    return 2"}
{"task_id": "HumanEval/60", "completion": ""}
{"task_id": "HumanEval/61", "completion": "    def test_correct_bracketing(self):\n        # Test case 1: A string with only open parentheses\n        self.assertTrue(correct_bracketing(\"(\"))\n        \n        # Test case 2: A string with a mix of open and closing parentheses\n        self.assertTrue(correct_bracketing(\"()\"))\n        \n        # Test case 3: A string with multiple pairs of open and closing parentheses\n        self.assertTrue(correct_bracketing(\"(()())\"))\n        \n        # Test case 4: A string with an"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    result = []\n    for x in xs:\n        if x == 0:\n            result.append(1)\n        else:\n            result.append(sum(xs[:i+1] * (x**i) for i in range(1, len(xs)+1)))\n    return result"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": ""}
{"task_id": "HumanEval/65", "completion": ""}
{"task_id": "HumanEval/66", "completion": "    def test_digitSum(self):\n        self.assertEqual(digitSum(\"\"), 0)\n        self.assertEqual(digitSum(\"abAB\"), 131)\n        self.assertEqual(digitSum(\"abcCd\"), 67)\n        self.assertEqual(digitSum(\"helloE\"), 69)\n        self.assertEqual(digitSum(\"woArBld\"), 131)\n        self.assertEqual(digitSum(\"aAaaaXa\"), 153)\n"}
{"task_id": "HumanEval/67", "completion": "def merge_sort(numbers):\n    # base case\n    if not numbers:\n        return\n\n    # divide the list into two halves\n    low, high = 0, len("}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_val = -1\n    max_freq = -1\n    for val in lst:\n        if val > 0 and val!= max_val and max_freq < val:\n            max_val = val\n            max_freq = max_freq + 1\n    return max_val"}
{"task_id": "HumanEval/70", "completion": ""}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a + b > c) or (a + c > b) or (b + c > a):\n        return -1\n    else:\n        area = (base * height) / 2\n        return round(area, 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    \"\"\"\n    Returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Args:\n        q (list): A list of integers representing the object's weight.\n        w (int): The maximum possible weight of the object.\n\n    Returns:\n        bool: True if the object q will fly, and False otherwise.\n    \"\"\"\n    # Check if the list is balanced\n    if len(q) == len(sorted(q)):\n        # Check if the sum of the elements is less than or equal the maximum possible weight\n        if sum(q) <= w:\n            return True\n    return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    differences = {}\n    for i in range(len(arr)-1):\n        if arr[i]!= arr[i+1]:\n            differences[arr[i]] = arr[i+1]\n    return len(differences)"}
{"task_id": "HumanEval/74", "completion": ""}
{"task_id": "HumanEval/75", "completion": "def sieve_of_eratosthenes(n):\n    # Create a list of prime numbers up to n\n    prime_numbers = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        # If prime_numbers[p] is not changed, then it is a prime number\n        if (p * p) % p == 0:\n            prime_numbers[p] = False\n        p += 1\n\n    # Return the list of prime numbers\n   "}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n   "}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a % 1000000007 == 0:\n        return True\n    for i in range(1000000006, 1000000000):\n        if a % i == 0:"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num"}
{"task_id": "HumanEval/79", "completion": "def test_decimal_to_binary():\n    # Test case 1: Input a decimal number with only zeroes\n    assert decimal_to_binary(\"0\") == \"db\"\n\n    # Test case 2: Input a decimal number with only ones\n    assert decimal_to_binary(\"1\") == \"db\"\n\n    # Test case 3: Input a decimal number with a mix of zeroes and ones\n    assert decimal_to_binary(\"11\") == \"db1\"\n\n    # Test case 4: Input a decimal number with a mix of zeroes and ones\n    assert decimal_to_binary(\"111\") == \"db11\"\n\n    # Test case 5: Input a decimal number with a mix of zeroes and ones\n    assert decimal_to_binary(\"1111\") == \"db111\"\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    length = len(s)\n    distinct_count = 0\n\n    for i in range(0, length - 1):\n        if s[i] == s[i + 1]:\n            distinct_count += 1\n            if distinct_count == 2:\n                return False\n        else:\n            distinct_count = 0\n\n    return distinct_count >= 3"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = {}\n    for gpa in grades:\n        if gpa in letter_grades:\n            letter_grades[gpa] = max(letter_grades[gpa], letter_grades[gpa] + (gpa - letter_grades[gpa]) / 10)\n        else:\n            letter_grades[gpa] = max(letter_grades[gpa], 1.7 + (gpa - 1.7) / 10)\n    return letter_grades.values()"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"\n    Returns True if the string length is a prime number or False otherwise\n    \"\"\"\n    # Check if the string is empty\n    if len(string) == 0:\n        return True\n\n    # Check if the string is a single character\n    if len(string) == 1:\n        return True\n\n    # Check if the string is a prime number\n    for i in range(2, int(string)**0.5):\n        if string % i == 0:\n            return False\n\n    # If none of the above conditions are met, return True\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(n):\n        if i == 1 or i == n-1:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    sum = 0\n    binary = '0'\n    for i in range(N):\n        sum += bin(i)\n        binary = binary + str(i)\n    return binary[0]\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return lst + [x for x in lst if x % 2 == 0]"}
{"task_id": "HumanEval/86", "completion": "def remove_vowels(s):\n    result = \"\"\n    for char in s:\n        if (char.lower() not in \"aeiou\") and (char.lower() not in \"aeiou\") and (char.lower() not in \"aeiou\"):\n            result += char\n    return result"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    Given a 2-dimensional data, as a nested list,\n    and an integer x, find integers in the list that are equal to x\n    and return a list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Parameters:\n    lst (List): A 2-dimensional list of integers.\n    x (int): An integer to find in the list.\n\n    Returns:\n    A list of tuples, where each tuple is a coordinate - (row, columns), starting with 0.\n    Example:\n    get_row([[1,2,3,4,5,6],\n              [1,2,3,4,1,6],\n              [1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Sort the rows in ascending order\n    rows = sorted(lst, key=lambda x: x[0])\n\n    # Find the indices of the elements that are equal to x\n    indices = [i for i, x in enumerate(rows) if x == x]\n\n    # Initialize an empty list to store the tuples\n    result = []\n\n    # Add the tuples to the result list, where the row and column indices are in descending order\n    for i in indices[::-1]:\n        row = rows[i]\n        column = i[1]\n        result.append((row[0], column))\n\n    return result"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum(first index value, last index value) is odd,\n    or sort it in descending order if the sum(first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # Create a new array to store the sorted elements\n    sorted_array = [x for x in array if x >= 0]\n\n    # Check if the array has an odd number of elements\n    if len(array) % 2 == 1:\n        # Sort the elements in ascending order\n        sorted_array.sort()\n    else:\n        # Sort the elements in descending order\n        sorted_array.sort(reverse=True)\n\n    return sorted_array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.upper() in \"AEIOUaeiou\":\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/90", "completion": "def largest(lst):\n    if not lst:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        largest = lst[0]\n        for num in lst[1:]:\n            if num > largest:\n                largest = num\n        return largest"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    word_count = 0\n    word_list = set(S.split())\n    for word in S:\n        if word in word_list:\n            word_count += 1\n    return word_count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    return [i == x + y + z for i in [x, y, z]]"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    message = ''.join(sorted(message))\n    for i, c in enumerate(message):\n        if c in 'aeiou':\n            message = message.replace(c, chr(c.index + 2))\n    return message.replace(' ', '')"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_"}
{"task_id": "HumanEval/96", "completion": "def sieve_of_eratosthenes(n):\n    sieve = [True] * (n+1)\n    for i in range(1, n+1):\n        if sieve[i]:\n            for j in range(i+1, n+1):\n                sieve[j] = False\n    return [i for i in range(1, n+1) if sieve[i]]"}
{"task_id": "HumanEval/97", "completion": ""}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    vowels = 'aeiouAEIOU'\n\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/99", "completion": "def string_to_float(string):\n    return float(string)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    levels = [n]\n    while n > 0:\n        if n % 2 == 0:\n            levels.append(levels[-1] + 1)\n        else:\n            levels.append(levels[-1] + 2)\n        n = n // 2\n    return levels\n"}
{"task_id": "HumanEval/101", "completion": "def \\_\\_init\\_\\_(self, words):\n \"\"\"\n Initializes the WordNetLemmatizer\n \n Args:\n words: A string of words separated by commas or spaces.\n \n \"\"\"\n"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return max(x, y)\n    else:\n        return min(x, y)\n"}
{"task_id": "HumanEval/103", "completion": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)"}
{"task_id": "HumanEval/104", "completion": "def merge(m, n):\n    merged = []\n    while m and n:\n        if m:\n            merged.append(m.pop())\n        n.pop()\n    merged.append(n.pop())\n    return merged"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # sort the array\n    arr = sorted(arr)\n    # get the indices of the numbers between 1 and 9\n    one_to_nine = [i for i in range(1, 10) if arr[i] >= 1 and arr[i] <= 9]\n    # get the names of the numbers from the list\n    names = list(range(1, 10))\n    # join the names and indices together\n    result = ''.join([names[j] for j in one_to_nine])\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(i):\n    if i == 0:\n        return 1\n    else:\n        return i * factorial(i-1)\n"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n\n    count = 0\n    for num in arr"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if len(arr) == 0:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines whether it is possible to perform an exchange of elements\n    between two lists of numbers to make lst1 a list of only even numbers.\n    \"\"\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= lst2[i] % 2:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": ""}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result_str = \"\"\n    for char in s:\n        if char not in c:\n            result_str += char\n    return result_str, True\n\n\ndef reverse_delete(s, c):\n    result_str = \"\"\n    for char in s:\n        if char not in c:\n            result_str += char\n    return result_str, False"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    count = 0\n    for i in lst:\n        count += (int(i) % 2)\n    return [f\"the number of odd elements {count} in the str{i} of the input\" for i in lst]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for num in nums:\n        min_sum = min(min_sum, num)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # Initialize an empty list to store the number of times each well needs to be filled\n    well_count = [0] * len(grid)\n    \n    # Loop through each row of the grid and fill the wells in that row\n    for i in range(len(grid)):\n        row_count = 0\n        # Loop through each well in the current row\n        for j in range(len(grid[i])):\n            # If the well is already full, move to the next well\n            if grid[i][j] == 1:\n                continue\n            # If the well is empty, fill it with water from the corresponding bucket\n            well_count[i][j] += 1\n            # If the well is now full, move to the next well\n            if grid[i][j] == 1:\n                continue\n            # Otherwise, backtrack by resetting the well count\n            row_count += 1\n            well_count[i][j] = 0\n    \n    # Return the total number of times each well needs to be filled\n    return row_count\n"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    # Helper function to sort an array based on the number of ones in their binary representation\n    def binary_sort(arr):\n        low, mid = 0, len(arr) // 2\n        while low <= mid:\n            # Check if the left half of the array has more ones than the right half\n            has_more_ones = (arr[mid] == 1 and arr[mid-1] == 0)\n            if has_more_ones:\n                # Swap the elements if the left half has more ones\n                arr[mid], arr[mid-1] = arr[mid-1], arr[mid]\n            mid += 1\n        return arr\n\n    # Sort the array based on the binary representation\n    return binary_sort(arr)\n"}
{"task_id": "HumanEval/117", "completion": "def count_word_frequency(text):\n    word_list = text.split()\n    word_count = {}\n    for word in word_list:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"Finds the closest vowel that stands between two consonants from the right side of the word.\n\n    Args:\n        word (str): The word to search for vowels.\n\n    Returns:\n        str: The closest vowel that stands between two consonants from the right side of the word, or an empty string if no vowel is found.\n    \"\"\"\n    vowels = set(\"aeiouAEIOU\")\n    start_idx = len(word) - 1\n    end_idx = 0\n\n    for i in range(start_idx, len(word)):\n        if word[i] in vowels:\n            end_idx = i\n            break\n\n    if end_idx - start_idx + 1 > 1:\n        return word[start_idx:end_idx]\n    else:\n        return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    # Check if the number of open and close parentheses are the same\n    if len(lst)!= 2:\n        return 'No'\n    \n    # Check if the open and close parentheses are in the correct order"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n   "}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    if not lst:\n        return 0\n    odd_positions = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1:\n            odd_positions += lst[i]\n    return odd_positions"}
{"task_id": "HumanEval/122", "completion": "def test_add_elements():\n    arr = [111,21,3,4000,5,6,7,8,9]\n    k = 4\n    result = add_elements(arr, k)\n    print(\"Expected:\", 24)\n    print(\"Got:\", result)\n    assert result == 24\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz("}
{"task_id": "HumanEval/124", "completion": "def get_month_name(month):\n    return {'January': 'Jan', 'February': 'Feb', 'March': 'Mar', 'April': 'Apr', 'May': 'May', 'June': 'Jun', 'July': 'Jul', 'August': 'Aug', 'September': 'Sep', 'October': 'Oct', 'November': 'Nov', 'December': 'Dec'}[month]"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    if not words:\n        return [ord(c) for c in txt if c.islower() and (ord('a') <= ord(c) <= ord('z'))]\n    return words\n"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5,"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    \"\"\"\n    You are given two intervals, where each interval is a pair of integers. \n    For example, interval = (start, end) = (1, 2). The given intervals are closed \n    which means that the interval (start, end) includes both start and end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise,"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum = 0\n    for element in arr:\n        sign = element if element > 0 else -1\n        product *= sign\n        sum += sign\n    return sum * product"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # Create a set to store the values of each cell on the minimum path\n    # and a list to store the indices of the cells on the minimum path\n    # and a list to store the values of the cells on the minimum path\n    min_path = []\n    min_path_values = set()\n    min_path_indices = []\n    for i in range(k):\n        # Create a queue to store the cells that have not been visited\n        # yet and have the value i\n        # and a dictionary to store the cells that have been visited\n        # and their current value\n        queue = []\n        visited = {}\n        for row in range(grid[0][0], grid[0][0]+grid[1][0]+1, grid[0][0]-1):\n            for col in range(grid[0][1], grid[0][1]+grid[1][1]+1, grid[0][1]-1):\n                if (row, col) not in visited:\n                    # If the cell has not been visited and has the value i\n                    # add it to the queue and mark it as visited\n                    queue.append((row, col))\n                    visited[(row, col)] = i\n            for row in range(grid[0][0], grid[0][0]+grid[1][0]+1, grid[0][0]-1):\n                for col in range(grid[0][1], grid[0][1]+grid[1][1]+1, grid[0][1]-1):\n                    if (row, col) in visited:\n                        # If the cell has been visited and has the value i\n                        # add it to the queue and mark it as visited\n                        queue.append((row, col))\n                        visited[(row, col)] = i\n        # Remove the cells from the queue that have the value i\n        # and have been visited\n        for row in range(grid[0][0], grid[0][0]+grid[1][0]+1, grid[0][0]-1):\n            for col in range(grid[0][1], grid[0][1]+grid[1][1]+1"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n < 1:\n        return []\n    elif n == 1:\n        return [3]\n    else:\n        return [1] + tri(n-1) + tri(n-2) + tri(n+1)"}
{"task_id": "HumanEval/131", "completion": "def sum_of_numbers(numbers):\n    return sum(numbers)\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    nested = {'[': ']', ']': '['}\n    for char in string:\n        if char in nested:\n            if nested[char]!= nested[char + ']':\n                return True\n    return False"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    sum = 0\n    for num in lst:\n        num = round(num)\n        sum += num ** 2\n    return sum"}
{"task_id": "HumanEval/134", "completion": "def split_text_into_words(text):\n    words = re.split(r'\\s+', text)\n    return [word for word in words if word]"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    largest_index = -1\n    current_index = 0\n    \n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            current_index = i + 1\n        elif arr[i] > arr[i + 1]:\n            largest_index = i + 1\n    \n    if largest_index == len(arr) - 1:\n        return largest_index\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    largest = max(lst)\n    smallest = min(lst)\n    return (largest, smallest)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return b\n        elif a <"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n < 0 or n > 100:\n        return False\n\n    if n % 2 == 0 and n % 4 == 0:\n        return True\n\n    for i in range(1, n // 2):\n        if n % i == 0:\n            return False\n\n    return True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    return n * (n - 1) * (n - 2) *... * 1 * (n - (n - 1)) * (n - (n - 2)) *... * 1"}
{"task_id": "HumanEval/140", "completion": ""}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0 or i % 4 == 0:\n            if i % 3 == 0:\n                result += x ** 2\n            else:\n                result += x ** 3\n        else:\n            result += x ** 2\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if len(word) % 2!= 0:\n            result += word\n    return result"}
{"task_id": "HumanEval/144", "completion": "def test_simplify():\n    assert simplify(\"1/5\", \"5/1\") == True\n    assert simplify(\"1/6\", \"2/1\") == False\n    assert simplify(\"7/10\", \"10/2\") == False\n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    # Create a dictionary to store the sum of digits for each number\n    # and their index in the original list\n    digsum_dict = {}\n    for i, num in enumerate(nums):\n        digsum = sum(int(digit) for digit in str(num))\n        digsum_dict[num] = i\n\n    # Sort the list of numbers based on the sum of digits\n    sorted_nums = sorted(nums, key=lambda x: digsum_dict[x])\n\n    return sorted_nums\n"}
{"task_id": "HumanEval/146", "completion": "def merge(nums):\n    max_length = len(nums[0])\n    for i in range(1, len(nums)):\n        merge(nums[0])\n    for j in range(i, len(nums)):\n        nums[j] = max(nums[j], key=lambda x: merge(x[0]))\n    for num in nums"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [1] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i * i - i + 1) % 3 == (j * j - j + 1) % 3 == (k * k - k + 1) % 3 == 0:\n                    a[i] += a[j] + a[k]\n    return len(a)"}
{"task_id": "HumanEval/148", "completion": "def distance(x, y):\n    return abs(x - y)"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    numbers = [i for i in lst if i.is_integer() and i % 2 == 1]\n    return sum(numbers)**2"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    score_arrays = [game[i] for i in range(len(game)) if game[i]!= 0]\n    guess_arrays = [guess[i] for i in range(len(guess)) if guess[i]!= 0]\n    \n    differences = []\n    for i in range(len(score_arrays)):\n        if guess_arrays[i] == score_arrays[i]:\n            differences.append(0)\n        else:\n            difference = abs(score_arrays[i] - guess_arrays[i])\n            differences.append(difference)\n    \n    return differences"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"Given a class name and a list of extensions, returns the strongest extension.\n\n    Args:\n        class_name: str, name of the class.\n        extensions: list, list of extensions to load.\n\n    Returns:\n        str, name of the strongest extension.\n    \"\"\"\n    # Calculate the strength of each extension\n    extension_strengths = [len(ext) - len(ext.lower()) for ext in extensions]\n\n    # Find the extension with the highest strength\n    max_index = sorted(extension_strengths, reverse=True)[0]\n    max_extension = extensions[max_index]\n\n    # Return the strongest extension\n    return class_name + '.' + max_extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if a == b:\n        return True\n    for i in range(len(b)):\n        if b.startswith(a + \"d\") or b.startswith(a + \"de\"):\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": ""}
{"task_id": "HumanEval/156", "completion": ""}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if (a/b) == (c/b) or (a/c) == (c/b):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/158", "completion": "def count_words(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    eaten_carrots = 0\n    remaining_carrots = remaining\n    while remaining_carrots > 0:\n        eaten_carrots += remaining_carrots\n        remaining_carrots = need - eaten_carrots\n    return [eaten_carrots, remaining_carrots]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = ''.join(operator)\n    operands = [x for x in operand if x > 0]\n    result = 0\n    for term in expression[::-1]:\n        if term[0] == '-':\n            result -= operands.index(int(term[1]))\n        else:\n            result += operands.index(int(term[1]))\n    return result"}
{"task_id": "HumanEval/161", "completion": "def reverse_string(s):\n    \"\"\"Reverse the string s.\n    \"\"\"\n    return s[::-1]\n"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if text == \"\":\n        return None"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):"}
