{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    result = []\n    current = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n        current += char\n        if not stack:\n            result.append(current.replace(' ', ''))\n            current = ''\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(num - mean) for num in numbers]\n    return sum(absolute_deviations) / len(absolute_deviations)"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [x for pair in zip(numbers, [delimeter] * (len(numbers) - 1) + [0]) for x in pair]"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    return [max([paren_string.count('(' , i, j) - paren_string.count(')' , i, j) for i in range(len(paren_string))]) for j in range(len(paren_string)) if paren_string[j] == ' ']"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    s = sum(numbers)\n    p = 1\n    for n in numbers:\n        p *= n\n    return (s, p) if numbers else (0, 1)"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        max_list.append(current_max)\n    return max_list"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    return [notes[note] for note in music_string.split()]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    return sum(1 for i in range(len(string)-len(substring)+1) if string[i:i+len(substring)] == substring)"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers)-1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    n = len(xs)\n    if n % 2 != 0 or xs[-1] == 0:\n        raise ValueError(\"Invalid input\")\n    a = xs[-1]\n    b = xs[-2]\n    for i in range(n - 2):\n        if i % 2 == 0:\n            a += xs[i]\n        else:\n            b += xs[i]\n    return -b / (2 * a)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    return [sorted(l[i:i+3]) if i%3 == 0 else l[i] for i in range(len(l))]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    sorted_even_values = sorted(even_values)\n    l_prime = l.copy()\n    for i in even_indices:\n        l_prime[i] = sorted_even_values.pop(0)\n    return l_prime"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            return fibonacci(num - 1) + fibonacci(num - 2)\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(fibonacci(num)):\n            count += 1\n        num += 1\n    return fibonacci(num - 1)"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    return any(sum([l[i], l[j], l[k]]) == 0 for i in range(len(l)) for j in range(i+1, len(l)) for k in range(j+1, len(l)))"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    return n*(n-1)//2"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(3, n+1):\n            d = a + b + c + d\n            a, b, c = b, c, d\n        return d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2])/2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return pow(2, n, p) if n else 1"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        a, b, c = 1, 1, 0\n        for i in range(3, n+1):\n            c = a + b + c\n            a, b = b, c\n        return c"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    s = s.lower()\n    if s[-1] == 'y':\n        vowels.append('y')\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_nodes = [node for node in arr if node % 2 == 0]\n    if not even_nodes:\n        return []\n    min_even = min(even_nodes)\n    min_even_index = arr.index(min_even)\n    return [min_even, min_even_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    for i in sorted(set(lst), reverse=True):\n        if lst.count(i) >= i > 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5 if a + b > c and a + c > b and b + c > a else -1\n    return round(area, 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    count = 0\n    for i in range(len(arr)//2):\n        if arr[i] != arr[-i-1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for prime in primes:\n        if a % prime == 0:\n            count += 1\n            if count == 3:\n                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or n != 1 and x % n == 0 and is_simple_power(x // n, n))"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return (a**(1/3)).is_integer()"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s)-2))"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    return ['A+' if gpa == 4.0 else 'A' if gpa > 3.7 else 'A-' if gpa > 3.3 else 'B+' if gpa > 3.0 else 'B' if gpa > 2.7 else 'B-' if gpa > 2.3 else 'C+' if gpa > 2.0 else 'C' if gpa > 1.7 else 'C-' if gpa > 1.3 else 'D+' if gpa > 1.0 else 'D' if gpa > 0.7 else 'D-' if gpa > 0.0 else 'E' for gpa in grades]"}
{"task_id": "HumanEval/82", "completion": "import math\n\ndef prime_length(string):\n    return all(string.count(char) == 1 for char in string) and all(string.count(char) != 0 for char in string) and all(string.count(char) != 2 for char in string) and all(string.count(char) != 3 for char in string) and all(string.count(char) != 5 for char in string) and all(string.count(char) != 7 for char in string) and len(string) > 1 and all(string.count(char) != 11 for char in string) and all(string.count(char) != 13 for char in string) and all(string.count(char) != 17 for char in string) and all(string.count(char) != 19 for char in string) and all(string.count(char) != 23 for char in string) and all(string.count(char) != 29 for char in string) and all(string.count(char) != 31 for char in string) and all(string.count(char) != 37 for char in string) and all(string.count(char) != 41 for char in string) and all(string.count(char) != 43 for char in string) and all(string.count(char) != 47 for char in string) and all(string.count(char) != 53 for char in string) and all(string.count(char) != 59 for char in string) and all(string.count(char) != 61 for char in string) and all(string.count(char) != 67 for char in string) and all(string.count(char) != 71 for char in string) and all(string.count(char) != 73 for char in string) and all(string.count(char) != 79 for char in string) and all(string.count(char) != 83 for char in string) and all(string.count(char) != 89 for char in string) and all(string.count(char) != 97 for char in string) and all(string.count(char) != 101 for char in string) and all(string.count(char) != 103 for char in string) and all(string.count(char) != 107 for char in string) and all(string.count(char) != 109 for char in string) and all(string.count(char) != 113 for char in string) and all(string.count(char) != 127 for char in string) and all(string.count(char) != 131 for char in string) and all(string.count(char) != "}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    return [(i, j) for i in range(len(lst)) for j in sorted(range(len(lst[i])), reverse=True) if lst[i][j] == x]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    return sorted(array, reverse=(array and (array[0]+array[-1])%2==0))"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    return ''.join([chr((ord(c) - 97 + 2 * 2) % 26 + 97) for c in s])"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst = list(set(lst))\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or y == x + z or z == x + y)"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded = ''\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded += chr(ord(char)+2)\n            else:\n                if char.islower():\n                    encoded += char.upper()\n                else:\n                    encoded += char.lower()\n        else:\n            encoded += char\n    return encoded"}
{"task_id": "HumanEval/94", "completion": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    \n    return sum(int(digit) for digit in str(max_prime)) if max_prime != 0 else 0"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n < 2:\n        return []\n    primes = [2]\n    i = 3\n    while i < n:\n        if all(i % p != 0 for p in primes):\n            primes.append(i)\n        i += 2\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return abs(a % 10 * b % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    vowels = set(['A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = []\n    stones = n\n    for i in range(n):\n        pile.append(stones)\n        if n % 2 == 0:\n            stones += 2\n        else:\n            stones += 1\n    return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return re.findall(r'\\w+', s)"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i%2==0]+[-1])"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    num_names = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [num_names[num] for num in reversed_arr]\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n    return sum(1 for num in arr if sum_digits(num) > 0)"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted(arr):\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if sum(x % 2 == 1 for x in lst1) > sum(x % 2 == 1 for x in lst2):\n        return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    max_count = max(counts.values())\n    return {letter: count for letter, count in counts.items() if count == max_count}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    s = ''.join([char for char in s if char not in c])\n    return (s, s == s[::-1])"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [\"the number of odd elements in the string {} of the input.\".format(i) for i in lst]"}
{"task_id": "HumanEval/114", "completion": "import math\n\ndef minSubArraySum(nums):\n    min_sum = math.inf\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum, 0)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    num_buckets = 0\n    for row in grid:\n        num_buckets += math.ceil(sum(row)/capacity)\n    return num_buckets"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for c in word if c.isalpha() and c.lower() not in 'aeiou')\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    word = word.strip(consonants)\n    if len(word) < 2:\n        return \"\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    s = ''.join(lst)\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif not stack:\n            return 'No'\n        else:\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr)[-k:]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum([x for x in arr[:k] if abs(x) < 100])"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted(list(set(filter(lambda x: x % 2 == 1, collatz)) if n != 1 else [1]))"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    try:\n        month, day, year = date.split('-')\n        month = int(month)\n        day = int(day)\n        year = int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n                if day < 1 or day > 29:\n                    return False\n            else:\n                if day < 1 or day > 28:\n                    return False\n        else:\n            return False\n        return True\n    except:\n        return False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    if len(words) == 1:\n        words = txt.split(',')\n    if len(words) == 1:\n        count = sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)\n        return count\n    return words"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    return lst == sorted(set(lst)) and lst == sorted(lst)"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    if intersection_start > intersection_end:\n        return \"NO\"\n    intersection_length = intersection_end - intersection_start + 1\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_prod = 1\n    mag_sum = 0\n    for num in arr:\n        sign = 0 if num == 0 else num // abs(num)\n        sign_prod *= sign\n        mag_sum += abs(num)\n    return sign_prod * mag_sum"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    visited = set()\n    heap = [(grid[i][j], [(i, j)]) for i in range(n) for j in range(n)]\n    heapq.heapify(heap)\n    while heap:\n        val, path = heapq.heappop(heap)\n        if len(path) == k:\n            return [grid[i][j] for i, j in path]\n        i, j = path[-1]\n        for ni, nj in ((i+1,j), (i-1,j), (i,j+1), (i,j-1)):\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                visited.add((ni, nj))\n                heapq.heappush(heap, (grid[ni][nj], path + [(ni, nj)]))"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    seq = [3]\n    if n == 0:\n        return []\n    elif n == 1:\n        return seq\n    else:\n        seq.append(1)\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                seq.append(1 + i//2)\n            else:\n                seq.append(seq[-1] + seq[-2] + seq[-3])\n        return seq"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if len(odd_digits) == 0:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    return '[' in stack"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum([int(x)**2 for x in lst])"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.split()[-1]) == 1:\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n    if not neg_ints:\n        max_neg = None\n    else:\n        max_neg = max(neg_ints)\n    if not pos_ints:\n        min_pos = None\n    else:\n        min_pos = min(pos_ints)\n    return (max_neg, min_pos)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if type(a) == type(b):\n        if type(a) == int or type(a) == float:\n            if a > b:\n                return a\n            elif b > a:\n                return b\n            else:\n                return None\n        elif type(a) == str:\n            a = a.replace(\",\", \".\")\n            b = b.replace(\",\", \".\")\n            if float(a) > float(b):\n                return a\n            elif float(b) > float(a):\n                return b\n            else:\n                return None\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return n % 8 == 0 or (n - 4) % 8 == 0"}
{"task_id": "HumanEval/139", "completion": "from math import factorial\n\ndef special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    count = 0\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 2:\n                new_text = new_text[:-1] + \"-\"\n        else:\n            count = 0\n        new_text += char\n    return new_text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]*\\.[txt|exe|dll]{3}$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum([x**2 if i%3==0 else x**3 if i%4==0 else x for i,x in enumerate(lst)])"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result = x_num * n_num / (x_den * n_den)\n    return result.is_integer()"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    return sorted(nums, key=lambda num: (digit_sum(num), nums.index(num)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    return len([num for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']])"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i*i-i+1 for i in range(1,n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1,n-1):\n            for k in range(j+1,n):\n                if (a[i]+a[j]+a[k])%3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(sorted(planets[start+1:end], key=lambda x: planets.index(x)))"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "import math\n\ndef x_or_y(n, x, y):\n    return x if all(n % i != 0 for i in range(2, int(math.sqrt(n))+1)) and n > 1 else y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0) * 2"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i]-guess[i]) if game[i]!=guess[i] else 0 for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        return ext.count(ext.upper()) - ext.count(ext.lower())\n    strongest = max(extensions, key=lambda ext: (strength(ext), extensions.index(ext)))\n    return f\"{class_name}.{strongest}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if num < 0:\n        return (odd_count, even_count)\n    else:\n        return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    def count_unique(word):\n        return len(set(word))\n\n    max_word = \"\"\n    max_count = 0\n\n    for word in words:\n        unique_count = count_unique(word)\n        if unique_count > max_count:\n            max_word = word\n            max_count = unique_count\n        elif unique_count == max_count and word < max_word:\n            max_word = word\n\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    eaten = min(need, remaining + number)\n    remaining = max(0, remaining - (eaten - number))\n    return [eaten, remaining]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    pass"}
