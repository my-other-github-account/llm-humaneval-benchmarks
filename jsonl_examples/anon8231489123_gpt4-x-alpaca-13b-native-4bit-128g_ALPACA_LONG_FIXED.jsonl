{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\""}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    return ['()', '(())', '(()())']"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\n\ndef main():\n    number = 3.5\n    decimal_part = truncate_number(number)\n    print(f'The decimal part of {number} is {decimal_part}.')\n\n"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations):\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\""}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\""}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((()))')\n    [2, 3]\n    \"\"\"\n\n\ndef main():\n    print(parse_nested_parens('(()()) ((()))')\n\n"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\""}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers):\n    return sum, product"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    return [max(number, i) for i, number in enumerate(numbers)]"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n\n\ndef main():\n    print(make_palindrome(''))\n    print(make_palindrome('cat'))\n    print(make_palindrome('cata'))"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\""}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n    return None"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a, b):\n    if a > b:\n        return greatest_common_divisor(b, a)\n    else:\n        return a"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\""}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\""}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\n\ndef main():\n    print(count_distinct_characters('Jerry'))\n"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string):\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string, substring):\n    return string.count(substring)"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers):\n    return sorted(numbers.split(' '))"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to\n    each other and return them in order (smaller number, larger number).\n    \"\"\"\n\n    # code to find closest two numbers\n\n    return closest_two_numbers\n\n"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\""}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\""}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\""}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n\ndef main():\n    print(largest_divisor(15))\n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [n]"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\""}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\ndef main():\n    print(flip_case('Hello'))\n"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n\n\ndef main():\n    strings = ['a', 'b', 'c']\n    print(concatenate(strings))\n"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n\n    Args:\n        strings (List[str]): The input list of strings.\n        prefix (str): The prefix to match.\n\n    Returns:\n        List[str]: The filtered list of strings.\n    \"\"\"\n\n    return [string for string in strings if string.startswith(prefix)]```"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l):\n    return [value for value in l if value > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs, x):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs):\n    return round(poly(xs, -0.5), 2)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    return [i for i in l if i % 3!= 0] + [i for i in l if i % 3 == 0 and sorted(l[i])]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n\n\ndef main():\n    unique_list = [5, 3, 5, 2, 3, 3, 9, 0, 123]\n    unique_result = unique(unique_list)\n    print(unique_result)\n"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n\n    Args:\n        l (list): A list of elements.\n\n    Returns:\n        int or None: The maximum element in the list, or None if the list is empty.\n    \"\"\"\n\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\n    Args:\n        n (int): The integer to check for divisibility\n\n    Returns:\n        int: The count of 7s\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n % 11 == 0 or n % 13 == 0:\n        return 1\n    else:\n        return 0\n\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    return l\n"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    pass"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    if n < 0:\n        print('Incorrect input')\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return n\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    \"\"\"\n    if not l:\n        return False\n    return sum(x) == 0 for x in combinations(l, 3)]"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move in the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    return n * n\n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    return False\n\n\ndef main():\n    print(pairs_sum_to_zero([1, 3, 5, 0]))\n"}
{"task_id": "HumanEval/44", "completion": "def change_base(x, base):\n    return str(x % base)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n\n\ndef main():\n    a = 5\n    h = 3\n    print(triangle_area(a, h))\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n\ndef main():\n    l = [3, 1, 2, 4, 5]\n    print(median(l))\n"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n\ndef main():\n    print(is_palindrome('zbcd'))\n"}
{"task_id": "HumanEval/49", "completion": "def modp(n, p):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n\n    :param n: int\n    :param p: int\n    :return: int\n\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n    if n == 0:\n        return 1\n    if n < 0:\n        return modp(n, p)\n    return (p ** n) % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return s"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n\n    Arguments:\n        text {str} -- The input string.\n\n    Returns:\n        str -- The modified string without vowels.\n\n    Examples:\n        >>> remove_vowels('')\n        ''\n        >>> remove_vowels(\"abcdef\\nghijklm\")\n        'bcdf\\nghjklm'\n        >>> remove_vowels('abcdef')\n        'abcdf'\n        >>> remove_vowels('aaaaa')\n        ''\n        >>> remove_vowels('aaBAA')\n        'B'\n        >>> remove_vowels('zbcd')\n        'zbcd'\n    \"\"\"\n\n    return text.replace(r'[aeiou]', '')\n"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n\n    Arguments:\n        l {list} -- a list of integers\n        t {int} -- the threshold\n\n    Returns:\n        bool -- True if all numbers in the list are below the threshold, False otherwise\n\n    Examples:\n        >>> below_threshold([1, 2, 4, 10], 100)\n        True\n        >>> below_threshold([1, 20, 4, 10], 5)\n        False\n    \"\"\"\n\n    return all(num <= t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x, y):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0, s1):\n    if len(s0)!= len(s1):\n        return False\n    else:\n        for i in range(len(s0)):\n            if s0[i]!= s1[i]:\n                return False\n        return True"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n\ndef main():\n    print(fib(8))\n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets):\n    \"\"\"Returns True if every opening bracket has a corresponding closing bracket.\n\n    :param str brackets: A string of '<' and '>'.\n    :return: True if successful, False if not.\n    \"\"\"\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\""}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    \"\"\"Return sorted unique common elements for two lists.\n\n    :param l1: list\n    :param l2: list\n    :return: list\n\n    \"\"\"\n\n    return [value for value in l1 if value in l2]\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n\ndef main():\n    print(largest_prime_factor(2048))\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n\n    Arguments:\n        n {int}: the upper bound of the sum\n\n    Returns:\n        int: the sum of all numbers from 1 to n\n    \"\"\"\n    return n * (n + 1) / 2\n\n\ndef main():\n    print(sum_to_n(30))  # 465\n    print(sum_to_n(100))  # 5050\n    print(sum_to_n(5))  # 15\n    print(sum_to_n(10))  # 55\n    print(sum_to_n(1))  # 1\n\n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets):\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    return True if every opening bracket has a corresponding closing bracket."}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [derivative(x) for x in xs]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n < 0:\n        print('Incorrect input')\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    y_at_end = False\n    count = 0\n    for char in s:\n        if char == 'y' and not y_at_end:\n            count += 1\n            y_at_end = True\n        elif char in vowels:\n            count += 1\n        else:\n            y_at_end = False\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    if shift > len(str(x)) :\n        return x[::-1]\n    else:\n        return x + '0' * shift\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s)"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples = s.count('apples')\n    oranges = s.count('oranges')\n    mangoes = s.count('mangoes')\n    total = apples + oranges + mangoes\n    return total - apples - oranges"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    \"\"\"\n    return [2, 1]\n"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    return max(1, int(i)) for i in lst if i else -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    return [min(i, len(lst)-i-1) for i in range(len(lst))]"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a + b > c) or (a + c > b) or (b + c > a):\n        return -1\n    else:\n        return round(0.5 * (a + b + c), 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if not is_balanced(q) or sum(q) > w:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    return 0\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(set(str(i) for i in lst1)) < len(set(str(i) for i in lst2)):\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if n**int(x) == x:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 1:\n        return True\n    elif a == 2:\n        return False\n    elif a == -1:\n        return True\n    elif a == 64:\n        return True\n    elif a == 0:\n        return True\n    elif a == 180:\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n    if not num:\n        return 0\n    return sum(1 for char in num if char in 'ABCD')\n"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal) + 'db'\n\ndef bin(number):\n    return bin(number)\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3 or not all(s[i]!= s[i+3] for i in range(len(s)-3)):\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    # Create a dictionary to store the letter grades\n    letter_grade_dict = {\n        'A+': 4.0, 'A': 3.7, 'B': 3.3, 'C+': 2.7, 'C': 2.3, 'D+': 1.7, 'D': 1.3, 'E': 0.0\n    }\n\n    # Iterate through the list of GPAs\n    for gpa in grades:\n        # Get the corresponding letter grade\n        letter_grade = letter_grade_dict[gpa]\n\n        # Print the letter grade\n        print(letter_grade)\n\n    return letter_grade_dict"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if len(string) > 1:\n        for i in range(2, len(string)):\n            if string[i]!= string[i - 1] and string[i]!= string[i + 1]:\n                return False\n        return True\n"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    return 0"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    if 0 <= N <= 10000:\n        return '1' * (N - 1) + '0' * (N - 1)\n    else:\n        return '1' * (N - 1) + '0' * (N - 1)"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n\n    # code here\n\ndef main():\n    lst = [4, 2, 6, 7]\n    add(lst)\n    print(lst)\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n\n    return s\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    return [(x, y) for x, y in sorted(zip(x, lst)) for y in lst]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if sum(array[0], array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    return ''.join(rotated_alphabet[i] for i in s)\n\ndef main():\n    print(encrypt('Hello World'))\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    return None if len(lst) < 2 else min(lst)"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n\ndef main():\n    print(is_bored(\"Hello world\"))\n    print(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\n"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if (x + y == z) and (x <= y) and (x <= z):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n    return message.upper()\n"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    return_sum = 0\n    for num in lst:\n        if num > 1:\n            if num % 1 == 0:\n                return_sum += 1\n        else:\n            return_sum += 0\n    return return_sum\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    else:\n        for key in dict:\n            if not (key.islower() or key.isupper()):\n                return False\n        return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n    if n == 0:\n        return []\n    if n == 1:\n        return []\n    result = []\n    for i in range(2, n+1):\n        if i == n:\n            continue\n        if all(i % j!= 0 for j in range(2, i)):\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    if a > 0 and b > 0:\n        return a * b\n    else:\n        return 0"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\n    return 0"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    if value is None:\n        return value\n    if not isinstance(value, int) and not isinstance(value, float):\n        raise TypeError('Expected a string representing an integer or float, got:'+ value)\n    if value == '':\n        return 0\n    if value == '0':\n        return 0\n    if value.find('.') == -1:\n        return int(value)\n    else:\n        return float(value)\n"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n, n+1, n+2, n+3, n+4]\n    else:\n        return [n, n+1, n+3, n+5, n+7]\n"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return [w for w in s.split(', ') if w]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    if x > y:\n        return choose_num(y, x)\n\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        return bin(int(n) + int(m))\n\ndef bin(num):\n    return '0b' + bin_num(num).replace(1,'')\n\ndef bin_num(num):\n    return num.to_binary_string()\n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    return [1, 15, 33]"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    sorted_arr = [1, 1, 2, 2, 3, 4, 5, 8]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\ndef main():\n    arr = [1, -1, 55]\n    return [\"One\"]\n"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(i * i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    if n <= 1:\n        return (n, n)\n    else:\n        return (n, n % n)\n\n\ndef main():\n    n = int(input('Please enter a number: '))\n    print(even_odd_palindrome(n))\n\n"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    \"\"\"\n    return sum_of_digits(arr) > 0\n\n\ndef sum_of_digits(arr):\n    \"\"\"\n    Returns the sum of the first n digits of each number in the array.\n    \"\"\"\n    result = 0\n    for num in arr:\n        if num < 0:\n            num, _ = abs(num), -1\n        result += num\n    return result\n\n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\n    if len(arr) == 0:\n        return True\n\n    # Perform right shift operation to move the last element to the starting position\n    arr.append(arr.pop(len(arr) - 1))\n\n    return True\n"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if len(lst1) > 0 and len(lst2) > 0:\n        for i in range(len(lst1)):\n            if lst1[i] % 2!= 0:\n                return \"NO\"\n        return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    return {}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = s\n    for i in range(len(s)):\n        if s[i] == c[0] and result[-i-1]!= s[i]:\n            result = result[:-i-1] + s[i]\n    return result, True if s == result else False"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [f'the number of odd elements {i}n the string {i} of the input.'\n            for i in range(len(lst))]\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n\ndef minSubArraySum(nums):\n    return sum(nums)"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n\n    # constraints:\n    # all wells have the same length\n    assert all(len(row) == len(grid) for row in grid) == grid, 'all wells have the same length'\n    # 1 <= grid.length <= 10^2\n    assert 1 <= len(grid) <= 100, 'grid length'\n    # 1 <= grid[:,1].length <= 10^2\n    assert 1 <= len(grid[0]) <= 100, 'grid[0,1] length'\n    # grid[i][j] -> 0 | 1\n    assert all(grid[i][j] in [0, 1] for j in range(len(grid[0]))), 'grid values'\n    # 1 <= capacity <= 10\n    assert 1 <= capacity <= 10, 'capacity'\n\n    # function body:\n    # use the buckets to empty the wells\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                # lower the buckets\n                for k in range(capacity):\n                    grid[i][j] = 0\n                # update the grid\n                grid[i][j] = 1\n    return capacity"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: sum(i!= 0 for i in range(8)) or 0)"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    return [\"had\", \"a\", \"little\", \"lamb\"]\n"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    return 'Yes' if all(isinstance(c, str) and c in '()[]{}\\n' for c in lst) else 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    return sorted(arr[:k], key=arr.count)\n\n\ndef main():\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n    return sum(odd_element_sums(lst))\n\ndef odd_element_sums(lst):\n    return [i % 2 for i in lst]\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # code here\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    return [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5."}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date or len(date) == 0:\n        return False\n    days_in_month = [1, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, 31, 30, 29, "}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if not txt:\n        return []\n    else:\n        return [word.lower() for word in txt.split()]"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) <= 1 or any(num > 1 for num in lst) or any(num < 0 for num in lst):\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if not (len(interval1) == 2 and len(interval2) == 2):\n        return 'NO'\n    start1 = min(interval1[0], interval2[0])\n    end1 = max(interval1[1], interval2[1])\n    if start1 == end1:\n        return 'NO'\n    start2 = min(start1, interval1[1])\n   end2 = max(start1, interval2[1])\n   return 'YES' if (start2, end2) == (start1, end1) else 'NO'"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    sum_magnitudes = 0\n    product_signs = 1\n    for num in arr:\n        if num > 0:\n            sum_magnitudes += abs(num)\n        else:\n            product_signs *= -1\n    return sum_magnitudes * product_signs"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    return [1, 2, 1]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n < 0:\n        print('Incorrect input')\n    else:\n        if n % 2 == 0:\n            return tri(n)\n        else:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\n    return [1, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    if n % 2 == 0:\n        return 0\n    else:\n        return n * (n + 1) / 2\n\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    if not string:\n        return False\n    else:\n        for char in string:\n            if char == ']':\n                if is_nested(string[:char]):\n                    return True\n            elif char == '[' and string[:char]!= '[' and string[:char]!= ']':\n                return False\n        return False\n"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(map(lambda x: x**2, lst)))"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    word = \"\"\n    for char in txt:\n        if char =='':\n            word += char\n        else:\n            if not (word.isalnum() and word.islower() and word.isupper()):\n                return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    return (max(lst), min(lst))\n"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif type(a) is int or type(a) is float:\n        return max(a, b)\n    else:\n        return b"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n <= 0:\n        return False\n    else:\n        return sum_of_evens(n)\n\ndef sum_of_evens(n):\n    evens = []\n    while n > 0:\n        if n % 2 == 0 and n % 3 == 0:\n            evens.append(n)\n            n = n // 2\n        else:\n            n = n // 2\n    return evens\n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    return text.replace(\" \", \"_\").replace(\"\", \"\")"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3 or not file_name.endswith('.') or not file_name.startswith('a-zA-Z') or \\\n       (file_name.startswith('a-zA-Z') and not (file_name.endswith('txt') or file_name.endswith('exe') or file_name.endswith('dll'))):\n        return 'No'\n    else:\n        return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum(map(lambda x: x**3 if x % 3 == 0 else x**4 if x % 4 == 0 and not x % 3 else x, lst))"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n    return_string = \"\"\n    for word in sentence.split():\n        if len(word) > 1 and word not in return_string:\n            return_string += word + \" \"\n    return return_string\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    if x * n == int(x * n):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n\ndef main():\n    print(order_by_points([1, 11, -1, -11, -12]))\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    return sum(1 for num in nums if (num > 10 and (first_odd(num) and last_odd(num)))))\n\ndef first_odd(num):\n    if num > 1:\n        return True\n    else:\n        return False\n\ndef last_odd(num):\n    if num > 1:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(n)] for i in range(n)] for j in range(n)] for k in range(n)]\n    return sum(a[i] + a[j] + a[k]) % 3 == 0"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    if not is_correct_planet(planet1) or not is_correct_planet(planet2):\n        return ()\n    else:\n        return [planet for planet in range(planet1, planet2 + 1) if planet!= 'Mercury']\n\ndef is_correct_planet(planet):\n    if planet in ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted(lst, key=len)"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    if n % 1 == 0:\n        return y\n    else:\n        return x\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(square(num) for num in lst if num % 1 > 0)"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    if len(game)!= len(guess):\n        raise Exception('Incorrect input lengths')\n    result = [0] * len(game)\n    for i in range(len(game)):\n        if guess[i] == game[i]:\n            result[i] = 0\n        else:\n            result[i] = abs(guess[i] - game[i])\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n\n\ndef main():\n    class_name ='my_class'\n    extensions = ['AA', 'Be', 'CC']\n    strongest_extension = Strongest_Extension(class_name, extensions)\n    print(f'For {class_name}, the strongest extension is {strongest_extension}.')\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if b in a or any(rot in a for rot in b) for a, b in [('abcd', 'abd'), ('hello', 'ell'), ('whassup', 'psus'), ('abab', 'baa'), ('efef', 'eeff'), ('himenss','simen')]:\n        return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    return (num % 2 == 0, num % 3!= 0)\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n\ndef main():\n    int_to_mini_roman(426)\n"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    return max(words, key=len)"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n    if number > need and remaining > 0:\n        return [number + need, remaining]\n    elif number + need < remaining:\n        return [number + need, remaining - number - need]\n    else:\n        return [number, 0]\n"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    if len(operator)!= len(operand) - 1:\n        raise Exception('Incorrect number of operators and operands.')\n\n    result = 0\n    for op in operator:\n        if op[0] == '+':\n            result += int(operand[0])\n        elif op[0] == '-':\n            result -= int(operand[0])\n        elif op[0] == '*':\n            result *= int(operand[0])\n        elif op[0] == '/':\n            if len(operand) == 1:\n                raise Exception('Cannot divide by 0.')\n            result /= int(operand[0])\n        else:\n            result = op[1] ** int(operand[0])\n\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n\ndef main():\n    print(solve(\"1234\"))\n    print(solve(\"ab\"))\n    print(solve(\"#a@C\"))\n"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if text:\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    if a > b:\n        return [a, b]\n    else:\n        return [b, a]\n\n"}
