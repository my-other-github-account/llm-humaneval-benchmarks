{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n         for j in range(i+1, len(numbers)):  \n             if abs(numbers[i] - numbers[j]) < threshold:\n                 return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    group = \"\"   \n    result = []  \n    open_brackets = 0  \n      \n    for char in paren_string:   \n        if char == \"(\":\n            open_brackets += 1 \n            group += char\n        elif char == \")\":\n            open_brackets -= 1\n            group += char\n            if open_brackets == 0:\n                result.append(group)\n                group = \"\"\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:    \n    \"\"\" Given a positive floating point number, it can be decomposed into \n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n    \n    Return the decimal part of the number.    \n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:  \n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with \n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False. \n    >>> below_zero([1, 2, 3])  \n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\"\"\"\n    \n    balance = 0\n    for operation in operations:\n        balance += operation \n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation \n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each    \n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    # Calculate absolute deviation from mean for each number\n    deviations = [abs(n - mean) for n in numbers]  \n    # Return the mean of those deviations \n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers' \n    >>> intersperse([], 4)\n    []  \n    >>> intersperse([1, 2, 3], 4)      \n    [1, 4, 2, 4, 3]  \n    \"\"\"\n     result = []\n     for number in numbers:\n         result.append(number)\n         result.append(delimeter)  \n     return result[:-1]        "}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]: \n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')  \n    [2, 3, 1, 3]    \n    \"\"\"\n  \n    result = []\n    for group in paren_string.split(' '):\n        level = 0\n        max_level = 0\n        for c in group:\n            if c == '(':        \n                level += 1\n                max_level = max(level, max_level)\n            elif c == ')':\n                level -= 1         \n        result.append(max_level) \n    return result"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"  \n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int,int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1) \n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)        \n    \"\"\"\n    sum = 0\n    product = 1        \n    if not numbers:        \n        return (sum, product)        \n    for n in numbers:\n        sum += n\n        product *= n           \n    return (sum, product)   "}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max = []  \n    current_max = numbers[0]\n    rolling_max.append(current_max)\n    for n in numbers[1:]:\n        if n > current_max:\n            current_max = n\n        rolling_max.append(current_max)            \n    return rolling_max"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')    \n    ''    \n    >>> make_palindrome('cat')   \n    'catac'\n    >>> make_palindrome('cata') \n    'catac'\n    \"\"\" \n    suffix = 1 \n    while suffix <= len(string) and is_palindrome(string[len(string)-suffix:]):\n        suffix += 1\n    return string + string[:-suffix+1][::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for x, y in zip(a, b):\n        if x == y:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple  \n    strings of the same length. Return None in case the input list is empty.\"\"\"\n    if not strings:\n        return None\n    \n    longest = strings[0]\n    for string in strings: \n        if len(string) > len(longest):\n            longest = string\n    return longest"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int: \n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)  \n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:  \n        a, b = b, a % b   \n    return a  "}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:    \n    \"\"\"Return list of all prefixes from shortest to longest of the input string\"\"\"\n    prefixes = []    \n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes  "}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0) \n    '0' \n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    result = ''    \n    for i in range(n + 1):        \n        result += str(i) + ' '    \n    return result.strip()  "}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    seen = set()\n    for c in string.lower():\n        seen.add(c)  \n    return len(seen)     "}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = []\n    for note in music_string:\n        if note == 'o':\n            beats.append(4)  \n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':      \n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:   \n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\"\"\" \n    count = 0\n    start = 0       \n    while True:      \n        start = string.find(substring, start) + 1        \n        if start > 0:\n            count += 1       \n        else:     \n            return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.  \n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n     >>> sort_numbers('three one five')\n    'one three five'\n   \"\"\"\n    number_map = {\n        'zero': 0, \n        'one': 1,\n        'two': 2, \n        'three': 3,\n        'four': 4,\n        'five': 5,   \n        'six': 6,     \n        'seven': 7,     \n        'eight': 8,     \n        'nine': 9\n    }  \n    numbers = numbers.split(\" \")  \n    numbers.sort(key=lambda x: number_map[x])\n    return \" \".join(numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).   \n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) \n    (2.0, 2.2)     \n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])  \n    (2.0, 2.0)         \n    \"\"\"    \n    sorted_numbers = sorted(numbers)    \n    min_diff = float('inf')    \n    closest = (-1, -1)\n    \n    for i in range(1, len(sorted_numbers)):   \n        diff = sorted_numbers[i] - sorted_numbers[i-1] \n        if diff < min_diff:    \n            min_diff = diff\n            closest = (sorted_numbers[i-1], sorted_numbers[i])\n            \n    return closest      "}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) \n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least 2 numbers.\")\n        \n    min_num = min(numbers)  \n    max_num = max(numbers)\n    \n    result = [(num - min_num) / (max_num - min_num) for num in numbers]\n    \n    return result"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])  \n    [1, 2, 3]\n    \"\"\"\n    result: List[int] = []\n    for value in values:\n        if isinstance(value, int): \n            result.append(value)  \n    return result"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0  \n    >>> strlen('abc') \n    3  \n    \"\"\"\n    count = 0\n    for char in string:\n        count += 1  \n    return count"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int: \n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5    \n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.   \n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)   \n    [2, 2, 2]        \n    >>> factorize(25)    \n    [5, 5]    \n    >>> factorize(70)    \n    [2, 5, 7]\"\"\"\n                \n    result = []\n    d = 2\n    while n > 1:      \n        while n % d == 0:\n            n = n / d             \n            result.append(d)\n        d = d + 1\n    return result"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    \n    for num in numbers:\n        if num not in seen:\n            seen.add(num) \n            result.append(num)\n            \n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO' \n    \"\"\"\n    new_string = \"\"\n    for c in string:\n       if c.islower():\n           new_string += c.upper()  \n       else:\n           new_string += c.lower()\n    return new_string"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    result = \"\"\n    for s in strings:\n         result += s\n    return result"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []    \n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11) \n    True\n    >>> is_prime(13441)  \n    True\n    >>> is_prime(61)    \n    True    \n    >>> is_prime(4)     \n    False    \n    >>> is_prime(1)     \n    False\"\"\"    \n    if n < 2:\n        return False  \n    for i in range(2, int(n**0.5) + 1):  \n        if n % i == 0:\n            return False   \n    return True"}
{"task_id": "HumanEval/32", "completion": ""}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l_sorted = [] \n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_sorted.append(sorted(l[i:i+1])[0])\n        else:\n            l_sorted.append(l[i])\n    return l_sorted  "}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list    \n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"    \n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.      \n    >>> max_element([1, 2, 3])            \n    3                 \n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])      \n    123   \n    \"\"\"\n    maximum = l[0] \n    for element in l:\n        if element > maximum:\n            maximum = element\n    return maximum"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):  \n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0: \n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):  \n    even = [] \n    odd = []\n    for i,n in enumerate(l):\n        if i % 2 == 0:\n            even.append(n)\n        else:\n            odd.append(n)\n            \n    even.sort()  \n \n    result = []\n    i=0\n    while i< len(l):  \n        if i % 2 == 0:\n            result.append(even[0])  \n            even.pop(0)  \n        else:\n            result.append(odd[0])\n            odd.pop(0)            \n        i += 1   \n    return result"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3. \n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)] \n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False    \n    return True\n\ndef fib(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2   \n    >>> prime_fib(2) \n    3   \n    >>> prime_fib(3)   \n    5  \n    >>> prime_fib(4)  \n    13 \n    >>> prime_fib(5)\n    89\n    \"\"\"\n    \n    i = 1\n    while n > 0:\n        cur = fib(i)\n        if is_prime(cur):\n            n -= 1\n        i += 1   \n    return fib(i-1)      "}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that \n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])  \n    False    \n    >>> triples_sum_to_zero([1, 3, -2, 1])    \n    True    \n    >>> triples_sum_to_zero([1, 2, 3, 7])    \n    False    \n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])    \n    True    \n    >>> triples_sum_to_zero([1])      \n    False   \n    \"\"\"      \n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line. \n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    collisions = 0\n    for i in range(n):\n        collisions += n - i\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) \n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"    \n    return [element + 1 for element in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):  \n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that   \n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False    \n    >>> pairs_sum_to_zero([1, 2, 3, 7])    \n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])   \n    True    \n    >>> pairs_sum_to_zero([1])\n    False     \n    \"\"\"\n    seen = set()\n    for x in l:\n        if -x in seen:\n            return True\n        seen.add(x)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base. \n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'  \n    >>> change_base(8, 2) \n    '1000'\n    >>> change_base(7, 2) \n    '111'        \n    \"\"\"     \n    result = \"\"    \n    while x > 0:      \n        remain = x % base        \n        result = str(remain) + result\n        x = x // base      \n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)  \n    7.5\n    \"\"\" \n    return 0.5 * a * h  "}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):  \n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0    \n    fib4(2) -> 2  \n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.    \n    >>> fib4(5)\n    4    \n    >>> fib4(6) \n    8    \n    >>> fib4(7)\n    14\"\"\"\n        \n     a, b, c, d = 0, 0, 2, 0\n     for i in range(n):\n         a, b, c, d = b, c, d, a + b + c + d \n     return d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list): \n    \"\"\"Return median of elements in the list l.    \n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])  \n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l) \n    if n % 2 == 1:\n        return l[n//2]  \n    else:\n        return (l[n//2] + l[n//2 - 1]) / 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('') \n    True\n    >>> is_palindrome('aba')\n    True \n    >>> is_palindrome('aaaaa')  \n    True\n    >>> is_palindrome('zbcd')\n    False    \n    \"\"\"     \n    cleaned_text = text.lower().strip(\" \")\n    return cleaned_text == cleaned_text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5) \n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1 \n    >>> modp(3, 11) \n    8\n    >>> modp(100, 101)\n    1  \n    \"\"\"   \n    result = 1   \n    base = 2     \n    while n > 0:\n        if n % 2 == 1:  \n            result = (result * base) % p   \n        base = (base * base) % p    \n        n = n//2  \n    return result"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string. \n    \"\"\"    \n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])  "}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):       \n    vowels = 'aeiou'\n    result = \"\"\n    \n    for char in text:\n        if char not in vowels:\n            result = result + char\n            \n    return result"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\" \n    for num in l:\n        if num >= t:\n            return False   \n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7) \n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')   \n    True        \n    >>> same_chars('dddddddabc', 'abcd')    \n    True   \n    >>> same_chars('eabcd', 'dddddddabc')    \n    False    \n    >>> same_chars('abcd', 'dddddddabce')  \n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')   \n    False    \n    \"\"\"    \n    count = [0] * 26    \n    for c in s0:\n        count[ord(c) - ord('a')] += 1    \n    for c in s1:\n        count[ord(c) - ord('a')] -= 1    \n    return all(c == 0 for c in count)  "}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1) \n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n  \n    else:\n       return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\"\"\"\n    open_count = 0\n    close_count = 0\n    for b in brackets:\n        if b == \"<\":\n            open_count += 1  \n        elif b == \">\":      \n            close_count += 1 \n            if close_count > open_count:\n                return False     \n        if open_count != close_count:\n            return False\n    return open_count == close_count"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])     \n    False    \n    >>> monotonic([4, 1, 0, -10])\n    True    \n    \"\"\"\n    return (all(l[i] <= l[i + 1] for i in range(len(l) -1)) or \n            all(l[i] >= l[i + 1] for i in range(len(l) -1)))"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.    \n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]     \n    >>> common([5, 3, 2, 8], [3, 2])      \n    [2, 3]     \n    \"\"\"\n   \n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29 \n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"   \n    i = 2   \n    while i * i <= n:\n        if n % i:    \n            i += 1\n        else:\n            n = n // i  \n    return i   "}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\" \n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\"\"\"\n    \n    open_count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            open_count += 1\n        elif bracket == \")\":\n            open_count -= 1\n            if open_count < 0:\n                return False   \n    return open_count == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):  \n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\"\"\"\n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])  \n    return result"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1 \n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).            \n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.       \n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n     4     \n    >>> fibfib(8)\n     24  \n    \"\"\"\n    if n <= 2:\n        return n % 2  \n    a, b, c = 0, 0, 1  \n    for i in range(3, n+1):  \n        d = a + b + c    \n        a = b   \n        b = c   \n        c = d\n    return c"}
{"task_id": "HumanEval/64", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10]) \n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    d = l[1] - l[0]\n    for i in range(2, len(l)):\n        if (d > 0 and l[i] < l[i-1]) or (d < 0 and l[i] > l[i-1]):\n            return False\n    return True "}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):    \n    digits = [int(d) for d in str(abs(x))]   \n    \n    shifted = digits[shift % len(digits):] + digits [:shift % len(digits)]\n    \n    return ''.join(str(d) for d in shifted)"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only' \n    ASCII codes.\n    \"\"\"   \n    sum = 0\n    for c in s:\n        if c.isupper():  \n            sum += ord(c)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95     \n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19    \n    \"\"\"\n    apples = int(s.split('apples')[0])  \n    oranges = int(s.split('oranges')[0].split('and')[-1]) \n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest = float('inf') \n    smallest_index = -1\n    \n    for i,val in enumerate(arr):\n        if val % 2 == 0 and val < smallest:\n            smallest = val\n            smallest_index = i\n            \n    return [smallest, smallest_index] if smallest != float('inf') else []      "}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    counts = {}\n    for val in lst:\n        if val in counts:\n            counts[val] += 1  \n        else: \n            counts[val] = 1   \n    for val in counts:\n        if counts[val] >= val > 0:\n            return val\n    return -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):    \n    lst.sort()    \n    result = []    \n    while len(lst)>0:        \n        result.append(lst[0])        \n        lst.pop()        \n        if len(lst) > 0:           \n            result.append(lst[-1])          \n            lst.pop()\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):   \n    '''    \n    Given the lengths of the three sides of a triangle. Return the area of    \n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.      \n    Otherwise return -1     \n    Three sides make a valid triangle when the sum of any two sides is greater      \n    than the third side.      \n    Example:     \n    triangle_area(3, 4, 5) == 6.00  \n    triangle_area(1, 2, 10) == -1 \n    '''\n    # Check if all sides are > 0      \n    if a <= 0 or b <= 0 or c <= 0:\n          return -1 \n          \n    # Check if sum of any two sides is > than third side    \n    if a + b > c and a + c > b and  b + c > a:\n         s = (a + b + c)/2\n         area = round(math.sqrt(s*(s-a)*(s-b)*(s-c)), 2)\n         return area \n    return -1  \n"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w): \n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    '''\n    total = sum(q)\n    if total <= w and q == q[::-1]:\n        return True  \n    return False       "}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    dp = [[0 for i in range(n)]for j in range(n)] \n    for i in range(n):\n        dp[i][i] = 0\n        \n    for dif in range(1, n):\n        for i in range(n-dif): \n            j = i + dif\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i+1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i][k] + dp[k+1][j] for k in range(i,j))\n                \n    return dp[0][n-1]"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total1 = sum(len(word) for word in lst1) \n    total2 = sum(len(word) for word in lst2)\n    if total1 < total2: \n         return lst1\n    elif total1 > total2:\n         return lst2\n    else:\n         return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):    \n    if is_prime(a):\n        return True\n    for i in range(2 , a//3 + 1):    \n        if is_prime(i) and is_prime(a//i): \n            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):    \n    if x == n:\n        return True\n    while x % n == 0:  \n        x = x / n        \n    return x == 1"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.   \n    Examples:      \n    iscube(1) ==> True    \n    iscube(2) ==> False    \n    iscube(-1) ==> True    \n    iscube(64) ==> True     \n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    import math\n    if math.pow(a, (1/3.0)).is_integer():\n       return True\n    return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    primes = {2, 3, 5, 7,  11, 13, 17}\n    for n in num:\n        if n.isdigit(): \n            if int(n) in primes:\n                count += 1   \n        else:                  \n            if ord(n)-55 in primes: # ASCII code of A is 65, so A-10 = 55\n                count += 1          \n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal): \n    binary = \"\"\n    while decimal > 0:\n       binary = str(decimal % 2) + binary\n       decimal = decimal//2\n    binary = \"db\" + binary + \"db\"\n    return binary"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False  \n    for i in range(len(s)-2): \n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):  \n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")  \n        elif grade >= 3.7:\n             letter_grades.append(\"A\")\n        elif grade >= 3.3:\n             letter_grades.append(\"A-\") \n        elif grade >= 3.0:\n             letter_grades.append(\"B+\")  \n        elif grade >= 2.7:\n             letter_grades.append(\"B\")     \n        elif grade >= 2.3:\n             letter_grades.append(\"B-\")  \n        elif grade >= 2.0:\n             letter_grades.append(\"C+\")               \n        elif grade >= 1.7:\n             letter_grades.append(\"C\")     \n        elif grade >= 1.3:    \n             letter_grades.append(\"C-\")\n        elif grade >= 1.0:\n             letter_grades.append(\"D+\")\n        elif grade >= 0.7:\n             letter_grades.append(\"D\")        \n        elif grade >= 0.0:\n             letter_grades.append(\"D-\")\n        else:    \n             letter_grades.append(\"E\")        \n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    string_length = len(string)  \n    prime = True\n    for i in range(2, string_length):\n        if (string_length % i) == 0:\n            prime = False\n            break  \n    return prime"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"  \n    if n == 1:\n        return 10  \n    count = 0   \n    for i in range(1,10):\n        count += 1   \n    count *= 9**(n-2)    \n    count += 1 * 9**(n-1) \n    count += 1 * 9**(n-1)    \n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N): \n    binary = bin(N)[2:] #get the binary representation of N \n    count = 0\n    for digit in binary:\n        count += int(digit) #add each digit \n    return bin(count)[2:]\n    "}
{"task_id": "HumanEval/85", "completion": "def add(lst):   \n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.. \n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    total = 0  \n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    res = \"\" \n    words = s.split(\" \")  \n    for word in words:\n         res += \"\".join(sorted(word))+\" \"\n    return res[:-1]"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):  \n    result = []\n    for row in range(len(lst)):\n        row_lst = lst[row]  \n        for col in range(len(row_lst)-1, -1, -1):     \n            if row_lst[col] == x:\n                result.append((row, col))    \n    result.sort()      \n    return result"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting, \n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,  \n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \n    Note:\n    * don't change the given array.\n        \n    Examples: \n    * sort_array([]) => []    \n    * sort_array([5]) => [5] \n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"  \n    copy = array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        copy.sort(reverse=True)   \n    else: \n         copy.sort()      \n    return copy      "}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):  \n    result = \"\"\n    for c in s: \n        if c.isalpha(): \n            c_ord = ord(c) \n            c_ord += 4\n            if c.islower():\n                if c_ord > ord('z'): \n                    c_ord -= 26\n            else: \n                if c_ord > ord('Z'):\n                    c_ord -= 26  \n            result += chr(c_ord)\n        else: \n            result += c   \n    return result"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):  \n    if len(lst) < 2:\n        return None\n    lst.sort() \n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):  \n    count = 0\n    sentences = S.split('.|!|?')    \n    for sentence in sentences:\n        if sentence.strip().lower().startswith(\"i \"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    return (x + y == z or x + z == y or y + z == x) and isinstance(x, int) and isinstance(y, int) and isinstance(z, int)"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    \n    for c in message:\n        if c.isalpha():\n            if c.isupper(): \n                result += alphabet[alphabet.index(c.lower())].upper()\n            else: \n                result += alphabet[alphabet.index(c.lower())]   \n        else:\n            result += c\n            \n    for i in range(len(result)):   \n        if result[i] in \"aeiou\":\n            result = result[:i] + alphabet[alphabet.index(result[i]) + 2] + result[i+1:]\n            \n    return result "}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers. \n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10  \n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25     \n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13       \n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11        \n    For lst = [0,81,12,3,1,21] the output should be 3       \n    For lst = [0,8,1,2,1,7] the output should be 7\"\"\"\n    \n    largest_prime = 0\n    sum_digits = 0\n    \n    for n in lst:\n        if n > largest_prime and isprime(n):\n            largest_prime = n\n            \n    while largest_prime > 0:\n       sum_digits += largest_prime % 10\n       largest_prime //= 10\n       \n    return sum_digits"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):   \n    if not dict:\n        return False   \n    all_lower = all(key.islower() for key in dict)\n    all_upper = all(key.isupper() for key in dict)   \n    if all_lower or all_upper:\n        return True   \n    return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    result = []\n    num = 2\n    while len(result) < n:\n        isPrime = True\n        for i in range(2, num):\n            if num%i == 0:\n                isPrime = False\n                break\n        if isPrime:      \n            result.append(num)\n        num += 1         \n    return result"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16. \n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.  \n    multiply(14,-15) should return 20.\"\"\"\n    return (a % 10) * (b % 10)  "}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1  \n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0 \n    \"\"\"\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2): \n        if s[i].upper() in vowels:    \n            count += 1       \n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10 \n    >>> closest_integer(\"15.3\")  \n    15\n\n    Note:    \n    Rounding away from zero means that if the given number is equidistant     \n    from two integers, the one you should return is the one that is the      \n    farthest from zero. For example closest_integer(\"14.5\") should      \n    return 15 and closest_integer(\"-14.5\") should return -15.     \n    ''' \n    number = float(value)  \n    if number - int(number) >= 0.5:      \n        return int(number) + 1    \n    else:      \n        return int(number)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones. \n    The number of stones in the next level is:\n       - the next odd number if n is odd.\n       - the next even number if n is even.      \n    Return the number of stones in each level in a list, where element at index   \n    i represents the number of stones in the level (i+1).\n        \n    Examples:    \n    >>> make_a_pile(3)\n    [3, 5, 7]   \n    \"\"\"\n    pile = [n]  \n    for i in range(n-1): \n        if n % 2 == 1:  \n            n += 2        \n        else: \n            n += 1        \n        pile.append(n)            \n    return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(\", \") if \", \" in s else s.split(\" \")"}
{"task_id": "HumanEval/102", "completion": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10 \n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    largest_prime = 0\n    for num in lst:\n        if num > largest_prime and is_prime(num):\n            largest_prime = num\n    return sum(map(int, str(largest_prime)))\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n%2 == 0 or n%3 == 0:\n        return False\n    for i in range(5, int(n**0.5)+1, 6):\n        if n%i == 0 or n%(i+2) == 0:\n            return False \n    return True"}
{"task_id": "HumanEval/103", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    \n    is_lower = None\n    is_upper = None\n    \n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        \n        if is_lower is None and key.islower():\n            is_lower = True\n            \n        if is_upper is None and key.isupper():\n            is_upper = True\n            \n        if is_lower and is_upper:\n            return False\n            \n        if is_lower and not key.islower():\n            return False\n            \n        if is_upper and not key.isupper():\n            return False\n            \n    return True if is_lower or is_upper else False"}
{"task_id": "HumanEval/104", "completion": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n \n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    if n <= 1:\n        return []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        if len(primes) == n:\n            break\n    return primes "}
{"task_id": "HumanEval/105", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return int(str(a)[-1]) * int(str(b)[-1])"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact = fact * j  \n            result.append(fact)   \n        else:      \n            result.append(sum(range(1, i+1)))   \n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        s = str(i) \n        if s == s[::-1]:  \n            if i%2 == 0:\n                even += 1\n            else: \n                odd += 1 \n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr): \n    count = 0\n    for num in arr:\n        sum_of_digits = 0\n        if num < 0:\n            sum_of_digits += num % 10  \n            num = num // 10  \n        while num > 0:\n            sum_of_digits  += num % 10    \n            num = num // 10   \n        if sum_of_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The    \n    numbers in the array will be randomly ordered. Your task is to determine if  \n    it is possible to get an array sorted in non-decreasing order by performing  \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n        \n    One right shift operation means shifting all elements of the array by one    \n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n        \n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False. \n    If the given array is empty then return True.\n            \n    Note: The given list is guaranteed to have unique elements.\n            \n    For Example:\n            \n    move_one_ball([3, 4, 5, 1, 2])==>True      \n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.                  \n    move_one_ball([3, 5, 4, 1, 2])==>False       \n    Explanation:It is not possible to get non-decreasing order for the given              \n                array by performing any number of right shift operations.\n    \"\"\"\n      \n    if not arr:\n        return True\n        \n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n            \n    return True    \n      "}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    evens  = 0\n    for n in lst1:\n        if n % 2 == 0:\n            evens += 1\n            \n    if evens >= len(lst1):\n        return \"YES\"\n    else:   \n        for n in lst2:\n            if n % 2 == 0:\n                evens += 1\n                if evens == len(lst1):\n                    return \"YES\"\n    \n    return \"NO\"        "}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary \n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}   \n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}      \n    histogram('b b b b a') == {'b': 4}        \n    histogram('') == {}        \n    \"\"\"\n    counts = {}    \n    for letter in test.split():\n        if letter not in counts:\n            counts[letter] = 1\n        else: \n            counts[letter] += 1\n            \n    max_count = max(counts.values()) \n    \n    result = {key: value for key, value in counts.items() if value == max_count}\n            \n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    result = \"\"  \n    for char in s:\n        if char not in c:  \n            result += char  \n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst): \n    result = []    \n    for s in lst:\n        count = 0\n        for c in s:\n            if int(c) % 2 == 1:\n                count += 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(count) + \"ng \" + str(count) + \" of the \" + str(count) + \"nput.\")    \n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array \n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1 \n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')  \n    start = 0\n    current_sum = 0\n    \n    for end in range(len(nums)):\n        current_sum += nums[end]\n        while current_sum >= min_sum:\n            min_sum = min(min_sum, current_sum)                \n            current_sum -= nums[start]\n            start += 1\n                \n    return min_sum       "}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    count = 0\n    rows = len(grid)\n    cols = len(grid[0])\n    \n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                count += math.ceil(grid[i][j] / capacity)\n                \n    return count"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    def count_ones(n):\n        return bin(n).count('1')\n    \n    arr.sort(key=count_ones)        \n    return arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    result = []\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.lower() in consonants:\n                consonant_count += 1\n        if consonant_count == n: \n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):   \n    vowels = \"aeiou\"\n    word = word[::-1]\n    for char in word:\n        if char in vowels and word[word.index(char) + 1].isalpha() and word[word.index(char) -1].isalpha():      \n            return char[::-1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    opens = 0 \n    closes = 0  \n   for i in lst[0]:  \n      if i == \"(\":\n         opens += 1\n      else:  \n         closes += 1\n      \n   for i in lst[1]:   \n      if i == \"(\":\n         opens += 1\n      else:\n         closes += 1\n         \n   if opens == closes:\n       return \"Yes\"\n   else:  \n       return \"No\"    "}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    heap = []\n    for i in arr:\n        if len(heap) < k:\n            heapq.heappush(heap, i)\n        else:           \n            heapq.heappushpop(heap, i)           \n    return list(heap)"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):   \n    result = 0\n    for i in range(0,len(lst), 2):\n         if lst[i] % 2 != 0: \n              result += lst[i]\n    return result"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        if 0 <= arr[i] < 100:\n            sum += arr[i]  \n        elif 100 <= arr[i] < 1000:    \n            sum += arr[i] // 10 * 10  \n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.    \n    \"\"\"\n    seen = {1}\n    nums = []     \n    while n > 1:\n        if n % 2 == 1:\n            nums.append(n)\n        n = n// 2 if n % 2 == 0 else n * 3 + 1\n        if n in seen:\n            break\n        seen.add(n)\n    nums.sort()          \n    return nums       "}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.    \n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy    \n    \"\"\"\n    if not date:\n        return False\n    parts = date.split('-')        \n    if len(parts) != 3:\n        return False        \n    if len(parts[0]) != 2 or len(parts[1]) != 2 or len(parts[2]) != 4:\n        return False           \n    month = int(parts[0])        \n    day = int(parts[1])\n    year = int(parts[2])    \n    if month < 1 or month > 12:\n        return False        \n    if month in [1,3,5,7,8,10,12] and (day < 1 or day > 31): \n        return False      \n    if month in [4,6,9,11] and (day < 1 or day > 30):\n        return False             \n    if month==2 and (day < 1 or day > 29):\n        return False             \n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')       \n    elif ',' in txt:          \n        return txt.split(',')   \n    else:\n        count = 0  \n        for char in txt:\n            order = ord(char.lower()) - ord('a')   \n            if order % 2 != 0: \n              count += 1\n       return count  "}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted \n    in ascending order. If list has more than 1 duplicate of the same  \n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True   \n    is_sorted([1, 3, 2, 4, 5]) \u279e False   \n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True       \n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True     \n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False   \n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    \n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False  \n        if lst.count(lst[i]) > 1:\n             return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0]) \n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    \n    if length in primes:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1    \n    sign_sum = 0    \n    for x in arr: \n        if x > 0:\n            sign = 1 \n        elif x < 0:\n            sign = -1 \n        else: \n            sign = 0\n        sign_sum += abs(x) * sign           \n        product *= sign   \n    return sign_sum * product"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    rows = len(grid) \n    cols = len(grid[0])\n    seen = set()\n    queue = [(0, 0, [grid[0][0]], 1)] \n    while queue: \n        r, c, path, path_len = queue.pop(0)\n        if path_len == k:\n            return path\n        for nr, nc in ((r-1, c), (r+1, c), (r, c-1), (r, c+1)):\n            if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in seen:\n                seen.add((nr, nc))\n                queue.append((nr, nc, path + [grid[nr][nc]], path_len + 1))\n    return []"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3    \n    tri(n) = 1 + n / 2, if n is even.    \n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.    \n    For example:    \n    tri(2) = 1 + (2 / 2) = 2    \n    tri(4) = 3    \n    tri(3) = tri(2) + tri(1) + tri(4)  \n           = 2 + 3 + 3 = 8    \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples: \n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    result = [1, 3]   \n    if n ==1: \n        return result[:1]\n    if n%2 == 0:               \n        for i in range(2, n+1, 2):\n            result.append(1 + i/2)   \n    else:          \n        for i in range(3, n + 1, 2):\n            result.append(result[i-1] + result[i-2] + result[i-3])            \n    return result"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.    \n    Return 0 if all digits are even.    \n    For example:    \n    digits(1)  == 1    \n    digits(4)  == 0    \n    digits(235) == 15\"\"\"   \n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit   \n        n = n // 10    \n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n   open_brackets = 0  \n   for char in string:\n       if char == '[':\n           open_brackets += 1\n       elif char == ']':\n           open_brackets -= 1\n           if open_brackets < 0:\n               return True\n   return False"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):    \n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14     \n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84       \n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6      \n   \n    \"\"\"   \n    result = 0  \n    for num in lst:\n        rounded = int(num + 0.5)\n        result += rounded ** 2\n    return result"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1] \n    if last_char.isalpha() and not txt[-2].isspace():\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr): \n    for i in range(1,len(arr)):\n        if arr[i-1] >= arr[i]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):  \n    largest_negative = None\n    smallest_positive = None \n    for num in lst:\n        if num < 0:          \n            if largest_negative == None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:         \n            if smallest_positive == None or num < smallest_positive:\n                smallest_positive = num  \n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):   \n    if type(a) is int and type(b) is int:\n        if a > b: \n            return a\n        elif b > a:\n            return b\n        else: \n            return None \n   \n    if type(a) is float and type(b) is float: \n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else: \n            return None\n        \n    try:\n         a = float(a.replace(\",\",\".\")) \n         b = float(b.replace(\",\",\".\") )\n         if a > b:\n            return a\n         elif b > a:\n            return b  \n         else:\n            return None    \n    except:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers  \n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False \n    is_equal_to_sum_even(8) == True\"\"\"\n    for a in range(2, n):\n        if a % 2 == 1:\n            continue\n        for b in range(a, n):  \n            if b % 2 == 1:   \n                continue                    \n            for c in range(b, n): \n                if c % 2 == 1:\n                    continue       \n                for d in range(c, n):  \n                    if d % 2 == 1:\n                        continue                  \n                    if a + b + c + d == n:\n                        return True       \n    return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as: \n       brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n       where n > 0\n    \n       For example:\n       >>> special_factorial(4)  \n       288 \n    \"\"\"\n    result = 1\n    for i in range(1,n+1):\n        result *= factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    while \"__\" in text:\n        text = text.replace(\"__\", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):  \n    \"\"\"Create a function which takes a string representing a file's name, and returns \n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions  \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name. \n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from  \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']    \n    Examples:    \n    file_name_check(\"example.txt\") # => 'Yes'     \n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\"\"\"\n      \n    digit_count = 0\n    parts = file_name.split(\".\")\n    if len(parts) == 2 and parts[0][0].isalpha() and parts[1] in [\"txt\",\"exe\",\"dll\"]: \n        for c in parts[0]:\n            if c.isdigit():\n                digit_count += 1\n            if digit_count <= 3:\n                return \"Yes\"\n            else: \n                return \"No\"\n    return \"No\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst): \n    \"\"\"\"    \n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a     \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not        \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.      \n    \n    Examples:                     \n    For lst = [1,2,3] the output should be 6                  \n    For lst = []  the output should be 0    \n    For lst = [-1,-5,2,-1,-5]  the output should be -126        \n    \"\"\"\n    total = 0     \n    for index, value in enumerate(lst):        \n        if index % 3 == 0:                 \n            lst[index] = value ** 2               \n        elif index % 4 == 0 and index % 3 != 0:             \n            lst[index] = value ** 3            \n        total += lst[index]           \n    return total"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split(\" \")\n    output = \"\"\n    for word in words: \n        if is_prime(len(word)):\n            output += \" \" + word  \n    return output.strip()\n\ndef is_prime(n):\n    if n == 1:\n        return False  \n    for i in range(2,int(math.sqrt(n))+1):  \n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):    \n    numerator_x , denominator_x = x.split(\"/\")     \n    numerator_n , denominator_n = n.split(\"/\")    \n    product_numerator = int(numerator_x) * int(numerator_n)  \n    product_denominator = int(denominator_x) * int(denominator_n) \n    if product_numerator % product_denominator == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):  \n    nums.sort(key=lambda x: (sum([int(y) for y in str(abs(x))]), nums.index(x)))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.  \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\" \n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = []    \n    count = 0\n    for i in range(1, n+1):\n        a.append(i * i - i + 1)\n        \n    for i in range(n-2):  \n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1                    \n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()     \n    index1 = planets.index(planet1)  \n    index2 = planets.index(planet2)  \n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1+1:index2])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):  \n    even = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            even.append(i) \n    even.sort(key = len)           \n    return even "}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):  \n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5    \n    \"\"\"\n    for i in range(2,n):\n        if n%i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 == 1:   \n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    results =[]\n    for i in range(len(game)):\n         if game[i] == guess[i]:\n             results.append(0)  \n         else:  \n             results.append(abs(game[i] - guess[i]))\n    return results"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):   \n    max_strength = 0\n    strongest = \"\"\n    for ext in extensions:\n        cap = 0\n        sm = 0\n        for char in ext:\n            if char.isupper():\n                cap += 1     \n            elif char.islower():\n                sm += 1\n        strength = cap - sm         \n        if strength >= max_strength:\n            max_strength = strength \n            strongest = ext\n    return f\"{class_name}.{strongest}\""}
{"task_id": "HumanEval/154", "completion": "def compare(game,guess):\n    \n    \"\"\"I think we all remember that feeling when the result of some long-awaited \n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.  \n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"\n    \n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num): \n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)    \n    \"\"\"\n    even_count, odd_count = 0, 0\n    \n    if num < 0:\n        num = abs(num)\n        \n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else: \n            odd_count += 1\n        num = num // 10\n            \n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string, \n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii' \n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"    \n    symbols = [(1000, 'm'), (900, 'cm'), (500, 'd'),  \n               (400, 'cd'), (100, 'c'), (90, 'xc'),\n               (50, 'l'), (40, 'xl'), (10, 'x'),  \n               (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n    result = \"\"    \n    for value, symbol in symbols:\n        while number >= value:\n            result += symbol\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree. \n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n   if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n       return True\n   else: \n       return False  "}
{"task_id": "HumanEval/158", "completion": "def find_max(words): \n    max_word = \"\"\n    max_len = 0\n    for word in words:\n        chars = set(word) \n        if len(chars) > max_len:\n            max_len = len(chars)  \n            max_word = word\n        elif len(chars) == max_len and word < max_word:\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):  \n    eaten = number  \n    if remaining >= need - number:\n       eaten += need - number  \n       remaining -= need - number\n    else:\n       eaten += remaining     \n       remaining = 0\n    return [eaten, remaining]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1] \n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':    \n            result //= operand[i+1]   \n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    res = \"\"\n    for c in s:\n        if c.isalpha(): \n            if c.islower():\n                res += c.upper()   \n            else:    \n                res += c.lower()  \n        else:\n           res += c  \n    return res[::-1] if not res.isalpha() else res"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()  "}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    \n    even_nums = []\n    \n    for num in range(start, end+1):\n        if num % 2 == 0: \n             even_nums.append(num)\n            \n    return even_nums"}
