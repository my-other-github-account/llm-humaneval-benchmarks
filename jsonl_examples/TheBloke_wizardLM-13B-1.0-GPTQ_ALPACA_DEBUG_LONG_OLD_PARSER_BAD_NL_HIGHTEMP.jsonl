{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    seen = set()\n    for num in numbers:\n        if abs(num - nums[-1]) <= threshold:\n            return True\n        else:\n            seen.add(num)\n            nums.append(num)\n    return len(seen) > 2"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_list = []\n    stack = []\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            while len(stack) > 0 and stack[-1]!= '(':\n                paren_list.append(stack.pop())\n            else:\n                continue\n            \n        else:\n            stack.append(char)\n        \n    return paren_list"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return round(number - math.floor(number))"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations):\n    # initialize balance to 0\n    balance = 0\n    \n    for op in operations:\n        # check if operation is positive or negative\n        if op > 0:\n            balance += op\n        elif op < 0:\n            balance -= abs(op)\n        \n    # check if balance ever goes below 0\n    return balance < 0"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    return sum((x - numbers[0] for x in numbers)) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if len(numbers) == 0:\n        return []\n    \n    first = numbers[0]\n    rest = numbers[1:]\n    \n    result = [first] + intersperse(rest, delimeter)\n    return [result[-1]] + intersperse(result[:-1], delimeter)"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    stack = [] # Stack to keep track of opening brackets\n    result = [] # Result list to store the depths of the nested parens\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) > 0 and stack[-1]!= '(': # Check if closing bracket matches an open one\n                stack.pop() # Remove matching pair from stack\n            else:\n                print(\"Error: Unmatched parenthesis\") # If there's no match, return error message\n                \n        elif char == ',':\n            pass # Ignore commas since they don't affect the logic\n        \n    for i in range(len(result)):\n        result[i] += 1 # Add 1 to all elements except last element which already contains max depth\n            \n    return result # Return the final result list containing the depths of nested parens"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers):\n    total = 0\n    product = 1\n    \n    for num in numbers:\n        total += num\n        product *= num\n        \n    if len(numbers) == 0:\n        result = (total, product)\n    else:\n        result = (total, product // (len(numbers)))\n    \n    return result"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers):\n    max_list = [] # create an empty list to store the rolling maximums\n    \n    for i in range(len(numbers)): # iterate through each number in the input list\n        current_max = numbers[i] # set the current maximum to the current number being processed\n        \n        while len(max_list) > 0 and max_list[-1] < current_max: # check if there is already a larger value stored in the rolling maximum list\n            max_list.pop() # remove it from the list\n            \n        max_list.append(current_max) # append the current maximum to the rolling maximum list\n        \n        yield current_max # return the current maximum as part of the generator\n                          \n    yield current_max # include the last number in the output\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\"Test if given string is a palindrome\"\"\"\n    return string == string[::-1]\n    \ndef make_palindrome(string: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\"\"\"\n    # Get length of input string and initialize result variable\n    n = len(string)\n    res = \"\"\n    \n    # Iterate over all substrings of input string\n    for i in range(n):\n        substring = string[:i+1]\n        \n        # Check if current substring is a palindrome\n        if is_palindrome(substring):\n            # If yes, append it to result and update start index\n            res += substring * (2*len(substring)-1)\n            break\n    \n    return res"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    x = int(a + b) ^ int(a * b)\n    if x & 1 == 0:\n        return chr(x - 2)\n    else:\n        return chr(x)"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if len(strings) == 0:\n        return None\n    \n    max_len = max(len(s) for s in strings)\n    longest_string = ''\n    for string in strings:\n        if len(string) >= max_len:\n            longest_string = string\n        \n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b!= 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefix = ''\n    result = []\n    \n    for i in range(len(string)):\n        if string[i]!= string[i - 1]:\n            result.append(prefix)\n            prefix = string[i:]\n            \n        else:\n            prefix += string[i]\n    \n    result.append(prefix)\n    return result"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return \" \".join([str(i) for i in range(n+1)])"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string):\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    # create an empty list to store results\n    result = []\n    \n    # iterate over every character in music string\n    for char in music_string:\n        if char == \"o\":\n            # check previous characters\n            prev_char = music_string[music_string.index(char)-1]\n            \n            # if it was | then we have half note so multiply by 0.5\n            if prev_char == \"|\":\n                result.append(4 * 0.5)\n            else:\n                result.append(4)\n        \n        elif char == \".\":\n            # check previous characters\n            prev_char = music_string[music_string.index(char)-1]\n            \n            # if it was | then we have quarter note so multiply by 0.25\n            if prev_char == \"|\":\n                result.append(1 / 0.5)\n            else:\n                result.append(1)\n                \n    return result"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        if substring[start] == string[start]:\n            count += 1\n            start += 1\n        else:\n            if start > 0 and substring[start - 1] == string[start - 1]:\n                count -= 1\n            start += 1\n        if start >= len(substring):\n            break"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers):\n    return \"\".join([x for x in numbers.split(\" \") if int(x) <= 9])"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers):\n    min_diff = float('inf')\n    closest_pair = None\n    \n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[j] - numbers[i])\n            \n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n                \n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers):\n    return [min(max(x, 0), 1) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values):\n    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n):\n    if n == 0 or n % 2!= 0:\n        return None # base case for when n is zero or odd\n    else:\n        max_div = n // 2 # try to divide by half of n first\n        for i in range((max_div - 1), -1, -1): # check all divisors up to and including max_div\n            if n % i == 0:\n                return min(i + 1, max_div) # return smallest multiple greater than max_div\n        return None # if none found"}
{"task_id": "HumanEval/25", "completion": "def factorize(n):\n    result = []\n    i = 2\n    while n > 1:\n        if n % i == 0 and is_prime(i):\n            result.append(i)\n            n /= i\n        else:\n            i += 1\n    return result\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers):\n    return list(set(numbers))"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings):\n    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x >= 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x**2 +... xs[n] * x**n\n    \"\"\"\n    n = len(xs)\n    result = 0\n    sign = 1\n    for i in range(n):\n        term = xs[i] * math.pow(x, n - i - 1)\n        result += sign * term\n        sign *= (-1) ** i\n    return result\n\ndef find_zero(xs: list) -> Union[float, None]:\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    n = len(xs)\n    if n % 2!= 0 or max(abs(a) for a in xs) < 1e-9:\n        raise ValueError(\"Invalid input\")\n    if n == 2:\n        return -xs[1]/xs[0] / ((1 - xs[1]*xs[1])/2)\n    else:\n        discriminant = abs((-1)**n * product(xs)) * product(math.sqrt(-1))\n        root = 0\n        while True:\n            x = root\n            y = find_root(poly, x, xs)\n            if y is None:\n                break\n            if y >= 0:\n                root = y\n            elif y <= 0:\n                root = -y\n            else:\n                raise ValueError(\"Impossible to have two roots\")\n        return root"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: List[int]):\n    return [l[i] if i % 3!= 0 else max(l[i], l[(i+1)%3]) for i in range(len(l))]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    seen = set()\n    return [x for x in l if x not in seen and not (x in seen).issubset(seen)] + [x for x in l if x not in seen]"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: List[int]):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 and i % 13!= 0: # FizzBuzz logic\n            continue\n        elif i % 11 == 0:\n            count += 1\n        elif i % 13 == 0:\n            count += 1\n        else:\n            print(i, end=\" \")\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: List[int]):\n    return [l[i] if i % 2 == 0 else l[i].sort() for i in range(len(l))]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    groups = [s[(3*i):min((3*i+3), len(s))] for i in range((len(s)+2)//3)]\n    groups = [(group[1:] + group[0]) if len(group)==3 else group for group in groups]\n    return ''.join(groups)\n    \ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    s = list(s)\n    n = len(s)\n    result = []\n    j = 0\n    while j < n:\n        k = (j+1) % 3\n        result += s[k]\n        j += 1\n    return ''.join(result)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    if n == 0 or n == 1:\n        return n\n    else:\n        fib = [0, 1]\n        for i in range(2, n+1):\n            fib.append((fib[i-1]+fib[i-2])%10)\n        \n        primes = []\n        for num in fib:\n            flag = True\n            for j in range(2, abs(num)):\n                if (j*j > num):\n                    break\n                if ((num % j) == 0):\n                    flag = False\n                    break\n            if flag:\n                primes.append(num)\n        return max(primes)"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: List[int]):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i]+l[j]+l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    count = 0\n    while True:\n        if n % 2 == 1:\n            count += 1\n        else:\n            count -= 1\n        n //= 2\n        if n <= 0:\n            break"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: List[int]):\n    return l + [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    # convert integer to list of digits\n    num = [int(digit)] * (len(str(abs(x))))\n    \n    # iterate over each digit and append it to new list if it is greater or equal to current base\n    result = []\n    for i, digit in enumerate(num):\n        if digit >= base:\n            result.append(str(digit))\n        \n    # join all digits together to form final output\n    return ''.join(result[::-1])"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    # Calculate semi perimeter\n    s = (a + h) / 2\n    \n    # Calculate area using Heron's formula\n    area = (s*(s - a)*(s - h))**0.5\n    \n    return area"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n == 0 or n == 1:\n        return n\n        \n    cache = [0] * 5 # initialize an array of size 5 for caching purposes\n    result = 0\n    \n    i = 4\n    while i <= n:\n        if i not in cache:\n            cache[i] = fib4(i - 1) + fib4(i - 2) + fib4(i - 3) + fib4(i - 4)\n            \n        result += cache[i]\n        i += 1\n        \n    return result"}
{"task_id": "HumanEval/47", "completion": "def median(l: List[float]):\n    sorted_list = sorted(l)\n    midpoint = len(sorted_list) // 2 if len(sorted_list) % 2 == 0 else (len(sorted_list) + 1) / 2\n    return sorted_list[midpoint]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    # check if n is negative or zero\n    if n < 0:\n        return -modp(-n, p)\n        \n    # calculate power and remainder\n    power = 1 << n\n    result = power % p\n    \n    # handle edge cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return result"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str) -> str:\n    shifted = [char.lower() if char.isupper() else char for char in s]\n    return ''.join(chr((ord(c)-5+26)%26+64)for c in shifted)"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    return text.translate(str.maketrans('aeiouAEIOU', '', replacement=True))"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x <= t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    if len(s0)!= len(s1):\n        return False\n    \n    char_map = {}\n    \n    for c in s0:\n        if c in char_map:\n            char_map[c] += 1\n        else:\n            char_map[c] = 1\n            \n    for c in s1:\n        if c not in char_map or char_map[c] < 2:\n            return False\n        \n    return True"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) > 0 and stack[len(stack)-1] == '(':\n                stack.pop()\n            else:\n                return False\n    if len(stack)!= 0:\n        return False\n    return True"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]: # Increasing\n            return True\n        elif l[i] < l[i+1]: # Decreasing\n            return True\n    return False"}
{"task_id": "HumanEval/58", "completion": "def common(l1: List[Any], l2: List[Any]) -> List[int]:\n    return sorted(list(set(l1).intersection(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n /= i\n        else:\n            i += 1\n    return max(i, n)"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) > 0 and stack[len(stack)-1] == '(':\n                stack.pop()\n            else:\n                return False\n        else:\n            continue\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [sum(j*x**i for i, j in enumerate(xs)) for x in range(len(xs)+1)]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n < 3:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    count = 0\n    for c in s:\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\":\n            count += 1\n        elif c == \"y\" and s[-1]!= \"h\": # check y is last letter and h is not next to it\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    # Get the length of the input number\n    n = len(str(x))\n    \n    # Check if shifting is greater than the length of the number\n    if shift > n:\n        return str(int(x) * 10**n - int(x) % (10**n))[::-1] + str(x)[:n]\n        \n    # Create an empty list to store the rotated digits\n    rotated = []\n    \n    # Iterate through each digit of the input number\n    for i in range(n):\n        # Append the current digit to the rotated list\n        rotated.append(str(x)[i])\n        \n        # Shift the remaining digits to the left\n        x = x // 10\n        \n    # Reverse the order of the rotated digits\n    rotated.reverse()\n    \n    # Concatenate the original first digit with the rotated digits\n    return ''.join(rotated)"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    # initialize sum to zero\n    total = 0\n    \n    # iterate through each character in s\n    for char in s:\n        if ord(char) >= 48 and ord(char) <= 57:\n            # check if current character is an integer between 0 and 9\n            total += int(char)\n        \n    return total"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # split the input into two parts\n    s = s.split()\n    \n    # initialize variables to store counts of each type of fruit\n    apple_count = int(s[0]) if len(s)>=2 else 0\n    orange_count = int(s[1]) if len(s)>=2 else 0\n    mango_fruit_count = n - apple_count - orange_count\n    \n    return mango_fruit_count"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    # create a new set for unique even numbers\n    even_set = set()\n    # iterate through each number in arr\n    for num in arr:\n        if num % 2 == 0:\n            # check if the even number already exists in the set\n            if str(num) in even_set:\n                # if yes, continue iterating\n                continue\n            else:\n                # otherwise, add the even number to the set\n                even_set.add(str(num))\n    # sort the set by the value of the even number\n    sorted_even_set = sorted(even_set)\n    # get the smallest even number from the sorted set\n    smallest_even_number = min(sorted_even_set)\n    # find the index of the smallest even number\n    index = next((i for i, val in enumerate(sorted_even_set) if int(val) == smallest_even_number), None)\n    # if no even numbers exist, return []\n    if index is None:\n        return []\n    # construct the output list containing the smallest even number and its index\n    result = [smallest_even_number, index]\n    return result"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_freq = lst[0]\n    for num in lst:\n        if len(set([num])) > lst.count(num) + 1:\n            max_freq = max(max_freq, len(set([num])))\n    return max_freq if max_freq >= 1 else -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if len(lst) <= 1:\n        return lst\n    \n    min_val = min(lst[0], lst[-1])\n    max_val = max(lst[0], lst[-1])\n    \n    left_half = []\n    right_half = []\n    \n    for i in range(len(lst)):\n        if i < len(lst)/2:\n            left_half.append(i)\n        else:\n            right_half.append(i)\n            \n    sorted_left = sorted(strangeness_sort_helper(left_half), reverse=True) + strangeness_sort_helper(right_half)\n    sorted_right = sorted(strangeness_sort_helper(right_half), reverse=False) + strangeness_sort_helper(left_half)\n    \n    return sorted_left + [min_val] + [max_val] + sorted_right\n\ndef strangeness_sort_helper(lst):\n    return sorted(lst, key=lambda x: -x)"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    s = (a + b + c)/2\n    if s > a or s > b or s > c:\n        return -1\n    else:\n        return ((s*(s-a)*(s-b)*(s-c))/86400)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    \"\"\"\n    Returns True if an object q will fly given a maximum possible weight w; False otherwise.\n    \n    An object q will fly if it is balanced (a palindrome), and the sum of its elements is less than or equal to w.\n    \n    Args:\n        q (list): A list representing an object.\n        w (int): Maximum possible weight for the object.\n        \n    Returns:\n        bool: True if the object will fly, False otherwise.\n    \"\"\"\n    return len(q) == len(reversed(q)) and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    left, right = 0, n - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        if arr[mid]!= arr[right]:\n            # check if we can flip all remaining elements after this index\n            count = sum(abs(arr[i] - arr[mid]))\n            \n            if count > abs(arr[mid] - arr[n - 1]):\n                return count\n                \n            elif count == abs(arr[mid] - arr[n - 1]):\n                return min(count, n - abs(arr[mid] - arr[n - 1]))\n            \n            else:\n                left += 1\n        \n        else:\n            right -= 1\n\n    # If we reach here, then there exists a unique value at the end which needs to be replaced\n    # We can replace it by either the first or last element\n    diff = abs(arr[-1] - arr[0])\n    return max(diff, n - diff)"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    # create set for faster lookup\n    char_set = set()\n    \n    # iterate through both lists simultaneously\n    i = j = 0\n    while i < len(lst1) and j < len(lst2):\n        # get length of string at index i in lst1\n        str_len = len(lst1[i])\n        \n        # check if character is present in either list or their sets\n        if str_len <= len(lst2[j]):\n            # update count of characters less than len(lst2[j])\n            char_count += 1\n            \n            # move to next character in lst1\n            i += 1\n        else:\n            # move to next character in lst2\n            j += 1\n            \n            # remove character from set\n            char_set.remove(lst2[j[-str_len:]])\n            \n            # reset counter\n            char_count = 0\n    \n    # compare counts\n    if char_count > 0:\n        return lst1[:]\n    elif char_count == 0:\n        return lst2[:]\n    else:\n        return lst1 + lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    for i in range(2, int(a**0.5)+1):\n        if a % i == 0:\n            return False\n    primes = []\n    sieve = [True] * (int(a**0.5)+1)\n    sieve[0], sieve[1] = False, False\n    for p in range(2, int(a**0.5)+1):\n        if sieve[p]:\n            primes.append(p)\n    return len(primes) >= 3"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n ** int(n!= 0)"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    \"\"\"\n    Returns True if given integer 'a' is a cube of some integer number; otherwise False.\n    \"\"\"\n    for i in range(int(a**(1/3)), -1, -1):\n        if int(i**3) == a:\n            return True\n    return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    \n    for char in num:\n        if char.isalpha() and int(char) >= 2 and int(char) <= 'F': # check if character is an alphabetical character between 2 and F\n            continue\n        elif int(char) == 3 or int(char) == 5 or int(char) == 7 or \\\n             int(char) == ord('B') or int(char) == ord('D'): # check if character is one of the given prime numbers or letters B or D\n                count += 1\n                \n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    result = \"\"\n    \n    while decimal > 0:\n        remainder = decimal % 2\n        if remainder == 0:\n            result += \"0\"\n        else:\n            result += \"1\"\n        \n        decimal //= 2\n    \n    result = \"db\" + result + \"db\"\n    return result"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i] == s[i+1]:\n            continue\n        elif s[i] == s[i+2]:\n            count += 1\n    return len(s) >= 3 - count"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    # Create an empty dictionary to store the letter grades\n    letter_grades = {}\n\n    # Iterate through each student's GPA\n    for gpa in grades:\n        # Calculate the corresponding letter grade based on the GPA\n        if gpa >= 4.0:\n            letter_grade = \"A+\"\n        elif gpa >= 3.7:\n            letter_grade = \"A\"\n        elif gpa >= 3.3:\n            letter_grade = \"A-\"\n        elif gpa >= 3.0:\n            letter_grade = \"B+\"\n        elif gpa >= 2.7:\n            letter_grade = \"B\"\n        elif gpa >= 2.3:\n            letter_grade = \"B-\"\n        elif gpa >= 2.0:\n            letter_grade = \"C+\"\n        elif gpa >= 1.7:\n            letter_grade = \"C\"\n        elif gpa >= 1.3:\n            letter_grade = \"C-\"\n        elif gpa >= 1.0:\n            letter_grade = \"D+\"\n        else:\n            letter_grade = \"E\"\n        \n        # Add the letter grade to the dictionary\n        letter_grades[gpa] = letter_grade\n\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Returns true if the given string's length is a prime number.\"\"\"\n    # Remove all non-alphanumeric characters from the input string.\n    string = ''.join(filter(str.isalnum, string))\n    \n    # Convert the string to an integer.\n    num = int(string)\n    \n    # Check if the number is divisible by any numbers less than it.\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n        \n    # If none of the above conditions are met, then the number is prime.\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    result = 0\n    \n    for i in range(10**n):\n        if str(i)[0] == '1' and str(i)[-1]!= '1': # check if number is one at beginning and not at end\n            result += 1\n            \n    return result"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    # convert to binary and calculate sum\n    binary_sum = int(''.join([str((x)) for x in bin(N)]), 2)\n    # convert back to decimal and format result\n    return str(binary_sum).zfill(32)"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return [x for x in lst if x % 2 == 0 and x!= lst[::len(lst)-1][::len(lst)-1]]"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # split the input into list of words\n    s = s.split()\n    \n    # create empty result string\n    res = \"\"\n    \n    # iterate over each word\n    for i in range(len(s)):\n        # sort the characters of current word\n        sorted_word = \"\".join([char for char in s[i] if char.isalpha()])\n        \n        # append to result string\n        res += sorted_word + \" \"\n    \n    return res[:-1].lower().capitalize()"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    res = []\n    for i in range(len(lst)):\n        if len(lst[i]) > x:\n            res += [(i, j) for j in range(x)]\n            res.sort()\n            res.reverse()\n            break\n    return res"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    # check for empty list\n    if len(array) == 0:\n        return array\n    \n    # get the first and last element from the array\n    first = array[0]\n    last = array[-1]\n    \n    # calculate the difference between the two elements\n    diff = abs(first - last)\n    \n    # determine whether to sort the array in ascending or descending order based on the difference\n    if diff % 2!= 0:\n        return sorted(array)\n    else:\n        return sorted(reversed(array))"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    # create a new list of characters from s\n    chars = list(s)\n    \n    # rotate the alphabet by shifting each letter down by 2 spaces\n    for i in range(len(chars)):\n        if chars[i] >= 'a':\n            chars[i] += chr((ord(chars[i]) - ord('a')) * 2 + ord('a'))\n        \n    # join the modified characters back into a string\n    return ''.join(chars)"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    lst.sort()\n    return lst[len(lst)-1] if len(lst)>0 else None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    i = 0\n    boredoms = 0\n    for c in S:\n        if c == \".\":\n            if i > 0 and S[i - 1]!= \" \":\n                continue\n            elif i + 1 < len(S) and S[i+1].isalpha() and S[i+2].isdigit():\n                boredoms += 1\n        elif c == \"?\":\n            if i > 0 and S[i - 1]!= \" \":\n                continue\n            else:\n                boredoms += 1\n        elif c == \"!\":\n            if i > 0 and S[i - 1]!= \" \":\n                continue\n            else:\n                boredoms += 1\n        i += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \"\"\"\n    try:\n        x = int(x)\n        y = int(y)\n        z = int(z)\n        \n        # Check for equality between sums\n        if x + y == z or x + z == y or y + z == x:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    # Create an empty string to store encoded message\n    encoded_msg = \"\"\n    \n    # Iterate over each character in the input message\n    for char in message:\n        # Convert lowercase characters to uppercase\n        if char.islower():\n            encoded_char = chr((ord(char) + 31 - ord(\"a\")) % 26 + ord(\"A\"))\n        else:\n            encoded_char = char\n        \n        # Append encoded character to encoded message\n        encoded_msg += encoded_char\n    \n    return encoded_msg"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    if len(lst) == 0:\n        return 0\n    \n    max_prime = -1\n    total_sum = 0\n    \n    for i in range(len(lst)):\n        num = lst[i]\n        \n        # check if number is prime\n        for j in range(2, int(num/2)+1):\n            if num % j == 0:\n                break\n            \n        else:\n            if num > max_prime or (num == max_prime and num >= lst[i]):\n                max_prime = num\n                \n        # calculate sum of digits\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num%10\n            num //= 10\n        total_sum += digit_sum\n    \n    return total_sum"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    # Check for an empty dict\n    if len(dict) == 0:\n        return False\n    \n    # Initialize boolean flag to indicate whether all keys have same case or not\n    all_same = True\n    \n    # Iterate over each key and value pair in the dict\n    for k, v in dict.items():\n        # If current key is string and its case doesn't match others, set all_same flag to False\n        if type(k)!= str or type(v)!= str:\n            all_same = False\n        \n        elif k.islower()!= v.islower():\n            all_same = False\n            \n        elif k.isupper()!= v.isupper():\n            all_same = False\n    \n    # Return true if all keys have either all lowercase or all uppercase letters\n    return all_same"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    if a % 10 == 0 or b % 10 == 0:\n        return \"Both inputs have zero in their units place\"\n    \n    elif a < b:\n        temp = a\n        a = b\n        b = temp // 10 * 10 + temp % 10\n        \n    else:\n        temp = b\n        b = a\n        a = b // 10 * 10\n        \n    while True:\n        if int(str(b))**2 - int(str(a))**2!= 0:\n            break\n        a -= 1\n        b += 1\n            \n    return str(int(str(a)**2))*int(str(b)**2)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'A' or s[i] == 'B' or s[i] == 'C' or s[i] == 'D':\n            if ((i+2)%4==0 and (i-2)%4>=0):\n                count+=1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # convert string to float\n    num = float(value)\n    # get absolute difference between num and nearest int\n    diff = abs(int(num)) + abs(float(num) - int(num))\n    # check which int is closer\n    if diff <= 0.5:\n        return int(num)\n    else:\n        return int(num) + 1"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    return [n*2**i for i in range(0, len(str(n)))]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    # Split on comma or space\n    s = s.replace(\", \", \",\").split()\n    # Return list of words\n    return s"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    for num in range(max(x,y), min(x+10, y)+1): # iterate through all even integers between x and y\n        if num % 2 == 0 and num >= max(x, y): # check if it's an even integer within the given range\n            return int(str(num)[:-2]) + str(int(num[-2])) # convert to string, remove last digit, concatenate with original last digit"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    for i in range(n, m+1):\n        total += i\n        \n    avg = int(total / (m + 1))\n    rounded_avg = round(avg)\n    bin_rounded_avg = bin(rounded_avg)[2:]\n    return bin_rounded_avg"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    # create an empty set to store digits without even numbers\n    even = {0}\n    result = []\n    for num in x:\n        if str(num)[-1].isdigit() and int(str(num)[-1]) % 2!= 0:\n            # check if number is odd\n            if int(str(num)[-1]) not in even:\n                result.append(int(str(num)[-1]))\n                even.add(int(str(num)[-1]))\n        else:\n            continue\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if len(arr) == 0:\n        return []\n    else:\n        sorted_arr = sorted([x for x in arr if 1 <= x < 10])\n        reversed_sorted_arr = list(reversed(sorted_arr))\n        result = [str(i) for i in reversed_sorted_arr]\n        return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(i*factorial(i))\n        else:\n            res.append(sum(range(1, i)))\n    return res\n    \ndef factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    count = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and int(str(i)) % 2 == 0:\n            count += 1\n            \n        if str(i)!= str(i)[::-1]:\n            break\n            \n    return (count, len([x for x in range(1, n+1) if str(x) == str(x)[::-1] and int(str(x)) % 2!= 0]) - count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    num_sum = 0\n    \n    for i in arr:\n        if i < 0:\n            abs_i = abs(-i)\n            \n            # check each digit from right to left\n            while abs_i!= 0:\n                num_sum += 1\n                abs_i //= 10\n                \n        else:\n            # check each digit from left to right\n            while i > 0:\n                num_sum += 1\n                i //= 10\n                \n    return num_sum"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    # Check if there are at least two elements in the array\n    if len(arr) < 2:\n        return True\n        \n    # Initialize a variable to keep track of whether we need to do another right shift or not\n    more_shift = False\n    \n    # Iterate through each pair of adjacent elements in the array\n    for i in range(len(arr)-1):\n        # If the current element is greater than its neighbor, set the flag and break out of the loop\n        if arr[i] > arr[i+1]:\n            more_shift = True\n            break\n            \n    # Return True if we don't need to do anymore right shifts\n    if not more_shift:\n        return True\n        \n    # Otherwise, return False because we cannot achieve a non-decreasing order without doing another right shift\n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if len(set(lst1 + lst2)) == len(list(set(lst1 + lst2))) * 2:\n        return 'YES'\n    else:\n        return 'NO'"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    counts = {}\n    max_count = 0\n    for char in test.lower():\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n        if counts[char] > max_count:\n            max_count = counts[char]\n    return {k: v for k,v in counts.items() if v == max_count}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # create an empty set of characters from c\n    char_set = set(c)\n    \n    # remove all characters from s which are present in char_set\n    filtered_string = ''.join([char for char in s if char not in char_set])\n    \n    # check whether the filtered string is a palindrome or not\n    is_palindrome = True\n    for i in range(len(filtered_string)//2):\n        if filtered_string[i]!= filtered_string[-i - 1]:\n            is_palindrome = False\n            break\n            \n    return (filtered_string, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum([int(d) % 2 == 1 for d in ''.join(str(s))])\n        result.append(\"The number of odd elements in the string {} is {}.\".format(s, count))\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    left = 0\n    right = len(nums)-1\n    \n    while left < right:\n        curr_sum = nums[left] + nums[right]\n        if curr_sum > 0:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n            \n        else:\n            return abs(curr_sum)\n        \n    # check for last element case\n    if nums[left] >= 0 and nums[left+1] <= 0:\n        return abs(nums[left])\n    \n    # check for all negative case\n    if all(nums[i] < 0 for i in range(len(nums))):\n        return sum(abs(nums[:]))\n    \n    # check for all positive case\n    if all(nums[i] > 0 for i in range(len(nums))):\n        return sum(nums[:])\n    \n    # check for mixed case\n    if max(nums) / min(nums) > 1:\n        return sum(max(nums), min(nums))\n    \n    # check for equal values\n    if len(set(nums))!= len(nums):\n        return sum(nums)\n    \n    # check for single value\n    if len(set(nums)) == 1:\n        return sum(nums)\n    \n    # check for multiple values\n    if len(set(nums)) > 1:\n        return sum(min(nums))"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    steps = 0\n    for i in range(rows - 1, -1, -1):\n        if grid[i][cols - 1]:\n            steps += 1\n        else:\n            continue\n        \n        for j in range(cols - 2, -1, -1):\n            if grid[i+1][j]:\n                steps -= 1\n            elif grid[i+1][j+1]:\n                steps += 1\n                \n        if steps == 0:\n            return int(math.ceil(-capacity / float(steps)))"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: bin(x).count('1') if x >= 0 else -abs(bin(x)), reverse=True)"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    # split the string into individual words\n    words = s.split()\n    \n    # initialize result list\n    res = []\n    \n    # iterate through each word\n    for i in range(len(words)):\n        # check if current word has exactly n consonants\n        if len([c for c in words[i] if c in 'bcdfghjklmnpqrstvwxyz']) == n:\n            # append word to result list if it meets criteria\n            res.append(words[i])\n            \n    # return result list\n    return res"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    # create an empty list for storing vowels\n    vowels = []\n    # loop through each character in the word\n    for i in range(len(word)):\n        # check if current character is a vowel or not\n        if word[i] == 'a':\n            vowels.append('A')\n        elif word[i] == 'e':\n            vowels.append('E')\n        elif word[i] == 'i':\n            vowels.append('I')\n        elif word[i] == 'o':\n            vowels.append('O')\n        elif word[i] == 'u':\n            vowels.append('U')\n        \n        # check if there is at least one vowel after the current character\n        if len(vowels) > 0:\n            break\n            \n    # check if there is at least one vowel before the first non-vowel character\n    if len(vowels) < 2:\n        return ''\n        \n    # initialize variables for finding the closest vowel\n    leftmost_vowel = None\n    closest_vowel = None\n    min_distance = float('inf')\n    \n    # loop through each vowel starting from the second last position\n    for j in range(len(vowels)-1, -1, -1):\n        # calculate distance between current vowel and all previous vowels\n        distances = [abs(ord(vowels[k]) - ord(vowels[j])) for k in range(j+1)]\n        # update minimum distance found so far\n        min_distance = min(min_distance, min(distances))\n        # set leftmost_vowel variable if this vowel has smaller distance than previously found\n        if leftmost_vowel is None or distances[leftmost_vowel] >= min_distance:\n            leftmost_vowel = j\n            closest_vowel = vowels[j]\n    \n    return closest_vowel"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        if s=='':\n            continue\n        elif s[0]=='(':\n            stack.append(s)\n        else:\n            if len(stack)>1 and stack[-2][:-1]!=''::\n                stack.pop()\n                stack.pop()\n            else:\n                return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # create a copy of input array to avoid modifying original data\n    temp_arr = arr.copy()\n    \n    # sort the temporary array\n    temp_arr.sort()\n    \n    # initialize result array\n    res = []\n    \n    # iterate through the sorted array\n    for i in range(k):\n        # append first k elements from the sorted array to the result array\n        res.append(temp_arr[i])\n    \n    # remove duplicates if there are more than one element in the input array\n    while len(res) > 1:\n        max_val = min([x[len(res)-1] for x in res])\n        res.remove(max_val)\n        \n    return res"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    total = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1 and i % 2!= 0: # check if element is odd and in an even position\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    total = 0\n    for i in range(k):\n        total += arr[i]\n    if total < 0:\n        total = 0 - total\n    return total"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    result = []\n    while n!= 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n *= 3 + 1\n        result.append(n)\n    return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    # Check that the input is not empty\n    if len(date.split())!= 3:\n        return False\n        \n    # Extract day, month, year from the input\n    day, month, year = map(int)\n    month -= 1   # Months start at 0 so we can check up to 12\n    day = min(max(day, 1), 31)\n    month = min(max(month, 1), 12)\n    year = int(year)\n    \n    # Validate the date based on the above conditions\n    if year % 4 == 0 and ((year%100!= 0 or month > 2) and year%400 == 0 or month > 2):\n        if year <= 2099 and (month < 4 or month > 12):\n            return False\n            \n        elif year >= 2100 and (month < 1 or month > 12):\n            return False\n                \n        else:\n            return True\n        \n    else:\n        return False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    # check for comma separated values\n    if \",\" in txt.lower():\n        return txt.split(\",\")\n    \n    # count lower case characters with odd order\n    num_chars = 0\n    for char in txt.lower():\n        if ord(char) % 2!= 0 and char not in [\".',\":]:\n            num_chars += 1\n            \n    return num_chars"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    \"\"\"\n    Returns if given list is sorted in ascending order.\n    \n    Parameters:\n        lst (list): List to check for sorting.\n        \n    Returns:\n        bool: Whether or not the list is sorted.\n    \"\"\"\n    seen = set()\n    for num in lst:\n        if num == lst[0]: # Checking for duplicates\n            return False\n        elif num > lst[-1] and num <= lst[len(lst)-2]: # Checking for increasing values\n            seen.add(num)\n    return len(seen) == len(lst) - 1"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if ((interval1[1]+1) >= interval2[0])*((interval2[1]+1) >= interval1[0]):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    \n    res = 0\n    for num in arr:\n        sign = 1 if num > 0 else (-1) * num\n        res += abs(num) * sign\n        \n    return res"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # create a set of visited cells\n    visited = set()\n    \n    def dfs(x, y, lst):\n        nonlocal result\n        \n        # check if this cell has already been visited or it is out of bounds\n        if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or (x,y) in visited or (x+k, y+k) in visited:\n            return\n            \n        # mark the cell as visited\n        visited.add((x,y))\n        \n        # append its value to the list\n        lst.append(grid[x][y])\n        \n        # recursively explore neighbours\n        dfs(x+1, y, lst)\n        dfs(x-1, y, lst)\n        dfs(x, y+1, lst)\n        dfs(x, y-1, lst)\n        \n        # remove the last element added to the list\n        del lst[-1]\n        \n        # update the result if necessary\n        if len(lst) == k and all([lst[i]<lst[i+1] for i in range(len(lst)-1)]):\n            result = tuple(sorted(lst))\n        elif len(lst) > k:\n            result = None\n        \n        # backtrack by undoing the last move\n        visited.remove((x,y))\n        \n        return\n\n    # initialize the result\n    result = None\n    \n    # perform DFS starting from every unvisited cell\n    for x in range(len(grid)):\n        for y in range(len(grid[0])):\n            if (x,y) not in visited:\n                dfs(x, y, [])\n                \n        # choose the best solution found so far\n        if result is None or sorted([result[i] for i in range(len(result))] )==[1]:\n            result = tuple(sorted([grid[x][y] for i in range(k) for x in range(len(grid))for y in range(len(grid[0]))if lst[i]==\"\"]))\n\n    return"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    # initialize empty list for result\n    res = []\n    \n    # iterate from 0 to n and append each element of tribonacci sequence to result\n    for i in range(max(1, n+1)):\n        if i == 1 or (i%3==1 and i>1):\n            res.append(tri(i))\n        \n    return res[::-1]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    # initialize result to 0 and keep track of number of odd digits seen so far\n    result = 0\n    num_odd = 0\n    \n    while n > 0:\n        digit = n % 10\n        \n        # check if current digit is odd or even\n        if digit % 2!= 0:\n            # increment count for each odd digit found\n            num_odd += 1\n            \n            # multiply by the corresponding factor\n            result *= digit\n        \n        # divide the number by 10 to remove the last digit\n        n //= 10\n    \n    # check if there were any odd digits at all\n    if num_odd == 0:\n        return 0\n    else:\n        return result"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif len(stack) > 0 and stack[-1]!= '[':\n            continue\n        else:\n            stack.pop()\n    return bool(len(stack))"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    rounded_lst = [round(x) for x in lst] #Round all elements in the list to the upper integer ceiling\n    total = 0\n    for num in rounded_lst:\n        if num > 0:\n            total += num**2 #Add square of number to the running total\n    return total #Returns the final result after adding up all squares"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1].lower() not in'\\n' and (len(txt)>0 and txt[-2]!=' ') or txt[-1].lower() in 'abcdefghijklmnopqrstuvwxyz'"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i]!= arr[i+1]: # check if current and next elements are different\n            left = i + 1\n            right = len(arr) - 1\n            while left < right: # find indices where current element occurs before next one\n                mid = (left + right) // 2\n                if arr[mid] == arr[i]:\n                    left += 1\n                elif arr[mid] > arr[i]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            if left < len(arr) - 1:\n                return left\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if len(lst) < 2:\n        return None, None\n    \n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    \n    if negatives and positives:\n        max_negative = max(negatives)\n        min_positive = min(positives)\n        \n        return (-max_negative, min_positive)\n    else:\n        return None, None"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    # check for equality first to avoid unnecessary comparisons\n    if a == b:\n        return None\n    \n    # convert both inputs to float so they can be compared numerically\n    fa = float(a)\n    fb = float(b)\n    \n    # perform comparison based on their types\n    if isinstance(fa, str) and isinstance(fb, str):\n        # if both input strings represent reals, compare them using python's float() method\n        if float(fa) > float(fb):\n            return fb\n        else:\n            return fa\n    elif isinstance(fa, int) and isinstance(fb, int):\n        # if both inputs are integers, compare them directly\n        if fa > fb:\n            return fb\n        else:\n            return fa\n    else:\n        # otherwise, use python's cmp() method to compare the two inputs\n        if fa < fb:\n            return a\n        else:\n            return b"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    for i in range(10): # check from 2 to 9 since we need at least one even number and two odd ones\n        if n - i*i == i+1 + i+3: # check if it's equal to the sum of four even numbers starting from 2\n            return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n        result /= int(i)\n    return result**int(n)"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    return re.sub('\\s+', '-', text).replace('--','')"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name)>3 or not file_name.startswith(str.lower(list(string.ascii_letters)+list(''))):\n        return \"No\"\n    elif \".txt\" not in file_name[:-4] and \".exe\" not in file_name[:-4] and \".dll\" not in file_name[:-4]:\n        return \"No\"\n    else:\n        return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i]**2\n        elif i % 4 == 0 and i%3!= 0:\n            total += lst[i]**3\n    return total"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    # create an empty list to store the words\n    word_list = []\n    \n    # split the sentence into individual words\n    words = sentence.split()\n    \n    # iterate through each word\n    for i in range(len(words)):\n        # check if the length of this word is prime\n        if all(num!= word[i] for num in range(2, int(word)+1) if word[i]!= str(word[i])):\n            # append it to the list\n            word_list.append(words[i])\n            \n    # join the list back together into a single string\n    result =''.join(word_list)\n    \n    return result"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    # convert strings to integers\n    num_str = int(x[:-1])\n    denom_str = int(n[:-1])\n    \n    # check for division by zero\n    if denom_str == 0:\n        return False\n    \n    # calculate result\n    result = num_str / denom_str\n    \n    # check if result is an integer\n    if result % 1!= 0:\n        return False\n        \n    return True"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    nums.sort(key=lambda x: sum(int(d) for d in str(x)) + int(str(x)[3]))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if int(str(num)[0]) % 2 == 1 and str(int(num))[-1]!= '0' and str(int(num))[:-1]!= '0':\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    count = 0\n    for i in range(n):\n        if i+1 == len(range(i*i-i+1)) or (i+1)*(i+1)-(i+1)+1!= 3*(i*i-i+1):\n            continue\n        else:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    # create list of planets' distances from the sun\n    dist = [36.09, 48.75, 57.91, 77.87, 142.7, 195.2, 287.4, 307.7]\n    \n    # check for incorrect planet name inputs\n    if planet1 == 'Jupiter':\n        planet1 = 'Sun'\n    elif planet2 == 'Neptune':\n        planet2 = 'Sun'\n        \n    # initialize result list\n    res = []\n    \n    # iterate through each planet\n    for i in range(len(dist)):\n        # find index of current planet in distance list\n        idx = dist[i].index(planet1)\n        \n        # get previous and next indices\n        prev_idx = int(idx - 1) if idx > 0 else len(dist)-1\n        next_idx = int(idx + 1) if idx < len(dist)-1 else 0\n        \n        # append planets at these indices to result list\n        res += [(dist[prev_idx], dist[next_idx]) for _ in range(len(res))]\n        \n    # sort result list by proximity to the sun\n    res.sort()\n    \n    return res"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # create a new empty dictionary to store the sum of values for each key\n    value_dict = {}\n    \n    # iterate through the given list\n    for i in range(len(lst)):\n        current_word = lst[i]\n        \n        # check if this word has already been added to the dictionary before\n        if current_word in value_dict:\n            # get the existing sum for this word\n            existing_value = value_dict[current_word]\n            \n            # calculate the difference between the previous and next occurrence of this word\n            diff = len(lst[(i+1)%len(lst)]) - len(current_word)\n            \n            # update the total sum based on the number of occurrences and their differences\n            value_dict[current_word] += diff * existing_value + len(current_word)\n        else:\n            # set the initial sum for this word to its own length\n            value_dict[current_word] = len(current_word)\n                \n    # convert the dictionary keys into a list of tuples representing the sorted order\n    sorted_keys = sorted(value_dict.keys(), key=lambda x: (-int(x), x))\n    \n    # initialize an empty list to hold the final result\n    output_list = []\n    \n    # iterate through the sorted keys and append the corresponding values to the output list\n    for key in sorted_keys:\n        output_list.append(key)\n        output_list.extend([val*len(key)+len(str(val)) for val in value_dict[key]])\n    \n    # remove duplicate elements from the resulting list\n    unique_values = list(set(output_list))\n    \n    # join the remaining elements together into a single string separated by spaces\n    return''.join(unique_values)"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        elif num == 2:\n            return True\n        else:\n            for i in range(2, int(num**0.5)+1):\n                if num % i == 0:\n                    return False\n            return True\n        \n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if type(num)!= int or num < 0:\n            continue\n        elif num % 2 == 0:\n            continue\n        else:\n            result += (num ** 2)\n    return result"}
{"task_id": "HumanEval/152", "completion": "def compare(scores, guesses):\n    # Initialize empty list for storing differences\n    diffs = []\n    \n    # Iterate through both lists simultaneously\n    for i in range(len(scores)):\n        # Check if guess equals score\n        if scores[i] == guesses[i]:\n            # Add 0 to differences list\n            diffs.append(0)\n        else:\n            # Calculate absolute difference and append to differences list\n            diffs.append(abs(scores[i] - guesses[i]))\n            \n    return diffs"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    # create an empty dictionary to store the scores of each extension\n    score = {}\n    \n    # iterate through all the extensions\n    for ext in extensions:\n        # calculate the score based on the formula described above\n        cap = sum([1 for letter in ext if letter.isupper()])\n        sm = sum([1 for letter in ext if letter.islower()])\n        score[ext] = abs(cap - sm)\n        \n    # sort the extensions by their scores\n    sorted_extensions = sorted(score.items(), key=lambda x: x[1], reverse=True)\n    \n    # get the index of the highest scoring extension\n    max_index = len(sorted_extensions) - 1\n    \n    # check if there is only one extension\n    if max_index < 0:\n        return class_name + \".NoExtensionsAvailable\"\n    \n    # construct the output string using the highest scoring extension\n    return class_name + \".\" + sorted_extensions[max_index][0]"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a,b):\n    for i in range(len(a)):\n        j = len(b)-i-1\n        if a[j:] == b and all(a[i]==b[i]for i in range(0,len(b),2)) :\n            return True\n        elif a[:j] == b and all(a[i]==b[i+1]for i in range(0,len(b),2)) :\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    count = \"\"\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            count += \"even\"\n        else:\n            count += \"odd\"\n            \n    return (len([x for x in count if x == 'even']), len([x for x in count if x == 'odd']))"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(num):\n    if num < 1 or num > 3999:\n        raise ValueError(\"Input must be between 1 and 3999\")\n    \n    roman = {\n        1000: \"M\",\n        900: \"CM\",\n        500: \"D\",\n        400: \"CD\",\n        100: \"C\",\n        90: \"XC\",\n        50: \"L\",\n        40: \"XL\",\n        10: \"X\",\n        9: \"IX\",\n        5: \"V\"\n    }\n    \n    result = \"\"\n    for i in range(abs(num)):\n        if abs(num) % 1000 in roman:\n            result += roman[abs(num) // 1000] + \"C\" * (abs(num) % 1000!= 0)\n        else:\n            result += roman[abs(num)]\n            \n        if i < len(str(num)) - 1:\n            result += \"I\" * ((ord(result[-1]) - ord('I') + 1) % 3!= 0)\n                \n        if i >= len(str(int(math.floor(num)))) - 1:\n            result += \"IV\" if math.floor(num) / 4 == floor(num/4) else \"XXX\"\n            \n        if i >= len(str(int(math.ceil(num)))) - 1:\n            result += \"V\" if math.ceil(num) / 5 == ceil(num/5) else \"XX\"\n            \n        if i >= len(str(int(round(num)))) - 1:\n            result += \"VI\" if round(num) / 6 == round(num/6) else \"XIII\"\n            \n        if i >= len(str(int(math.trunc(num)))) - 1:\n            result += \"IV\" if math.trunc(num) / 4 == trunc(num/4) else \"IIII\"\n            \n        if i >= len(str(int(math.floorf(num))))"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    s = (a + b + c)/2\n    if s > Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = None\n    for word in sorted(set(\"\".join([str(x) for x in words]))): # convert all to string and sort set of chars\n        if len(set(words)) > len(set(word)): # check if current word has more unique letters than longest so far\n            max_word = word\n        elif max_word is not None and len(set(words)) == len(set(max_word)): # check if equal length and compare lexicographically\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    # check for edge cases\n    if number >= need or remaining == 0:\n        return [need, 0]\n        \n    # calculate how many carrots we can eat from what is available\n    max_eat = min(remaining, need - number)\n    remaining -= max_eat\n    number += max_eat\n    \n    # recursively call the function until we run out of carrots\n    while remaining!= 0:\n        [x, y] = eat(number, need, remaining)\n        number += x + y\n        remaining = y\n        \n    return [number, remaining]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator) == len(operand)-1:\n        left_op, right_val = operator[0], operand[-1]\n        for i in range(len(left_op)):\n            left_val = eval(\"\".join([str(x) for x in left_op[:i]]))\n            right_list = \"\".join([str(x) for x in operand[:-1]])\n            new_right_val = int(right_list + str(eval(left_val)))\n            left_op = \"\".join([str(x) for x in left_op])\n            left_val = eval(left_op)\n            yield left_val + new_right_val\n    \n    else:\n        raise ValueError('Invalid input')"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            # convert lowercase to uppercase and vice versa\n            if c.islower() and not c.isupper():\n                c = c.upper()\n            elif c.isupper() and not c.islower():\n                c = c.lower()\n            else:\n                result += c\n        else:\n            result += c\n    return result"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        import hashlib\n        hexdigest = hashlib.md5(text.encode()).hexdigest()\n        return hexdigest"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = set()\n    \n    for i in range(max(a, b), min(a+b, 9)+1): # iterate from max of a and b to min of a + b and 9\n        if str(i)[-2:] % 2 == 0: # check if last two digits are even\n            result.add(i) # add to result set\n            \n    return list(result) # convert set to list"}
