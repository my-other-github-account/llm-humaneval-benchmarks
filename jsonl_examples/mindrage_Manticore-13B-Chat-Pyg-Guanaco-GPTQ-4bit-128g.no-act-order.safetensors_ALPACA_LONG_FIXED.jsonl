{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" (these are the complete function defintion)\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    if not numbers:\n        return False\n    if len(numbers) == 1:\n        return False\n    for i in range(1, len(numbers)):\n        for j in [i - 1, i + 1] if i > 0 else [0, 1]:\n            if j < 0 or j >= len(numbers):\n                continue\n            if (numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_groups = []\n    curr_group = []\n    for char in paren_string:\n        if char == '(':\n            if curr_group:\n                paren_groups.append(f\"{curr_group[0]}{char.join(curr_group[1:])}{char}\")\n            curr_group = [char]\n        elif char == ')':\n            if not curr_group:\n                continue\n            paren_groups.append(f\"{curr_group[0]}{char.join(curr_group[1:])}{char}\")\n            curr_group = []\n    if curr_group:\n        paren_groups.append(f\"{curr_group[0]}{char.join(curr_group[1:])}{char}\")\n    return paren_groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n    \n    Return the decimal part of the number.\n    \"\"\"\n    if number < 1:\n        return 0\n    else:\n        return number - (int(number))"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        else:\n            balance -= op\n    return balance < 0"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    if not numbers:\n        return 0\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return [delimeter]\n    return [num1, delimeter, num2] for num1, num2 in zip(numbers, numbers[1:]]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_count = 0\n    result = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_count += 1\n        elif paren_string[i] == ')':\n            paren_count -= 1\n            if paren_count == 0:\n                result.append(i)\n    return result"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), product(numbers) * 1)\n\n"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    n1, n2 = numbers[0], numbers[1]\n    for i in range(2, len(numbers), 2):\n        n3, n4 = numbers[i], numbers[i+1]\n        if n3 > n2:\n            n2 = n1\n            n1 = n3\n        if n4 > n2:\n            n2 = n1\n            n1 = n4\n        if n2 > n1:\n            yield n2\n    yield n2"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[1]:\n        return make_palindrome(string[1:])\n    for i in range(1, len(string) - 1):\n        if string[i]!= string[i-1] or string[i]!= string[i+1]:\n            continue\n        else:\n            return string[0:i] + make_palindrome(string[i:])\n    return make_palindrome(string)\n\n"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" (a, b) -> str\n    Perform binary XOR on the lists of 1s and 0s in a and b, and return the result as a string.\n    \"\"\"\n    a_1s_b_0s = a.split('1') + b.split('0')\n    xor_list = list(itertools.chain.from_iterable(a_1s_b_0s))\n    return ''.join(xor_list)"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        longest_string = strings[0]\n        for string in strings[1]:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a, b):\n    if a < b:\n        a, b = b, a\n    for i in range(1, int(b) + 1):\n        if a % i == 0 and b % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    if not string:\n        return []\n    if len(string) == 1:\n        return [string]\n    return [string] + all_prefixes(string[1:])"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    if n == 0:\n        return \"0\"\n    else:\n        return f\"{n-1} {string_sequence(n-1)}\""}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    # create a set of all characters in the string\n    char_set = set(string)\n    \n    # count the number of elements in the set\n    distinct_character_count = len(char_set)\n    \n    # return the count of distinct characters\n    return distinct_character_count\n\n"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = []\n    for note in music_string:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    n = len(substring)\n    m = len(string)\n    if n == 0 or m == 0:\n        return 0\n    if string.startswith(substring):\n        return n\n    if string.endswith(substring):\n        return m - n\n    i = 0\n    while i < m and string[i]!= substring[0]:\n        i += 1\n    j = 0\n    while j < n and string[i + j]!= substring[0]:\n        j += 1\n    if i + j + 1 == m:\n        return m - i - j + 1\n    return how_many_times(string[i+1:m], substring[1:])"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    numbers = numbers.strip()\n    if not numbers:\n        return \"\"\n    numbers = list(map(int, numbers.split()))\n    sorted_numbers = sorted(numbers)\n    return \" \".join(sorted(list(str(n) for n in sorted_numbers)))"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        return None, None\n    else:\n        min_distance = float('inf')\n        closest_pair = None\n        for i in range(1, len(numbers)):\n            for j in range(i + 1, len(numbers)):\n                distance = numbers[j] - numbers[i]\n                if distance < min_distance:\n                    min_distance = distance\n                    closest_pair = (numbers[i], numbers[j])\n        return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [x / (max(numbers) - min(numbers)) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if x is a number and not type(x) == str]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    if string:\n        return len(string)\n    else:\n        return 0"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n):\n    if n < 2:\n        return n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0 and i < n:\n            return i\n    return n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\"\n    Return a list of all the prime factors of n, in order from smallest to largest,\n    and their multiplicities (the number of times they occur in the factorization of n).\n    n must be the product of all the factors.\n    \"\"\"\n    if n < 2:\n        return [n]\n    factors = []\n    while n > 1:\n        for p in range(2, int(n ** 0.5) + 1):\n            if n % p == 0:\n                factors += [p, n // p]\n    factors.sort(reverse=True)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = [x for x in numbers if x not in seen]\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    lowercase = string.lower()\n    uppercase = string.upper()\n    return lowercase if lowercase == uppercase else uppercase"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    if not strings:\n        return \"\"\n    return strings[0] + \"\".join(strings[1:])"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l):\n    return list(filter(lambda x: x >= 0, l))"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"List of coefficients must have an even number of coefficients\")\n    if n == 0:\n        return 0\n    half = (n + 1) // 2\n    for i in range(half):\n        if i!= half - i:\n            x_coeff = -xs[i]\n        else:\n            x_coeff = 1\n        poly_term = x_coeff * math.pow(x, i)\n        total_term = sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n        if total_term == 0:\n            return x\n    return -1\n\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero find x only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"List of coefficients must have an even number of coefficients\")\n    if n == 0:\n        return 0\n    half = (n + 1) // 2\n    for i in range(half):\n        if i!= half - i:\n            x_coeff = -xs[i]\n        else:\n            x_coeff = 1\n        poly_term = x_coeff * math.pow(x, i)\n        total_term = sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n        if total_term == 0:\n            return x\n    return -1"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l_ = list(l)\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_.append(i)\n    l_ = sorted(l_)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_[i] = l[i]\n    return l_"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    seen = set()\n    unique = []\n    for el in l:\n        if el in seen:\n            continue\n        seen.add(el)\n        unique.append(el)\n    return unique"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: List[int]):\n    if not l:\n        return 0\n    else:\n        return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    if n < 10:\n        return n\n    for i in range(11, n+1, 13):\n        if n % 13 == 0:\n            return 3\n        elif n % 11 == 0:\n            return 2\n        else:\n            return 1"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_l = [l[i] for i in even_indices]\n    sort_indices = [i for i in even_indices if l[i]!= l[i-1]]\n    sort_l = [l[i] for i in sort_indices]\n    return [l[i] for i in even_indices] + sort_l"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    Returns an encoded string by cycling groups of three characters.\n    \"\"\"\n    # slicing the string into groups of three\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    # cycling the elements in each group\n    groups = [list(cycle(group)) for group in groups]\n    # joining the groups\n    return ''.join(groups)\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    Decodes a string encoded with the encode_cyclic function.\n    \"\"\"\n    # slicing the string into groups of three\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    # joining the groups\n    return ''.join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    if n < 2:\n        return n\n    for i in range(2, n+1):\n        if is_prime(i):\n            if i in fibonacci_numbers(n):\n                return i\n    return -1\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci_numbers(n: int) -> set:\n    if n < 2:\n        return set()\n    if n == 2:\n        return set(2)\n    for i in range(3, n+1):\n        yield i\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    if n % 2!= 0:\n        return 0\n    for i in range(n // 2):\n        if i % 2 == 0:\n            for j in range(i, n - i - 1, 2):\n                if j % 2 == 1:\n                    return 1\n    return 0"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l):\n    return list(map(lambda x: x+1, l))"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    if len(l) < 2:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if base < 2:\n        raise ValueError(\"Base must be greater than 1.\")\n    if x < 0:\n        raise ValueError(\"Negative numbers are not supported.\")\n    if base == 1:\n        return str(x)\n    elif base == 2:\n        if x == 0:\n            return \"0\"\n        elif x == 1:\n            return \"1\"\n        else:\n            while True:\n                i = 1\n                while i < len(str(x)) and str(x).startswith(f\"{i}0\"):\n                    i *= 10\n                if i > 1:\n                    i = i / 10\n                if i == base:\n                    break\n                x /= base\n            return str(i)\n    else:\n        while x > 0:\n            i = 1\n            while i < len(str(x)) and str(x).startswith(f\"{i}0\"):\n                i *= 10\n            if i == base:\n                break\n            x /= base\n        return str(i)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    if h < a:\n        return 0\n    else:\n        return a * h / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n <= 1:\n        return n\n    return n + fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "def median(l: List):\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    if not text:\n        return True\n    else:\n        left = 0\n        right = len(text) - 1\n        while left < right:\n            if text[left]!= text[right]:\n                break\n            left += 1\n            right -= 1\n        return left == right and text[left:right] == text[left:right]"}
{"task_id": "HumanEval/49", "completion": "def modp(n, p):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n is None:\n        n = 1\n    if p is None:\n        p = 1\n    while p <= n:\n        if (n % p) == 1:\n            return 1\n        p += 1\n    return 0"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n    \"\"\"\n    Shift each character in the string by 5 in the alphabet and return the encoded string.\n    \"\"\"\n    return ''.join([chr(ord(c) + 5) for c in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    Decode a string encoded with the encode_shift function.\n    \"\"\"\n    return ''.join([chr(ord(c) - 5) for c in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiou\"\n    text = text.lower()\n    res = []\n    for c in text:\n        if c in vowels:\n            continue\n        else:\n            res.append(c)\n    return \"\".join(res)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    if not l:\n        return False\n    for i, n in enumerate(l):\n        if n > t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    if s0 == s1:\n        return True\n    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n < 2:\n        return n\n    return (fib(n-1) + fib(n-2))"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets):\n    if not brackets:\n        return True\n    if not brackets[0] == '<':\n        return False\n    if not brackets[len(brackets) - 1] == '>':\n        return False\n    return correct_bracketing(brackets[1:-1])"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    if len(l) < 2:\n        return True\n    else:\n        prev_val = l[0]\n        for val in l[1:]:\n            if val < prev_val:\n                return False\n            prev_val = val\n        return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    l1.sort()\n    l2.sort()\n    common_set = set(l1) & set(l2)\n    return list(common_set)\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    if n < 2:\n        return 0\n    for i in range(2, int(n**0.5) + 1):\n        if (n % i) and not is_prime(i):\n            largest = i\n    return largest\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    s = 0\n    while n > 1:\n        s += n\n        n -= 1\n    return s"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets):\n    n = len(brackets)\n    if n % 2!= 0:\n        return False\n    for i in range(n // 2):\n        if brackets[i]!= brackets[n - i - 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    n = len(xs)\n    if n == 0:\n        return []\n    else:\n        first = xs[0]\n        rest = xs[1:]\n        second = sum(rest)\n        d = (second - first) / (1 - x)\n        for i in range(1, n):\n            d += (xs[i] - first) / (x - 1)\n        return d"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    if n < 3:\n        return n\n    return (fibfib(n-1) + fibfib(n-2)) % 2\n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = \"aeiouy\"\n    if s.endswith(\"y\"):\n        vowels += \"y\"\n    vowel_count = sum(1 for char in s if char in vowels)\n    return vowel_count\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    if shift > len(str(x))-1:\n        return str(x)[::-1]\n    else:\n        return ''.join(str(x)[i+shift%len(str(x))-1] for i in range(len(str(x))))"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    # get the sum of all characters in the string\n    sum_chars = sum(ord(c) for c in s)\n    \n    # only consider the upper characters\n    upper_chars = [c for c in s if c.isupper()]\n    sum_upper_chars = sum(ord(c) for c in upper_chars)\n    \n    # return the sum of the upper characters\n    return sum_upper_chars"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples, oranges, mangoes = 0, 0, 0\n    for i, fruit in enumerate(s.split()):\n        if fruit.lower() == 'apples':\n            apples += 1\n        elif fruit.lower() == 'oranges':\n            oranges += 1\n        elif fruit.lower() =='mangoes':\n            mangoes += 1\n    total_fruits = apples + oranges + mangoes\n    if total_fruits == n:\n        return mangoes\n    else:\n        return 0"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n    \n    # find the smallest even value\n    even_values = [val for val in arr if val % 2 == 0 and val > 0]\n    if not even_values:\n        return []\n    smallest_even_value = min(even_values)\n    \n    # find the node with the smallest even value\n    for i, val in enumerate(arr):\n        if val == smallest_even_value:\n            return [smallest_even_value, i]\n    \n    # if no node with the smallest even value was found, return an empty list\n    return []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    # create a set to remove duplicates\n    seen = set(lst)\n\n    # find the maximum element in the set\n    max_element = max(seen)\n\n    # if the maximum element has a frequency of at least 1\n    # it is the answer\n    if max_element in seen:\n        return max_element\n\n    # otherwise, there is no such value\n    # so return -1\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    else:\n        return [min(lst)] + [max(s - [min(lst)]) for s in group_by_min(lst)]\n\ndef group_by_min(lst):\n    d = dict(zip(lst, [min(v) for v in lst]))\n    return [list(d.get(v, [])) for v in d]\n"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a + b > c) and (b + c > a) and (c + a > b):\n        return (a * b * c) ** 0.5\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if not is_palindrome(q) or sum(q) > w:\n        return False\n    else:\n        return True\n\ndef is_palindrome(q):\n    if len(q) < 2:\n        return False\n    else:\n        for i in range(len(q) / 2):\n            if q[i]!= q[len(q) - 1 - i]:\n                return False\n    return True\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    if n < 2:\n        return n\n    palindrome = [0, 0, 0, 0, 0, 0, 0, 0]\n    for i in range(n):\n        palindrome[i] = 1 if arr[i] == arr[n - i - 1] else 0\n    for i in range(1, n - 1):\n        if palindrome[i] and not palindrome[i - 1] and not palindrome[i + 1]:\n            return i\n    return n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) < len(lst2):\n        return total_match(lst2, lst1)\n    if len(lst1) > len(lst2):\n        return total_match(lst2, lst1)\n    if not lst1 or not lst2:\n        return []\n    total_chars_in_all_strings = sum(len(string.strip()) for string in lst1)\n    if total_chars_in_all_strings == len(lst2):\n        return lst1\n    return total_match(lst1, lst2)"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 100:\n        for i in range(3):\n            p = a / i\n            if p > 1 and all(is_prime(p) for p in p.factor()) is False:\n                return False\n    return True\n\ndef is_prime(a):\n    if a < 2:\n        return False\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == n**.5:\n        return True\n    for i in range(1, int(n**.5) + 1):\n        if x - n**i == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a < 0:\n        a = -a\n    for i in range(1, a+1):\n        if i**3 - a == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    if not num:\n        return 0\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 43, 59, 71, 83, 107, 131, 151, 193, 227, 251, 289, 347, 391, 439, 503, 561, 621, 683, 749, 819, 901, 987]\n    count = 0\n    for i in range(len(num)):\n        digit = int(num[i].upper()) - 38\n        if digit in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(int(decimal)).replace('b', 'db')\n    return 'db' + binary + 'db'\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i:i+3] == s[i+1:i+4] == s[i+2:i+5]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    gpa_to_letter_grade = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        0.0: 'E'\n    }\n\n    letter_grades = []\n    for gpa in grades:\n        if gpa in gpa_to_letter_grade:\n            letter_grades.append(gpa_to_letter_grade[gpa])\n        else:\n            letter_grades.append('E')\n\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if len(string) == 0:\n        return False\n    for i in range(1, len(string)+1):\n        if string.count(i) > 1:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    :type n: int\n    \"\"\"\n    # create a set of all n-digit numbers\n    numbers = set(str(i) for i in range(1, n+1))\n    # count the numbers that start with 1\n    start_one = len(numbers.intersection(set(x[0] for x in numbers if x[0] == '1')))\n    # count the numbers that end with 1\n    end_one = len(numbers.intersection(set(x for x in numbers if x[-1] == '1')))\n    return start_one + end_one\n\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        N\n            integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_at_odds = [x for x in lst if x % 2 == 0 and (x // 2) % 2 == 1]\n    return even_at_odds\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # split into words\n    words = s.split()\n\n    # sort words by ascii value\n    sorted_words = sorted(words, key=lambda x: ord(x)\n\n    # join words back into string\n    new_s =''.join(sorted_words)\n\n    return new_s\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    if not lst:\n        return []\n    if x < 0 or x >= len(lst[0]):\n        return []\n    row = [i for i, _ in enumerate(lst) if lst[i] and x < len(lst[i])]\n    if not row:\n        return []\n    sort_by_row = sorted(row, key=lambda i: i[1], reverse=True)\n    sort_by_column = sorted(list(itertools.chain.from_iterable(lst[i])), key=lambda c: c, reverse=True)\n    return [(i, c) for i, c in sort_by_row if c in sort_by_column]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return array\n    n = len(array)\n    if n == 1:\n        return array\n    if (sum(array[0], array[n-1]) % 2) == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    # create a list of all the letters in the alphabet\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # rotate the alphabet by shifting it down by 2*n, where n is the length of the s\n    rotated_alphabet = letters[2:27] + letters[0:1]\n    \n    # encrypt the s by substituting each letter with the corresponding letter in the rotated alphabet\n    encrypted_s = ''.join(chr(ord(c) + (i - 2*n) % 26 + n) for c in s for n in range(len(s)))\n    \n    # return the encrypted s\n    return encrypted_s"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    else:\n        return min(lst, key=lambda x: -lst.index(x))"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    for i, word in enumerate(S.split()):\n        if word.lower() == 'i':\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x + y == z and all(i.isdigit(c) for c in str(x)) and all(i.isdigit(c) for c in str(y)) and all(i.isdigit(c) for c in str(z)):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    # Swap case of all letters\n    message = message.swapcase()\n    \n    # Replace vowels with next letter in english alphabet\n    vowels = 'aeiou'\n    for vowel in vowels:\n        if vowel in message:\n            message = message.replace(vowel, chr(ord(vowel) + 2))\n    \n    # Return encoded message\n    return message\n"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    if not lst:\n        return 0\n    prime = next(i for i in lst if all(i % d > 0 for d in range(2, int(i**0.5)+1)))\n    sum_of_digits = str(prime)\n    for i in range(len(sum_of_digits)):\n        if sum_of_digits[i] == '0':\n            break\n    else:\n        return 1 + sum(int(d) for d in sum_of_digits)\n\n    return 1 + skjkasdkd(lst[1:])\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_strs = [key for key in dict.keys() if isinstance(key, str)]\n    if all_strs:\n        if all(key.islower() if key.isupper() else key.isupper() for key in all_strs):\n            return True\n        else:\n            return False\n    else:\n        return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [2,3]\n    primes = [2,3]\n    for i in range(5, n+1):\n        if all(i%p!= 0 for p in primes):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a < 0 and b < 0:\n        return -1 * multiply(-a, -b)\n    if a < 0:\n        return -1 * multiply(a, b)\n    if b < 0:\n        return -1 * multiply(a, -b)\n    \n    # get unit digit of a and b\n    au_digit = a % 10\n    bu_digit = b % 10\n    \n    # product of unit digits\n    product = au_digit * bu_digit\n    \n    # if product is 10, then it is a perfect square\n    if product == 10:\n        for i in range(2, int(b/10)+1):\n            if b % i == 0:\n                return 0\n        return 10\n    \n    # if product is not 10, then it is not a perfect square\n    else:\n        return product"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    \"\"\"\n    Find the closest integer to a given value.\n    \"\"\"\n    if value.isdigit() and len(str(value)) == 1:\n        return int(value)\n    if value.is_integer and value.is_positive:\n        return value\n    if value.is_integer and value.is_negative:\n        return -1 * value\n    if value.is_floating:\n        return round(value, 1)\n    return value"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 1:\n        return [n, (n+1)//2, (n+1)//3, (n+1)//4, (n+1)//6]\n    else:\n        return [n, (n+1), (n+2), (n+1), (n+1)]\n"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(',') if s.endswith('s') else s.split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        x, y = y, x\n    for i in range(x + 1):\n        if i % 2 == 0 and i >= max(x, y) - 1:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (m + n) / 2\n    rounded_avg = round(avg)\n    binary = bin(rounded_avg).replace('0b', '')\n    return binary"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    x = list(x)  # type: List[int]\n    x = [str(d)] * len(x)  # type: List[str]\n    x = [d for d in x if d.isdigit()]  # type: List[int]\n    x = [int(d) for d in x]  # type: List[int]\n    x = [x[i::-1] for i in range(1, len(x), 2)]  # type: List[List[int]]\n    x = [list(set(d)) for d in x]  # type: List[List[int]]\n    x = [list(d) for d in x]  # type: List[List[int]]\n    x = [list(set(str(d))) for d in x]  # type: List[List[str]]\n    x = [list(map(int, str(d)))) for d in x]  # type: List[List[int]]\n    x = [list(filter(lambda d: d % 2!= 0, d)) for d in x]  # type: List[List[int]]\n    x = sorted(x)  # type: List[List[int]]\n    x = [list(str(d)) for d in x]  # type: List[List[str]]\n    return x\n"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if arr:\n        # sort by length\n        arr.sort(key=len, reverse=True)\n\n        # only work with 1-9\n        good_arr = [x for x in arr if 1 <= x <= 9]\n\n        # reverse and replace\n        reversed_good_arr = list(reversed(good_arr))\n        for i, c in enumerate(reversed_good_arr):\n            if c.isdigit():\n                c = 'A' if i == 0 else 'A' + (c - '1')\n            else:\n                c ='' if c.isalpha() else c\n        result = ''.join(c if not c.isdigit() else c.upper() for c in reversed_good_arr)\n\n    else:\n        result = []\n\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    if n % 2 == 0:\n        result = [i for i in range(n)]\n        for i in result:\n            if i > 1:\n                result[i] = i * (i-1)\n    else:\n        result = [1]\n        for i in range(2, n+1):\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_palindromes = 0\n    odd_palindromes = 0\n\n    for i in range(1, n+1):\n        if i % 2 == 0 and str(i) == str(i)[::-1]:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n\n    return (even_palindromes, odd_palindromes)\n"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Count the number of numbers in an array that have a sum of digits greater than 0.\n    \"\"\"\n    num_digits = lambda n: len(str(n)) - len(str(int(n))))\n    return sum(1 for n in arr if num_digits(n) > 0)"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n    if all(e % 2 == 0 for e in lst1) and all(e % 2!= 0 for e in lst2):\n        return \"YES\"\n    for i in range(min(len(lst1), len(lst2))):\n        if lst1[i] % 2!= 0 and lst2[i] % 2 == 0:\n            lst1.remove(lst1[i])\n            lst2.append(lst2.pop(i))\n            if all(e % 2 == 0 for e in lst1) and all(e % 2!= 0 for e in lst2):\n                return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letters = test.lower()\n    counts = Counter(letters)\n    most_common = counts.pop(None, 0)\n    return {k: v for k, v in counts.items() if v == most_common}\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Reverse the string\n    s_rev = s[::-1]\n\n    # Deleted characters\n    s_del = s.translate(str.maketrans(c, '', 0))\n\n    # Reverse the deleted string\n    s_del_rev = s_del[::-1]\n\n    # Concatenate the reversed and deleted strings\n    result = s_rev + s_del_rev\n\n    # Check if the result is a palindrome\n    is_palindrome = result == result[::-1]\n\n    return (result, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    if not lst:\n        return [\"the number of odd elements in the string 0 of the input.\"]\n    odd_counts = [0] * (1 + len(lst))\n    for i, s in enumerate(lst):\n        if s.isdigit() and not all(c.isdigit() for c in s):\n            odd_counts[i + 1] = len(filter(lambda c: c.isdigit() and c.isodd(), s))\n    return odd_counts\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    # create a set to remove duplicates\n    seen_set = set(nums)\n\n    # find the sum of all elements in the set\n    total_sum = sum(seen_set)\n\n    # keep track of the best sub-array sum so far\n    best_sum = total_sum\n\n    # iterate through all possible sub-arrays\n    for i in range(len(nums)):\n        # create a sub-array by including or excluding the i-th element\n        sub_array = [nums[j] for j in range(i, len(nums))]\n\n        # get the sum of the sub-array\n        sub_array_sum = sum(sub_array)\n\n        # if the sub-array sum is less than the best so far, update it\n        if sub_array_sum < best_sum:\n            best_sum = sub_array_sum\n\n    # return the best sub-array sum\n    return best_sum\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    if not grid:\n        return 0\n    if grid[0] == 0:\n        return 1\n    if grid[0] == 1:\n        return 0\n    m = len(grid)\n    n = len(grid[0])\n    dp = [0] * (capacity + 1)\n    for i in range(m):\n        dp[0] = dp[1] = 1\n        for j in range(n):\n            if i and j:\n                dp[1] = max(dp[1], dp[2] + 1)\n            if i:\n                dp[dp[0] for i in range(n) and j] = dp[1]\n    return dp[capacity]"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    if not arr:\n        return []\n    arr.sort(key=lambda x: (bin(x).count('1') - bin(0).count('1')) % 2 - 1 if x > 0 else 1)\n    return arr\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for i, word in enumerate(words):\n        if n == len(word.strip(' ')) - 1:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"a\", \"e\", \"i\", \"o\", \"u\"\n    if not word:\n        return \"\"\n    if word[0] in vowels and word[1:] in vowels:\n        return word[1:]\n    for i in range(len(word)):\n        if word[i] in vowels and (i == len(word) - 2 and word[i-2] in vowels or i > 0 and not word[i-1].isalnum() and not word[i-2].isalnum()):\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    if len(lst) == 1:\n        return True\n    if len(lst) == 2 and match_parens(lst[0]) and match_parens(lst[1]):\n        return True\n    return False"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    if k > len(arr) or k < 1:\n        return None\n    if k == 1:\n        return [x for x in arr if x!= 0]\n    arr.sort(reverse=True)\n    return arr[0:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    odd_in_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            continue\n        if i > 0:\n            odd_in_even += abs(lst[i] - lst[i-1])\n    return odd_in_even"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    # get the first k elements\n    k_elements = [x for i, x in enumerate(arr) if i <= k]\n\n    # sum of the first k elements\n    k_sum = sum(k_elements)\n\n    # add the last element to the sum\n    k_sum += arr[-1]\n\n    # return the sum\n    return k_sum\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n    \n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n]\n    else:\n        return [3 * n + 1] + get_odd_collatz(n // 2)\n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    # 1. The date string is not empty\n    if not date.strip():\n        return False\n    \n    # 2. The number of days is valid\n    date_parts = date.split('-')\n    year = int(date_parts[0])\n    month = int(date_parts[1])\n    day = int(date_parts[2])\n    if (1 <= month <= 12) and (1 <= day <= (31 if month in [1, 3, 5, 7, 8, 10, 12] else 30 if month in [4, 6, 9, 11] else 29 if month == 2 else 31)):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if not txt.strip():\n        return 0 if not ',,' in (', '.join(map(str, list(set(ord(c) for c in txt)))) else 0\n    return 1 if not ',,' in (', '.join(map(str, list(set(ord(c) for c in txt.split())))) else 0"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i-1]:\n            return True\n    return False"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if not (interval1[1] > interval2[0] and interval2[1] > interval1[0]):\n        return \"NO\"\n    if not (interval1[1] - interval1[0] + 1 and interval2[1] - interval2[0] + 1):\n        return \"NO\"\n    for i in range(min(interval1[1], interval2[1]) + 1):\n        if (i - interval1[0] + 1 and i - interval2[0] + 1):\n            return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    s = 0\n    for i, x in enumerate(arr):\n        s += x\n        if x < 0:\n            s *= -1\n        if i < len(arr) - 1 and arr[i]!= arr[i+1]:\n            s *= -1\n    return s"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # create a list of all possible paths of length k\n    path_list = []\n    for i in range(k):\n        path = []\n        for j in range(k):\n            path.append(grid[i][j])\n            path_list.append(path)\n    # find the shortest path\n    min_path_length = float('inf')\n    min_path = []\n    for i in range(len(path_list)):\n        path = path_list[i]\n        if i == 0 or (i > 0 and min(path) < min_path[0]):\n            min_path = [path]\n            min_path_length = 1\n        else:\n            for j in range(i+1):\n                if path[j]!= min_path[j]:\n                    min_path.append(path[j])\n                    min_path_length += 1\n    # return the list of cells on the shortest path\n    return min_path\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n < 0:\n        return \"Invalid input. Expected a non-negative integer.\"\n\n    if n == 0 or n == 1:\n        return [0, 1, 2]\n\n    if n % 2 == 0:\n        return [1, n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)]\n    else:\n        return [1, (n - 1) / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)]\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    if n < 2:\n        return 0\n    odd_digits = 0\n    for i in range(1, int(n**0.5) + 1):\n        if i > 1 and n % i == 1:\n            odd_digits *= i\n    return odd_digits"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    if not string:\n        return False\n    if string[0] == '[' and string[-1] == ']':\n        return True\n    return is_nested(string[1:-1])"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    if not lst:\n        return 0\n    return sum(map(lambda x: int(x+0.5)**2, lst))"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt.endswith(' '):\n        return False\n    words = txt.rstrip().split()\n    if words and not words[-1].endswith(' '):\n        return False\n    last_char = txt.rstrip()[-1]\n    if not last_char.isalpha() or last_char.isspace():\n        return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    n = len(arr)\n    if n == 0:\n        return -1\n    if n == 1:\n        return 0\n    if arr[0] < arr[1]:\n        return -1\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return None, None\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    if negatives:\n        largest_negative = max(negatives)\n    else:\n        largest_negative = None\n    if positives:\n        smallest_positive = min(positives)\n    else:\n        smallest_positive = None\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"\n    :type n: int\n    \"\"\"\n    if n < 4:\n        return False\n    for i in range(4):\n        for j in range(2, n+1, 2):\n            if j == n:\n                break\n            if j % 2!= 0:\n                continue\n            if i == 0:\n                a = j\n            elif i == 1:\n                b = j\n            elif i == 2:\n                c = j\n            else:\n                d = j\n            if a + b + c + d == n:\n                return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"\n    The Brazilian factorial is defined as n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n    \n    n: an integer\n    \n    Returns: the special factorial of n\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(' ', '_')\n    if text.count('_') > 1:\n        text = re.sub(r' +', '-', text)\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3 or not file_name.endswith('.txt') and not file_name.endswith('.exe') and not file_name.endswith('.dll'):\n        return 'No'\n    if not file_name.startswith(file_name[0] if file_name[0] in 'abcdefghijklmnopqrstuvwxyz' else '?'):\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    if not lst:\n        return 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0 and (i % 4 == 0 and i!= 4) or i % 4 == 0:\n            lst[i] = x**(i % 3 == 0 and (i % 4 == 0 and i!= 4) or i % 4 == 1? 3 : 2)\n    return sum(lst)"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if len(word) and not all(i in word for i in [0, 1])]\n    ordered_prime_words = sorted(prime_words, key=len, reverse=True)\n    return''.join(ordered_prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_fraction, n_fraction = x.split(\"/\")\n    x_numerator, x_denominator = [int(i) for i in x_fraction.split(\" \")]\n    n_numerator, n_denominator = [int(i) for i in n_fraction.split(\" \")]\n\n    if x_numerator[0] == n_numerator[0] and x_denominator == n_denominator:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    nums.sort(key=lambda x: sum(int(d) for d in str(x)) % 9)\n    return nums\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    # Create a set of all odd numbers\n    odd_numbers = set(filter(lambda x: x % 2!= 0, nums))\n    \n    # Get the first and last digits of each number\n    first_digits = [int(n.zfill(2)) for n in nums]\n    last_digits = [int(n % 10) for n in nums]\n    \n    # Filter out numbers that do not meet the oddity requirement\n    special_numbers = [n for n in odd_numbers if (n // 100 - n % 10) in first_digits and (n % 10) in last_digits and (n // 10 - n % 10) in last_digits]\n    \n    return len(special_numbers)\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(n)]\n    triples = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i < j < k and a[i] + a[j] + a[k] % 3 == 0:\n                    triples += 1\n    return triples"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    if planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Earth\" and planet2 == \"Mercury\":\n        return (\"Venus\")\n    if planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Venus\" and planet2 == \"Uranus\":\n        return (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Venus\" and planet2 == \"Mercury\":\n        return (\"Earth\", \"Mars\")\n    if planet1 == \"Venus\" and planet2 == \"Uranus\":\n        return (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Earth\" and planet2 == \"Venus\":\n        return (\"Mars\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Earth\" and planet2 == \"Mercury\":\n        return (\"Mars\")\n    if planet1 == \"Earth\" and planet2 == \"Uranus\":\n        return (\"Mars\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Mars\" and planet2 == \"Venus\":\n        return (\"Jupiter\", \"Saturn\")\n    if planet1 == \"Mars\" and planet2 == \"Mercury\":\n        return (\"Jupiter\", \"Saturn\")\n    if planet1 == \"Mars\" and planet2 == \"Uranus\":\n        return (\"Jupiter\", \"Saturn\")\n    if planet1 == \"Jupiter\" and planet2 == \"Venus\":\n        return (\"Saturn\")\n    if planet1 == \"Jupiter\" and planet2 == \"Mercury\":\n        return (\"Saturn\")\n    if planet1 == \"Jupiter\""}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # sort by length of word\n    lst.sort(key=len)\n\n    # remove odd length words\n    for i in range(len(lst)):\n        if (i and lst[i-1]!= lst[i]) or not lst[i]:\n            del lst[i]\n\n    # add back the sum of the list\n    total = sum(lst)\n    for i in range(len(lst)):\n        if i and lst[i-1] == lst[i]:\n            lst[i] = total\n\n    return lst\n"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return x\n        return y\n    else:\n        return x"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    for i, n in enumerate(lst):\n        if n is not a number or n < 0:\n            continue\n        if n % 1!= 0:\n            continue\n        s = n**2\n        yield s\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    if game == guess:\n        return [0] * len(game)\n    else:\n        return [abs(game - guess) for _ in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    # sort extensions by strength\n    sorted_extensions = sorted(extensions, key=lambda x: (\n        -len(x.upper()) + len(x.lower()),\n        x,\n    ))\n    \n    # find the strongest extension\n    strongest_extension = class_name + '.' + sorted_extensions[0]\n    \n    # if there are ties, choose the first one\n    if len(sorted_extensions) > 1 and class_name + '.' + sorted_extensions[1] == strongest_extension:\n        strongest_extension = class_name + '.' + sorted_extensions[1]\n    \n    return strongest_extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if a.lower() in b.lower():\n        return True\n    for i in range(len(b)):\n        rotated = b[i:].rotate(i)\n        if rotated in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_digits = 0\n    odd_digits = 0\n\n    while num:\n        if num % 10 in [0, 2, 4, 6, 8]:\n            even_digits += 1\n        else:\n            odd_digits += 1\n\n    return (even_digits, odd_digits)\n\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    if number <= 9:\n        return str(number)\n    else:\n        return f\"{number}a\"\n\n"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if (a**2 + b**2 - c**2)**.5 * (a - b) > c:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    # sort the words in lexicographical order\n    words.sort()\n    \n    # keep track of the maximum number of unique characters so far\n    max_uniq_chars = 0\n    \n    # iterate over the words\n    for word in words:\n        # count the number of unique characters\n        uniq_chars = len(set(word))\n        \n        # if the word has more unique characters than the current maximum\n        # and is the first in the sorted list, return it\n        if uniq_chars > max_uniq_chars and word == words[0]:\n            max_uniq_chars = uniq_chars\n            result = word\n        \n    # if there is no word with the maximum number of unique characters,\n    # return the last word in the list\n    if result is None:\n        result = words[-1]\n    \n    return result\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if need > remaining:\n        eaten, leftover = 0, 0\n        while eaten < need:\n            eaten += min(need - eaten, remaining)\n        return [eaten, leftover]\n    else:\n        eaten, leftover = max(0, need - remaining), 0\n        while eaten > 0:\n            eaten, leftover = min(eaten, remaining), eaten - remaining\n        return [eaten, leftover]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator) < 2 or (len(operator) - 1) < len(operand):\n        return \"Error: Incorrect input.\"\n    if operator[0] == '+':\n        return operand[0] + operand[1]\n    elif operator[0] == '-':\n        return operand[0] - operand[1]\n    elif operator[0] == '*':\n        return operand[0] * operand[1]\n    elif operator[0] == '/':\n        if operand[1] == 0:\n            return 'Error: Division by zero.'\n        else:\n            return operand[0] / operand[1]\n    else:\n        return operand[0] ** operator[1]\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    # create a list of all letters in the string\n    letters = [char for char in s if char.isalpha()]\n    \n    # reverse the case of each letter\n    for letter in letters:\n        if letter.islower():\n            s = s.replace(letter, letter.upper())\n        elif letter.isupper():\n            s = s.replace(letter, letter.lower())\n        \n    # if the string contains no letters, reverse the whole string\n    if not letters:\n        s = s[::-1]\n    \n    return s"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    even_digits = []\n    while a <= b:\n        if a % 2 == 0:\n            even_digits.append(a)\n        a += 1\n    return even_digits"}
