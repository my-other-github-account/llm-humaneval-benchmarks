{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1]!= '(':\n                stack.pop()\n            if not stack:\n                paren_groups.append(char)\n                stack.append(char)\n        elif char =='':\n            pass\n        else:\n            raise ValueError(f'Unexpected character {char}')\n    return paren_groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    for operation in operations:\n        if operation < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    return abs(numbers - numbers.mean())"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [n if i % 2 == 0 else n + delimeter for i, n in enumerate(numbers)]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_list = paren_string.split()\n    return [max(map(lambda x: x.count('('), paren_list))]"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1))\n"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    return [max(nums[i:i + 2]) for i in range(len(nums) - 1)]"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    # Find the longest postfix of supplied string that is a palindrome.\n    # This can be done by iterating through all possible suffixes of the string,\n    # starting from the last character and moving backwards.\n    # For each suffix, check if it is a palindrome using the `is_palindrome` function.\n    # Keep track of the longest palindrome suffix found so far.\n    # When the current character is the first character of the string,\n    # the current suffix is the longest palindrome suffix found so far.\n    # This can be seen by noting that all suffixes of a string are also palindromes.\n    # Therefore, the longest palindrome suffix found so far is the last character of the string.\n    #\n    # Time complexity: O(n^2) where n is the length of the string.\n    # Space complexity: O(1)\n    #\n    # Note: This solution assumes that the input string is not the empty string.\n    #\n    # Note: This solution does not handle the case where the input string is a palindrome.\n    # In that case, the longest palindrome suffix found will be the entire string.\n    #\n    # Note: This solution does not handle the case where the input string is a palindrome\n    # that contains repeated characters. In that case, the longest palindrome suffix\n    # found will be a substring of the input string.\n    #\n    # Note: This solution does not handle the case where the input string contains\n    # characters that are not letters or numbers. In that case, the longest palindrome\n    # suffix found will be a substring of the input string.\n    #\n    # Note: This solution does not handle the case where the input string contains\n    # characters that are not letters or numbers. In that case, the longest palindrome\n    # suffix found will be a substring of the input string.\n    #\n    # Note: This solution does not handle the case where the input string contains\n    # characters that are not letters or numbers. In that"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join(chr(ord(c) ^ ord(d)) for c, d in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    return gcd(a, b)\n\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    n = len(string)\n    table = [[] for _ in range(n + 1)]\n    table[0] = [string[0]]\n    for i in range(1, n + 1):\n        table[i] = [x + string[i] for x in table[i - 1]]\n    return [x for i in range(n + 1) for x in table[i]]"}
{"task_id": "HumanEval/15", "completion": ""}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    music_notes = [4, 2, 1]\n    music_string_split = music_string.split('|')\n    music_notes_list = []\n    for note in music_string_split:\n        if note == 'o':\n            music_notes_list.append(music_notes[0])\n        elif note == 'o|':\n            music_notes_list.append(music_notes[1])\n        elif note == '.|':\n            music_notes_list.append(music_notes[2])\n        else:\n            pass\n    return music_notes_list"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str):\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x) if x in ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine'] else 0)\n    return''.join(numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers = sorted(numbers)\n    if len(numbers) < 2:\n        return (numbers[0], numbers[0])\n    first, second = numbers[0], numbers[1]\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - first) < abs(numbers[i] - second):\n            second = first\n            first = numbers[i]\n    return (first, second)"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements\")\n    min_val, max_val = min(numbers), max(numbers)\n    return [x / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: isinstance(x, int), values))"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str):\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    return n//2 if n%2==0 else largest_divisor(n//2)"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, n//2 + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        if n == 1:\n            break\n    return [f for f in reversed(factors) if f not in factors[:1]]"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    # sort the list to make it easier to find duplicates\n    sorted_numbers = sorted(numbers)\n\n    # create a set to store unique values\n    unique_numbers = set()\n\n    # loop through the sorted list and add unique values to the set\n    for number in sorted_numbers:\n        if number not in unique_numbers:\n            unique_numbers.add(number)\n\n    # convert the set back to a list\n    return list(unique_numbers)"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str):\n    return ''.join(ch.upper() if ch.islower() else ch.lower() for ch in string)"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [x for x in strings if x.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    if len(xs) % 2 == 1:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if max(xs) < 0:\n        raise ValueError(\"find_zero only takes list xs having largest non zero coefficient as it guarantees a solution\")\n    return (x for x in range(len(xs) // 2, -1, -1) if poly(xs[:len(xs) // 2], x) == 0)[0]"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    return sorted(l[i for i in range(len(l)) if not i % 3], key=lambda x: x % 3)"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    return sum(1 for i in range(1, n+1) if i % 11 == 0 or i % 13 == 0)"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    return sorted(l[1::2]) + l[::2]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    return \"\".join(g[1:] + g[0] if len(g) == 3 else g for g in ([s[i:i + 3] for i in range(0, len(s), 3)] if len(s) % 3 else [s[i:i + 3] for i in range(0, len(s) - 3, 3)])\n\ndef decode_cyclic(s: str):\n    return \"\".join(g[1:] + g[0] if len(g) == 3 else g for g in ([s[i:i + 3] for i in range(0, len(s), 3)] if len(s) % 3 else [s[i:i + 3] for i in range(0, len(s) - 3, 3)])"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n == 5:\n        return 89\n    return 0"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    return any(\n        map(\n            lambda x: x[0] + x[1] + x[2] == 0,\n            itertools.combinations(l, 3),\n        )\n    )"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    # define the number of cars in each direction\n    num_cars_left = n\n    num_cars_right = n\n\n    # define the starting positions of the cars\n    left_start = 0\n    right_start = 1\n\n    # define the total distance travelled by all cars\n    total_distance = 1\n\n    # count the number of collisions\n    collisions = 0\n\n    # loop over the number of cars\n    for i in range(num_cars_left):\n        # move the left cars one step\n        left_start += 1\n\n        # move the right cars one step\n        right_start += 1\n\n        # calculate the total distance travelled\n        total_distance += left_start + right_start\n\n        # if the left and right cars are at the same position, there is a collision\n        if left_start == right_start:\n            collisions += 1\n\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    return any(\n        (x, y)\n        for x, y in itertools.combinations(l, 2)\n        if x + y == 0\n    )"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    elif base == 2:\n        return bin(x)[3:]\n    else:\n        return int(x).to_base(base)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2 or n == 3:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return n % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) - ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    return len(set(brackets.split('<', '>')) - {}) == 0\n\n\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    if not l:\n        return True\n    if len(l) == 1:\n        return True\n    if l[0] >= l[-1]:\n        return all(x <= y for x, y in zip(l[1:], l[:-1]))\n    else:\n        return all(x >= y for x, y in zip(l[1:], l[:-1]))"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    if n <= 1:\n        return None\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return n * (n + 1) / 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    balanced = []\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n        elif stack:\n            balanced.append(bracket)\n    return len(balanced) == len(stack)"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if len(xs) == 0:\n        return []\n    return [x for x in (xs[i + 1] * (i + 1) for i in range(len(xs) - 1)) if x!= 0]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for letter in s:\n        if letter in vowels or (letter == 'y' and s.endswith(letter)):\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    return (str(x)[:shift] + str(x)[shift:]) if shift < len(str(x)) else str(x)[-len(str(x))-shift:][::-1]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) - ord('0') for c in s if c.isdigit())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    fruit_count = {\n        \"apples\": 0,\n        \"oranges\": 0,\n        \"mangoes\": 0\n    }\n    for fruit in s.split(\",\"):\n        if fruit.strip().lower() == \"apples\":\n            fruit_count[\"apples\"] = int(fruit.strip().split(\" \")[1])\n        elif fruit.strip().lower() == \"oranges\":\n            fruit_count[\"oranges\"] = int(fruit.strip().split(\" \")[1])\n        elif fruit.strip().lower() == \"mangoes\":\n            fruit_count[\"mangoes\"] = int(fruit.strip().split(\" \")[1])\n    return n - fruit_count[\"apples\"] - fruit_count[\"oranges\"]"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    return [(node.value, node.index) for node in arr if node.value % 2 == 0 and node.index == arr.index(node)[0]]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    return max(filter(lambda x: x > 0 and lst.count(x) >= x, lst))"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    return [lst[0]] + [*sorted(lst[1:], key=lambda x: x in lst[:len(lst)//2])]"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a + b) >= c and (a + c) >= b and (b + c) >= a:\n        return round(0.5 * (a * b), 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return (\n        q[0::2] == q[1::2][::-1]\n        and sum(q) <= w\n    )"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n-1, -1):\n            if arr[i]!= arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                if is_palindrome(arr):\n                    return 1\n    return 0\n\n\ndef is_palindrome(arr):\n    for i in range(n//2):\n        if arr[i]!= arr[n-i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    return all(n < 100 for n in [fact(i) for i in range(int(a**0.5)) if i in range(3, int(a**0.5)//3, 2)])"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n**int(n)"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return a == 0 or a == int(a**0.5)**2"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    hex_digits ="}
{"task_id": "HumanEval/79", "completion": "def binary_to_decimal(binary):\n    return int(binary[2:-2], 2)"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    return len(s) >= 3 and all(len(set(s[i:i+3])) == 3 for i in range(len(s) - 2))"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grade_table = {\n        4.0: 'A+',\n        '> 3.7': 'A',\n        '> 3.3': 'A-',\n        '> 3.0': 'B+',\n        '> 2.7': 'B',\n        '> 2.3': 'B-',\n        '> 2.0': 'C+',\n        '> 1.7': 'C',\n        '> 1.3': 'C-',\n        '> 1.0': 'D+',\n        '> 0.7': 'D',\n        '> 0.0': 'D-',\n        0.0: 'E'\n    }\n    return [letter_grade_table[x] for x in grades]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    return len(string) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    return sum(1 for i in range(n) if str(i)[::-1].startswith('1') or str(i)[1:].startswith('1'))"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(N)[2:].count('1')"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(i for i in lst if i % 2 == 0 and i % 2 == 1)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ''.join(sorted(i) for i in s.split())"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    return sorted(\n        sorted(\n            [(i, j) for i, row in enumerate(lst) for j in row if j == x]\n           , key=lambda t: (t[0], -t[1])\n        )\n       , key=lambda t: (-t[0],)\n    )"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    # Sort the array in ascending order if the sum of the first and last indices is odd\n    # and in descending order if the sum is even\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = [alphabet[i+2*j for j in range(len(alphabet))] for i in range(len(alphabet))]\n    return ''.join([rotated_alphabet.index(c) for c in s])"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    return min(lst[1:], key=lambda x: x if x is not None else float('inf'))"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    for word in S.split():\n        if word.strip().lower().startswith(\"i\") and (word.endswith(\".\") or word.endswith(\"?\") or word.endswith(\"!\")):\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": ""}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    return ''.join(\n        (chr(ord(letter) - (ord(letter) - ord('a') + 2) % 26) if letter in 'aeiou' else letter)\n        for letter in message\n    )"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    # find the largest prime number in the list\n    largest_prime = max(\n        [\n            n\n            for n in lst\n            if is_prime(n)\n        ]\n    )\n\n    # return the sum of the digits of the largest prime number\n    return sum(\n        [\n            digit\n            for digit in str(largest_prime)\n            if digit.isdigit()\n        ]\n    )\n\n\ndef is_prime(n):\n    # check if n is a prime number\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(key.islower() for key in dict)\n    all_upper = all(key.isupper() for key in dict)\n    return all_lower or all_upper"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n < 2:\n        return []\n    return [i for i in range(2, n+1) if is_prime_number(i)]\n\n\ndef is_prime_number(n):\n    if n < 2:\n        return False\n    return all(n % i for i in range(2, int(n**0.5)+1))\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return sum(int(d) for d in (str(a)[:1], str(b)[:1]))"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    return sum(1 for c in s if c.isupper() and (c in 'AEIOU' and (i for i in range(len(s)) if i % 2 == 0))))"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    return int(float(value) if value.isdigit() else float(value.replace('-', '')))"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n, n//2 + 1, n//2 + 2]\n    else:\n        return [n, n + 1, n + 3]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(maxsplit=0)"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x >= y:\n        return -1\n    return (x + y) // 2"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    return int(round(float((m+1)//2 - n//2))).binary_repr().rstrip('0')"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted(set([i for i in x if not any(i % 2 == 0 for j in str(i).split(''))]))"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    else:\n        sorted_arr = sorted(arr)\n        sorted_arr.reverse()\n        result = []\n        for i in sorted_arr:\n            if i in range(1, 10):\n                result.append(f\"{i}\")\n            else:\n                result.append(\"\")\n        return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    return [\n        i * (i % 2 == 0) for i in range(1, n + 1)\n    ]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return len([n for n in arr if sum(int(d) for d in str(n)) > 0])"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    return all(x % 2 == 0 for x in lst1)"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    histogram_dict = {}\n    for letter in test.lower():\n        if letter in histogram_dict:\n            histogram_dict[letter] += 1\n        else:\n            histogram_dict[letter] = 1\n    \n    if len(histogram_dict) == 1:\n        return [histogram_dict[list(histogram_dict.keys())[0]]]\n    else:\n        return list(histogram_dict.values())"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    return (\n        \"\".join(\n            c for c in s if c not in c\n        ),\n        s == s[::-1]\n    )"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [\n        f\"the number of odd elements {count} in the str{i} of the input.\"\n        for i, count in enumerate(\n            [len(list(filter(lambda x: x % 2 == 1, map(int, i_string.split(\"\"))))) for i_string in lst]\n        )\n    ]\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    return sum(nums)"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    max_fill = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_fill += 1\n                if max_fill >= capacity:\n                    return max_fill"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: int(bin(x)[2:].count('1')) if x >= 0 else float(x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    return [\n        word\n        for word in s.split()\n        if len(word) == n and word.isalpha()\n    ]"}
{"task_id": "HumanEval/118", "completion": ""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    return all(lst[i:i+2] in ['()', '()'] for i in range(len(lst)-1))"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr)[-k:]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(x for x in lst if x % 2 == 0 and x % 2 == 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(x for x in arr[0:k] if x < 100 and x >= 10)"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    return sorted([x for x in itertools.takewhile(lambda x: x!= 1, collatz(n)) if x % 2 == 1])\n\ndef collatz(n):\n    if n == 1:\n        return [1]\n    else:\n        if n % 2 == 0:\n            return [3 * n // 2 + 1, n // 2]\n        else:\n            return [n // 2 + 1, n]"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    parts = date.split('-')\n    if len(parts)!= 3:\n        return False\n    try:\n        day, month, year = [int(x) for x in parts]\n    except ValueError:\n        return False\n    if month not in [1, 3, 5, 7, 8, 10, 12] or (month in [4, 6, 9, 11] and day not in range(1, 31)) or (month == 2 and day not in range(1, 29)) or (month not in range(1, 13)):\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if txt.count(\" \"):\n        return txt.split(\" \")\n    elif txt.count(\",\"):\n        return txt.split(\",\")\n    else:\n        return sum(ord(c) for c in txt.lower() if ord(c) % 2 == 1)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if interval1[1] >= interval2[0] or interval2[1] >= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    magnitude = lambda x: abs(x) if x > 0 else 0\n    return sum(magnitude(x) * (1 if x > 0 else -1) for x in arr)"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    path = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == k:\n                path.append(grid[i][j])\n                return path\n    return None"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return []\n    if n % 2 == 0:\n        return [1] + tri(n // 2)\n    else:\n        return [1] + tri(n - 1) + tri(n - 2) + tri(n + 1)"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    return reduce(lambda x, y: x * (y % 2 == 1),\n                  [int(d) for d in str(n) if d.isdigit()], 1)"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(map(lambda x: int(x + 0.5) ** 2, lst))"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    return not txt.strip().endswith(\n       '' + ''.join(c for c in txt.rstrip().split() if not c.isalpha()))"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    return next((i for i in range(len(arr)) if arr[i] < arr[i-1] or i == 0), -1)"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n    if negative_integers:\n        a = max(negative_integers)\n    else:\n        a = None\n    if positive_integers:\n        b = min(positive_integers)\n    else:\n        b = None\n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, float) and isinstance(b, float):\n        return max(a, b) if a!= b else None\n    elif isinstance(a, int) and isinstance(b, int):\n        return max(a, b) if a!= b else None\n    elif isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(',', '.').strip())\n        b = float(b.replace(',', '.').strip())\n        return max(a, b) if a!= b else None\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return sum(i for i in range(1, n+1) if i % 2 == 0 and i < n) == n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    return ''.join(x if x!='' else '_' for x in text.replace('  ', '-').replace(' ', '_'))"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return \"No\"\n    if \".\" not in file_name:\n        return \"No\"\n    if not file_name.startswith(letters):\n        return \"No\"\n    if file_name.endswith(extensions) is False:\n        return \"No\"\n    return \"Yes\"\n"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum(x**2 if x % 3 == 0 else x**3 if x % 4 == 0 else x for x in lst)"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    return''.join(w for w in words if is_prime(len(w)))\n\n\ndef is_prime(n):\n    if n == 1 or n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    return int(x) // int(n) == 1"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: sum(map(int, str(x))) if x >= 0 else float('inf'))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    return len([n for n in nums if n > 10 and n % 10 in [1, 3, 5, 7, 9]])"}
{"task_id": "HumanEval/147", "completion": ""}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    planets_between = [p for p in planets if p!= planet1 and p!= planet2 and planet1 in planet2]\n    return tuple(sorted(planets_between, key=lambda p: p in planet1))"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted(set(lst) - set(filter(lambda x: len(x) % 2 == 0, lst))))"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n > 1:\n        return y\n    for i in range(2, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return x\n    return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    total = 0\n    for num in lst:\n        if num % 2 == 0 or not isinstance(num, int):\n            continue\n        total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    score_diffs = [abs(game[i] - guess[i]) for i in range(len(game))]\n    return [0 if d == 0 else d for d in score_diffs]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_extension_strength = 0\n    for extension in extensions:\n        extension_strength = len(extension) - len(extension.lower())\n        if strongest_extension is None or extension_strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = extension_strength\n    return f'{class_name}.{strongest_extension}'"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    return any(b in w or w in b for w in a.translate(a.rfind(b)+1))"}
{"task_id": "HumanEval/155", "completion": ""}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman = ''\n    while number > 0:\n        roman = _convert(number % 10, roman)\n        number //= 10\n    return roman\n\ndef _convert(num, roman):\n    if num == 1:\n        return 'i'\n    elif num == 2:\n        return 'ii'\n    elif num == 3:\n        return 'iii'\n    elif num == 4:\n        return 'iv'\n    elif num == 5:\n        return 'v'\n    elif num == 6:\n        return 'vi'\n    elif num == 7:\n        return 'vii'\n    elif num == 8:\n        return 'viii'\n    elif num == 9:\n        return 'ix'\n    elif num == 10:\n        return 'x'\n    elif num == 20:\n        return 'xx'\n    elif num == 30:\n        return 'xxx'\n    elif num == 40:\n        return 'xl'\n    elif num == 50:\n        return 'l'\n    elif num == 60:\n        return 'lx'\n    elif num == 70:\n        return 'lxx'\n    elif num == 80:\n        return 'lxxx'\n    elif num == 90:\n        return 'xc'\n    elif num == 100:\n        return 'c'\n    elif num == 200:\n        return 'cc'\n    elif num == 300:\n        return 'ccc'\n    elif num == 400:\n        return 'cd'\n    elif num == 500:\n        return 'd'\n    elif num == 600:\n        return 'dc'\n    elif num == 700:\n        return 'dcc'\n    elif num == 800:\n        return 'dccc'\n    elif num == 900:\n        return 'cdc'\n    elif num == 1000:\n        return 'cm'"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if (a**2 + b**2 == c**2):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    # sort the words in ascending order\n    words = sorted(words, key=lambda x: x.lower())\n\n    # create a dictionary to count the number of unique characters in each word\n    unique_chars = {}\n    for word in words:\n        unique_chars[word] = len(set(word.lower()))\n\n    # find the word with the maximum number of unique characters\n    max_word = max(words, key=lambda x: unique_chars[x])\n\n    # if there are multiple words with the same number of unique characters,\n    # return the one that comes first in lexicographical order\n    if len(unique_chars) > 1:\n        return max(words, key=lambda x: x.lower())\n    else:\n        return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if number + need > remaining:\n        return [number + need, 0]\n    return [number + 1, remaining - 1]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"The length of operator list is not equal to the length of operand list minus one.\")\n    if any(x < 0 for x in operand):\n        raise ValueError(\"Operand is a list of of non-negative integers.\")\n    if len(operator) < 1:\n        raise ValueError(\"Operator list has at least one operator.\")\n    if len(operand) < 2:\n        raise ValueError(\"Operand list has at least two operands.\")\n    result = 0\n    for i in range(len(operator) - 1):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '/':\n            result /= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    return ''.join(ch.upper() if ch.isalpha() else ch for ch in s[::-1])"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        return []\n    return [a, a + 2, a + 4, a + 6][:b - a]"}
