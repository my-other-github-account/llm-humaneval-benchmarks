{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n given threshold."}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n # Define a function to separate groups of nested parentheses\n def separate_groups(paren_string: str) -> List[str]:\n # Split the input string into a list of substrings\n substrings = paren_string.split()\n # Create a list of empty strings to store the separated groups\n groups = []\n # Loop through each substring and separate it into its own group\n for substring in substrings:\n # Check if the substring is balanced and not nested within each other\n if not is_balanced(substring):\n # If it is not balanced, skip it and move on to the next substring\n continue\n # If it is balanced, add it to the list of groups\n groups.append(substring)\n # If the substring is nested within another substring, skip it and move on to the next substring\n continue\n # If the substring is not nested within another substring, add it to the list of groups\n groups.append(substring)\n # Return the list of separated groups\n return groups\n # Define a function to check if a substring is balanced\n def is_balanced(substring: str) -> bool:\n # Check if the substring is balanced by counting the number of open and close parentheses\n count = 0\n for char in substring:\n if char == '(':\n count += 1\n elif char == '}':\n count -= 1\n if count == 0:\n return False\n return True\n # Test the function with a string containing multiple groups of nested parentheses\n paren_string = '( ) (( )) (( )( ))'\n groups = separate_groups(paren_string)\n print(groups)"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n \"\"\" Given a positive floating point number, it can be decomposed into\n and integer part (largest integer smaller than given number) and decimals\n (leftover part always smaller than 1).\n\n Return the decimal part of the number.\n"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n at that point function should return True. Otherwise it should return False.\n >>> below_zero([1, 2, 3])\n False\n >>> below_zero([1, 2, -4, 5])\n True"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n around the mean of this dataset.\n Mean Absolute Deviation is the average absolute difference between each\n element and a centerpoint (mean in this case):\n MAD = average | x - x_mean |\n \n >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n 1.0\n \"\"\"\n\n numbers = [1.0, 2.0, 3.0, 4.0]\n mean = sum(numbers) / len(numbers)\n deviation = sum([abs(x - mean) for x in numbers]) / len(numbers)\n return deviation"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n >>> intersperse([], 4)\n []\n >>> intersperse([1, 2, 3], 4)\n [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n groups = paren_string.split()\n return [len(group) for group in groups]\n"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n \"\"\" Filter an input list of strings only for ones that contain given substring\n >>> filter_by_substring([], 'a')\n []\n >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n ['abc', 'bacd', 'array']\n \"\"\"\n return strings"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n if numbers:\n sum = sum(numbers)\n product = product(numbers)\n return (sum, product)\n else:\n return (0, 1)\n\ndef sum(numbers: List[int]) -> int:\n return 0\n\ndef product(numbers: List[int]) -> int:\n return 1\n"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n in the sequence.\n >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n [1, 2, 3, 3, 3, 4, 4]\n \"\"\"\n\n def rolling_max(numbers: List[int]) -> List[int]:\n \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n in the sequence.\n >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n [1, 2, 3, 3, 3, 4, 4]\n \"\"\"\n\n def rolling_max(numbers: List[int]) -> List[int]:\n \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n in the sequence.\n >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n [1, 2, 3, 3, 3, 4, 4]\n \"\"\"\n\n def rolling_max(numbers: List[int]) -> List[int]:\n \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n in the sequence.\n >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n [1, 2, 3, 3, 3, 4, 4]\n \"\"\"\n\n def rolling_max(numbers: List[int]) -> List[int]:\n \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n in the sequence.\n >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n [1, 2, 3, 3, 3, 4, 4]\n \"\"\"\n\n def rolling_max(numbers: List[int]) -> List[int]:\n \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n in the sequence"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n \"\"\" Test if given string is a palindrome \"\"\"\n return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n \"\"\" Find the shortest palindrome that begins with a supplied string.\n Algorithm idea is simple:\n - Find the longest postfix of supplied string that is a palindrome.\n - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n >>> make_palindrome('')\n ''\n >>> make_palindrome('cat')\n 'catac'\n >>> make_palindrome('cata')\n 'catac'"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n Perform binary XOR on these inputs and return result also as a string.\n >>> string_xor('010', '110')\n '100'\n \"\"\"\n\n a_bits = a.encode('utf-8')\n b_bits = b.encode('utf-8')\n result = ''\n for i in range(len(a_bits)):\n if a_bits[i] ^ b_bits[i]:\n result += chr(ord(a_bits[i]) ^ ord(b_bits[i]))\n return result.decode('utf-8')"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n if len(strings) == 0:\n return None\n elif len(strings) == 1:\n return strings[0]\n else:\n longest_length = 0\n for s in strings:\n if len(s) > longest_length:\n longest_length = len(s)\n return s\n return None"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n if a == 0 or b == 0:\n return 1\n else:\n while a > 1 and b > 1:\n if a % 1 == 0 or b % 1 == 0:\n return a\n a -= 1\n b -= 1"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n \"\"\"\n Return list of all prefixes from shortest to longest of the input string\n >>> all_prefixes('abc')\n ['a', 'ab', 'abc']\n \"\"\"\n\n return [string[i:j] for i in range(len(string)) for j in range(i+1, len(string)) if j-i+1 <= len(string) and j-i+1 >= 0]\n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n >>> string_sequence(0)\n '0'\n >>> string_sequence(5)\n '0 1 2 3 4 5'\n \"\"\"\n return ''.join(str(i) for i in range(n) for i in range(n))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n # count the number of distinct characters in the string\n distinct_chars = 0\n for char in string:\n if char.isupper() or char.islower():\n distinct_chars += 1\n return distinct_chars"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n beats = []\n for note in music_string.split():\n if note == 'o':\n beats.append(4)\n elif note == 'o|':\n beats.append(2)\n elif note == '.|':\n beats.append(1)\n elif note == 'o|o':\n beats.append(4)\n elif note == 'o|.':\n beats.append(2)\n elif note == 'o.':\n beats.append(1)\n elif note == 'o.|':\n beats.append(1)\n elif note == 'o.|.':\n beats.append(1)\n return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n >>> how_many_times('', 'a')\n 0\n >>> how_many_times('aaa', 'a')\n 3\n >>> how_many_times('aaaa', 'aa')\n 3"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: List[str]) -> str:\n \"\"\" Input is a list of space-delimited strings of numberals from 'zero' to 'nine'.\n Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n Return the string with numbers sorted from smallest to largest\n \"\"\"\n numbers = numbers.sort()\n return''.join(numbers)\n"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n other and return them in order (smaller number, larger number)."}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n such that the smallest number will become 0 and the largest will become 1\n >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n [0.0, 0.25, 0.5, 0.75, 1.0]\n \"\"\"\n\n def linear_transform(numbers: List[float]) -> List[float]:\n \"\"\" Apply a linear transform to the input list of numbers\n >>> linear_transform([1.0, 2.0, 3.0, 4.0, 5.0])\n [0.0, 0.25, 0.5, 0.75, 1.0]\n \"\"\"\n return numbers\n\n def rescale_to_unit(numbers: List[float]) -> List[float]:\n \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n such that the smallest number will become 0 and the largest will become 1\n >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n [0.0, 0.25, 0.5, 0.75, 1.0]\n \"\"\"\n return linear_transform(numbers)"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]):\n return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n \"\"\" Return length of given string\n >>> strlen('')\n 0\n >>> strlen('abc')\n 3\n \"\"\"\n return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n >>> largest_divisor(15)\n 5\n \"\"\"\n \n def is_divisible(n: int, d: int) -> bool:\n \"\"\" Check if a number n is divisible by a given divisor d\n >>> is_divisible(15, 5)\n True\n >>> is_divisible(15, 10)\n False\n \"\"\"\n \n def find_largest_divisor(n: int) -> int:\n \"\"\" Find the largest number that divides n evenly, smaller than n\n >>> find_largest_divisor(15)\n 5\n \"\"\"\n \n def largest_divisor(n: int) -> int:\n \"\"\" Find the largest number that divides n evenly, smaller than n\n >>> largest_divisor(15)\n 5\n \"\"\"\n \n def is_divisible(n: int, d: int) -> bool:\n \"\"\" Check if a number n is divisible by a given divisor d\n >>> is_divisible(15, 5)\n True\n >>> is_divisible(15, 10)\n False\n \"\"\"\n \n def find_largest_divisor(n: int) -> int:\n \"\"\" Find the largest number that divides n evenly, smaller than n\n >>> find_largest_divisor(15)\n 5\n \"\"\"\n "}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n factors = []\n while n > 1:\n for i in range(2, n):\n if n % i == 0:\n factors.append(i)\n n /= i\n if n > 1:\n break\n return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n \"\"\" From a list of integers, remove all elements that occur more than once.\n Keep order of elements left the same as in the input.\n >>> remove_duplicates([1, 2, 3, 2, 4])\n [1, 3, 4]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n # Convert the string to lowercase or uppercase\n if string.lower():\n # If the string is already lowercase, return it as is\n return string\n else:\n # If the string is already uppercase, return it as is\n return string\n # If the string is not already either lowercase or uppercase, convert it to lowercase\n return string.lower()\n # Return the flipped string\n return string"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n \"\"\" Concatenate list of strings into a single string\n >>> concatenate([])\n ''\n >>> concatenate(['a', 'b', 'c'])\n 'abc'\n \"\"\"\n return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": ""}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n \"\"\"Return only positive numbers in the list.\n >>> get_positive([-1, 2, -4, 5, 6])\n [2, 5, 6]\n >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n [5, 3, 2, 3, 9, 123, 1]\n \"\"\"\n return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n \"\"\"\n Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n \"\"\"\n return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n \"\"\" xs are coefficients of a polynomial.\n find_zero find x such that poly(x) = 0.\n find_zero returns only only zero point, even if there are many.\n Moreover, find_zero only takes list xs having even number of coefficients\n and largest non zero coefficient as it guarantees\n a solution.\n >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n -0.5\n >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n 1.0\n \"\"\"\n\n"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n # Define a function to sort the values at indices that are divisible by 3\n def sort_values_at_divisible_indices(l: list):\n sorted_values = l[::3]\n return [sorted_values]\n # Define a function to sort the values at indices that are not divisible by 3\n def sort_values_at_non_divisible_indices(l: list):\n sorted_values = l[::3]\n return [sorted_values]\n # Combine the two functions to sort the entire list\n def sort_third(l: list):\n sorted_values_at_divisible_indices = sort_values_at_divisible_indices(l)\n sorted_values_at_non_divisible_indices = sort_values_at_non_divisible_indices(l)\n return sorted_values_at_divisible_indices + sorted_values_at_non_divisible_indices\n return l"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n return sorted(list(set(l)))\n"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n if len(l) == 0:\n return None\n elif len(l) == 1:\n return l[0]\n else:\n return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n if n % 11 == 0 or n % 13 == 0:\n return 0\n elif n % 3 == 0:\n return 1\n elif n % 5 == 0:\n return 2\n else:\n return 3\n return 4"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n \"\"\"This function takes a list l and returns a list l' such that\n l' is identical to l in the odd indicies, while its values at the even indicies are equal\n to the values of the even indicies of l, but sorted.\n >>> sort_even([1, 2, 3])\n [1, 2, 3]\n >>> sort_even([5, 6, 3, 4])\n [3, 6, 5, 4]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n \"\"\"\n returns encoded string by cycling groups of three characters.\n \"\"\"\n # split string to groups. Each of length 3.\n groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n # cycle elements in each group. Unless group has fewer elements than 3.\n groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n # join groups back to original string.\n return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n \"\"\"\n takes as input string encoded with encode_cyclic function. Returns decoded string.\n \"\"\"\n # split string to groups. Each of length 3.\n groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n # cycle elements in each group. Unless group has fewer elements than 3.\n groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n # join groups back to original string.\n return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n if n <= 1:\n return 1\n elif n <= 2:\n return 2\n elif n <= 3:\n return 3\n elif n <= 5:\n return 5\n elif n <= 8:\n return 89\n else:\n return 0"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n if len(l) < 3:\n return False\n if l[0] + l[1] + l[2] == 0:\n return True\n return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n # initialize variables\n left_cars = []\n right_cars = []\n \n # add cars to each set\n for i in range(n):\n if i % 2 == 0:\n left_cars.append(i)\n else:\n right_cars.append(i)\n \n # check for collisions\n for j in range(n):\n if j % 2 == 0:\n if j in left_cars:\n return 0\n elif j in right_cars:\n return 0\n \n # check for collisions between cars in each set\n for i in range(n):\n if i % 2 == 0:\n if i in left_cars:\n return 0\n elif i in right_cars:\n return 0\n \n # check for collisions between cars in each set\n for j in range(n):\n if j % 2 == 0:\n if j in left_cars:\n return 0\n elif j in right_cars:\n return 0\n \n # check for collisions between cars in each set\n for k in range(n):\n if k % 2 == 0:\n if k in left_cars:\n return 0\n elif k in right_cars:\n return 0\n \n # check for collisions between cars in each set\n for l in range(n):\n if l % 2 == 0:\n if l in left_cars:\n return 0\n elif l in right_cars:\n return 0\n \n # check for collisions between cars in each set\n for m in range(n):\n if m % 2 == 0:\n if m in left_cars:\n return 0\n elif m in right_cars:\n return 0\n \n # check for collisions between cars in each set\n for n in range(n):\n if n % 2 == 0:\n if n in left_cars:\n return 0\n elif n in right_cars:\n return 0\n \n # check for collisions between cars in each set\n for o in range(n):\n if o % 2 == 0:\n if o"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n return list(map(lambda x: x + 1, l))\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n if len(l) < 2:\n return False\n for i in range(len(l)):\n for j in range(i+1, len(l)):\n if l[i] + l[j] == 0:\n return True\n return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n if base < 10:\n return str(x / base) + '' * (x % base)\n return 'Invalid input'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n return 1/2 * h * (a / 2) ** 2\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n if n == 0:\n return 0\n elif n == 1:\n return 0\n elif n == 2:\n return 0\n elif n == 3:\n return 0\n elif n == 4:\n return 0\n elif n == 5:\n return 2\n elif n == 6:\n return 8\n elif n == 7:\n return 14\n else:\n return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n \"\"\"Return median of elements in the list l.\n >>> median([3, 1, 2, 4, 5])\n 3\n >>> median([-10, 4, 6, 1000, 10, 20])\n 15.0\n \"\"\"\n\n median_index = len(l) // 2\n if len(l) % 2 == 0:\n return (l[median_index] + l[median_index - 1]) / 2\n else:\n return l[median_index]\n"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n if text == text[::-1]:\n return True\n return False"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n if n == 0:\n return 1\n elif n == 1:\n return 0\n elif n == p:\n return 1\n elif p == 2:\n return 1\n elif p == 3:\n return 2\n elif p == 5:\n return 3\n elif p == 7:\n return 4\n elif p == 11:\n return 5\n elif p == 13:\n return 6\n elif p == 17:\n return 7\n elif p == 19:\n return 8\n elif p == 23:\n return 9\n elif p == 29:\n return 10\n elif p == 31:\n return 11\n elif p == 37:\n return 12\n elif p == 41:\n return 13\n elif p == 43:\n return 14\n elif p == 47:\n return 15\n elif p == 53:\n return 16\n elif p == 59:\n return 17\n elif p == 61:\n return 18\n elif p == 67:\n return 19\n elif p == 71:\n return 20\n elif p == 73:\n return 21\n elif p == 79:\n return 22\n elif p == 83:\n return 23\n elif p == 89:\n return 24\n elif p == 97:\n return 25\n elif p == 101:\n return 2^n % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n return \"\".join([chr(ord(ch) - 5 + 26) if ch >= \"a\" and ch <= \"z\" else chr(ord(ch) - 5 + 26 - 10) if ch >= \"A\" and ch <= \"Z\" else chr(ord(ch) - 5 + 26 - 10) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n # remove vowels from text\n vowels = 'aeiou'\n text = ''.join(text)\n vowels_count = sum(1 for v in vowels)\n text = ''.join(text)\n for i in range(len(text)):\n if i % 2 == 0:\n if text[i] in vowels:\n text = text[:i] + text[i+1:]\n break\n return text"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n if len(l) == 0 or len(l) == 1:\n return True\n if len(l) == 1:\n return l[0] < t\n for num in l:\n if num > t:\n return False\n return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n return x + y\n"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n \"\"\"\n Check if two words have the same characters.\n >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n True\n >>> same_chars('abcd', 'dddzzzzzzzddeddabc')\n True\n >>> same_chars('dddzzzzzzzddeddabc', 'abcd')\n True\n >>> same_chars('eabcd', 'dddddddabc')\n True\n >>> same_chars('dddddddabc', 'abcd')\n True\n >>> same_chars('eabcd', 'dddddddabce')\n False\n >>> same_chars('abcd', 'dddddddabce')\n False\n >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n False\n \"\"\"\n return len(set(s0).intersection(set(s1))) == len(s0)\n"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n if n <= 1:\n return 1\n elif n <= 2:\n return 1\n else:\n return 1 + 2"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n if len(brackets) % 2!= 0:\n return False\n for i in range(len(brackets)):\n if brackets[i]!= brackets[i+1]:\n return False\n return True\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n if l == []:\n return True\n elif len(l) == 1:\n return l[0] == l[len(l) - 1]\n else:\n return (l[0] <= l[-1] and l[0] >= l[-1]) or (l[1] <= l[-1] and l[1] >= l[-1])\n return False"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n \"\"\"Return sorted unique common elements for two lists.\n >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n [1, 5, 653]\n >>> common([5, 3, 2, 8], [3, 2])\n [2, 3]\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n if n < 2:\n return 2\n elif n % 2 == 0:\n return 2\n else:\n for i in range(3, n):\n if n % i == 0:\n return i\n for j in range(i ** 0.5, n, i):\n if n % j == 0:\n return j\n return None"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n):\n \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n >>> sum_to_n(30)\n 465\n >>> sum_to_n(100)\n 5050\n >>> sum_to_n(5)\n 15\n >>> sum_to_n(10)\n 55\n >>> sum_to_n(1)\n 1"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n if len(brackets) % 2!= 0:\n return False\n for i in range(len(brackets)):\n if brackets[i]!= brackets[i+1]:\n return False\n return True"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n \"\"\" xs represent coefficients of a polynomial.\n xs[0] + xs[1] * x + xs[2] * x^2 +....\n Return derivative of this polynomial in the same form."}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n if n == 0:\n return 0\n elif n == 1:\n return 0\n elif n == 2:\n return 1\n elif n == 3:\n return 1\n elif n == 4:\n return 1\n elif n == 5:\n return 2\n elif n == 6:\n return 5\n elif n == 7:\n return 13\n elif n == 8:\n return 42\n else:\n return 1\n + 1\n + 1"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n \"\"\""}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n if shift > len(str(x)):\n return str(x).reverse()[::-1] * shift\n return str(x)[shift:]\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n \"\"\"Task\n Task\n Write a function that takes a string as input and returns the sum of the upper characters only'\n ASCII codes.\n\n Examples:\n digitSum(\"\") => 0\n digitSum(\"abAB\") => 131\n digitSum(\"abcCd\") => 67\n digitSum(\"helloE\") => 69\n digitSum(\"woArBld\") => 131\n digitSum(\"aAaaaXa\") => 153\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n # split the string into a list of integers\n fruits = s.split()\n \n # initialize the counter for mango fruits\n mango_fruits = 0\n \n # iterate through the list of fruits\n for i in range(len(fruits)):\n # check if the fruit is an apple or an orange\n if fruits[i] == \"a\" or fruits[i] == \"o\":\n # if the fruit is an apple, add 1 to the counter for mango fruits\n if fruits[i] == \"a\":\n mango_fruits += 1\n # if the fruit is an orange, add 1 to the counter for mango fruits\n if fruits[i] == \"o\":\n mango_fruits += 1\n \n # return the number of mango fruits in the basket\n return mango_fruits"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n \"\"\""}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n greatest = -1\n for num in lst:\n if num > 0 and num > greatest:\n greatest = num\n return greatest"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n return lst[::-1] + [min(lst), max(lst)] + lst[::-1]\n"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n if a + b > c and a + c > b and b + c > a:\n return round(sqrt(a * b * (c - a) / 6), 2)\n else:\n return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n if is_balanced(q) and sum(q) <= w:\n return True\n else:\n return False\n\ndef is_balanced(q):\n if len(q) == len(list(reversed(q))):\n return True\n else:\n return False\n\ndef sum(q):\n return sum(q)\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n # find the length of the array\n len_arr = len(arr)\n \n # find the number of elements that need to be changed to make the array palindromic\n change_needed = 0\n for i in range(len_arr):\n if arr[i]!= arr[i-1]:\n change_needed += 1\n \n # return the number of changes needed\n return change_needed"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n if len(lst1) == len(lst2):\n return lst1\n else:\n return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n if a % 3 == 0 and a % 5 == 0 and a % 7 == 0:\n return True\n else:\n return False\n"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n if n**int=x:\n return True\n else:\n return False\n"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n if a**3 == a:\n return True\n return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n # check if input is empty string or not\n if num == \"\":\n return 0\n # check if input is a prime number\n if is_prime(num):\n return len(filter(lambda x: is_prime(x), str(num)))\n # check if input is a prime number with uppercase letters\n if num.isupper() and is_prime(num):\n return len(filter(lambda x: is_prime(x), str(num)))\n # check if input is a prime number with lowercase letters\n if num.islower() and is_prime(num):\n return len(filter(lambda x: is_prime(x), str(num)))\n # check if input is a prime number with digits\n if num.isdigit() and is_prime(num):\n return len(filter(lambda x: is_prime(x), str(num)))\n # check if input is a prime number with uppercase letters and digits\n if num.isupper() and num.isdigit() and is_prime(num):\n return len(filter(lambda x: is_prime(x), str(num)))\n # check if input is a prime number with lowercase letters and digits\n if num.islower() and num.isdigit() and is_prime(num):\n return len(filter(lambda x: is_prime(x), str(num)))\n # check if input is a prime number with digits and uppercase letters\n if num.isdigit() and num.isupper() and is_prime(num):\n return len(filter(lambda x: is_prime(x), str(num)))\n # check if input is a prime number with digits and lowercase letters\n if num.isdigit() and num.islower() and is_prime(num):\n return len(filter(lambda x: is_prime(x), str(num)))\n # check if input is a prime number with digits and uppercase letters and digits\n if num.isdigit() and num.isupper() and num.isdigit() and is_prime(num):\n return len(filter(lambda x: is_prime(x), str(num)))\n # check if input is not a prime number\n return 0"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n # Convert decimal to binary\n binary_str = bin(decimal)[2:].zfill(16)\n # Add extra characters 'db' at the beginning and at the end\n return \"db\" + binary_str + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n \"\"\"You are given a string s.\n Your task is to check if the string is happy or not.\n A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n For example:\n is_happy(a) => False\n is_happy(aa) => False\n is_happy(abcd) => True\n is_happy(aabb) => False\n is_happy(adb) => True\n is_happy(xyy) => False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n letter_grades = []\n for grade in grades:\n if grade >= 4.0:\n letter_grades.append(\"A+\")\n elif grade >= 3.7:\n letter_grades.append(\"A\")\n elif grade >= 3.3:\n letter_grades.append(\"A-\")\n elif grade >= 3.0:\n letter_grades.append(\"B+\")\n elif grade >= 2.7:\n letter_grades.append(\"B\")\n elif grade >= 2.3:\n letter_grades.append(\"B-\")\n elif grade >= 2.0:\n letter_grades.append(\"C+\")\n elif grade >= 1.7:\n letter_grades.append(\"C\")\n elif grade >= 1.3:\n letter_grades.append(\"C-\")\n elif grade >= 1.0:\n letter_grades.append(\"D+\")\n elif grade >= 0.7:\n letter_grades.append(\"D\")\n elif grade >= 0.0:\n letter_grades.append(\"D-\")\n elif grade == 0.0:\n letter_grades.append(\"E\")\n return letter_grades"}
{"task_id": "HumanEval/82", "completion": ""}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n count = 0\n for i in range(1, 10):\n if i == 1 or i == n % 10:\n count += 1\n if i == n % 10:\n count += 1\n return count\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n if N > 1000:\n return \"1\"\n elif N > 100:\n return \"1\" + \"0\"*(N-100)\n elif N > 10:\n return \"1\" + \"0\"*(N-10) + \"0\"*(5-N)\n elif N > 5:\n return \"1\" + \"0\"*(N-5) + \"0\"*(3-N) + \"0\"*(1-N)\n elif N > 1:\n return \"1\" + \"0\"*(N-1)\n return \"0\""}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n even_indices = [i for i in range(len(lst)) if i % 2!= 0]\n even_lst = lst[even_indices]\n return even_lst\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n words = s.split()\n shuffled_words = []\n for word in words:\n shuffled_word = ''.join(sorted(word))\n shuffled_words.append(shuffled_word)\n return''.join(shuffled_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n \"\"\"\n You are given a 2 dimensional data, as a nested lists,\n which is similar to matrix, however, unlike matrices,\n each row may contain a different number of columns.\n Given lst, and integer x, find integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that\n each tuple is a coordinate - (row, columns), starting with 0.\n Sort coordinates initially by rows in ascending order.\n Also, sort coordinates of the row by columns in descending order.\n Examples:\n get_row([\n [1,2,3,4,5,6],\n [1,2,3,4,1,6],\n [1,2,3,4,5,1]\n ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n get_row([], 1) == []\n get_row([[1,2,3,4,5,6]], 3) == [(2, 2)]\n \"\"\"\n lst = lst\n x = x\n \n def get_row(lst, x):\n # Sort coordinates initially by rows in ascending order.\n rows = sorted(lst, key=lambda row: row[0])\n \n # Sort coordinates of the row by columns in descending order.\n columns = sorted(rows[0], key=lambda col: col[1])\n \n # Find integers x in the list.\n for i in range(len(lst)):\n if x == lst[i][0]:\n return [lst[i]]\n \n # If no x found, return empty list.\n return []\n \n return get_row(columns, x)\n \n return get_row(rows, x)\n \n return get_row(lst, x)\n \n return get_row([], x)\n \n return []\n \n return []\n \n return []\n \n return []\n \n return []\n \n return []\n \n return []\n \n return []\n \n return []\n \n return []\n \n return []\n \n return []"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n \"\"\"\n Given an array of non-negative integers, return a copy of the given array after sorting,\n you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n or sort it in descending order if the sum( first index value, last index value) is even.\n\n Note:\n * don't change the given array.\n\n Examples:\n * sort_array([]) => []\n * sort_array([5]) => [5]\n * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n \"\"\"\n def sort_array(array):\n # create a copy of the given array\n return array.copy()\n \n # sort the given array in ascending order if the sum( first index value, last index value) is odd,\n # or sort it in descending order if the sum( first index value, last index value) is even.\n def sort_array(array):\n # create a copy of the given array\n return array.copy()\n \n # sort the given array in ascending order if the sum( first index value, last index value) is odd,\n # or sort it in descending order if the sum( first index value, last index value) is even.\n def sort_array(array):\n # create a copy of the given array\n return array.copy()\n \n # sort the given array in ascending order if the sum( first index value, last index value) is odd,\n # or sort it in descending order if the sum( first index value, last index value) is even.\n def sort_array(array):\n # create a copy of the given array\n return array.copy()\n \n # sort the given array in ascending order if the sum( first index value, last index value) is odd,\n # or sort it in descending order if the sum( first index value, last index value) is even"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n rotated_alphabet = alphabet.replace(\"a\", \"b\").replace(\"e\", \"h\")\n shift = 2 * 2\n encrypted_s = \"\"\n for letter in s:\n if letter in rotated_alphabet:\n encrypted_s += rotated_alphabet.index(letter)\n else:\n encrypted_s += letter\n encrypted_s = encrypted_s.replace(\" \", \"\")\n return encrypted_s"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n if len(lst) == 0:\n return None\n elif len(lst) == 1:\n return lst[0]\n else:\n smallest = lst[0]\n for i in range(1, len(lst)):\n if lst[i] < smallest:\n smallest = lst[i]\n return smallest\n return None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n words = S.split()\n boredoms = 0\n for word in words:\n if word.startswith(\"I\"):\n boredoms += 1\n return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n if x + y == z and is_integer(x) and is_integer(y) and is_integer(z):\n return True\n else:\n return False\n\ndef is_integer(num):\n if isinstance(num, (int, float)):\n return True\n else:\n return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n # Define a mapping of vowels to their 2-place neighbors\n vowels = 'aeiou'\n \n # Convert the message to lowercase\n message = message.lower()\n \n # Iterate over each character in the message\n for char in message:\n # If the character is a vowel, swap it with its 2-place neighbor\n if char in vowels:\n message = message.replace(char, vowels.index(char) + 2)\n \n # Join the characters back into a string\n encoded_message = ''.join(message)\n \n return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n largest_prime = 0\n sum_of_digits = 0\n for num in lst:\n if num > largest_prime:\n largest_prime = num\n sum_of_digits = sum(int(str(num)))"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n if len(dict) == 0:\n return False\n elif all(islower(key) for key in dict.keys()):\n return True\n else:\n return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n primes = []\n for i in range(2, n+1):\n if is_prime(i):\n primes.append(i)\n if len(primes) == n:\n return primes\n return None\ndef is_prime(n):\n if n <= 1:\n return False\n for i in range(2, n):\n if n % i == 0:\n return False\n return True"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n if a == 0 or b == 0:\n return 0\n elif a == -1 or b == -1:\n return 1\n elif a == 1 or b == 1:\n return 1\n else:\n return a * b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n vowels = 'aeiou'\n count = 0\n for i in range(0, len(s), 2):\n if s[i] in vowels:\n count += 1\n if i % 2 == 0:\n return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n if value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value == \"\":\n return \"0\"\n elif value"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n stones = []\n if n % 2 == 0:\n stones.append(n)\n stones.append(n + 2)\n stones.append(n + 4)\n stones.append(n + 6)\n elif n % 2 == 1:\n stones.append(n + 4)\n stones.append(n + 6)\n stones.append(n + 8)\n stones.append(n + 10)\n stones.append(n + 12)\n return stones"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n words = s.split(',')\n return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n if x > y:\n return choose_num(y, x)\n if y > x:\n return choose_num(x, y)\n if x == y:\n return 0\n return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n if n > m:\n return -1\n if n == m:\n return round(n / m)\n if n > m:\n return round(n / m)\n return round(n / m)\n if n > m:\n return round(n / m)\n return round(n / m)\n return round(n / m)\n if n > m:\n return round(n / m)\n return round(n / m)\n return round(n / m)\n if n > m:\n return round(n / m)\n return round(n / m)\n return round(n / m)\n if n > m:\n return round(n / m)\n return round(n / m)\n return round(n / m)\n if n > m:\n return round(n / m)\n return round(n / m)\n return round(n / m)\n if n > m:\n return round(n / m)\n return round(n / m)\n return round(n / m)\n if n > m:\n return round(n / m)\n return round(n / m)\n return round(n / m)\n if n > m:\n return round(n / m)\n return round(n / m)\n return round(n / m)\n if n > m:\n return round(n / m)\n return round(n / m)\n return round(n / m)\n if n > m:\n return round(n / m)\n return round(n / m)\n return round(n / m)\n if n > m:\n return round(n / m)\n return round(n / m)\n return round(n / m)\n if n > m:\n return round(n / m)\n return round(n / m)\n return round(n / m)\n if n > m:\n return round(n / m)\n return round(n / m)\n return round(n / m)\n if n > m:\n return round(n / m)\n return round(n / m)\n return round(n / m)\n if n > m:\n return round(n / m)\n return round(n / m)\n return round(n / m)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n # Create a set of all even digits\n even_digits = set(str(d) for d in range(10) if d % 2 == 0)\n # Create a set of all odd digits\n odd_digits = set(str(d) for d in range(10) if d % 2!= 0)\n # Create a set of all digits\n digits = even_digits.union(odd_digits)\n # Create a list of all elements in the set of digits\n unique_digits = list(digits)\n # Sort the list in increasing order\n unique_digits.sort()\n return unique_digits"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n if len(arr) == 0:\n return []\n elif len(arr) == 1:\n return [\"One\"]\n else:\n sorted_arr = sorted(arr)\n reversed_arr = list(reversed(sorted_arr))\n for i in range(len(reversed_arr)):\n reversed_arr[i] = \"\".join(str(digit) for digit in reversed_arr[i])\n return [\"\".join(str(digit) for digit in \"One\".join(reversed_arr))]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n if n % 2 == 0:\n return [1, 2, 6, 24, 15]\n else:\n return [1, 2, 3, 4, 5] + [i + 1 for i in range(1, n+1)]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n \"\"\"\n Given a positive integer n, return a tuple that has the number of even and odd\n integer palindromes that fall within the range(1, n), inclusive.\n\n Example 1:\n\n Input: 3\n Output: (1, 2)\n Explanation:\n Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n Example 2:\n\n Input: 12\n Output: (4, 6)\n Explanation:\n Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n Note:\n 1. 1 <= n <= 10^3\n 2. returned tuple has the number of even and odd integer palindromes respectively."}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n # count the number of elements with a sum of digits > 0\n count = 0\n for num in arr:\n if num > 0:\n count += 1\n return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will be randomly ordered. Your task is to determine if\n it is possible to get an array sorted in non-decreasing order by performing \n the following operation on the given array:\n \n You are allowed to perform right shift operation any number of times.\n \n One right shift operation means shifting all elements of the array by one\n position in the right direction. The last element of the array will be moved to\n the starting position in the array i.e. 0th index. \n \n If it is possible to obtain the sorted array by performing the above operation\n then return True else return False.\n \n If the given array is empty then return True.\n \n For Example:\n \n move_one_ball([3, 4, 5, 1, 2])==>True\n \n Explanation: By performin 2 right shift operations, non-decreasing order can\n be achieved for the given array.\n \n move_one_ball([3, 5, 4, 1, 2])==>False\n \n Explanation:It is not possible to get non-decreasing order for the given\n array by performing any number of right shift operations.\n \n Note: The given list is guaranteed to have unique elements.\n \n For Example:\n \n move_one_ball([3, 4, 5, 1, 2])==>True\n \n Explanation: By performin 2 right shift operations, non-decreasing order can\n be achieved for the given array.\n \n move_one_ball([3, 5, 4, 1, 2])==>False\n \n Explanation:It is not possible to get non-decreasing order for the given\n array by performing any number of right shift operations.\n \n Note: The given list is guaranteed to have unique elements.\n \n For Example:\n \n move_one_ball([3, 4, 5, 1, 2])==>True\n \n Explanation: By performin 2 right shift operations,"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n if len(lst1) == len(lst2):\n for i in range(len(lst1)):\n if lst1[i] % 2!= 0 and lst2[i] % 2 == 0:\n lst1[i], lst2[i] = lst2[i], lst1[i]\n return \"YES\"\n else:\n return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n if len(test) == 0:\n return {}\n letters = test.lower()\n count = {}\n for letter in letters:\n if letter in count:\n count[letter] += 1\n else:\n count[letter] = 1\n return count"}
{"task_id": "HumanEval/112", "completion": ""}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n # create a list of odd elements in each string\n odd_lst = []\n for i in range(len(lst)):\n odd_lst.append(lst[i] if lst[i] % 2!= 0 else 0)\n # create a list of odd digits in each string\n odd_digits = []\n for i in range(len(lst)):\n odd_digits.append(lst[i] if lst[i] % 2!= 0 else 0)\n # create a list of odd elements in each string\n odd_str = []\n for i in range(len(lst)):\n odd_str.append(odd_lst[i] if odd_lst[i] % 2!= 0 else 0)\n # create a list of odd elements in each string\n odd_count = []\n for i in range(len(lst)):\n odd_count.append(odd_str[i] if odd_str[i] % 2!= 0 else 0)\n # create a list of odd elements in each string\n odd_count.append(odd_digits[i] if odd_digits[i] % 2!= 0 else 0)\n # create a list of odd elements in each string\n odd_count.append(odd_count[i] if odd_count[i] % 2!= 0 else 0)\n # create a list of odd elements in each string\n odd_count.append(odd_count[i] if odd_count[i] % 2!= 0 else 0)\n # create a list of odd elements in each string\n odd_count.append(odd_count[i] if odd_count[i] % 2!= 0 else 0)\n # create a list of odd elements in each string\n odd_count.append(odd_count[i] if odd_count[i] % 2!= 0 else 0)\n # create a list of odd elements in each string\n odd_count.append(odd_count[i] if odd_count[i] % 2!= 0 else 0)\n # create a list of odd elements in each string\n odd_count.append(odd_count[i] if odd_count"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n \"\"\"\n Given an array of integers nums, find the minimum sum of any non-empty sub-array\n of nums.\n Example\n minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n minSubArraySum([-1, -2, -3]) == -6\n \"\"\"\n\n def find_min_sum(nums):\n # find the minimum sum of any non-empty sub-array of nums\n min_sum = float('inf')\n for sub_nums in iterable(nums):\n if len(sub_nums) > 0:\n sum = sum(sub_nums)\n if sum < min_sum:\n min_sum = sum\n return min_sum\n return find_min_sum(nums)\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n import math\n \n # Check constraints\n if (grid.length < 1 or grid.length > 10**2) or (grid[:,1].length < 1 or grid[:,1].length > 10**2):\n return 0\n \n # Initialize variables\n num_fills = 0\n \n # Iterate over each row\n for row in grid:\n \n # Iterate over each column\n for i in range(len(row)):\n \n # Check if the current well is full\n if row[i] == 1:\n \n # Check if the current bucket can be lowered\n if capacity > 0 and row[i] > capacity:\n \n # If the bucket can be lowered, fill it\n if capacity > 0:\n num_fills += 1\n \n # If the bucket cannot be lowered, fill it\n if capacity == 0:\n num_fills += 1\n \n # If the current well is not full, fill it\n if row[i] > 0:\n num_fills += 1\n \n # Update the bucket capacity\n capacity -= row[i]\n \n # Update the number of fills\n \n return num_fills"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n # sort based on number of ones in binary representation\n def binary_sort(arr):\n return sorted(arr, key=lambda x: sum(1 for _ in range(x)))\n \n # sort based on decimal value\n def decimal_sort(arr):\n return sorted(arr, key=lambda x: x)\n \n # combine both sorts\n def combined_sort(arr):\n return sorted(arr, key=lambda x: (sum(1 for _ in range(x)), x))\n \n return combined_sort(binary_sort(arr))\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n words = []\n for i in range(len(s)):\n if i == len(s) - 1:\n if s[i] in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\":\n words.append(s[i])\n words.append(s[i+1])\n words.append(s[i+2])\n words.append(s[i+3])\n words.append(s[i+4])\n words.append(s[i+5])\n words.append(s[i+6])\n words.append(s[i+7])\n words.append(s[i+8])\n words.append(s[i+9])\n words.append(s[i+10])\n words.append(s[i+11])\n words.append(s[i+12])\n words.append(s[i+13])\n words.append(s[i+14])\n words.append(s[i+15])\n words.append(s[i+16])\n words.append(s[i+17])\n words.append(s[i+18])\n words.append(s[i+19])\n words.append(s[i+20])\n words.append(s[i+21])\n words.append(s[i+22])\n words.append(s[i+23])\n words.append(s[i+24])\n words.append(s[i+25])\n words.append(s[i+26])\n words.append(s[i+27])\n words.append(s[i+28])\n words.append(s[i+29])\n words.append(s[i+30])\n words.append(s[i+31])\n words.append(s[i+32])\n words.append(s[i+33])\n words.append(s[i+34])\n words.append(s[i+35])"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n vowels = ['a', 'e', 'i', 'o', 'u']\n consonants = []\n for char in word:\n if char.isalpha():\n if char.isupper():\n if char in vowels:\n if len(consonants) > 0 and len(consonants) < 2:\n return vowels.pop()\n consonants.append(char)\n return \"\"\n return vowels.pop()"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n # lst is a list of two strings\n if len(lst) == 1:\n if lst[0] == '(' and lst[1] == ')' or lst[0] == ')' and lst[1] == '(':\n return 'Yes'\n else:\n return 'No'\n elif len(lst) == 2:\n if lst[0] == '(' and lst[1] == ')' or lst[0] == ')' and lst[1] == '(':\n return 'Yes'\n else:\n return 'No'\n else:\n return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n if k > len(arr):\n return []\n sorted_arr = sorted(arr)\n sorted_arr = sorted_arr[:k]\n return sorted_arr"}
{"task_id": "HumanEval/121", "completion": ""}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n \"\"\"\n Given a non-empty array of integers arr and an integer k, return\n the sum of the elements with at most two digits from the first k elements of arr.\n\n Example:\n\n Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n Output: 24 # sum of 21 + 3\n\n Constraints:\n 1. 1 <= len(arr) <= 100\n 2. 1 <= k <= len(arr)"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n if n % 2 == 0:\n return [n]\n elif n % 2!= 0:\n return [n, 3*n+1]\n else:\n return [n, 3*n+1, 3*n+2]\n return sorted(get_odd_collatz(n))"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n \"\"\"You have to write a function which validates a given date string and\n returns True if the date is valid otherwise False.\n The date is valid if all of the following rules are satisfied:\n 1. The date string is not empty.\n 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n 3. The months should not be less than 1 or higher than 12.\n 4. The date should be in the format: mm-dd-yyyy\n\n for example: \n valid_date('03-11-2000') => True\n\n valid_date('15-01-2012') => False\n\n valid_date('04-0-2040') => False\n\n valid_date('06-04-2020') => True\n\n valid_date('06/04/2020') => False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n if not txt:\n return txt\n words = txt.split()\n if not words:\n words = txt.split(',')\n if not words:\n words = [ord(c) for c in txt if c.isalpha()]\n return words"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n \"\"\"\n Given a list of numbers, return whether or not they are sorted\n in ascending order. If list has more than 1 duplicate of the same\n number, return False. Assume no negative numbers and only integers.\n\n Examples\n is_sorted([5]) \u279e True\n is_sorted([1, 2, 3, 4, 5]) \u279e True\n is_sorted([1, 3, 2, 4, 5]) \u279e False\n is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n if interval1[1] < interval2[0] or interval1[1] > interval2[1]:\n return \"NO\"\n if interval1[0] < interval2[0] and interval1[1] > interval2[1]:\n return \"NO\"\n if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n return \"NO\"\n if interval1[0] == interval2[0] and interval1[1] < interval2[1]:\n return \"NO\"\n if interval1[0] > interval2[0] and interval1[1] < interval2[1]:\n return \"NO\"\n if interval1[0] > interval2[0] and interval1[1] > interval2[1]:\n return \"YES\"\n return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n if len(arr) == 0:\n return None\n else:\n product = 1\n for i in range(len(arr)):\n magnitude = arr[i]\n sign = 1 if magnitude > 0 else -1 if magnitude < 0 else 0\n product *= sign\n return magnitude * product"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n \"\"\""}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n if n % 2 == 0:\n return [1 + n / 2] + [n / 2]\n else:\n return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n else:\n return [tri(n - 1) + tri(n - 2) + tri(n + 1)]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n if n % 2 == 0:\n return 0\n elif n % 2!= 0:\n return n // 2"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n # Check if the string contains only square brackets\n if '[]' in string:\n # Check if there is a valid subsequence of brackets where at least one bracket in the subsequence is nested\n if '[]' in string and '[]' in string.lower() and '[]' in string.lower()[1:]:\n return True\n return False"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n \"\"\"You are given a list of numbers.\n You need to return the sum of squared numbers in the given list,\n round each element in the list to the upper int(Ceiling) first.\n Examples:\n For lst = [1,2,3] the output should be 14\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n # Check if the last character is an alphabetical character\n if txt[-1].isalpha() and txt[-1] not in \"aeiou\":\n # Check if the last character is not a part of a word\n if txt[-1] not in \".\":\n # Return True\n return True\n # Return False\n return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n if len(arr) == 0:\n return -1\n elif len(arr) == 1:\n return 0\n else:\n for i in range(len(arr)):\n if arr[i] > arr[i+1]:\n return i\n return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n if lst:\n a = max(lst)\n b = min(lst)\n return (a, b) if a!= 0 and b!= 0 else (None, None)\n else:\n return (None, None)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n if isinstance(a, (int, float)):\n if isinstance(b, (int, float)):\n if a > b:\n return a\n elif a < b:\n return b\n else:\n return None\n elif isinstance(b, (str, float)):\n if a.isdigit() and b.isdigit():\n if a > b:\n return a\n elif a < b:\n return b\n else:\n return None\n elif isinstance(a, (str, float)) and isinstance(b, (str, float)):\n if a.isdigit() and b.isdigit():\n if a > b:\n return a\n elif a < b:\n return b\n else:\n return None\n else:\n return None\n return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n if n % 2 == 0 and n % 4 == 0:\n return True\n return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n if n > 0:\n return n * (n-1) * (n-2) *... * 1"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n # Replace all spaces in text with underscores\n text = text.replace(\" \", \"\")\n # Replace all consecutive spaces with -\n text = text.replace(\" \", \"-\")\n return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n \"\"\"Create a function which takes a string representing a file's name, and returns\n 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n A file's name is considered to be valid if and only if all the following conditions \n are met:\n - There should not be more than three digits ('0'-'9') in the file's name.\n - The file's name contains exactly one dot '.'\n - The substring before the dot should not be empty, and it starts with a letter from \n the latin alphapet ('a'-'z' and 'A'-'Z').\n - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n Examples:\n file_name_check(\"example.txt\") # => 'Yes'\n file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n \"\"\"\n This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n Examples:\n For lst = [1,2,3] the output should be 6\n For lst = []  the output should be 0\n For lst = [-1,-5,2,-1,-5]  the output should be -126\n\n def sum_squares(lst):\n \"\"\"\n This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n Examples:\n For lst = [1,2,3] the output should be 6\n For lst = []  the output should be 0\n For lst = [-1,-5,2,-1,-5]  the output should be -126\n\n def sum_squares(lst):\n \"\"\"\n This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n Examples:\n For lst = [1,2,3] the output should be 6\n For lst = []  the output should be 0\n For lst = [-1,-5,2,-1,-5]  the output should be -126\n\n def sum_squares(lst):\n \"\"\"\n This function will take a list of integers. For all entries"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n words = sentence.split()\n words = [word for word in words if len(word) % 2 == 0]\n words = [word for word in words if len(word) % 3 == 0]\n words = [word for word in words if len(word) % 5 == 0]\n words = [word for word in words if len(word) % 7 == 0]\n words = [word for word in words if len(word) % 11 == 0]\n words = [word for word in words if len(word) % 13 == 0]\n words = [word for word in words if len(word) % 17 == 0]\n words = [word for word in words if len(word) % 19 == 0]\n words = [word for word in words if len(word) % 23 == 0]\n words = [word for word in words if len(word) % 29 == 0]\n words = [word for word in words if len(word) % 31 == 0]\n words = [word for word in words if len(word) % 37 == 0]\n words = [word for word in words if len(word) % 41 == 0]\n words = [word for word in words if len(word) % 47 == 0]\n words = [word for word in words if len(word) % 53 == 0]\n words = [word for word in words if len(word) % 59 == 0]\n words = [word for word in words if len(word) % 65 == 0]\n words = [word for word in words if len(word) % 71 == 0]\n words = [word for word in words if len(word) % 77 == 0]\n words = [word for word in words if len(word) % 83 == 0]\n words = [word for word in words if len(word) % 89 == 0]\n words = [word for word in words if len(word) % 95 == 0]\n words = [word for word in words if"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n if x == \"1/5\" and n == \"5/1\":\n return True\n elif x == \"1/6\" and n == \"2/1\":\n return False\n elif x == \"7/10\" and n == \"10/2\":\n return False\n else:\n return None\n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n # sort the list of integers in ascending order according to the sum of their digits\n # if there are several items with similar sum of their digits, order them based on their index in original list\n return sorted(nums, key=lambda x: sum(int(digit) for digit in str(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n return len(filter(lambda x: x > 10 and (x // 10 % 2) % 2 == 1, nums))"}
{"task_id": "HumanEval/147", "completion": ""}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n if not isinstance(planet1, str) or not isinstance(planet2, str):\n return \"\"\n \n planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n \n if planet1 not in planets:\n return \"\"\n \n if planet2 not in planets:\n return \"\"\n \n if planet1 in planets:\n return sorted(planets[planet1.index():planet2.index()])\n \n if planet2 in planets:\n return sorted(planets[planet1.index():planet2.index()])\n \n return \"\"\n "}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n # Delete odd-length strings\n lst = [word for word in lst if len(word) % 2 == 0]\n # Sort by length\n lst.sort(key=len)\n # Return the list\n return lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n if is_prime(n):\n return x\n else:\n return y\n\ndef is_prime(n):\n if n > 1 and n % 2 == 0:\n return False\n for i in range(3, n):\n if n % i == 0:\n return False\n return True\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n odd_sum = 0\n for num in lst:\n if isinstance(num, (int, float)):\n if num % 2!= 0 and num > 0:\n odd_sum += num**2\n return odd_sum\n else:\n return 0"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n scores = [1, 2, 3, 4, 5, 1]\n guesses = [1, 2, 3, 4, 2, -2]\n \n if guesses == scores:\n return [0] * len(scores)\n else:\n return [abs(guess - score) for score in scores for guess in guesses]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n \"\"\"You will be given the name of a class (a string) and a list of extensions.\n The extensions are to be used to load additional classes to the class. The\n strength of the extension is as follows: Let CAP be the number of the uppercase\n letters in the extension's name, and let SM be the number of lowercase letters \n in the extension's name, the strength is given by the fraction CAP - SM. \n You should find the strongest extension and return a string in this \n format: ClassName.StrongestExtensionName.\n If there are two or more extensions with the same strength, you should\n choose the one that comes first in the list.\n For example, if you are given \"Slices\" as the class and a list of the\n extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n (its strength is -1).\n Example:\n for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n \"\"\"\n \n class_name = class_name.lower()\n extensions = extensions.lower()\n \n for extension in extensions:\n extension_strength = (len(extension.split()) - len(class_name.split())) / 2\n \n if extension_strength > 0:\n return f\"{class_name}.{extension}\"\n \n return None"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n if a.lower() in b.lower():\n return True\n elif a.lower() + \"\".join(set(b.lower())) in a.lower():\n return True\n elif a.lower() + \"\".join(set(b.lower())) + \"\".join(set(a.lower())) in a.lower():\n return True\n return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n if num < 0:\n return \"Invalid input\"\n \n if num == 0:\n return \"Zero has no digits\"\n \n if num == 1:\n return \"One has one digit\"\n \n if num > 1:\n return \"Invalid input\"\n \n if num % 2 == 0:\n return (num // 2, 1)\n \n if num % 2!= 0:\n return (num // 2, 0)\n \n return \"Invalid input\"\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n if number < 10:\n return f\"{number}\"\n elif 10 <= number and number <= 20:\n return f\"{number}a\"\n elif 20 <= number and number <= 30:\n return f\"{number}b\"\n elif 30 <= number and number <= 40:\n return f\"{number}c\"\n elif 40 <= number and number <= 50:\n return f\"{number}d\"\n elif 50 <= number and number <= 60:\n return f\"{number}e\"\n elif 60 <= number and number <= 70:\n return f\"{number}f\"\n elif 70 <= number and number <= 80:\n return f\"{number}g\"\n elif 80 <= number and number <= 90:\n return f\"{number}h\"\n elif 90 <= number and number <= 99:\n return f\"{number}i\"\n elif 100 <= number and number <= 199:\n return f\"{number}x\"\n elif 200 <= number and number <= 299:\n return f\"{number}xi\"\n elif 300 <= number and number <= 399:\n return f\"{number}xii\"\n elif 400 <= number and number <= 499:\n return f\"{number}xiii\"\n elif 500 <= number and number <= 599:\n return f\"{number}xiv\"\n elif 600 <= number and number <= 699:\n return f\"{number}xv\"\n elif 700 <= number and number <= 799:\n return f\"{number}xvi\"\n elif 800 <= number and number <= 899:\n return f\"{number}xvii\"\n elif 900 <= number and number <= 999:\n return f\"{number}xviii\"\n return f\"{number}x\""}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n if a == b and a == c:\n return True\n elif a == 0 or b == 0 or c == 0:\n return False\n return None"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n \"\"\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n if number + need > remaining:\n return [number, remaining - number]\n else:\n return [number + need, remaining - need]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n \"\"\"\n Given two lists operator, and operand. The first list has basic algebra operations, and \n the second list is a list of integers. Use the two given lists to build the algebric \n expression and return the evaluation of this expression.\n\n The basic algebra operations:\n Addition ( + ) \n Subtraction ( - ) \n Multiplication ( * ) \n Floor division ( // ) \n Exponentiation ( ** ) \n\n Example:\n operator['+', '*', '-']\n array = [2, 3, 4, 5]\n result = 2 + 3 * 4 - 5\n => result = 9\n\n Note:\n The length of operator list is equal to the length of operand list minus one.\n Operand is a list of of non-negative integers.\n Operator list has at least one operator, and operand list has at least two operands.\n\n \"\"\"\n\n def evaluate_expression(expression):\n \"\"\"\n Given an algebric expression, return the evaluation of this expression.\n\n The expression is a string of operators and operands separated by spaces.\n\n Example:\n \"2 + 3 * 4\"\n => result = 12\n\n Note:\n The length of the expression string is at least one.\n\n \"\"\"\n\n def evaluate_expression_with_args(expression, args):\n \"\"\"\n Given an algebric expression and a list of arguments, return the evaluation of this expression.\n\n The expression is a string of operators and operands separated by spaces.\n The list of arguments is a list of non-negative integers.\n\n Example:\n \"2 + 3 * 4\"\n args = [2, 3, 4]\n => result = 12\n\n Note:\n The length of the expression string is at least one.\n The length of the list of arguments is at least two.\n\n \"\"\"\n\n def evaluate_expression_with_args_and_operator(expression, args, operator):\n \"\"\"\n Given an algebric expression and a list of arguments, return the evaluation of this expression.\n\n The expression is a string of operators and operands separated by spaces.\n The list of arguments is a list of non"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n if s[i] is a letter:\n if s[i] >= 'a' and s[i] <= 'z':\n return s.upper()\n else:\n return s.lower()\n else:\n return s\n return"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n if text:\n return hashlib.md5(text.encode()).hexdigest()\n return None"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n # return the even digits between a and b, in ascending order.\n # For example:\n # generate_integers(2, 8) => [2, 4, 6, 8]\n # generate_integers(8, 2) => [2, 4, 6, 8]\n # generate_integers(10, 14) => []\n if a > b:\n return []\n return [int(i) for i in str(a) + ''.join(str(j) for j in range(b))][:b]"}
