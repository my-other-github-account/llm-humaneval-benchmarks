{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    for c in paren_string:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                result.append('')\n            else:\n                result.append(stack.pop())\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - round(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return [numbers[0]]\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(numbers[i] + delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    stack = []\n    count = 0\n    for c in paren_string:\n        if c == '(':\n            stack.append(count)\n        else:\n            count = stack.pop()\n            if not stack:\n                count += 1\n    return [count] + [stack[-1]] * (len(stack) - 1)"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return sum, product"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    rolling_max_num = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > rolling_max_num:\n            rolling_max_list.append(rolling_max_num)\n            rolling_max_num = numbers[i]\n        else:\n            rolling_max_list.append(numbers[i])\n    rolling_max_list.append(rolling_max_num)\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return string[0]\n    if string[0] == string[-1][::-1]:\n        return string[0] + string[1:-1][::-1]\n    left = make_palindrome(string[:-1])\n    right = make_palindrome(string[1:])\n    return left + right"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    elif len(strings[0]) >= len(strings[1]):\n        return strings[0]\n    else:\n        return strings[1]"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b!= 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[i])\n        prefixes.extend(all_prefixes(string[i+1:]))\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    if n == 0:\n        return '0'\n    else:\n        return '0' + string_sequence(n-1)"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    notes = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            notes.append(4)\n        elif music_string[i] == 'o|':\n            notes.append(2)\n        elif music_string[i] == '.|':\n            notes.append(1)\n        i += 1\n    return notes"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    i = 0\n    while i < len(string):\n        if i + len(substring) <= len(string) and string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if closest_pair is None or abs(numbers[i] - numbers[j]) < abs(numbers[closest_pair[0]] - numbers[closest_pair[1]]):\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list should have at least two elements\")\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scale_factor = (1 - min_num) / (max_num - min_num)\n    rescaled_numbers = [min_num + (num - min_num) * scale_factor for num in numbers]\n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    if n == 0:\n        return 0\n    else:\n        for i in range(1, n):\n            if n % i == 0:\n                return i\n        return n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n /= i\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(set(numbers))"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x >= 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    n = len(xs)\n    if n % 2 == 0 and xs[-1]!= 0:\n        x = -xs[n//2] / xs[n//2 - 1]\n        return round(x, 2)\n    else:\n        return None"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list) -> list:\n    l[:3] = sorted(l[:3])\n    l[3::6] = sorted(l[3::6], reverse=True)\n    return l"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    seen = set()\n    return [x for x in l if x not in seen and not (x in seen).issubset(seen)]"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n        elif i % 3 == 0:\n            count += 1\n        elif i % 7 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    return [l[i] if i % 2 == 0 else l[i].sort()[0] for i in range(len(l))]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    return \"\".join(s[3:].split(\"\"))"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n < 2:\n        return n\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        fib = [0, 1]\n        for i in range(2, n+1):\n            fib.append(fib[i-1] + fib[i-2])\n        for i in range(2, n+1):\n            if fib[i] > n:\n                break\n            if is_prime(fib[i]):\n                return fib[i]\n    raise ValueError(f\"No prime Fibonacci number found for n={n}\")\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime checks if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    Args:\n    l: list, a list of integers.\n\n    Returns:\n    bool, True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    left_cars = set(range(n))\n    right_cars = set(range(n, 2*n))\n    return len(left_cars.intersection(right_cars))"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 if x is not None else x for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    # convert to string\n    s = str(x)\n    # initialize result\n    res = \"\"\n    # iterate over each digit\n    for i in range(len(s)):\n        # get the current digit\n        digit = int(s[i])\n        # convert to new base\n        new_digit = digit * (base - 1) + (digit % (base - 1))\n        # append to result\n        res += str(new_digit)\n    # return result\n    return res"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib4_n = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        return fib4_n"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n    else:\n        return l[len(l)//2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == p - 2:\n        return 1\n    if n % 2 == 0:\n        return modp(n // 2, p)\n    if n % 4 == 0:\n        return modp(n // 4, p)\n    if n % 8 == 0:\n        return modp(n // 8, p)\n    if n % 16 == 0:\n        return modp(n // 16, p)\n    if n % 32 == 0:\n        return modp(n // 32, p)\n    if n % 64 == 0:\n        return modp(n // 64, p)\n    if n % 128 == 0:\n        return modp(n // 128, p)\n    if n % 256 == 0:\n        return modp(n // 256, p)\n    if n % 512 == 0:\n        return modp(n // 512, p)\n    if n % 1024 == 0:\n        return modp(n // 1024, p)\n    if n % 2048 == 0:\n        return modp(n // 2048, p)\n    if n % 4096 == 0:\n        return modp(n // 4096, p)\n    if n % 81"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str) -> str:\n    return \"\".join([chr(ord(ch) - 5 + 26) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(x <= t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    if len(s0)!= len(s1):\n        return False\n    s0_set = set(s0)\n    s1_set = set(s1)\n    return len(s0_set) == len(s1_set)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return False\n    elif l[1] <= l[0]:\n        return False\n    elif l[1] >= l[0]:\n        return True\n    else:\n        return monotonic(l[1:])"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            n = i\n            break\n        i += 1\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [xs[i] + (i+1) * xs[i+1] for i in range(len(xs)-1)]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = \"aeiouy\"\n    count = 0\n    for c in s:\n        if c in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    # Get the length of the number\n    n = len(str(x))\n\n    # If the shift is greater than the length of the number, return the reversed digits\n    if shift > n:\n        return str(x)[::-1]\n\n    # Get the number of digits in the shifted number\n    m = n - shift\n\n    # Initialize the result string\n    result = \"\"\n\n    # Iterate through the digits of the number\n    for i in range(n):\n        # If the digit is greater than the shift, add the digit to the result string\n        if i < shift:\n            result += str(x)[i]\n        # If the digit is less than the shift, add the digit to the result string\n        elif i >= shift:\n            result += str(x)[n - shift + i]\n        # If the digit is equal to the shift, add the digit to the result string\n        else:\n            result += str(x)[n - shift + i]\n\n    return result"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    # initialize sum\n    sum = 0\n    # iterate through string\n    for char in s:\n        # check if character is uppercase\n        if char.isupper():\n            # add character's ASCII code to sum\n            sum += ord(char)\n    # return sum\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples, oranges = s.split()\n    apples_num = int(apples)\n    oranges_num = int(oranges)\n    total_num = n\n    mango_num = total_num - apples_num - oranges_num\n    return mango_num"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_nodes = []\n    for node in arr:\n        if node % 2 == 0:\n            even_nodes.append(node)\n    if not even_nodes:\n        return []\n    smallest_even_value = min(even_nodes)\n    smallest_index = even_nodes.index(smallest_even_value)\n    return [smallest_even_value, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_freq = 0\n    max_val = 0\n    for val in lst:\n        if val > 0:\n            freq = lst.count(val)\n            if freq >= val:\n                if freq > max_freq:\n                    max_val = val\n                    max_freq = freq\n    return max_val if max_val!= 0 else -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    sorted_lst = [min_val]\n    for val in lst:\n        if val < min_val:\n            sorted_lst.append(min_val)\n            min_val = min(lst)\n        elif val > max_val:\n            sorted_lst.append(max_val)\n            max_val = max(lst)\n        else:\n            sorted_lst.append(val)\n    return sorted_lst"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if not q:\n        return True\n    if q[0] > w:\n        return False\n    if q[0] == w and q == list(reversed(q)):\n        return True\n    return will_it_fly(q[1:], w)"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    left, right = 0, n-1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid][::-1]:\n            left = mid + 1\n        else:\n            right = mid\n    count = 0\n    for i in range(n):\n        if arr[i]!= arr[n-i-1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst2\n    else:\n        return lst1 if len(lst1)%2 == 0 else lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(n):\n        \"\"\"Helper function to check if a number is prime\"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_multiply_prime(a):\n        \"\"\"Helper function to check if a number is the multiplication of 3 prime numbers\"\"\"\n        for i in range(2, a):\n            if is_prime(i) and is_prime(a % i):\n                return True\n        return False\n\n    return is_multiply_prime(a)"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n**int(x)"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == int(a ** 1/3):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit.isupper() and digit in \"2357BDE\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:].replace(\"0b\", \"\")\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    if len(s) == 3 and s[0] == s[1] == s[2]:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    if not isinstance(grades, list):\n        raise TypeError(\"grades must be a list\")\n    if not all(isinstance(g, (int, float)) for g in grades):\n        raise TypeError(\"grades must be a list of numbers\")\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    if len(string) < 2:\n        return False\n    for i in range(2, int(len(string)/2)+1):\n        if string.count(string[0]) == i:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**n):\n        if str(i) == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary = bin(N)[2:]\n    return '0' * (N // 2) + binary"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_at_odd_index = []\n    for i in range(len(lst)-1):\n        if i % 2 == 0 and (i+1) % 2!= 0:\n            even_at_odd_index.append(lst[i])\n    return even_at_odd_index"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = \"\"\n        for char in word:\n            new_word += chr(ord(char) - 96)\n        new_words.append(new_word)\n    return \" \".join(new_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, row in enumerate(lst):\n        for j, x in enumerate(row):\n            if x == x:\n                res.append((i, j))\n    return sorted(res, key=lambda x: (-x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return array\n    first, last = array[0], array[-1]\n    if (first + last) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for letter in s:\n        if letter.isalpha():\n            shifted = (alphabet.index(letter.lower()) - 2) % 26\n            encrypted += alphabet[shifted]\n        else:\n            encrypted += letter\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    lst.sort()\n    return lst[1] if lst[1]!= lst[0] else None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    i = 0\n    while i < len(S):\n        if S[i] == 'I':\n            boredoms += 1\n            i += 1\n        elif S[i] in ['.', '?', '!']:\n            i += 1\n        else:\n            i += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x == (y + z) and isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message.lower():\n        if char in vowels:\n            result += chr(ord(char) + 2 - ord('a') - 2)\n        else:\n            result += chr(ord(char) - 32)\n    return result"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    prime_sum = 0\n    for num in lst:\n        if num > 0:\n            if num == 2:\n                prime_sum += 1\n            else:\n                for i in range(2, int(num ** 0.5) + 1):\n                    if num % i == 0:\n                        prime_sum += i\n                        break\n    return prime_sum"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    elif all(isinstance(key, str) and (all(c.islower() for c in key) or all(c.isupper() for c in key)) for key in dict.keys()):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    if a % 10 == 0 and b % 10 == 0:\n        return a * b % 10\n    elif a % 10 == 0:\n        return a * b % 10\n    elif b % 10 == 0:\n        return a * b % 10\n    else:\n        return a * b % 10"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] in ['A', 'E', 'I', 'O', 'U'] and i % 2 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    if value.endswith('.0'):\n        value = value[:-2]\n    if value.isdigit():\n        return int(value)\n    elif value.startswith('-'):\n        return -int(value[1:])\n    else:\n        return int(value)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n, (n+2)%2, (n+4)%4]\n    else:\n        return [n, (n+1)%2, (n+3)%4]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(',') if s.endswith(',') else s.split(' ')"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    for i in range(x, y+1):\n        if i % 2 == 0 and i >= x and i <= y:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    binary = bin(rounded_avg)[2:]\n    return binary"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        if str(num)!= str(int(num)) and int(num) % 2!= 0:\n            result.append(int(num))\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    arr = sorted(arr, key=lambda x: x.isdigit() and int(x) >= 1 and int(x) <= 9)\n    arr.reverse()\n    return [\n        \"Eight\" if x == 8 else\n        \"Five\" if x == 5 else\n        \"Four\" if x == 4 else\n        \"Three\" if x == 3 else\n        \"Two\" if x == 2 else\n        \"One\" if x == 1 else\n        \"Zero\" if x == 0 else\n        \"Strange\"\n    ]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(i)\n        else:\n            res.append(i)\n            for j in range(1, i+1):\n                res.append(j)\n    return res"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_palindrome = 0\n    odd_palindrome = 0\n    for i in range(1, n+1):\n        if str(i) == str(i) and int(str(i)) % 2 == 0:\n            even_palindrome += 1\n        else:\n            odd_palindrome += 1\n    return (even_palindrome, odd_palindrome)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            digits = abs(num)\n        else:\n            digits = num\n        for digit in str(digits):\n            if int(digit) > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[-1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0 or lst2[i] % 2!= 0:\n            return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[i]:\n            if lst1[i] % 2 == 0 and lst2[i] % 2 == 0:\n                lst1[i] = lst2[i]\n                lst2[i] = 0\n            else:\n                return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    counts = {}\n    max_count = 0\n    max_count_key = None\n    for letter in test.lower():\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n        if counts[letter] > max_count:\n            max_count = counts[letter]\n            max_count_key = letter\n    return counts, max_count_key"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    s = s.replace(c, '')\n    s = s.replace(c[::-1], '')\n    return (s, s == s[::-1])"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    res = []\n    for s in lst:\n        odd_digits = sum(int(d) for d in s if int(d) % 2!= 0)\n        res.append(\"the number of odd elements in the string {} of the input.\".format(odd_digits))\n    return res"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        min_sum = min(min_sum, nums[i] + minSubArraySum(nums[i+1:]))\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    buckets = [0] * (rows * cols)\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                buckets[i * cols + j] += 1\n    max_buckets = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_buckets += 1\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                buckets[i * cols + j] -= max_buckets\n    res = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                res += buckets[i * cols + j]\n    return res"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1') if x > 0 else 0, x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(set(word[1:].lower() + word[0].lower())) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    i = len(word) - 1\n    while i >= 0 and word[i] in vowels:\n        i -= 1\n    if i < 0 or word[i] not in vowels:\n        return \"\"\n    j = len(word) - 2\n    while j >= 0 and word[j] in vowels:\n        j -= 1\n    if j < 0 or word[j] not in vowels:\n        return word[i]\n    return word[i] + word[j]"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        if s == '(':\n            stack.append(s)\n        elif s == ')':\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    return 'Yes' if len(stack) == 0 else 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # create a list of length k with all elements set to None\n    result = [None] * k\n    \n    # create a list to store the maximum k elements\n    max_k = [0] * k\n    \n    # loop through the array and find the maximum k elements\n    for i in range(len(arr)):\n        max_k[i] = max(max_k[i], arr[i])\n    \n    # sort the list of maximum k elements\n    for i in range(len(max_k)):\n        for j in range(len(max_k)):\n            if max_k[i] < max_k[j]:\n                temp = max_k[i]\n                max_k[i] = max_k[j]\n                max_k[j] = temp\n    \n    # add the maximum k elements to the result list\n    for i in range(len(max_k)):\n        result[i] = arr[max_k[i]]\n    \n    return result"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    total = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    # initialize sum\n    total = 0\n    # iterate through arr\n    for i in range(k):\n        # add elements with at most two digits to total\n        total += int(arr[i])\n    # add elements with more than two digits to total\n    for i in range(k, len(arr)):\n        total += int(arr[i])\n    return total"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        return sorted([1, n]) + get_odd_collatz(n//2) + get_odd_collatz(n*3+1)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    month_range = {\n        1: range(31),\n        3: range(31),\n        5: range(31),\n        7: range(31),\n        8: range(31),\n        10: range(31),\n        12: range(31),\n        4: range(30),\n        6: range(30),\n        9: range(30),\n        11: range(30),\n        2: range(29)\n    }\n    day_range = {\n        1: range(31),\n        3: range(31),\n        5: range(31),\n        7: range(31),\n        8: range(31),\n        10: range(31),\n        12: range(31),\n        4: range(30),\n        6: range(30),\n        9: range(30),\n        11: range(30),\n        2: range(29)\n    }\n    month = date[0]\n    day = int(date[2])\n    year = int(date[6])\n    if month < 1 or month > 12:\n        return False\n    if day < month_range[month][0] or day > month_range[month][1]:\n        return False\n    if year < 2000 or year > 2100:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if txt.count(',') > 0:\n        return txt.split(',')\n    else:\n        return sum(1 for word in txt.split() if ord(word[0]) % 2 == 1)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    if len(lst) == 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not interval1 or not interval2:\n        return \"NO\"\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    if interval1[1] < interval2[0]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    res = 0\n    for num in arr:\n        res += abs(num) * (1 if num > 0 else -1)\n    return res"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # create a list of all the values in the grid\n    lst = [grid[i][j] for i in range(len(grid)) for j in range(len(grid[0]))]\n    # sort the list\n    lst.sort()\n    # create a list to store the path\n    path = []\n    # create a set to store the visited cells\n    visited = set()\n    # create a variable to store the length of the path\n    path_length = 0\n    # create a variable to store the minimum path\n    min_path = []\n    # loop through the grid\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            # check if the cell is visited\n            if (i, j) in visited:\n                # if the path length is equal to k, add the cell to the path\n                if path_length == k:\n                    min_path.append(lst[path.index(grid[i][j])])\n                    path.remove(lst[path_length])\n                    path_length -= 1\n            # check if the cell is not visited and is valid\n            if (i, j) not in visited and (i, j) not in grid and (i, j) not in lst:\n                # add the cell to the visited set\n                visited.add((i, j))\n                # add the cell to the path\n                path.append(lst[path_length])\n                path_length += 1\n                # check if the path is shorter than the current minimum path\n                if path_length == k and (i, j) not in min_path:\n                    min_path.append(lst[path_length-1])\n                    min_path.append(lst[path_length-2])\n                    min_path.append(lst[path_length-3])\n                    min_path.append(lst[path_length-4])\n                    min_path.append(lst[path_length-5])\n                    min_path.append(lst[path_length-6])\n                    min_path.append(lst[path_length-7])"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return []\n    elif n % 2 == 0:\n        return [1 + n // 2] + tri(n - 1)\n    else:\n        return [1] + tri(n - 1) + tri(n + 1)"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    result = 1\n    while n % 10!= 0:\n        n //= 10\n        result *= 10\n    for i in range(10, 0, -1):\n        if n % i == 1:\n            result *= i\n    return result"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(map(lambda x: round(x) * round(x), lst))"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha() and not txt[-1].isspace():\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return None, None\n    neg_lst = [x for x in lst if x < 0]\n    pos_lst = [x for x in lst if x > 0]\n    if neg_lst and pos_lst:\n        return max(neg_lst), min(pos_lst)\n    elif neg_lst:\n        return max(neg_lst), None\n    elif pos_lst:\n        return None, min(pos_lst)\n    else:\n        return None, None"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        if float(a) > float(b):\n            return float(a)\n        elif float(a) < float(b):\n            return float(b)\n        else:\n            return None\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n < 4:\n        return False\n    if n % 4!= 0:\n        return False\n    if n % 8!= 0:\n        return False\n    if n % 16!= 0:\n        return False\n    if n % 32!= 0:\n        return False\n    if n % 64!= 0:\n        return False\n    if n % 128!= 0:\n        return False\n    if n % 256!= 0:\n        return False\n    if n % 512!= 0:\n        return False\n    if n % 1024!= 0:\n        return False\n    if n % 2048!= 0:\n        return False\n    if n % 4096!= 0:\n        return False\n    if n % 8192!= 0:\n        return False\n    if n % 16384!= 0:\n        return False\n    if n % 32768!= 0:\n        return False\n    if n % 65536!= 0:\n        return False\n    if n % 131072!= 0:\n        return False\n    if n % 262144!= 0:\n        return False\n    if n % 524288!= 0:\n        return False\n    if n % 1048576!= 0:\n        return False\n    if n % 2097152!= 0:\n        return False\n    if n % 4194304!= 0:\n        return False\n    if n % 8388608!= 0:\n        return False\n    if n % "}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"_\")\n    text = text.replace(\"   \", \"_\")\n    text = text.replace(\"    \", \"_\")\n    text = text.replace(\"     \", \"_\")\n    text = text.replace(\"      \", \"_\")\n    text = text.replace(\"       \", \"_\")\n    text = text.replace(\"          \", \"_\")\n    text = text.replace(\"           \", \"_\")\n    text = text.replace(\"            \", \"_\")\n    text = text.replace(\"             \", \"_\")\n    text = text.replace(\"              \", \"_\")\n    text = text.replace(\"               \", \"_\")\n    text = text.replace(\"                \", \"_\")\n    text = text.replace(\"                 \", \"_\")\n    text = text.replace(\"                \", \"_\")\n    text = text.replace(\"                 \", \"_\")\n    text = text.replace(\"                \", \"_\")\n    text = text.replace(\"                 \", \"_\")\n    text = text.replace(\"                \", \"_\")\n    text = text.replace(\"                 \", \"_\")\n    text = text.replace(\"                \", \"_\")\n    text = text.replace(\"                 \", \"_\")\n    text = text.replace(\"                \", \"_\")\n    text = text.replace(\"                 \", \"_\")\n    text = text.replace(\"                \", \"_\")\n    text = text.replace(\"                 \", \"_\")\n    text = text.replace(\"                \", \"_\")\n    text = text.replace(\"                 \", \"_\")\n    text = text.replace(\"                \", \"_\")\n    text = text.replace(\"                 \", \"_\")\n    text = text.replace(\"                \", \"_\")\n    text = text.replace(\"                 \", \"_\")\n    text = text.replace(\"                \", \"_\")\n    text = text.replace(\"                 \", \"_\")\n    text = text.replace(\"                \", \"_\")\n    text = text.replace(\"                 \", \"_\")\n    text = text.replace(\"                \", \"_\")\n    text = text.replace(\"                 \", \"_\")\n    text = text.replace(\"                \", \"_\")\n    text = text.replace(\"                 \", \"_\")\n    text = text.replace"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if file_name.count('0') <= 3 and '.' in file_name and file_name[:3].isalpha() and file_name.split('.')[-1] in ['txt', 'exe', 'dll']:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0 and i % 3!= 0:\n            sum += lst[i]**3\n    return sum"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if len(word) == 2:\n            result += word\n    return result"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_denom = x.split('/')\n    n_num, n_denom = n.split('/')\n    x_num = int(x_num)\n    x_denom = int(x_denom)\n    n_num = int(n_num)\n    n_denom = int(n_denom)\n    if x_num * n_num == x_denom * n_denom:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    nums.sort(key=lambda x: sum(int(d) for d in str(x)) + x.__index__)\n    return nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) in [1, 3, 5, 7, 9]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return []\n    if planet1 == planet2:\n        return []\n    planets_between = []\n    for planet in planets:\n        if planet!= planet1 and planet!= planet2 and planet!= planet1.lower() and planet!= planet2.lower():\n            if planet1 < planet <= planet2 or planet1.lower() <= planet <= planet2.lower():\n                planets_between.append(planet)\n    return sorted(planets_between, key=lambda x: x.lower())"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(lst, key=len, reverse=True)"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n % 2 == 0:\n        if n % 3 == 0:\n            if n % 5 == 0:\n                return x\n            elif n % 7 == 0:\n                return y\n            else:\n                return n\n        else:\n            if n % 7 == 0:\n                return y\n            else:\n                return n\n    else:\n        if n % 7 == 0:\n            return y\n        else:\n            return x"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            result += (num ** 2)\n    return result"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"\n    Determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was.\n    If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            return [0] * len(game)\n        else:\n            return [abs(guess[i] - game[i])] * len(game)"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = 0\n    for extension in extensions:\n        if class_name + '.' + extension not in class_name + '.' + [e for e in extensions if e!= extension] + [extension]:\n            continue\n        if class_name + '.' + extension not in [e[len(class_name.count('.')): for e in extensions if class_name + '.' + e[len(class_name.count('.')): in e]]:\n            continue\n        if class_name + '.' + extension not in [e[len(class_name.count('.')): for e in extensions if class_name + '.' + e[len(class_name.count('.')): in e]]:\n            continue\n        if class_name + '.' + extension not in [e[len(class_name.count('.')): for e in extensions if class_name + '.' + e[len(class_name.count('.')): in e]]:\n            continue\n        if class_name + '.' + extension not in [e[len(class_name.count('.')): for e in extensions if class_name + '.' + e[len(class_name.count('.')): in e]]:\n            continue\n        if class_name + '.' + extension not in [e[len(class_name.count('.')): for e in extensions if class_name + '.' + e[len(class_name.count('.')): in e]]:\n            continue\n        if class_name + '.' + extension not in [e[len(class_name.count('.')): for e in extensions if class_name + '.' + e[len(class_name.count('.')): in e]]:\n            continue\n        if class_name + '.' + extension not in [e[len(class_name.count('.')): for e in extensions if class_name + '.' + e[len(class_name.count('.')): in e]]:\n            continue\n        if class_name + '.' + extension not in [e[len(class_name.count('.')): for e in extensions if class_"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if len(a) < len(b):\n        a, b = b, a\n    for i in range(len(b)):\n        if b[i] in a:\n            j = i\n            while j < len(a) and a[j:j+len(b)] == b:\n                j += len(b)\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 10 == 0:\n            even_count += 1\n        odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    \n    result = ''\n    for power in sorted(roman_numerals.keys(), reverse=True):\n        while number >= power:\n            result += roman_numerals[power]\n            number -= power\n        if number > 0:\n            result += 'i' + roman_numerals[power]\n    \n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if a == b or a == c or b == c:\n        return False\n    elif a + b <= c or a + c <= b or b + c <= a:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_word = word\n            max_count = count\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if need > remaining:\n        return [remaining, 0]\n    if number >= need:\n        return [need, remaining - need]\n    return [need + remaining - number, remaining]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator) == len(operand) - 1:\n        operator_list = operator\n        operand_list = operand\n        result = eval(operator_list[0] + ''.join([str(x) for x in operand_list]))\n    else:\n        raise ValueError(\"Invalid input\")\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not s.isalpha():\n        return s\n    else:\n        s = ''.join(\n            [\n                (s[i] == s[i].lower() and s[i].upper() or s[i].upper() and s[i].lower())\n                for i in range(len(s))\n            ]\n        )\n        return s"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    Args:\n        text (str): The string to be hashed.\n\n    Returns:\n        str: The md5 hash string of the input string.\n    \"\"\"\n    if text == '':\n        return None\n    else:\n        hash_value = hashlib.md5(text.encode()).hexdigest()\n        return hash_value"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
