{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n given threshold.\n \"\"\"\n for i in range(len(numbers)-1):\n if abs(numbers[i] - numbers[i+1]) <= threshold:\n return True\n return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n separate those group into separate strings and return the list of those.\n Separate groups are balanced (each open brace is properly closed) and not nested within each other\n Ignore any spaces in the input string.\n >>> separate_paren_groups('( ) (( )) (( )( ))')\n ['()', '(())', '(()())']\n \"\"\"\n\n # Remove any spaces from the input string\n paren_string = paren_string.replace(\" \", \"\")\n \n # Define a stack to keep track of open parentheses\n stack = []\n \n # Define a list to store the separated groups\n groups = []\n \n # Iterate through the input string\n for char in paren_string:\n # If the character is an opening parenthesis\n if char == \"(\":\n # Push it onto the stack\n stack.append(char)\n # If the stack is empty, add the opening parenthesis to the groups list\n if not stack:\n groups.append(\"(\")\n # If the top of the stack is a closing parenthesis and the group is balanced\n if stack and stack[-1] == \")\":\n # Pop the stack and add the balanced group to the groups list\n groups.append(\"\".join(stack))\n stack.pop()\n # If the character is a closing parenthesis and the group is balanced\n elif char == \")\":\n # Pop the stack and add the balanced group to the groups list\n if stack:\n groups.append(\"\".join(stack))\n stack.pop()\n # If the character is a closing parenthesis and the group is not balanced\n elif char == \")\":\n # Ignore the unbalanced group\n groups.append(\"\")\n # If the character is an opening parenthesis and the group is nested within another group\n elif char == \"(\":\n # Ignore the nested group\n groups.append(\"\")\n \n # Return the list of separated groups\n return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n \"\"\"\n Given a positive floating point number, it can be decomposed into\n an integer part (largest integer smaller than given number) and decimals\n (leftover part always smaller than 1).\n \n Return the decimal part of the number.\n \"\"\"\n integer_part = number\n decimal_part = number - integer_part\n return decimal_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n at that point function should return True. Otherwise it should return False.\n \"\"\"\n \n # Initialize the balance to zero\n balance = 0\n \n # Iterate over the operations list\n for operation in operations:\n # Check if the balance is negative\n if balance < 0:\n return True\n \n # Add the operation to the balance\n balance += operation\n \n # If the balance is not negative, return False\n return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n around the mean of this dataset.\n Mean Absolute Deviation is the average absolute difference between each\n element and a centerpoint (mean in this case):\n MAD = average | x - x_mean |\n \"\"\"\n\n mean = sum(numbers) / len(numbers)\n mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n return mad"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n \"\"\"\n return numbers + [delimeter] * (len(numbers) - 1)\n\n # example usage\n numbers = [1, 2, 3]\n delimeter = 4\n result = intersperse(numbers, delimeter)\n print(result) # Output: [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n For each of the group, output the deepest level of nesting of parentheses.\n E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n >>> parse_nested_parens('(()()) ((())) () ((())()())')\n [2, 3, 1, 3]\n \"\"\"\n\n # Define a helper function to count the number of nested parentheses in a given string\n def count_nested_parens(paren_string: str) -> int:\n # Define a regular expression pattern to match nested parentheses\n pattern = r'((?:[()]|([^()]|(?1))*))'\n # Find all matches of the pattern in the string\n matches = re.findall(pattern, paren_string)\n # Initialize a counter variable\n count = 0\n # Loop through each match and increment the counter if the match is nested\n for match in matches:\n if match.count('()'):\n count += match.count('()')\n # Return the count of nested parentheses\n return count\n \n # Define a regular expression pattern to match nested parentheses\n pattern = r'((?:[()]|([^()]|(?1))*))'\n # Initialize an empty list to store the maximum level of nesting for each group\n result = []\n # Split the input string by spaces\n groups = paren_string.split()\n # Loop through each group and count the level of nesting\n for group in groups:\n level = count_nested_parens(group)\n # If the level is greater than the previous level, update the result list\n if level > result[-1]:\n result.append(level)\n # Return the result list\n return result"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n \"\"\" Filter an input list of strings only for ones that contain given substring\n \"\"\"\n return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n Empty sum should be equal to 0 and empty product should be equal to 1.\n \"\"\"\n if not numbers:\n return (0, 1)\n else:\n product = 1\n sum = 0\n for num in numbers:\n sum += num\n product *= num\n return (sum, product)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n in the sequence.\n \"\"\"\n max_list = []\n max_so_far = numbers[0]\n for num in numbers:\n if num > max_so_far:\n max_list = [num] + max_list\n else:\n max_list = max_list\n return max_list"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n \"\"\" Test if given string is a palindrome \"\"\"\n return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n \"\"\" Find the shortest palindrome that begins with a supplied string.\n Algorithm idea is simple:\n - Find the longest postfix of supplied string that is a palindrome.\n - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n \"\"\"\n # Find the longest postfix that is a palindrome\n start = len(string)\n while string[start:] == string[start:][::-1]:\n start -= 1\n # Reverse the prefix\n reversed_prefix = string[:start][::-1]\n # Concatenate the palindromic suffix and reversed prefix\n return string[start:] + reversed_prefix"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n Perform binary XOR on these inputs and return result also as a string.\n \"\"\"\n a_list = list(a)\n b_list = list(b)\n result_list = []\n for i in range(len(a)):\n result_list.append(a_list[i] ^ b_list[i])\n result = ''.join(result_list)\n return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n strings of the same length. Return None in case the input list is empty.\n \"\"\"\n if not strings:\n return None\n longest_string = strings[0]\n for string in strings:\n if len(string) > len(longest_string):\n longest_string = string\n return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n \"\"\" Return a greatest common divisor of two integers a and b\n \"\"\"\n if a == 0:\n return b\n elif b == 0:\n return a\n else:\n return greatest_common_divisor(b % a, a)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n \"\"\" Return list of all prefixes from shortest to longest of the input string\n \"\"\"\n return [string] + [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n \"\"\"\n if n < 0:\n raise ValueError(\"n must be a non-negative integer\")\n elif n == 0:\n return \"0\"\n else:\n return \" \".join([str(i) for i in range(n+1)])"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n \"\"\"\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n \"\"\"\n # Create a set of all unique characters in the string\n unique_chars = set(string.lower())\n # Return the length of the set\n return len(unique_chars)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n Your task is to parse this string and return list of integers corresponding to how many beats does each\n not last.\n\n Here is a legend:\n 'o' - whole note, lasts four beats\n 'o|' - half note, lasts two beats\n '.|' - quater note, lasts one beat\n\n >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n \"\"\"\n # Split the music string by '|' to get individual notes\n music_notes = music_string.split('|')\n # Initialize an empty list to store the beats for each note\n beats_list = []\n # Loop through each note and add the corresponding beats\n for note in music_notes:\n if note == 'o':\n beats_list.append(4)\n elif note == 'o|':\n beats_list.append(2)\n elif note == '.|':\n beats_list.append(1)\n # Return the list of beats for each note\n return beats_list"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n \"\"\"Find how many times a given substring can be found in the original string. Count overlaping cases.\n \"\"\"\n count = 0\n for i in range(len(string)):\n if string[i:i+len(substring)] == substring:\n count += 1\n return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n numbers_list = [int(num.strip()) for num in numbers.split()]\n numbers_list.sort()\n return''.join(str(num) for num in numbers_list)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n other and return them in order (smaller number, larger number).\n \"\"\"\n numbers.sort()\n closest_index = numbers.index(numbers[-1])\n return numbers[closest_index], numbers[-1]"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n such that the smallest number will become 0 and the largest will become 1\n \"\"\"\n # Get the minimum and maximum values in the list\n min_val = min(numbers)\n max_val = max(numbers)\n # Apply the transform to each number in the list\n scaled_numbers = [((x - min_val) / (max_val - min_val)) for x in numbers]\n return scaled_numbers"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n \"\"\" Filter given list of any python values only for integers\n \"\"\"\n return [v for v in values if isinstance(v, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n \"\"\" Return length of given string\n \"\"\"\n return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n \"\"\"\n largest = n\n for i in range(1, n+1):\n if n % i == 0:\n largest = i\n return largest"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n Input number should be equal to the product of all factors\n \"\"\"\n factors = []\n i = n\n while i % 2 == 0:\n factors.append(2)\n i = i / 2\n for j in range(3,int(i**0.5)+1,2):\n while i % j == 0:\n factors.append(j)\n i = i / j\n if i > 2:\n factors.append(i)\n return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n \"\"\" From a list of integers, remove all elements that occur more than once.\n Keep order of elements left the same as in the input.\n \"\"\"\n\n return list(set(numbers))"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n \"\"\"\n For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n \"\"\"\n return ''.join(ch.upper() if ch.islower() else ch.lower() for ch in string)"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n \"\"\" Concatenate list of strings into a single string\n \"\"\"\n return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n \"\"\"\n return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n \"\"\"Return only positive numbers in the list.\"\"\"\n return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n \"\"\"Return true if a given number is prime, and false otherwise.\n \"\"\"\n if n < 2:\n return False\n for i in range(2, int(n**0.5)+1):\n if n % i == 0:\n return False\n return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n \"\"\"\n Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n \"\"\"\n return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n \"\"\"\n xs are coefficients of a polynomial.\n find_zero finds x such that poly(x) = 0.\n find_zero returns only only zero point, even if there are many.\n Moreover, find_zero only takes list xs having even number of coefficients\n and largest non zero coefficient as it guarantees\n a solution.\n \"\"\"\n if len(xs) % 2 == 0:\n max_coeff = max(xs)\n if max_coeff == 0:\n return None\n else:\n return -max_coeff / (max_coeff * max_coeff - max_coeff)\n else:\n return None"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n \"\"\"This function takes a list l and returns a list l' such that\n l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n to the values of the corresponding indicies of l, but sorted.\n \"\"\"\n for i in range(len(l)):\n if i % 3 == 0:\n l[i], l[i+1] = sorted([l[i], l[i+1]])\n elif i % 3!= 0:\n l[i] = l[i]\n return l"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n \"\"\"Return sorted unique elements in a list\n >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n [0, 2, 3, 5, 9, 123]\n \"\"\"\n return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n \"\"\"Return maximum element in the list.\"\"\"\n return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n \"\"\"\n count = 0\n for i in range(1, n):\n if i % 11 == 0 or i % 13 == 0:\n count += count_digit(i, 7)\n return count\ndef count_digit(num, digit):\n count = 0\n while num > 0:\n digit_num = num % 10\n if digit_num == digit:\n count += 1\n num //= 10\n return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n \"\"\"This function takes a list l and returns a list l' such that\n l' is identical to l in the odd indicies, while its values at the even indicies are equal\n to the values of the even indicies of l, but sorted.\n \"\"\"\n for i in range(len(l)):\n if i % 2 == 0:\n l[i] = sorted(l[i])\n return l"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n \"\"\"\n returns encoded string by cycling groups of three characters.\n \"\"\"\n # split string to groups. Each of length 3.\n groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n # cycle elements in each group. Unless group has fewer elements than 3.\n groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n \"\"\"\n takes as input string encoded with encode_cyclic function. Returns decoded string.\n \"\"\"\n # split string to groups. Each of length 3.\n groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n # cycle elements in each group. Unless group has fewer elements than 3.\n groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n \"\"\"\n prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n \"\"\"\n if n <= 2:\n return n\n elif n == 3:\n return 2\n elif n == 4:\n return 3\n elif n == 5:\n return 5\n else:\n a, b = 2, 3\n while b < n:\n c = a + b\n if c % 2 == 0 or c in [a, b]:\n a, b = b, c\n else:\n b += 1\n return a"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n \"\"\"\n triples_sum_to_zero takes a list of integers as an input.\n It returns True if there are three distinct elements in the list that\n sum to zero, and False otherwise.\n \"\"\"\n\n # Initialize a variable to check if three distinct elements\n # summing to zero are found\n found = False\n\n # Iterate through the list and check for triples that sum to zero\n for i in range(len(l)-2):\n for j in range(i+1, len(l)-1):\n for k in range(j+1, len(l)):\n # Check if the three elements sum to zero\n if l[i] + l[j] + l[k] == 0:\n found = True\n break\n\n # Return True if three distinct elements summing to zero are found,\n # and False otherwise\n return found"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n \"\"\"\n Imagine a road that's a perfectly straight infinitely long line.\n n cars are driving left to right;  simultaneously, a different set of n cars\n are driving right to left.   The two sets of cars start out being very far from\n each other.  All cars move in the same speed.  Two cars are said to collide\n when a car that's moving left to right hits a car that's moving right to left.\n However, the cars are infinitely sturdy and strong; as a result, they continue moving\n in their trajectory as if they did not collide.\n \n This function outputs the number of such collisions.\n \"\"\"\n \n # create a list of cars moving left to right\n l_to_r = [0]*n\n \n # create a list of cars moving right to left\n r_to_l = [0]*n\n \n # initialize the collision counter to 0\n collisions = 0\n \n # simulate the car race\n for i in range(n):\n # move the cars\n for j in range(n):\n # check for collisions\n if l_to_r[i] == r_to_l[j]:\n collisions += 1\n # update the positions of the cars\n l_to_r[i] += 1\n r_to_l[j] -= 1\n \n # return the number of collisions\n return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n \"\"\"Return list with elements incremented by 1.\"\"\"\n return [l[i] + 1 for i in range(len(l))]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n \"\"\"\n This function takes a list of integers as an input.\n It returns True if there are two distinct elements in the list that\n sum to zero, and False otherwise.\n \"\"\"\n for i in range(len(l)):\n for j in range(i+1, len(l)):\n if l[i] + l[j] == 0:\n return True\n return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n \"\"\"Change numerical base of input number x to base.\n return string representation after the conversion.\n base numbers are less than 10.\n \"\"\"\n if base < 2:\n raise ValueError(\"Base should be greater than or equal to 2.\")\n if x < 0:\n raise ValueError(\"Input number cannot be negative.\")\n if base == 10:\n return str(x)\n else:\n return (\"%d\" % x).replace(\"d\", str(x)[::base])"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n \"\"\"Given length of a side and high return area for a triangle.\"\"\"\n return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n):\n if n <= 4:\n return n\n else:\n return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n \"\"\"Return median of elements in the list l.\n >>> median([3, 1, 2, 4, 5])\n 3\n >>> median([-10, 4, 6, 1000, 10, 20])\n 15.0\n \"\"\"\n sorted_l = sorted(l)\n len_l = len(l)\n if len_l % 2 == 0:\n median = (sorted_l[len_l//2 - 1] + sorted_l[len_l//2]) / 2\n else:\n median = sorted_l[len_l//2]\n return median"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n \"\"\"\n Checks if given string is a palindrome\n \"\"\"\n # Remove all non-alphanumeric characters and convert to lowercase\n text = re.sub(r'[^a-z0-9]', '', text).lower()\n # Check if string is empty or has only one character\n if len(text) <= 1:\n return True\n # Compare the first and last characters of the string\n if text[0]!= text[-1]:\n return False\n # Recursively check the substring\n return is_palindrome(text[1:-1])"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n \"\"\"Return 2^n modulo p (be aware of numerics).\n \"\"\"\n if n == 0:\n return 1\n elif n < 0:\n n += 1\n elif n == p:\n return 2**n - 1\n else:\n return modp(n - 1, p) * 2 + modp(n - 2, p)"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n \"\"\"\n returns encoded string by shifting every character by 5 in the alphabet.\n \"\"\"\n return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\ndef decode_shift(s: str):\n \"\"\"\n takes as input string encoded with encode_shift function. Returns decoded string.\n \"\"\"\n return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n \"\"\"\n remove_vowels is a function that takes string and returns string without vowels.\n \"\"\"\n return ''.join([char for char in text if char not in 'aeiouAEIOU'])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n \"\"\"Add two numbers x and y\n >>> add(2, 3)\n 5\n >>> add(5, 7)\n 12\n \"\"\"\n return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n \"\"\"\n Check if two words have the same characters.\n \"\"\"\n s0 = s0.lower()\n s1 = s1.lower()\n return s0 == s1"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n if n <= 2:\n return n\n else:\n return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n \"\"\"\n brackets is a string of \"<\" and \">\".\n return True if every opening bracket has a corresponding closing bracket.\n \"\"\"\n # Define a stack to keep track of opening brackets\n stack = []\n # Initialize a flag to check if all brackets are closed\n all_closed = True\n # Iterate through each character in the brackets string\n for char in brackets:\n # If the character is an opening bracket\n if char == '<':\n # Append it to the stack\n stack.append(char)\n # If the stack is empty, all opening brackets are not closed\n all_closed = False\n elif char == '>':\n # If the stack is not empty, pop the top element\n if not stack.empty():\n top_char = stack.pop()\n # If the opening and closing brackets match, close the stack\n if top_char == '<':\n all_closed = True\n elif char == '>':\n # If the stack is not empty, all opening brackets are not closed\n all_closed = False\n return all_closed"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n \"\"\"Return True is list elements are monotonically increasing or decreasing.\"\"\"\n if len(l) < 2:\n return True\n if l[0] > l[-1]:\n return True\n for i in range(len(l)-1):\n if l[i+1] < l[i]:\n return False\n return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n \"\"\"Return sorted unique common elements for two lists.\n \"\"\"\n return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n \"\"\"\n if n < 2:\n return n\n for i in range(2, int(n ** 0.5) + 1, 2):\n if n % i == 0:\n return i\n return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n \"\"\"\n brackets is a string of \"(\" and \")\".\n return True if every opening bracket has a corresponding closing bracket.\n \"\"\"\n\n # Create a stack to keep track of opening brackets\n stack = []\n \n # Iterate over each character in the brackets string\n for char in brackets:\n # If the character is an opening bracket\n if char == \"(\":\n # Push the opening bracket onto the stack\n stack.append(char)\n # If the stack is empty and the character is a closing bracket\n elif stack == [] and char == \")\":\n # Pop the opening bracket from the stack\n stack.pop()\n # If the stack is not empty and the character is a closing bracket\n elif stack!= [] and char == \")\":\n # Pop the opening bracket from the stack\n stack.pop()\n # If the stack is not empty and the character is an opening bracket\n elif stack!= [] and char == \"(\":\n # Push the opening bracket onto the stack\n stack.append(char)\n # If the stack is not empty and the character is not an opening or closing bracket\n elif stack!= [] and char!= \"(\" and char!= \")\":\n # Pop the opening bracket from the stack\n stack.pop()\n # If the stack is empty and the character is not an opening or closing bracket\n elif stack == [] and char!= \"(\" and char!= \")\":\n # Pop the opening bracket from the stack\n stack.pop()\n # If the stack is not empty and the character is not an opening or closing bracket\n elif stack!= [] and char!= \"(\" and char!= \")\":\n # Pop the opening bracket from the stack\n stack.pop()\n # If the stack is empty and the character is not an opening or closing bracket\n elif stack == [] and char!= \"(\" and char!= \")\":\n # Pop the opening bracket from the stack\n stack.pop()\n # If the stack is not empty and the character is not an opening or closing bracket\n elif stack!= [] and char!= \"(\" and char!= \")\":\n # Pop the opening bracket from the stack\n stack.pop()\n # If the stack is empty and the character is not an opening or closing bracket\n elif stack == [] and char!="}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n \"\"\" xs represent coefficients of a polynomial.\n xs[0] + xs[1] * x + xs[2] * x^2 +....\n Return derivative of this polynomial in the same form.\n \"\"\"\n last_x = 0\n result = []\n for x in range(len(xs)):\n if x == 0:\n result.append(last_x)\n last_x = xs[x]\n elif x > 0:\n result.append(last_x * x)\n last_x = xs[x]\n return result"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n if n == 0:\n return 0\n elif n == 1:\n return 0\n elif n == 2:\n return 1\n else:\n return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n \"\"\"Write a function vowels_count which takes a string representing\n a word as input and returns the number of vowels in the string.\n Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n vowel, but only when it is at the end of the given word.\n\n Example:\n >>> vowels_count(\"abcde\")\n 2\n >>> vowels_count(\"ACEDY\")\n 3\n \"\"\"\n return s.count('aeiouAEIOUy')"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n and return the result as a string.\n If shift > number of digits, return digits reversed.\n \"\"\"\n # get the number of digits in x\n num_digits = len(str(x))\n # calculate the shift after wrapping around the circle\n shift = (shift % num_digits) + (num_digits - 1) * (shift // num_digits)\n # circular shift the digits and return as a string\n return str(x)[:shift] + str(x)[-shift:]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n \"\"\"Task\n Write a function that takes a string as input and returns the sum of the upper characters only'\n ASCII codes.\n\n Examples:\n \n digitSum(\"\") => 0\n digitSum(\"abAB\") => 131\n digitSum(\"abcCd\") => 67\n digitSum(\"helloE\") => 69\n digitSum(\"woArBld\") => 131\n digitSum(\"aAaaaXa\") => 153\n \"\"\"\n \n # Define a function that takes a string as input\n # Loop through each character in the string\n # If the character is uppercase, add its ASCII code to a running total\n # Return the total\n return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n total_fruits = n\n total_apples = 0\n total_oranges = 0\n mango_fruits = 0\n words = s.split()\n for word in words:\n if 'apples' in word:\n total_apples += int(word.split(' ')[1])\n elif 'oranges' in word:\n total_oranges += int(word.split(' ')[1])\n elif'mango' in word:\n mango_fruits += int(word.split(' ')[1])\n if total_fruits - total_apples - total_oranges - mango_fruits == 0:\n return mango_fruits\n else:\n return \"Error: Invalid input\""}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n smallest_even_value = float('inf')\n smallest_index = float('inf')\n for node in arr:\n if node.value % 2 == 0 and node.value <= smallest_even_value:\n smallest_even_value = node.value\n smallest_index = node.index\n if node.index < smallest_index:\n smallest_index = node.index\n if smallest_even_value == float('inf'):\n return []\n else:\n return [smallest_even_value, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n max_frequency = 0\n result = -1\n for num in lst:\n if num > 0:\n frequency = lst.count(num)\n if frequency > max_frequency and frequency >= num:\n max_frequency = frequency\n result = num\n return result"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n # Create a new empty list to store the sorted list\n sorted_lst = []\n # Iterate through the original list\n for i in range(len(lst)):\n # If the index is 0, add the first element to the sorted list\n if i == 0:\n sorted_lst.append(lst[i])\n # If the index is greater than 0, find the minimum value among the remaining elements\n elif i > 0:\n min_val = lst[i]\n for j in range(i+1, len(lst)):\n if lst[j] < min_val:\n min_val = lst[j]\n sorted_lst.append(min_val)\n # If the index is greater than 0, find the maximum value among the remaining elements\n elif i > 0:\n max_val = lst[i]\n for j in range(i+1, len(lst)):\n if lst[j] > max_val:\n max_val = lst[j]\n sorted_lst.append(max_val)\n # If the index is greater than 0, add the remaining elements in ascending order\n elif i > 0:\n for j in range(i+1, len(lst)):\n sorted_lst.append(lst[j])\n # Return the sorted list\n return sorted_lst"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n if a + b < c or a + c < b or b + c < a:\n return -1\n else:\n return (a * b * c) / 4"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n if len(q) > len(set(q)):\n return False\n elif sum(q) > w:\n return False\n else:\n return True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n non_palindromic = [i for i in range(256) if not is_palindromic(i)]\n return sum(map(lambda x: 1 if is_palindromic(arr[x]) else non_palindromic.count(arr[x]), enumerate(arr)))\ndef is_palindromic(n):\n return str(n) == str(n)[::-1]"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n if len(lst1) < len(lst2):\n return lst1\n elif len(lst1) > len(lst2):\n return lst2\n else:\n return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n and false otherwise.\n Knowing that (a) is less then 100. \n Example:\n is_multiply_prime(30) == True\n 30 = 2 * 3 * 5\n \"\"\"\n if a < 100:\n factors = []\n for i in range(2, int(a**0.5)+1):\n if a % i == 0:\n factors.append(i)\n if len(factors) == 3 and all(p in factors for p in [2, 3, 5]):\n return True\n else:\n return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n \"\"\"Your task is to write a function that returns true if a number x is a simple\n power of n and false in other cases.\n x is a simple power of n if n**int=x\n For example:\n is_simple_power(1, 4) => true\n is_simple_power(2, 2) => true\n is_simple_power(8, 2) => true\n is_simple_power(3, 2) => false\n is_simple_power(3, 1) => false\n is_simple_power(5, 3) => false\n \"\"\"\n if x == 0:\n return False\n for i in range(1, n+1):\n if x % i == 0:\n return True\n return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n if a == 0:\n return True\n elif a == 1:\n return True\n elif a == 2:\n return True\n elif a == 3:\n return True\n elif a == 4:\n return True\n elif a == 5:\n return True\n elif a == 6:\n return True\n elif a == 7:\n return True\n elif a == 8:\n return True\n elif a == 9:\n return True\n elif a == 10:\n return True\n elif a == 11:\n return True\n elif a == 12:\n return True\n elif a == 13:\n return True\n elif a == 14:\n return True\n elif a == 15:\n return True\n elif a == 16:\n return True\n elif a == 17:\n return True\n elif a == 18:\n return True\n elif a == 19:\n return True\n elif a == 20:\n return True\n elif a == 21:\n return True\n elif a == 22:\n return True\n elif a == 23:\n return True\n elif a == 24:\n return True\n elif a == 25:\n return True\n elif a == 26:\n return True\n elif a == 27:\n return True\n elif a == 28:\n return True\n elif a == 29:\n return True\n elif a == 30:\n return True\n elif a == 31:\n return True\n elif a == 32:\n return True\n elif a == 33:\n return True\n elif a == 34:\n return True\n elif a == 35:\n return True\n elif a == 36:\n return True\n elif a == 37:\n return True\n elif a == 38:\n return True\n elif a == 39:\n return True\n elif a == 40:\n return True\n elif a == 41:\n return True\n elif a == 42:\n return True\n elif a == 43:\n return True\n elif a == 44:\n return True\n elif a == 45:\n return True\n elif"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n \"\"\"You have been tasked to write a function that receives \n a hexadecimal number as a string and counts the number of hexadecimal \n digits that are primes (prime number, or a prime, is a natural number \n greater than 1 that is not a product of two smaller natural numbers).\n Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n So you have to determine a number of the following digits: 2, 3, 5, 7, \n B (=decimal 11), D (=decimal 13).\n Note: you may assume the input is always correct or empty string, \n and symbols A,B,C,D,E,F are always uppercase.\n Examples:\n For num = \"AB\" the output should be 1.\n For num = \"1077E\" the output should be 2.\n For num = \"ABED1A33\" the output should be 4.\n For num = \"123456789ABCDEF0\" the output should be 6.\n For num = \"2020\" the output should be 2.\n \"\"\"\n count = 0\n num_str = num.upper()\n for char in num_str:\n if char in ['2', '3', '5', '7', 'B', 'D']:\n count += 1\n return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n \"\"\"You will be given a number in decimal form and your task is to convert it to\n binary format. The function should return a string, with each character representing a binary\n number. Each character in the string will be '0' or '1'.\n\n There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n The extra characters are there to help with the format.\n\n Examples:\n decimal_to_binary(15)   # returns \"db1111db\"\n decimal_to_binary(32)   # returns \"db100000db\"\n \"\"\"\n # Convert decimal to binary\n binary = bin(decimal)[2:]\n # Add 'db' at the beginning and at the end of the string\n return 'db' + binary + 'db'"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n \"\"\"You are given a string s.\n Your task is to check if the string is happy or not.\n A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n For example:\n is_happy(a) => False\n is_happy(aa) => False\n is_happy(abcd) => True\n is_happy(aabb) => False\n is_happy(adb) => True\n is_happy(xyy) => False\n \"\"\"\n if len(s) < 3:\n return False\n for i in range(len(s)-2):\n if s[i] == s[i+1] and s[i+1] == s[i+2]:\n return False\n return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n pass"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n \"\"\"Write a function that takes a string and returns True if the string\n length is a prime number or False otherwise\n Examples\n prime_length('Hello') == True\n prime_length('abcdcba') == True\n prime_length('kittens') == True\n prime_length('orange') == False\n \"\"\"\n string_length = len(string)\n prime_nums = [2, 3, 5, 7]\n return string_length in prime_nums or all(string_length % i for i in prime_nums)"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n \"\"\"\n Given a positive integer n, return the count of the numbers of n-digit\n positive integers that start or end with 1.\n \"\"\"\n \n # Define a function to check if a number starts or ends with 1\n def check_start_end(num):\n return num % 10 == 1 or (n - 1) * 10 <= num < n * 10\n \n # Define a function to generate n-digit positive integers\n def generate_nums(n):\n for i in range(n):\n yield i * 10 ** (n - 1)\n \n # Generate all n-digit positive integers and count those that start or end with 1\n count = 0\n for num in generate_nums(n):\n if check_start_end(num):\n count += 1\n \n return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n # Convert N to binary string\n binary_string = bin(N)[2:]\n # Remove any leading zeros\n binary_string = binary_string.zfill(len(binary_string))\n # Convert binary string to list\n binary_list = list(binary_string)\n # Remove any duplicates\n binary_list = list(set(binary_list))\n # Convert list to string\n binary_string = ''.join(binary_list)\n # Return binary string\n return binary_string"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n even_odd_sum = 0\n for i, num in enumerate(lst):\n if i % 2 == 0 and num % 2 == 0:\n even_odd_sum += num\n return even_odd_sum"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n # split the string into a list of words\n words = s.split()\n # create a new list to store the ordered words\n ordered_words = []\n # iterate through each word in the list\n for word in words:\n # split the word into a list of characters\n characters = list(word)\n # sort the characters in ascending order based on ascii value\n characters.sort()\n # join the sorted characters back into a string and add it to the ordered_words list\n ordered_words.append(''.join(sorted(characters)))\n # join the ordered words back into a string and return it\n return''.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n \"\"\"\n You are given a 2 dimensional data, as a nested lists,\n which is similar to matrix, however, unlike matrices,\n each row may contain a different number of columns.\n Given lst, and integer x, find integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that\n each tuple is a coordinate - (row, columns), starting with 0.\n Sort coordinates initially by rows in ascending order.\n Also, sort coordinates of the row by columns in descending order.\n Examples:\n get_row([\n [1,2,3,4,5,6],\n [1,2,3,4,1,6],\n [1,2,3,4,5,1]\n ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n get_row([], 1) == []\n get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n \"\"\"\n\n def get_row(lst, x):\n # Find all rows that contain x\n rows = [row for row in lst if x in row]\n \n # Create a list of tuples with coordinates sorted by rows in ascending order\n and columns in descending order\n coordinates = [(row, [i for i, y in enumerate(row) if y == x].index(x)) for row in rows]\n \n return sorted(coordinates, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n \"\"\"\n Given an array of non-negative integers, return a copy of the given array after sorting,\n you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n or sort it in descending order if the sum( first index value, last index value) is even.\n \n Note:\n - don't change the given array.\n \n Examples:\n - sort_array([]) => []\n - sort_array([5]) => [5]\n - sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n - sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n \"\"\"\n # Check if the sum of the first and last indices is odd or even\n if (len(array) == 0) or (array[0] + array[-1] % 2 == 0):\n # Sort the array in ascending order if the sum is even\n return sorted(array)\n else:\n # Sort the array in descending order if the sum is odd\n return sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n \"\"\"Create a function encrypt that takes a string as an argument and\n returns a string encrypted with the alphabet being rotated. \n The alphabet should be rotated in a manner such that the letters \n shift down by two multiplied to two places.\n For example:\n encrypt('hi') returns 'lm'\n encrypt('asdfghjkl') returns 'ewhjklnop'\n encrypt('gf') returns 'kj'\n encrypt('et') returns 'ix'\n \"\"\"\n # Define a function to rotate the alphabet\n def rotate_alphabet(alphabet):\n # Define a list of alphabet letters\n letters = list(alphabet)\n # Rotate the letters by shifting them down by two multiplied to two places\n letters = [letters[i+2*j] for i in range(len(alphabet)) for j in range(2)]\n # Return the rotated alphabet as a string\n return ''.join(letters)\n \n # Define a function to encrypt the string\n def encrypt(s):\n # Rotate the alphabet\n alphabet = rotate_alphabet(alphabet)\n # Encrypt the string by shifting each letter down by two multiplied to two places\n encrypted = ''.join([alphabet.get(s, ord(s)+2*2-10) for s in s])\n # Return the encrypted string\n return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n smallest = lst[0]\n second_smallest = lst[1]\n for i in range(2, len(lst)):\n if lst[i] < smallest:\n second_smallest = smallest\n smallest = lst[i]\n elif lst[i] < second_smallest and lst[i]!= smallest:\n second_smallest = lst[i]\n return second_smallest if second_smallest is not None else None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n num_boredoms = 0\n for i in range(len(S)):\n if S[i] == 'I':\n num_boredoms += 1\n return num_boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n if x + y == z or x + z == y or y + z == x:\n return True\n else:\n return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n # Define a function that takes a message as input\n # and encodes it in the following way:\n # 1. Swaps case of all letters\n # 2. Replaces all vowels with the letter that appears 2 places ahead of that vowel in the english alphabet\n # Assume only letters\n # No additional imports\n # No comments\n message = message.lower() # Convert message to lowercase\n message = ''.join(ch for ch in message if ch.isalpha()) # Remove non-alphabetic characters\n message = ''.join(ch.swapcase() if ch.isalpha() else ch for ch in message) # Swap case of letters\n message = ''.join(ch.swapcase() if ch in 'aeiou' else (ord(ch) + 2 - ord('a')) % 26 + 'a' for ch in message) # Replace vowels\n return message # Return the encoded message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n \"\"\"You are given a list of integers.\n You need to find the largest prime value and return the sum of its digits.\n \n Examples:\n For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n For lst = [0,81,12,3,1,21] the output should be 3\n For lst = [0,8,1,2,1,7] the output should be 7\n \"\"\"\n \n def is_prime(num):\n \"\"\"\n Check if a number is prime or not\n \"\"\"\n if num < 2:\n return False\n for i in range(2, int(num**0.5)+1):\n if num % i == 0:\n return False\n return True\n \n def sum_digits(num):\n \"\"\"\n Return the sum of the digits of a number\n \"\"\"\n while num > 0:\n digit = num % 10\n num //= 10\n return digit + sum_digits(num)\n \n def skjkasdkd_helper(lst):\n \"\"\"\n Helper function to find the largest prime value and return the sum of its digits\n \"\"\"\n for num in lst:\n if is_prime(num):\n prime_sum = sum_digits(num)\n if prime"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n if not dict:\n return False\n for key, value in dict.items():\n if not isinstance(key, str) or not (key.islower() or key.isupper()):\n return False\n return all(isinstance(value, str) and (value.islower() or value.isupper()) for value in dict.values())"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n primes = []\n if n < 2:\n return []\n for i in range(2, n+1, 2):\n if all(n % i!= 0 for i in range(2, int(n**0.5)+1)):\n primes.append(n)\n return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n if a == 0 or b == 0:\n return 0\n elif a == 1 or b == 1:\n return 1\n else:\n return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n \"\"\"\n Given a string s, count the number of uppercase vowels in even indices.\n \n For example:\n count_upper('aBCdEf') returns 1\n count_upper('abcdefg') returns 0\n count_upper('dBBE') returns 0\n \"\"\"\n count = 0\n for i in range(len(s)):\n if i % 2 == 0 and s[i].isupper() and s[i] in 'AEIOU':\n count += 1\n return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n # Define a function that takes a value (string) representing a number\n # and returns the closest integer to it. If the number is equidistant\n # from two integers, round it away from zero.\n # Define a function that takes a value (string) representing a number\n # and returns the closest integer to it. If the number is equidistant\n # from two integers, round it away from zero.\n # Define a function that takes a value (string) representing a number\n # and returns the closest integer to it. If the number is equidistant\n # from two integers, round it away from zero.\n # Define a function that takes a value (string) representing a number\n # and returns the closest integer to it. If the number is equidistant\n # from two integers, round it away from zero.\n # Define a function that takes a value (string) representing a number\n # and returns the closest integer to it. If the number is equidistant\n # from two integers, round it away from zero.\n # Define a function that takes a value (string) representing a number\n # and returns the closest integer to it. If the number is equidistant\n # from two integers, round it away from zero.\n # Define a function that takes a value (string) representing a number\n # and returns the closest integer to it. If the number is equidistant\n # from two integers, round it away from zero.\n # Define a function that takes a value (string) representing a number\n # and returns the closest integer to it. If the number is equidistant\n # from two integers, round it away from zero.\n # Define a function that takes a value (string) representing a number\n # and returns the closest integer to it. If the number is equidistant\n # from two integers, round it away from zero.\n # Define a function that takes a value (string) representing a number\n # and returns the closest integer to it. If the number is equidistant\n # from two integers, round it away from zero.\n # Define a function that takes a value (string) representing a number\n # and returns the closest integer to it. If the number is equidistant\n # from two integers, round it away from zero.\n # Define a function that takes a value (string) representing a"}
{"task_id": "HumanEval/100", "completion": ""}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n return [word.strip() for word in s.split()]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n \"\"\"This function takes two positive numbers x and y and returns the\n biggest even integer number that is in the range [x, y] inclusive. If \n there's no such number, then the function should return -1.\n \n For example:\n choose_num(12, 15) = 14\n choose_num(13, 12) = -1\n \"\"\"\n for i in range(x, y+1):\n if i % 2 == 0 and i >= x and i <= y:\n return i\n return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n \"\"\"You are given two positive integers n and m, and your task is to compute the\n average of the integers from n through m (including n and m). \n Round the answer to the nearest integer and convert that to binary.\n If n is greater than m, return -1.\n Example:\n rounded_avg(1, 5) => \"0b11\"\n rounded_avg(7, 5) => -1\n rounded_avg(10, 20) => \"0b1111\"\n rounded_avg(20, 33) => \"0b11010\"\n \"\"\"\n if n > m:\n return -1\n else:\n return round(float(m - n + 1) / 2)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n \"\"\"Given a list of positive integers x. return a sorted list of all \n elements that hasn't any even digit.\n \n Note: Returned list should be sorted in increasing order.\n \n For example:\n >>> unique_digits([15, 33, 1422, 1])\n [1, 15, 33]\n >>> unique_digits([152, 323, 1422, 10])\n []\n \"\"\"\n # Initialize an empty list to store the unique digits\n unique_digits_list = []\n # Iterate through each element in the input list\n for i in x:\n # Check if the element has any even digit\n if sum([int(digit % 2 == 0) for digit in str(i)]) == 0:\n # If the element has no even digit, add it to the list\n unique_digits_list.append(i)\n # Sort the list in increasing order\n unique_digits_list.sort()\n return unique_digits_list"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n if not arr:\n return []\n elif len(arr) == 1 and arr[0] == 0:\n return ['Zero']\n elif len(arr) == 1 and arr[0] == -1:\n return ['Minus One']\n else:\n sorted_arr = sorted(arr)\n if len(arr) > 0 and arr[0] <= 9 and arr[0] >= 1:\n result = [str(i+1) for i in sorted_arr][::-1]\n else:\n result = ['Zero', 'Minus One']\n return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n return [1] * n"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n \"\"\"\n Given a positive integer n, return a tuple that has the number of even and odd\n integer palindromes that fall within the range(1, n), inclusive.\n \n Example 1:\n \n Input: 3\n Output: (1, 2)\n Explanation:\n Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n \n Example 2:\n \n Input: 12\n Output: (4, 6)\n Explanation:\n Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n \n Note:\n 1. 1 <= n <= 10^3\n 2. returned tuple has the number of even and odd integer palindromes respectively.\n \"\"\"\n count_even = 0\n count_odd = 0\n for i in range(1, n+1):\n if i == str(i):\n count_even += 1\n if i!= str(i):\n count_odd += 1\n return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n return sum(1 for num in arr if abs(sum(int(digit) for digit in str(num))) > 0)"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n if len(arr) == 0:\n return True\n else:\n for i in range(len(arr)):\n if arr[i] < arr[i+1]:\n return False\n else:\n for j in range(i, len(arr)):\n if arr[j] < arr[j-1]:\n return False\n else:\n return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n even_count = 0\n odd_count = 0\n for num in lst1:\n if num % 2 == 0:\n even_count += 1\n else:\n odd_count += 1\n \n if even_count == len(lst1) and odd_count == 0:\n return \"YES\"\n \n for i in range(len(lst2)):\n if lst1[i] % 2 == 1:\n for j in range(len(lst1)):\n if lst1[j] == lst2[i]:\n lst1[j], lst2[i] = lst2[i], lst1[j]\n return \"YES\"\n else:\n for j in range(len(lst1)):\n if lst1[j] == lst2[i]:\n lst1[j], lst2[i] = lst2[i], lst1[j]\n return \"YES\"\n \n return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n letters = {}\n for letter in test.lower().split():\n if letter not in letters:\n letters[letter] = 0\n letters[letter] += 1\n max_count = max(letters.values())\n max_letters = [letter for letter in letters.keys() if letters[letter] == max_count]\n return {letter: count for letter, count in letters.items() if count == max_count}\n return {letter: count for letter, count in letters.items()}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n \"\"\"Task\n We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n then check if the result string is palindrome.\n A string is called palindrome if it reads the same backward as forward.\n You should return a tuple containing the result string and True/False for the check.\n Example\n For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n \"\"\"\n # Remove all characters in s that are equal to any character in c\n s = ''.join([c for c in s if c not in c])\n # Check if the result string is palindrome\n if s == s[::-1]:\n return (s, True)\n else:\n return (s, False)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n Each element i of the output should be \"the number of odd elements in the\n string i of the input.\" where all the i's should be replaced by the number\n of odd digits in the i'th string of the input.\n\n >>> odd_count(['1234567'])\n [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n >>> odd_count(['3',\"11111111\"])\n [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n \"\"\"\n\n for i, s in enumerate(lst):\n count = sum(int(d) % 2!= 0 for d in s)\n return [f\"the number of odd elements {count} in the string {i+1} of the input.\" for i in range(len(lst))]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n \"\"\"\n Given an array of integers nums, find the minimum sum of any non-empty sub-array\n of nums.\n Example\n minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n minSubArraySum([-1, -2, -3]) == -6\n \"\"\"\n \n def helper(nums, start, end, sum):\n if start >= end:\n return sum\n \n if sum > nums[start]:\n return nums[start]\n \n return helper(nums, start + 1, end, sum + nums[start])\n \n return math.inf\n \n def minSubArraySum(nums):\n \"\"\"\n Given an array of integers nums, find the minimum sum of any non-empty sub-array\n of nums.\n Example\n minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n minSubArraySum([-1, -2, -3]) == -6\n \"\"\"\n \n def helper(nums, start, end, sum):\n if start >= end:\n return sum\n \n if sum > nums[start]:\n return nums[start]\n \n return helper(nums, start + 1, end, sum + nums[start])\n \n return math.inf\n \n def minSubArraySum(nums):\n \"\"\"\n Given an array of integers nums, find the minimum sum of any non-empty sub-array\n of nums.\n Example\n minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n minSubArraySum([-1, -2, -3]) == -6\n \"\"\"\n \n def helper(nums, start, end, sum):\n if start >= end:\n return sum\n \n if sum > nums[start]:\n return nums[start]\n \n return helper(nums, start + 1, end, sum + nums[start])\n \n return math.inf\n "}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n # Find the maximum number of water units in a row\n max_row = 0\n for row in grid:\n if len(row) > len(max_row):\n max_row = row\n \n # Initialize the number of buckets needed to empty the wells\n num_buckets = 0\n \n # Fill the buckets and empty them into the wells\n for i in range(len(grid)):\n for j in range(len(grid[i])):\n if grid[i][j] == 1:\n num_buckets += 1\n \n # If there are no wells with water, we don't need any buckets\n if num_buckets == 0:\n return 0\n \n # If there are wells with water, find the number of buckets needed to empty them\n while num_buckets > 0:\n for i in range(len(grid)):\n for j in range(len(grid[i])):\n if grid[i][j] == 1:\n num_buckets -= 1\n if num_buckets == 0:\n break\n \n # Return the number of buckets needed to empty the wells\n return num_buckets"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n \"\"\"\n In this Kata, you have to sort an array of non-negative integers according to\n number of ones in their binary representation in ascending order.\n For similar number of ones, sort based on decimal value.\n \"\"\"\n return sorted(arr, key=lambda x: (len(bin(x)[2:]) or 1, x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n words = s.split()\n result = []\n for word in words:\n count = 0\n for letter in word:\n if letter.isalpha():\n count += 1\n if count == n:\n result.append(word)\n return result\n return [] if len(s) == 0 else result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n vowels = ['a', 'e', 'i', 'o', 'u']\n result = ''\n for i in range(len(word)-2, -1, -1):\n if word[i] in vowels and word[i+1] not in vowels and word[i-1] not in vowels:\n result = word[i]\n break\n return result"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n left = '('\n right = ')'\n good = False\n for i in range(len(lst)):\n if lst[i] == left:\n good = True\n elif lst[i] == right and good:\n good = False\n elif lst[i] == right and not good:\n return 'No'\n elif lst[i] == left and not good:\n return 'No'\n else:\n return 'No'\n return 'Yes'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n if k > len(arr):\n return arr\n elif k == len(arr):\n return arr\n else:\n sorted_arr = sorted(arr)\n return sorted_arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n return sum([lst[i] for i in range(len(lst)) if (i % 2 == 0 and lst[i] % 2!= 0) or (i % 3 == 0 and lst[i] % 3!= 0)])"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n \"\"\"\n Given a non-empty array of integers arr and an integer k, return\n the sum of the elements with at most two digits from the first k elements of arr.\n \n Example:\n \n Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n Output: 24 # sum of 21 + 3\n \n Constraints:\n 1. 1 <= len(arr) <= 100\n 2. 1 <= k <= len(arr)\n \"\"\"\n \n # Initialize sum to 0\n sum = 0\n \n # Loop through the first k elements of arr\n for i in range(k):\n # Get the i-th element of arr\n arr_i = arr[i]\n \n # Check if the element has at most two digits\n if len(str(arr_i)) <= 2:\n # Add the element to the sum\n sum += arr_i\n \n # Return the sum\n return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n \"\"\"\n Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n \n The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n as follows: start with any positive integer n. Then each term is obtained from the \n previous term as follows: if the previous term is even, the next term is one half of \n the previous term. If the previous term is odd, the next term is 3 times the previous\n term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n \n Note: \n 1. Collatz(1) is [1].\n 2. returned list sorted in increasing order.\n \n For example:\n get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n \"\"\"\n def collatz(n):\n if n == 1:\n return [1]\n elif n % 2 == 0:\n return collatz(n/2) + [n]\n else:\n return collatz(3*n+1) + [n]\n \n odd_collatz = []\n for num in collatz(n):\n if num % 2!= 0:\n odd_collatz.append(num)\n odd_collatz.sort()\n return odd_collatz"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n if not date:\n return False\n months = {'1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, '11': 11, '12': 12}\n days = {'1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, '11': 11, '12': 12}\n year = int(date.split('-')[0])\n month = months[date.split('-')[1].split('.')[0]]\n day = int(date.split('-')[2])\n if month == 2:\n if (day < 1 or day > 29):\n return False\n elif month == 4 or month == 6 or month == 9 or month == 11:\n if (day < 1 or day > 30):\n return False\n elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n if (day < 1 or day > 31):\n return False\n return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n # split on whitespace\n words = txt.split()\n # if no whitespace exists, split on commas\n if not words:\n words = txt.split(\",\")\n # if no whitespace or commas exists, count lower-case letters with odd order in the alphabet\n if not words:\n return len([ord(c) for c in txt if ord(c) % 2 == 1])\n return words"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n \"\"\"\n Given a list of numbers, return whether or not they are sorted\n in ascending order. If list has more than 1 duplicate of the same\n number, return False. Assume no negative numbers and only integers.\n \"\"\"\n for i in range(len(lst)-1):\n if lst[i] > lst[i+1]:\n return False\n return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n if not (interval1[0] <= interval2[1] and interval2[0] <= interval1[1]):\n return \"NO\"\n else:\n return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n if len(arr) == 0:\n return None\n else:\n product = 1\n for num in arr:\n if num == 0:\n product *= 0\n elif num > 0:\n product *= 1\n else:\n product *= -1\n return product * sum(abs(num) for num in arr)"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n # Create a copy of the grid to modify it\n grid_copy = grid.copy()\n # Initialize the minimum path length and the minimum path\n min_path_len = float('inf')\n min_path = None\n # Define a helper function to find the minimum path from a cell\n def find_min_path(row, col, path):\n # Check if the current cell is the end of the path\n if len(path) == k:\n # Check if the path is the minimum path found so far\n if len(path) < min_path_len:\n min_path_len = len(path)\n min_path = path\n # Return the current cell as the next cell to visit\n return (row, col)\n # Check if the current cell is a valid cell to visit\n if (row < 0 or row >= len(grid) or col < 0 or col >= len(grid[0]) or grid[row][col] < 1 or grid[row][col] > len(grid) * len(grid[0]) - 1):\n return None\n # Check if the current cell has already been visited\n if grid_copy[row][col]!= 0:\n return None\n # Mark the current cell as visited\n grid_copy[row][col] = 1\n # Check if the current cell is the start of a new path\n if len(path) == 0:\n path = (row, col)\n # Check if the current cell is a neighbor of the last cell in the path\n if len(path) > 0:\n for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n new_row, new_col = (path[-1][0] + dr, path[-1][1] + dc)\n if (0 <= new_row < len(grid) and 0 <= new_col < len(grid[0]) and grid[new_row][new_col]!= 0 and find_min_path(new_row, new_col, path + [(new_row, new_col)])):\n path = path + [(new_row, new_col)]\n # Return the next cell to visit"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n the last couple centuries. However, what people don't know is Tribonacci sequence.\n Tribonacci sequence is defined by the recurrence:\n tri(1) = 3\n tri(n) = 1 + n / 2, if n is even.\n tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n For example:\n tri(2) = 1 + (2 / 2) = 2\n tri(4) = 3\n tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n You are given a non-negative integer number n, you have to a return a list of the \n first n + 1 numbers of the Tribonacci sequence.\n Examples:\n tri(3) = [1, 3, 2, 8]\n \"\"\"\n if n < 1:\n return []\n elif n == 1:\n return [3]\n elif n == 2:\n return [3, 2]\n else:\n seq = [3, 2, 1]\n for i in range(n - 2):\n seq = [seq[i] + seq[i + 1] + seq[i + 2] for i in range(n - 1)]\n return seq"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n \"\"\"Given a positive integer n, return the product of the odd digits.\n Return 0 if all digits are even.\n For example:\n digits(1)  == 1\n digits(4)  == 0\n digits(235) == 15\n \"\"\"\n if n < 1:\n return 0\n else:\n odd_digits = []\n for digit in str(n):\n if int(digit) % 2!= 0:\n odd_digits.append(int(digit))\n return functools.reduce(lambda x, y: x*y, odd_digits)"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n return any(string.count(s) > 0 for s in [[]] * 2)"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n \"\"\"You are given a list of numbers.\n You need to return the sum of squared numbers in the given list,\n round each element in the list to the upper int(Ceiling) first.\n Examples:\n For lst = [1,2,3] the output should be 14\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1.4,4.2,0] the output should be 29\n For lst = [-2.4,1,1] the output should be 6\n \"\"\"\n return sum([int(round(num))**2 for num in lst])"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n if not txt:\n return False\n else:\n last_char = txt[-1]\n if last_char.isalpha() and not txt[-2:].find(\" \")!= -1:\n return True\n else:\n return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n \"\"\"Create a function which returns the largest index of an element which\n is not greater than or equal to the element immediately preceding it. If\n no such element exists then return -1. The given array will not contain\n duplicate values.\n\n Examples:\n can_arrange([1,2,4,3,5]) = 3\n can_arrange([1,2,3]) = -1\n \"\"\"\n for i in range(len(arr)-1):\n if arr[i] > arr[i+1]:\n return i\n return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n if not lst:\n return (None, None)\n elif all(x >= 0 for x in lst):\n return (None, lst[0])\n elif all(x <= 0 for x in lst):\n return (lst[-1], None)\n else:\n return (lst[0], lst[-1])"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n if a > b:\n return a\n elif b > a:\n return b\n else:\n return None\n elif isinstance(a, str) and isinstance(b, str):\n if a == b:\n return None\n elif a > b:\n return a\n elif b > a:\n return b\n else:\n return None\n else:\n return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n Example\n is_equal_to_sum_even(4) == False\n is_equal_to_sum_even(6) == False\n is_equal_to_sum_even(8) == True\n \"\"\"\n if n < 0:\n return False\n elif n == 0:\n return True\n elif n % 2!= 0 or n < 4:\n return False\n else:\n for i in range(4):\n if n - i >= 0:\n return True\n return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n \"\"\"The Brazilian factorial is defined as:\n brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n where n > 0\n For example:\n special_factorial(4) = 288\n The function will receive an integer as input and should return the special\n factorial of this integer.\n \"\"\"\n if n <= 0:\n return 0\n else:\n return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n \"\"\"\n Given a string text, replace all spaces in it with underscores, \n and if a string has more than 2 consecutive spaces, \n then replace all consecutive spaces with - \n \"\"\"\n # split the string into a list of words\n words = text.split()\n # create a new list to store the fixed words\n fixed_words = []\n # iterate through each word in the list\n for word in words:\n # if the word has more than 2 consecutive spaces, replace them with -\n if len(word.split()) > 2:\n fixed_word = word.replace(' ', '-')\n # else replace all spaces with underscores\n else:\n fixed_word = word.replace(' ', '_')\n # add the fixed word to the list\n fixed_words.append(fixed_word)\n # join the fixed words back into a string and return it\n return''.join(fixed_words)"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n if len(file_name) > 3:\n return \"No\"\n elif \".\" not in file_name:\n return \"No\"\n elif not file_name.startswith([\"a-zA-Z\"]):\n return \"No\"\n elif not file_name.split(\".\")[1] in [\"txt\", \"exe\", \"dll\"]:\n return \"No\"\n else:\n return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n \"\"\"\n This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n \n Examples:\n For lst = [1,2,3] the output should be 6\n For lst = []  the output should be 0\n For lst = [-1,-5,2,-1,-5]  the output should be -126\n \"\"\"\n total = 0\n for i in range(len(lst)):\n if i % 3 == 0:\n lst[i] = lst[i] ** 2\n elif i % 4 == 0 and i % 3!= 0:\n lst[i] = lst[i] ** 3\n total += lst[i]\n return total"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n prime_words = []\n for word in sentence.split():\n if len(word) == 1 or all(len(word) % i!= 0 for i in range(2, len(word) + 1)):\n prime_words.append(word)\n return''.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n if x == n:\n return True\n elif x == \"\":\n return False\n elif n == \"\":\n return False\n else:\n return int(x) % int(n) == 0"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n \"\"\"\n Write a function which sorts the given list of integers\n in ascending order according to the sum of their digits.\n Note: if there are several items with similar sum of their digits,\n order them based on their index in original list.\n \n For example:\n >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n >>> order_by_points([]) == []\n \"\"\"\n \n def sum_of_digits(num):\n \"\"\"\n Return the sum of digits of a given integer.\n \n For example:\n >>> sum_of_digits(123) == 6\n >>> sum_of_digits(12345) == 15\n \"\"\"\n \n def order_by_points(nums):\n \"\"\"\n Sort the given list of integers in ascending order according to the sum of their digits.\n If there are several items with similar sum of their digits, order them based on their index in original list.\n \n For example:\n >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n >>> order_by_points([]) == []\n \"\"\"\n \n def sort_by_points(nums):\n \"\"\"\n Sort the given list of integers in ascending order according to the sum of their digits.\n If there are several items with similar sum of their digits, order them based on their index in original list.\n \n For example:\n >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n >>> sort_by_points([]) == []\n \"\"\"\n \n def sort_by_points(nums):\n \"\"\"\n Sort the given list of integers in ascending order according to the sum of their digits.\n If there are several items with similar sum of their digits, order them based on their index in original list.\n \n For example:\n >>> sort_by_points([1,"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n count = 0\n for num in nums:\n if num > 10 and (num % 10) % 2 == 0 and (num // 10) % 2 == 0:\n count += 1\n return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n \"\"\"\n You are given a positive integer n. You have to create an integer array a of length n.\n For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n and a[i] + a[j] + a[k] is a multiple of 3.\n Example :\n Input: n = 5\n Output: 1\n Explanation:\n a = [1, 3, 7, 13, 21]\n The only valid triple is (1, 7, 13).\n \"\"\"\n \n a = [i * i - i + 1 for i in range(n)]\n max_triples = 0\n for i in range(n):\n for j in range(i + 1, n):\n for k in range(j + 1, n):\n if a[i] + a[j] + a[k] % 3 == 0:\n max_triples += 1\n \n return max_triples"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n \n if planet1 not in planets or planet2 not in planets:\n return ()\n \n sorted_planets = sorted([planet for planet in planets if planet!= planet1 and planet!= planet2])\n \n return tuple(sorted_planets)"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n \"\"\"Write a function that accepts a list of strings as a parameter,\n deletes the strings that have odd lengths from it,\n and returns the resulted list with a sorted order,\n The list is always a list of strings and never an array of numbers,\n and it may contain duplicates.\n The order of the list should be ascending by length of each word, and you\n should return the list sorted by that rule.\n If two words have the same length, sort the list alphabetically.\n The function should return a list of strings in sorted order.\n You may assume that all words will have the same length.\n For example:\n assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n \"\"\"\n # Create a new list to store the filtered and sorted words\n result = []\n for word in lst:\n if len(word) % 2 == 0:\n result.append(word)\n # Sort the list by length of each word, and then alphabetically\n result.sort(key=lambda x: (len(x), x))\n return result"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n if n > 1:\n return x\n else:\n return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n \"\"\"\n Given a list of numbers, return the sum of squares of the numbers\n in the list that are odd. Ignore numbers that are negative or not integers.\n \"\"\"\n lst = [num for num in lst if isinstance(num, int) and num > 0]\n odd_nums = [num for num in lst if num % 2!= 0]\n return sum([num**2 for num in odd_nums])"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n return [abs(game[i] - guess[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n \"\"\"You will be given the name of a class (a string) and a list of extensions.\n The extensions are to be used to load additional classes to the class. The\n strength of the extension is as follows: Let CAP be the number of the uppercase\n letters in the extension's name, and let SM be the number of lowercase letters \n in the extension's name, the strength is given by the fraction CAP - SM. \n You should find the strongest extension and return a string in this \n format: ClassName.StrongestExtensionName.\n If there are two or more extensions with the same strength, you should\n choose the one that comes first in the list.\n For example, if you are given \"Slices\" as the class and a list of the\n extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n (its strength is -1).\n Example:\n for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n \"\"\"\n class_name = class_name.split('.')\n extensions = [ext.split('.') for ext in extensions]\n class_name = '.'.join(class_name)\n extensions = ['.'.join(ext) for ext in extensions]\n class_name = class_name.lower()\n extensions = [ext.lower() for ext in extensions]\n class_name = class_name.count('A') - class_name.count('a')\n extensions = [ext.count('A') - ext.count('a') for ext in extensions]\n class_name = class_name.count('A') - class_name.count('a')\n extensions = sorted(extensions, key=lambda x: x[1])\n return class_name + '.' + extensions[0]"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n # Convert the second word to a set of characters\n b_set = set(b)\n \n # Check if the second word or any of its rotations is a substring in the first word\n for i in range(len(a)):\n for j in range(i+1, len(a)+1):\n if set(a[i:j]) == b_set:\n return True\n \n return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n return len(list(filter(lambda x: x % 2 == 0, str(num)))) + len(list(filter(lambda x: x % 2!= 0, str(num))))"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n roman_numerals = {\n 1: 'i',\n 2: 'ii',\n 3: 'iii',\n 4: 'iv',\n 5: 'v',\n 6: 'vi',\n 7: 'vii',\n 8: 'viii',\n 9: 'ix',\n 10: 'x',\n 100: 'ci',\n 200: 'cc',\n 300: 'cii',\n 400: 'cd',\n 500: 'd',\n 600: 'cm',\n 700:'m',\n 800: 'viii',\n 900: 'ix',\n 1000: 'x'\n }\n roman_numerals_len = len(roman_numerals)\n if number > roman_numerals_len:\n return ''\n roman_numeral = roman_numerals[number]\n if number > 1:\n roman_numeral = roman_numeral + roman_numerals[number-1]\n return roman_numeral.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n if a + b < c or a + c < b or b + c < a:\n return False\n else:\n return True"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n max_chars = 0\n max_word = \"\"\n for word in words:\n if len(set(word)) > max_chars:\n max_chars = len(set(word))\n max_word = word\n return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n if number + need > remaining:\n remaining = 0\n else:\n remaining -= number + need\n return (number + need, remaining)"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n \"\"\"\n Given two lists operator, and operand. The first list has basic algebra operations, and \n the second list is a list of integers. Use the two given lists to build the algebric \n expression and return the evaluation of this expression.\n \n The basic algebra operations:\n Addition ( + ) \n Subtraction ( - ) \n Multiplication ( * ) \n Floor division ( // ) \n Exponentiation ( ** ) \n \n Example:\n operator['+', '*', '-']\n array = [2, 3, 4, 5]\n result = 2 + 3 * 4 - 5\n => result = 9\n \n Note:\n The length of operator list is equal to the length of operand list minus one.\n Operand is a list of of non-negative integers.\n Operator list has at least one operator, and operand list has at least two operands.\n \"\"\"\n \n def evaluate(expression):\n \"\"\"\n Evaluate the given expression using the order of operations.\n \"\"\"\n \n def evaluate(expression):\n \"\"\"\n Evaluate the given expression using the order of operations.\n \"\"\"\n \n def evaluate(expression):\n \"\"\"\n Evaluate the given expression using the order of operations.\n \"\"\"\n \n def evaluate(expression):\n \"\"\"\n Evaluate the given expression using the order of operations.\n \"\"\"\n \n def evaluate(expression):\n \"\"\"\n Evaluate the given expression using the order of operations.\n \"\"\"\n "}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n # Check if the string contains only letters\n if not any(c.isalpha() for c in s):\n # If the string contains only letters, reverse it\n return s[::-1]\n # Otherwise, reverse the case of each letter\n else:\n return ''.join(chr(ord(c) ^ (c.islower() and 1 or 0)) for c in s)"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n if text == '':\n return None\n else:\n return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n \"\"\"\n Given two positive integers a and b, return the even digits between a\n and b, in ascending order.\n \n For example:\n generate_integers(2, 8) => [2, 4, 6, 8]\n generate_integers(8, 2) => [2, 4, 6, 8]\n generate_integers(10, 14) => []\n \"\"\"\n # Define a function to check if a number is even\n def is_even(num):\n return num % 2 == 0\n # Define a function to generate even digits between a and b\n def generate_even_digits(a, b):\n even_digits = []\n for i in range(a, b+1):\n if is_even(i):\n even_digits.append(i)\n return even_digits\n # Call the generate_even_digits function and return the result\n return generate_even_digits(a, b)"}
