{"task_id": "HumanEval/0", "completion": ""}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # TODO: Implement this function\n    return []"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\n    if number == 0:\n        return 0\n    else:\n        return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n    if len(operations) == 0:\n        return False\n    elif operations[0] < 0:\n        return True\n    else:\n        return below_zero(operations[1:])"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    if not numbers:\n        return []\n\n    if len(numbers) == 1:\n        return [numbers[0]]\n\n    return numbers[0] + [delimeter] + numbers[1:]"}
{"task_id": "HumanEval/6", "completion": ""}
{"task_id": "HumanEval/7", "completion": "    def test_empty_list(self):\n        self.assertEqual(filter_by_substring([], 'a'), [])\n\n    def test_non_empty_list(self):\n        self.assertEqual(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'), ['abc', 'bacd', 'array'])"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(lambda x, y: x * y, numbers))"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n   "}
{"task_id": "HumanEval/11", "completion": ""}
{"task_id": "HumanEval/12", "completion": ""}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[0:i+1]\n        if prefix not in prefixes:\n            prefixes.append(prefix)\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n\n    if n == 0:\n        return '0'\n    else:\n        return''.join([str(i) for i in range(n)])"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\n    # TODO: Implement the function\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters\n    # TODO: Use a set to count distinct characters"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    # TODO: write code here\n    return []"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x))\n    return''.join(numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    return numbers[0], numbers[-1]"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    min_val = min(numbers)\n    max_val = max(numbers)\n    scale = max_val - min_val\n    return [x / scale for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    def test_filter_integers(self):\n        self.assertEqual(filter_integers(['a', 3.14, 5]), [5])\n        self.assertEqual(filter_integers([1, 2, 3, 'abc', {}, []]), [1, 2, 3])"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return largest_divisor(n-1)"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here"}
{"task_id": "HumanEval/27", "completion": ""}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    def test_empty_list(self):\n        self.assertEqual(filter_by_prefix([], 'a'), [])\n\n    def test_non_empty_list(self):\n        self.assertEqual(filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a'), ['abc', 'array'])"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n < 2:\n        return False\n    elif n % 3 == 0:\n        return False\n    elif n < 3:\n        return False\n    elif n % 5 == 0:\n        return False\n    elif n < 5:\n        return False\n    elif n % 7 == 0:\n        return False\n    elif n < 7:\n        return False\n    elif n % 11 == 0:\n        return False\n    elif n < 11:\n        return False\n    elif n % 13 == 0:\n        return False\n    elif n < 13:\n        return False\n    elif n % 17 == 0:\n        return False\n    elif n < 17:\n        return False\n    elif n % 19 == 0:\n        return False\n    elif n < 19:\n        return False\n    elif n % 23 == 0:\n        return False\n    elif n < 23:\n        return False\n    elif n % 29 == 0:\n        return False\n    elif n < 29:\n        return False\n    elif n % 31 == 0:\n        return False\n    elif n < 31:\n        return False\n    elif n % 37 == 0:\n        return False\n    elif n < 37:\n        return False\n    elif n % 41 == 0:\n        return False\n    elif n < "}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    if len(xs) % 2 == 0:\n        if xs[0] == 0:\n            return 0\n        else:\n            return -xs[0] / (xs[1] * 2)\n    else:\n        return None"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_sorted = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_sorted.append(sorted(l[i:i+3])[0])\n        else:\n            l_sorted.append(l[i])\n    return l_sorted"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_element = l[0]\n    for i in range(len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n\n    # TODO: Implement the function\n    # TODO: Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13\n    # TODO: Use a loop to iterate through integers less than n\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop to iterate through the digits of each integer\n    # TODO: Use a loop"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_even = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_even.append(l[i])\n        else:\n            l_even.append(l[i])\n    l_even.sort()\n    return l_even"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime\\_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime\\_fib(1)\n    2\n    >>> prime\\_fib(2)\n    3\n    >>> prime\\_fib(3)\n    5\n    >>> prime\\_fib(4)\n    13\n    >>> prime\\_fib(5)\n    89\n    \"\"\"\n\ndef prime\\_fib(n: int):\n    \"\"\"\n    prime\\_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime\\_fib(1)\n    2\n    >>> prime\\_fib(2)\n    3\n    >>> prime\\_fib(3)\n    5\n    >>> prime\\_fib(4)\n    13\n    >>> prime\\_fib(5)\n    89\n    \"\"\"\n\ndef prime\\_fib(n: int):\n    \"\"\"\n    prime\\_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime\\_fib(1)\n    2\n    >>> prime\\_fib(2)\n    3\n    >>> prime\\_fib(3)\n    5\n    >>> prime\\_fib(4)\n    13\n    >>> prime\\_fib(5)\n    89\n    \"\"\"\n\ndef prime\\_fib(n: int):\n    \"\"\"\n    prime\\_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime\\_fib(1)\n    2\n    >>> prime\\_fib(2)"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) < 3:\n        return False\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    # Write code here\n    return 0"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    if base < 10:\n        return str(x)\n    else:\n        return \"Error: base number should be less than 10\""}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    elif n == 4:\n        return 0\n    elif n == 5:\n        return 0\n    elif n == 6:\n        return 8\n    elif n == 7:\n        return 14\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n    if text == text[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return modp(n-1, p)"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiou'\n    new_text = ''\n    for char in text:\n        if char in vowels:\n            continue\n        else:\n            new_text += char\n    return new_text"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num > t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcd', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0)!= len(s1):\n        return False\n    if s0 == s1:\n        return True\n    if s0 == s1[::-1]:\n        return True\n    return False"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    # TODO: write code here\n    if len(brackets) % 2!= 0:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    if l[0] == l[-1]:\n        return False\n    if l[0] == l[-1] and l[0] == l[1]:\n        return True\n    if l[0] == l[-1] and l[0] == l[1] and l[0] == l[2]:\n        return True\n    if l[0] == l[-1] and l[0] == l[1] and l[0] == l[2] and l[0] == l[3]:\n        return True\n    if l[0] == l[-1] and l[0] == l[1] and l[0] == l[2] and l[0] == l[3] and l[0] == l[4]:\n        return True\n    if l[0] == l[-1] and l[0] == l[1] and l[0] == l[2] and l[0] == l[3] and l[0] == l[4] and l[0] == l[5]:\n        return True\n    if l[0] == l[-1] and l[0] == l[1] and l[0] == l[2] and l[0] == l[3] and l[0] == l[4] and l[0] == l[5] and l[0] == l[6]:\n        return True\n    if l[0] == l[-1] and l[0] == l[1] and l[0] == l[2] and l[0] == l[3] and l[0] == l[4] and l[0] == l[5] and l[0] == l[6] and l["}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # TODO: implement the function\n    # TODO: return the sorted unique common elements"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    elif n % 5 == 0:\n        return 5\n    elif n % 7 == 0:\n        return 7\n    elif n % 11 == 0:\n        return 11\n    elif n % 13 == 0:\n        return 13\n    elif n % 17 == 0:\n        return 17\n    elif n % 19 == 0:\n        return 19\n    elif n % 23 == 0:\n        return 23\n    elif n % 29 == 0:\n        return 29\n    elif n % 31 == 0:\n        return 31\n    elif n % 37 == 0:\n        return 37\n    elif n % 41 == 0:\n        return 41\n    elif n % 43 == 0:\n        return 43\n    elif n % 47 == 0:\n        return 47\n    elif n % 53 == 0:\n        return 53\n    elif n % 59 == 0:\n        return 59\n    elif n % 61 == 0:\n        return 61\n    elif n % 67 == 0:\n        return 67\n    elif n % 71 == 0:\n        return 71\n    elif n % 73 == 0:\n        return 73\n    elif n % 79 == 0:\n        return 79\n    elif n % 83 == 0:\n        return 83\n    elif"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\n    return sum(range(1, n + 1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    # TODO: write code here\n    if len(brackets) % 2!= 0:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if len(xs) == 1:\n        return [xs[0]]\n    else:\n        return [xs[0]] + [xs[i] * (i + 1) for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels\\_count(s):\n \"\"\"Write a function vowels\\_count which takes a string representing\n a word as input and returns the number of vowels in the string.\n Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n vowel, but only when it is at the end of the given word.\n\n Example:\n >>> vowels\\_count(\"abcde\")\n 2\n >>> vowels\\_count(\"ACEDY\")\n 3\n \"\"\"\n\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[0:shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    # Write your code here\n    sum = 0\n    for i in s:\n        if i.isalpha():\n            sum += ord(i)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    s = s.split()\n    n = int(n)\n    s = s[0]\n    s = s.split(\" \")\n    s = s[0]\n    s = s.split(\" \")\n    s = s[0]\n    s = s.split(\" \")\n    s = s[0]\n    s = s.split(\" \")\n    s = s[0]\n    s = s.split(\" \")\n    s = s[0]\n    s = s.split(\" \")\n    s = s[0]\n    s = s.split(\" \")\n    s = s[0]\n    s = s.split(\" \")\n    s = s[0]\n    s = s.split(\" \")\n    s = s[0]\n    s = s.split(\" \")\n    s = s[0]\n    s = s.split(\" \")\n    s = s[0]\n    s = s.split(\" \")\n    s = s[0]\n    s = s.split(\" \")\n    s = s[0]\n    s = s"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    # Write your code here\n    return [arr[0],0]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    # write code here\n    return -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n\n    # TODO: Implement the strange_sort_list function\n    # TODO: Return the sorted list\n    return sorted(lst)"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a+b > c and a+c > b and b+c > a:\n        return (a*b)/2\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n    if q[0] == q[-1]:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    # Write your code here\n    n = len(arr)\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1\n    if arr[0] == arr[-1]:\n        return 0\n    if arr[0]!= arr[-1]:\n        return 1\n    return 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 100:\n        if a == 1:\n            return True\n        elif a == 2:\n            return True\n        elif a == 3:\n            return True\n        elif a == 5:\n            return True\n        elif a == 7:\n            return True\n        elif a == 11:\n            return True\n        elif a == 13:\n            return True\n        elif a == 17:\n            return True\n        elif a == 19:\n            return True\n        elif a == 23:\n            return True\n        elif a == 29:\n            return True\n        elif a == 31:\n            return True\n        elif a == 37:\n            return True\n        elif a == 41:\n            return True\n        elif a == 43:\n            return True\n        elif a == 47:\n            return True\n        elif a == 53:\n            return True\n        elif a == 59:\n            return True\n        elif a == 61:\n            return True\n        elif a == 67:\n            return True\n        elif a == 71:\n            return True\n        elif a == 73:\n            return True\n        elif a == 79:\n            return True\n        elif a == 83:\n            return True\n        elif a == 89:\n            return True\n        elif a == 97:\n            return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == n:\n        return True\n    elif x == 1:\n        return True\n    elif x == 0:\n        return False\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0:\n        return True\n    elif a % 1 == 0:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    num = num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\"0\", \"\")\n    num = num.replace(\"1\", \"\")\n    num = num.replace(\"2\", \"\")\n    num = num.replace(\"3\", \"\")\n    num = num.replace(\"4\", \"\")\n    num = num.replace(\"5\", \"\")\n    num = num.replace(\"6\", \"\")\n    num = num.replace(\"7\", \"\")\n    num = num.replace(\"8\", \"\")\n    num = num.replace(\"9\", \"\")\n    num = num.replace(\"A\", \"\")\n    num = num.replace(\"B\", \"\")\n    num = num.replace(\"C\", \"\")\n    num = num.replace(\"D\", \"\")\n    num = num.replace(\"E\", \"\")\n    num = num.replace(\"F\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\"0\", \"\")\n    num = num.replace(\"1\", \"\")\n    num = num.replace(\"2\", \"\")\n    num = num.replace(\"3\", \"\")\n    num = num.replace(\"4\", \"\")\n    num = num.replace(\"5\", \"\")\n    num = num.replace(\"6\", \"\")\n    num = num.replace(\"7\", \"\")\n    num = num.replace(\"8\", \"\")\n    num = num.replace(\"9\", \"\")\n    num = num.replace(\"A\", \"\")\n    num = num.replace(\"B\", \"\")\n    num = num.replace(\"C\", \"\")\n    num = num.replace(\"D\", \"\")\n    num = num.replace(\"E\", \"\")\n    num = num.replace(\"F\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\"0\", \"\")\n    num = num.replace(\"1\", \"\")\n    num = num.replace(\"2\", \"\")\n    num = num.replace(\"3\", \"\")\n    num = num.replace(\"4\", \"\")\n    num = num.replace(\"5\", \"\")\n    num = num.replace(\"6\", \"\")\n    num = num.replace(\"7\", \"\")\n    num = num.replace(\"8\", \"\")\n    num = num.replace(\"9"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    # Your code here"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    # Create a dictionary to store the letter grades\n    letter_grades = {'A+': 4.0, 'A': 3.7, 'A-': 3.3, 'B+': 3.0, 'B': 2.7, 'B-': 2.3, 'C+': 2.0, 'C': 1.7, 'C-': 1.3, 'D+': 1.0, 'D': 0.7, 'D-': 0.0, 'E': 0.0}\n\n    # Create a list to store the letter grades\n    letter_grades_list = []\n\n    # Loop through the grades and assign the letter grade\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades_list.append('A+')\n        elif grade >= 3.7:\n            letter_grades_list.append('A')\n        elif grade >= 3.3:\n            letter_grades_list.append('A-')\n        elif grade >= 3.0:\n            letter_grades_list.append('B+')\n        elif grade >= 2.7:\n            letter_grades_list.append('B')\n        elif grade >= 2.3:\n            letter_grades_list.append('B-')\n        elif grade >= 2.0:\n            letter_grades_list.append('C+')\n        elif grade >= 1.7:\n            letter_grades_list.append('C')\n        elif grade >= 1.3:\n            letter_grades_list.append('C-')\n        elif grade >= 1.0:\n            letter_grades_list.append('D+')\n        elif grade >= 0.7:\n            letter_grades_list.append('D')\n        elif grade >= 0.0:\n            letter_grades_list.append('D-')\n        else:\n            letter_grades_list.append('E')\n\n    return letter_grades_list"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n    if len(string) == 1:\n        return True\n    elif len(string) == 2:\n        return True\n    elif len(string) == 3:\n        return True\n    elif len(string) == 4:\n        return True\n    elif len(string) == 5:\n        return True\n    elif len(string) == 6:\n        return True\n    elif len(string) == 7:\n        return True\n    elif len(string) == 8:\n        return True\n    elif len(string) == 9:\n        return True\n    elif len(string) == 10:\n        return True\n    elif len(string) == 11:\n        return True\n    elif len(string) == 12:\n        return True\n    elif len(string) == 13:\n        return True\n    elif len(string) == 14:\n        return True\n    elif len(string) == 15:\n        return True\n    elif len(string) == 16:\n        return True\n    elif len(string) == 17:\n        return True\n    elif len(string) == 18:\n        return True\n    elif len(string) == 19:\n        return True\n    elif len(string) == 20:\n        return True\n    elif len(string) == 21:\n        return True\n    elif len(string) == 22:\n        return True\n    elif len(string) == 23:\n        return True\n    elif len(string) == 24:\n        return True\n    elif len(string) == 25:\n        return True\n    elif len(string) == 26:\n        return True\n    elif len(string) == 27"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    else:\n        return 10"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    else:\n        return \"\".join(map(str, [sum([int(x) for x in str(N)])]))"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    even_odd = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i % 2 == 0:\n            even_odd.append(lst[i])\n    return sum(even_odd)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    s = s.replace(' ', '')\n    s = ''.join(sorted(s))\n    return s"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n    for row in lst:\n        for i, item in enumerate(row):\n            if item == x:\n                result.append((i, len(row)-1))\n    return sorted(result, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    if len(array) == 2:\n        if array[0] > array[1]:\n            return [array[1], array[0]]\n        else:\n            return [array[0], array[1]]\n    if len(array) == 3:\n        if array[0] > array[1] and array[1] > array[2]:\n            return [array[2], array[1], array[0]]\n        elif array[0] > array[1] and array[1] < array[2]:\n            return [array[2], array[0], array[1]]\n        elif array[0] < array[1] and array[1] > array[2]:\n            return [array[2], array[1], array[0]]\n        else:\n            return [array[0], array[1], array[2]]\n    if len(array) == 4:\n        if array[0] > array[1] and array[1] > array[2] and array[2] > array[3]:\n            return [array[3], array["}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    encrypted_string = ''\n    for char in s:\n        encrypted_string += rotated_alphabet[alphabet.index(char) + 2]\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return None\n    else:\n        return lst[0]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    count = 0\n    for i in range(len(S)):\n        if S[i] == \"I\":\n            count += 1\n            if S[i+1] == \".\" or S[i+1] == \"?\" or S[i+1] == \"!\":\n                count -= 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if (x == y + z) or (x == z + y) or (y == x + z) or (y == z + x) or (z == x + y) or (z == y + x):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n    # TODO: write code here\n    return message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    # Write your code here\n    # Return the sum of the digits of the largest prime number in the list\n    largest_prime = 0\n    largest_prime_index = 0\n    for i, num in enumerate(lst):\n        if num > largest_prime:\n            largest_prime = num\n            largest_prime_index = i\n    return largest_prime"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower()!= key.isupper():\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n    # Create a list of all prime numbers less than n\n    primes = [2, 3]\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n\n    # Return the first n primes\n    return primes[:n]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    elif a == 1 or b == 1:\n        return 1\n    else:\n        return a * b"}
{"task_id": "HumanEval/98", "completion": "def count\\_upper(s):\n \"\"\"\n Given a string s, count the number of uppercase vowels in even indices.\n \n For example:\n count\\_upper('aBCdEf') returns 1\n count\\_upper('abcdefg') returns 0\n count\\_upper('dBBE') returns 0\n \"\"\"\n\n"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    try:\n        return int(value)\n    except ValueError:\n        return None"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n, n+2]\n    else:\n        return [n, n+1]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = []\n    for word in s.split(','):\n        words.append(word.strip())\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x == y:\n        return -1\n    elif x % 2 == 0 and y % 2 == 0:\n        return x\n    elif x % 2 == 0 and y % 2 == 1:\n        return y\n    elif x % 2 == 1 and y % 2 == 0:\n        return x\n    elif x % 2 == 1 and y % 2 == 1:\n        return y"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n    # If n is greater than m, return -1\n    return -1\n    else:\n    # If n is not greater than m, return the average of the integers from n through m\n    return int(round(((m - n + 1) / 2), 0))"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if i % 2!= 0:\n            result.append(i)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0]]\n    else:\n        arr.sort()\n        arr.reverse()\n        return [str(i) for i in arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": ""}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for i in arr:\n        if i < 0:\n            count += sum(map(int, str(i)[::-1]))\n        else:\n            count += sum(map(int, str(i)))\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr[i] < arr[i+1]:\n                return False\n        return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Write your code here\n    # Return \"YES\" if it is possible to exchange elements between the lst1 and lst2 to make\n    # all the elements of lst1 to be even, otherwise return \"NO\".\n    # For example:\n    # exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    # exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    # It is assumed that the input lists will be non-empty.\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   "}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    histogram = {}\n    for letter in test:\n        if letter in histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n    return histogram"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    # Create a new string to store the result\n    result = ''\n    # Loop through the string s\n    for i in range(len(s)):\n        # Check if the character at index i is in c\n        if s[i] in c:\n            # If it is, skip it\n            continue\n        # If it is not, add it to the result\n        result += s[i]\n    # Return the result and a boolean indicating whether it is a palindrome\n    return (result, (result == result[::-1]))"}
{"task_id": "HumanEval/113", "completion": "    def test_odd_count(self):\n        self.assertEqual(odd_count(['1234567']), [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n        self.assertEqual(odd_count(['3',\"11111111\"]), [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n                                                       \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    nums = sorted(nums)\n    min_sum = nums[0]\n    for i in range(len(nums)):\n        if i == 0:\n            min_sum = nums[i]\n        else:\n            min_sum = min(min_sum, nums[i])\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # Write your code here\n    # You can use the following functions:\n    # - max\\_fill\\_row(grid, capacity)\n    # - max\\_fill\\_col(grid, capacity)\n    # - max\\_fill\\_diag(grid, capacity)\n    # - max\\_fill\\_row\\_diag(grid, capacity)\n    # - max\\_fill\\_col\\_diag(grid, capacity)\n    # - max\\_fill\\_row\\_col(grid, capacity)\n    # - max\\_fill\\_row\\_col\\_diag(grid, capacity)\n    # - max\\_fill\\_col\\_row(grid, capacity)\n    # - max\\_fill\\_col\\_row\\_diag(grid, capacity)\n    # - max\\_fill\\_row\\_col\\_diag(grid, capacity)\n    # - max\\_fill\\_col\\_row\\_diag(grid, capacity)\n    # - max\\_fill\\_row\\_col\\_diag(grid, capacity)\n    # - max\\_fill\\_col\\_row\\_diag(grid, capacity)\n    # - max\\_fill\\_row\\_col\\_diag(grid, capacity)\n    # - max\\_fill\\_col\\_row\\_diag(grid, capacity)\n    # - max\\_fill\\_row\\_col\\_diag(grid, capacity)\n    # - max\\_fill\\_col\\_row\\_diag(grid, capacity)\n    # - max\\_fill\\_row\\_col\\_diag(grid, capacity)\n    # - max\\_fill\\_col\\_row\\_diag(grid, capacity)\n    # - max\\_fill\\_row\\_col\\_diag(grid, capacity)\n    # - max\\_fill\\_col\\_row\\_diag(grid, capacity)\n    # - max\\_fill\\_row\\_col\\_diag(grid, capacity)\n    # - max\\_fill\\_col\\_row\\_diag(grid, capacity)\n    # - max\\_fill\\_row\\_col\\_diag(grid, capacity)\n    # - max\\_fill\\_col\\_row\\_diag(grid, capacity)\n    # - max\\_fill\\_row\\_col\\_diag(grid, capacity)\n    # - max\\_fill\\_col"}
{"task_id": "HumanEval/116", "completion": ""}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        if len(word) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i]!= word[-1] and word[i]!= word[0] and word[i]!= word[i-1]:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    if len(lst) == 0:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == lst[1]:\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[1] == '(':\n        return 'No'\n    return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # write code here\n    return"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 == 1)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        if arr[i] < 100:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    # TODO: write code here\n    return []"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    if not date:\n        return False\n\n    date = date.split('-')\n    if len(date)!= 3:\n        return False\n\n    try:\n        month = int(date[0])\n        day = int(date[1])\n        year = int(date[2])\n    except ValueError:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if month == 2 and day > 29:\n        return False\n\n    if month == 4 or month == 6 or month == 9 or month == 11 and day > 30:\n        return False\n\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 and day > 31:\n       "}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if txt == \"\":\n        return []\n    elif txt.count(\" \") == 0 and txt.count(\",\") == 0:\n        return len([i for i in range(ord(\"a\"), ord(\"z\") + 1) if i % 2 == 1])\n    else:\n        return txt.split(\" \")"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 0:\n        return False\n    elif len(lst) == 2:\n        return True\n    elif len(lst) > 2:\n        for i in range(len(lst)-1):\n            if lst[i] > lst[i+1]:\n                return False\n        return True"}
{"task_id": "HumanEval/127", "completion": "def is\\_prime(n):\n    \"\"\"You are given a positive integer n.\n    You are to determine whether n is a prime number.\n    A prime number is a number that has exactly two divisors, 1 and itself.\n    For example, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 3"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    else:\n        return sum(arr[0] * prod_signs(arr[1:]) for i in range(len(arr)))"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # Create a dictionary to store the visited cells\n    visited = {}\n    # Create a list to store the path\n    path = []\n    # Create a list to store the values of the path\n    values = []\n    # Create a list to store the values of the grid\n    grid_values = []\n    # Create a list to store the values of the grid in the order of the path\n    grid_values_path = []\n    # Create a list to store the values of the grid in the order of the path\n    grid_values_path_reversed = []\n    # Create a list to store the values of the grid in the order of the path\n    grid_values_path_reversed_reversed = []\n    # Create a list to store the values of the grid in the order of the path\n    grid_values_path_reversed_reversed_reversed = []\n    # Create a list to store the values of the grid in the order of the path\n    grid_values_path_reversed_reversed_reversed_reversed = []\n    # Create a list to store the values of the grid in the order of the path\n    grid_values_path_reversed_reversed_reversed_reversed_reversed = []\n    # Create a list to store the values of the grid in the order of the path\n    grid_values_path_reversed_reversed_reversed_reversed_reversed_reversed = []\n    # Create a list to store the values of the grid in the order of the path\n    grid_values_path_reversed_reversed_reversed_reversed_reversed_reversed_reversed = []\n    # Create a list to store the values of the grid in the order of the path\n    grid_values_path_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = []\n    # Create a list to store the values of the grid in the order of the path\n    grid_values_path_reversed_"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 2]\n    elif n == 3:\n        return [3, 2, 8]\n    elif n % 2 == 0:\n        return [1 + n / 2]\n    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1)]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 0\n    else:\n        return n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(i)\n        elif string[i] == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return True"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([(x+0.5)**2 for x in lst])"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    else:\n        if txt[-1].isalpha() and txt[-1]!= \" \":\n            return True\n        else:\n            return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] <= arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            a = i\n        elif i > 0:\n            b = i\n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif type(a) == int and type(b) == int:\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a) == float and type(b) == float:\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == str:\n        if a > b:\n            return a\n        else:\n            return b"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n    # Write your code here\n    if n % 2 == 0:\n        return False\n    elif n % 4 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/139", "completion": "    def test\\_special\\_factorial\\_of\\_0(self):\n        self.assertEqual(special\\_factorial(0), 1)\n\n    def test\\_special\\_factorial\\_of\\_1(self):\n        self.assertEqual(special\\_factorial(1), 1)\n\n    def test\\_special\\_factorial\\_of\\_2(self):\n        self.assertEqual(special\\_factorial(2), 2)\n\n    def test\\_special\\_factorial\\_of\\_3(self):\n        self.assertEqual(special\\_factorial(3), 6)\n\n    def test\\_special\\_factorial\\_of\\_4(self):\n        self.assertEqual(special\\_factorial(4), 288)"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # Replace all consecutive spaces with -\n    text = text.replace(\"  \", \"-\")\n\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if file_name.count('.')!= 1:\n        return 'No'\n    if file_name.count('0') > 3:\n        return 'No'\n    if file_name.startswith(letters) and file_name.endswith(suffixes):\n        return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            lst[i] = x ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = x ** 3\n    return sum(lst)"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    result = \"\"\n    for word in sentence.split():\n        if word.isalpha() and word.isprime():\n            result += word + \" \"\n    return result.strip()"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    if x == n:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x == n and n == 1:\n        return True\n    elif x =="}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda x: (x, sum(map(int, str(x)))) if x else (x, 0))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for i in nums:\n        if i > 10 and i % 2 == 1 and i % 10 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(n)]\n    return len([i for i in range(n) if (i + 1) % 3 == 0 and (i + 2) % 3 == 0 and (i + 3) % 3 == 0])"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    if planet1 == \"Mercury\" or planet2 == \"Mercury\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    elif planet1 == \"Venus\" or planet2 == \"Venus\":\n        return (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    elif planet1 == \"Earth\" or planet2 == \"Earth\":\n        return (\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    elif planet1 == \"Mars\" or planet2 == \"Mars\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    elif planet1 == \"Jupiter\" or planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\", \"Neptune\")\n    elif planet1 == \"Saturn\" or planet2 == \"Saturn\":\n        return (\"Uranus\", \"Neptune\")\n    elif planet1 == \"Uranus\" or planet2 == \"Uranus\":\n        return (\"Neptune\")\n    else:\n        return (\"\")"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    lst = lst[:]\n    lst.sort(key=lambda x: len(x), reverse=True)\n    lst = [x for x in lst if len(x) % 2 == 0]\n    lst.sort(key=lambda x: x)\n    return lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n % 2 == 0:\n        return y\n    elif n % 3 == 0:\n        return x\n    else:\n        return n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\n    if not lst:\n        return 0\n    return sum([x**2 for x in lst if x % 2 == 1])"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strongest_extension = None\n    for extension in extensions:\n        strength = len(extension.upper()) - len(extension.lower())\n        if strength > 0:\n            strongest_extension = extension\n            break\n    if strongest_extension is None:\n        raise ValueError(\"No strongest extension found\")\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": ""}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    count = 0\n    for i in range(0, len(num)):\n        if num[i] % 2 == 0:\n            count += 1\n    return (count, len(num) - count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        'M': 1000,\n        'D': 500,\n        'C': 100,\n        'L': 50,\n        'X': 10,\n        'V': 5,\n        'I': 1\n    }\n    roman_numerals_in_reverse = {v: k for k, v in roman_numerals.items()}\n    roman_numeral = ''\n    while number > 0:\n        number, remainder = divmod(number, roman_numerals[roman_numerals_in_reverse[number]])\n        roman_numeral = roman_numerals_in_reverse[number] + roman_numeral\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if a == b and b == c:\n        return True\n    elif a == b and a == c:\n        return True\n    elif a == c and b == c:\n        return True\n    elif a == c and a == b:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    # Write your code here\n    # Return the word with maximum number of unique characters.\n    # If multiple strings have maximum number of unique\n    # characters, return the one which comes first in lexicographical order.\n    #\n    # Example:\n    #\n    # find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    # find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    # find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # TODO: Implement the function\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO: Add the code here\n    # TODO"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if s[0] == 'a' or s[0] == 'A':\n        s = s[::-1]\n    elif s[0] == 'b' or s[0] == 'B':\n        s = s[::-1]\n    elif s[0] == 'c' or s[0] == 'C':\n        s = s[::-1]\n    elif s[0] == 'd' or s[0] == 'D':\n        s = s[::-1]\n    elif s[0] == 'e' or s[0] == 'E':\n        s = s[::-1]\n    elif s[0] == 'f' or s[0] == 'F':\n        s = s[::-1]\n    elif s[0] == 'g' or s[0] == 'G':\n        s = s[::-1]\n    elif s[0] == 'h' or s[0] == 'H':\n        s = s[::-1]\n    elif s[0] == 'i' or s[0] == 'I':\n        s = s[::-1]\n    elif s[0] == 'j' or s[0] == 'J':\n        s = s[::-1]\n    elif s[0] == 'k' or s[0] == 'K':\n        s = s[::-1]\n    elif s[0] == 'l' or s[0] == 'L':\n        s = s[::-1]\n    elif s[0] =='m' or s[0] == 'M':\n        s = s[::-1]\n    elif s[0] == 'n' or s[0] == 'N':\n        s = s[::-1]\n    elif s[0] == 'o' or s[0] == 'O':\n        s = s[::-1]\n    elif s[0] == 'p' or s[0] == 'P':\n        s = s[::-1]\n    elif s[0] == 'q' or s[0] == '"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": ""}
