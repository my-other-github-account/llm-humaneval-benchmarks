{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than given threshold.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    # split the string by all possible combinations of spaces and parentheses\n    paren_groups = re.split(r'(?<=\\S)(?=\\S)|(?<=\\S)|(?=\\S)|', paren_string)\n    \n    # create a list to store the separated groups\n    separated_groups = []\n    \n    # iterate over the list of paren_groups and separate them\n    for i in range(len(paren_groups)):\n        if i == 0:\n            # if the first group is not empty, add it to the list\n            separated_groups.append(paren_groups[i])\n        else:\n            # if the first group is empty, remove it from the list\n            del separated_groups[0]\n            \n            # check if the next group is balanced\n            if len(paren_groups[i]) % 2!= 0:\n                # if not, add the next group to the list\n                separated_groups.append(paren_groups[i])\n            else:\n                # if yes, remove the next group from the list\n                del separated_groups[0]\n    \n    # return the list of separated groups\n    return separated_groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = math.floor(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    # Initialize the account balance to zero\n    balance = 0\n    \n    # Iterate through the operations list\n    for operation in operations:\n        # If the operation is a deposit, add the amount to the balance\n        if operation > 0:\n            balance += operation\n        # If the operation is a withdrawal, subtract the amount from the balance\n        elif operation < 0:\n            balance -= operation\n        # If the operation is neither a deposit nor a withdrawal, return False\n        else:\n            return False\n    \n    # If the balance is still positive after all operations, return False\n    if balance > 0:\n        return False\n    # Otherwise, return True\n    return True"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum([abs(x - mean) for x in numbers]) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    return [num if i == 0 or i == len(numbers)-1 else num + delimeter for i, num in enumerate(numbers)]\n"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    :param paren_string: str\n    :return: List[int]\n    \"\"\"\n    # split the string by spaces\n    paren_list = paren_string.split()\n    \n    # create a list to store the result\n    result = []\n    \n    # iterate over the list of strings\n    for paren in paren_list:\n        # check if the string is an opening parenthesis\n        if paren == '(':\n            # if yes, add 1 to the result\n            result.append(result[-1] + 1)\n        # check if the string is a closing parenthesis\n        elif paren == ')':\n            # if yes, subtract 1 from the result\n            result.append(result[-1] - 1)\n        # if the string is an empty string, add 0 to the result\n        elif paren == '':\n            result.append(0)\n    \n    # return the result\n    return result"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \n    Args:\n        strings (List[str]): List of strings\n        substring (str): Substring to filter for\n    \n    Returns:\n        List[str]: List of strings that contain the given substring\n    \n    Example:\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), product(numbers))"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    for i in range(len(numbers)):\n        max_num = max(numbers[i], max(numbers[:i] + [numbers[j] for j in range(i)]))\n        max_list.append(max_num)\n    return max_list"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    # Empty string is a palindrome\n    if string == '':\n        return string\n    \n    # Find the longest palindromic suffix\n    longest_suffix_len = 0\n    longest_suffix = ''\n    for i in range(len(string) - longest_suffix_len, -1, -1):\n        suffix = string[i:i+1]\n        if suffix == suffix[::-1]:\n            longest_suffix = suffix\n            longest_suffix_len = len(suffix)\n    \n    # Append the reverse of a prefix that comes before the palindromic suffix\n    prefix_len = len(string) - longest_suffix_len\n    prefix = string[:prefix_len]\n    if prefix == prefix[::-1]:\n        return prefix + longest_suffix[::-1]\n    else:\n        return ''"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    a = '0' + a\n    b = '0' + b\n    result = ''\n    for i in range(min(len(a), len(b))):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    longest_string = ''\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string if len(strings) > 0 else None"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return a greatest common divisor of two integers a and b\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    return greatest_common_divisor(a, b - a)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list of all prefixes from shortest to longest of the input string\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[i])\n        if i < len(string) - 1:\n            prefixes.extend(all_prefixes(string[i+1:]))\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return''.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    for char in string:\n        distinct_chars.add(char.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = []\n    current_note = 0\n    \n    for char in music_string:\n        if char == 'o':\n            beats.append(4)\n        elif char == '|':\n            if current_note == 0:\n                beats.append(2)\n            else:\n                beats.append(1)\n            current_note = (current_note + 1) % 4\n        else:\n            beats.append(1)\n    \n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    index = 0\n    while index!= -1:\n        index = string.find(substring, index)\n        if index!= -1:\n            count += 1\n            index += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    # split the input string into a list of individual numbers\n    numbers_list = list(map(int, numbers.split()))\n    \n    # sort the list of numbers in ascending order\n    numbers_list.sort()\n    \n    # join the sorted list of numbers back into a string\n    return ''.join(str(num) for num in numbers_list)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_distance = float('inf')\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    num_range = max_num - min_num\n    for num in numbers:\n        num = (num - min_num) / num_range\n        yield num"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    for i in range(1, n + 1):\n        if n % i == 0 and i < n:\n            return i\n    return n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    prime_factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            prime_factors.append(i)\n    if n > 1:\n        prime_factors.append(n)\n    return prime_factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(set(numbers))"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\"Concatenate list of strings into a single string\n    \n    Args:\n        strings (List[str]): List of strings\n    \n    Returns:\n        str: Concatenated string\n    \n    Example:\n        >>> concatenate([])\n        ''\n        >>> concatenate(['a', 'b', 'c'])\n        'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \n    Args:\n        strings (List[str]): The list of strings to filter.\n        prefix (str): The prefix to filter for.\n    \n    Returns:\n        List[str]: The filtered list of strings.\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num >= 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    \n    Args:\n        n (int): A number to check for primality.\n        \n    Returns:\n        bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2!= 0 or max(abs(coeff) for coeff in xs) == 0:\n        return None\n    elif len(xs) % 2 == 0:\n        return round(poly([-coeff for coeff in xs]), 2)\n    else:\n        return round(poly([-coeff * 2 for coeff in xs]), 2)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l.sort(key=lambda x: x % 3)\n    return l"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n):\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(i)"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    l.sort()\n    return l"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n):\n    if n <= 1:\n        return n\n    elif n <= 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        a = 0\n        b = 1\n        while b <= n:\n            if n % b == 0:\n                a = b\n                break\n            b += 1\n        fib = [a, b]\n        for i in range(2, n+1):\n            fib.append(a + b)\n            a = b\n            b = fib[i-1]\n        for i in range(2, n):\n            if i in [2, 3]:\n                continue\n            if fib[i] > n:\n                break\n            if fib[i] % n == 0:\n                return fib[i]\n            if fib[i] > n / 2:\n                return fib[i]\n            if fib[i] > n / 3:\n                return fib[i]\n            if fib[i] > n / 4:\n                return fib[i]\n            if fib[i] > n / 5:\n                return fib[i]\n            if fib[i] > n / 6:\n                return fib[i]\n            if fib[i] > n / 7:\n                return fib[i]\n            if fib[i] > n / 8:\n                return fib[i]\n            if fib[i] > n / 9:\n                return fib[i]\n            if fib[i] > n / 10:\n                return fib[i]\n            if fib[i] > n / 11:\n                return fib[i]\n            if fib[i] > n / 12:\n                return fib[i]\n            if fib[i] > n / 13:\n                return fib[i]\n            if fib[i] > n / 14:\n                return fib[i]\n            if fib[i] > n / 15:\n                return fib[i]\n            if fib[i] > n / 16:\n                return fib[i]"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move in the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n    This function outputs the number of such collisions.\n    \"\"\"\n    pass"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    # convert number x to a string\n    x_str = str(x)\n    \n    # loop through each character in the string\n    for i in range(len(x_str)):\n        # get the current character\n        char = x_str[i]\n        \n        # get the current base value\n        base_val = base\n        \n        # check if the character is a digit\n        if char.isdigit():\n            # add the current character to the result string\n            result_str = result_str + char\n            \n            # subtract the current base value from the result string\n            result_str = result_str - base_val\n        \n        # if the character is not a digit, add the current base value to the result string\n        else:\n            result_str = result_str + base_val\n    \n    # return the result string\n    return result_str"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    a = 0\n    b = 1\n    c = 2\n    d = 0\n    \n    if n < 4:\n        return n\n    \n    for i in range(3, n):\n        c, d = a, b\n        a, b = b, c + b\n        \n    return c + d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n    else:\n        return l[len(l)//2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return (n ** p - n) % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    Returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    if len(s0)!= len(s1):\n        return False\n    s0_set = set(s0)\n    s1_set = set(s1)\n    return len(s0_set) == len(s1_set) and all(c in s0_set for c in s1_set)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    Return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    if brackets.count(\"<\")!= brackets.count(\">\"):\n        return False\n    for bracket in \"<>\", \"<\", \">\":\n        count = brackets.count(bracket)\n        if count > 1 and count!= 2:\n            return False\n    return True"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i+1] <= l[i]:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    \n    Args:\n        l1 (list): First list.\n        l2 (list): Second list.\n    \n    Returns:\n        list: Common elements sorted in ascending order.\n    \n    Raises:\n        ValueError: If lists have no common elements.\n    \n    Examples:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n    \"\"\"\n    l1_set = set(l1)\n    l2_set = set(l2)\n    common_set = l1_set.intersection(l2_set)\n    if not common_set:\n        raise ValueError(\"Lists have no common elements.\")\n    return sorted(list(common_set))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \n    Args:\n        n (int): The number to find the prime factor of.\n        \n    Returns:\n        int: The largest prime factor of n.\n    \"\"\"\n    # Check if n is a prime number\n    if n > 1 and n!= n/2 and n!= 2*n/2:\n        # Check if n is divisible by any prime number less than or equal to the square root of n\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return i\n        # If n is not divisible by any prime number less than or equal to the square root of n, return n\n        return n\n    else:\n        # If n is a prime number or not a prime number, return 1\n        return 1"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets):\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop()!= '(':\n                return False\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    n = len(xs)\n    derivative_list = []\n    for i in range(n):\n        derivative_list.append(n - i)\n    return derivative_list"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n < 3:\n        return n\n    a = 0\n    b = 1\n    for i in range(2, n+1):\n        c = a + b\n        a = b\n        b = c\n    return b"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    y_as_vowel = 'y' in s and s.endswith('y')\n    vowels_count = sum(1 for c in s if c in vowels)\n    if y_as_vowel:\n        vowels_count += sum(1 for c in s if c in vowels and c!= 'y')\n    return vowels_count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    # check if shift is greater than the number of digits\n    if shift > len(str(x)):\n        # reverse the digits\n        x = str(x) + str(x)[-1]\n    # shift the digits right by shift\n    else:\n        x = str(x) + str(x)[shift:]\n    # return the result as a string\n    return x"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"\n    Task: Write a function that takes a string as input and returns the sum of the upper characters only's ASCII codes.\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples, oranges = 0, 0\n    for i in s:\n        if i.upper() == 'A':\n            apples += 1\n        elif i.upper() == 'O':\n            oranges += 1\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    Pluck the smallest even value from an array and return it in a list with its index.\n    If there are no even values or the given array is empty, return []\n    \"\"\"\n    even_nodes = []\n    for node in arr:\n        if node % 2 == 0 and node >= 0:\n            even_nodes.append((node, node))\n    if len(even_nodes) == 0:\n        return []\n    smallest_even_node = min(even_nodes, key=lambda x: x[0])\n    return [smallest_even_node[0], smallest_even_node[1]]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_val = 0\n    max_freq = 0\n    for val in lst:\n        if val > 0 and lst.count(val) >= val:\n            if max_val == 0 or max_freq < lst.count(val):\n                max_val = val\n                max_freq = lst.count(val)\n    return max_val"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    \n    min_val = min(lst)\n    lst.remove(min_val)\n    lst.append(max(lst))\n    \n    return strange_sort_list(lst) + [min_val] + strange_sort_list(lst)"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if (a + b <= c) and (b + c <= a) and (c + a <= b):\n        return (a * b * c) / 2\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # check if the list is balanced\n    if q == q[::-1]:\n        # check if the sum of the elements is less than or equal to the maximum possible weight\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                return 1\n    return 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    for i in range(2, a):\n        if a % i == 0:\n            break\n    else:\n        for j in range(2, a/i + 1):\n            if a % (i*j) == 0:\n                break\n        else:\n            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return n**int(x) == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return a % 3 == 0"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for char in num:\n        if char.isalpha and char.isupper():\n            if char.hexdiget() in [2, 3, 5, 7, 11, 13]:\n                count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n    binary = \"db\" + binary + \"db\"\n    return binary"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = list(grades)\n    letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    for grade in grades:\n        if grade > 4.0:\n            letter_grades.insert(0, 'A+')\n        elif grade > 3.7:\n            letter_grades.insert(0, 'A')\n        elif grade > 3.3:\n            letter_grades.insert(0, 'A-')\n        elif grade > 3.0:\n            letter_grades.insert(0, 'B+')\n        elif grade > 2.7:\n            letter_grades.insert(0, 'B')\n        elif grade > 2.3:\n            letter_grades.insert"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"\n    Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    if len(string) <= 1:\n        return False\n    for i in range(2, len(string)):\n        if string[i] == string[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(10):\n        if i == 1:\n            count += int(str(i) + str(n))\n        elif i == 9 and str(i) + str(n) == '10':\n            count += int(str(i) + str(n))\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary = bin(N)\n    total_sum = int(binary, 2)\n    return str(total_sum)"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_indices = [i for i in range(len(lst)) if i % 2 == 1]\n    even_elements = [lst[i] for i in even_indices]\n    return sum(even_elements)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    # split the string into words\n    words = s.split()\n    # create a new string with the ordered words\n    ordered_words = ''\n    for word in words:\n        # sort the characters in the word\n        sorted_word = ''.join(sorted(word))\n        # add the sorted word to the new string\n        ordered_words += sorted_word\n    # return the new string\n    return ordered_words"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    lst.sort(key=lambda x: (x[0], x[1]))\n    lst.sort(key=lambda x: (x[0], -x[1]))\n    return [(row, col) for row, col in lst[:x]]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            encrypted += chr((ord(char.lower()) - 97 + 2) % 26 + 97)\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    lst.sort()\n    return lst[1] if len(lst) > 1 else None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    for i in range(len(S)):\n        if S[i] == '.':\n            boredoms += 1\n        elif S[i] == '?':\n            boredoms += 1\n        elif S[i] == '!':\n            boredoms += 1\n        elif S[i] == 'I':\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x == (y + z) and x.isdigit() and y.isdigit() and z.isdigit():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(message)):\n        if message[i] in vowels:\n            if message[i] == 'a':\n                message = message[:i] + chr(ord(message[i]) - 2) + message[i+1:]\n            elif message[i] == 'e':\n                message = message[:i] + chr(ord(message[i]) - 2) + message[i+1:]\n            elif message[i] == 'i':\n                message = message[:i] + chr(ord(message[i]) - 2) + message[i+1:]\n            elif message[i] == 'o':\n                message = message[:i] + chr(ord(message[i]) - 2) + message[i+1:]\n            elif message[i] == 'u':\n                message = message[:i] + chr(ord(message[i]) - 2) + message[i+1:]\n        elif message[i] not in '1234567890':\n            message = message[:i] + chr(ord(message[i]) + 1) + message[i+1:]\n    return message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    largest_prime = 0\n    sum_of_digits = 0\n    for num in lst:\n        if num > largest_prime:\n            largest_prime = num\n        if num > 0 and is_prime(num):\n            sum_of_digits += sum(int(d) for d in str(num))\n    return sum_of_digits\n\n\ndef is_prime(num):\n    \"\"\"\n    Checks if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    elif len(dict) == 1 and all(key.isupper() for key in dict):\n        return True\n    elif len(dict) == 1 and all(key.islower() for key in dict):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14, -15) should return 20.\n    \"\"\"\n    if a < 0 and b < 0:\n        return 0\n    elif a == 0 and b == 0:\n        return 0\n    elif a == 0 or b == 0:\n        return 0\n    elif a == 1 or b == 1:\n        return 1\n    elif a == 2 or b == 2:\n        return 4\n    elif a == 3 or b == 3:\n        return 9\n    elif a == 4 or b == 4:\n        return 16\n    elif a == 5 or b == 5:\n        return 25\n    elif a == 6 or b == 6:\n        return 36\n    elif a == 7 or b == 7:\n        return 49\n    elif a == 8 or b == 8:\n        return 64\n    elif a == 9 or b == 9:\n        return 81\n    elif a == 10 or b == 10:\n        return 100\n    else:\n        return 0"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].upper() in 'AEIOU' and i % 2 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    # convert the value to float\n    value = float(value)\n\n    # find the integer part\n    integer_part = math.floor(value)\n\n    # find the decimal part\n    decimal_part = value - integer_part\n\n    # find the closest integer to the decimal part\n    closest_decimal = abs(decimal_part)\n    closest_integer = round(closest_decimal + 0.5)\n\n    # return the integer\n    return closest_integer"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        next_num = n + 1\n    else:\n        next_num = (n + 1) // 2\n    pile = [n]\n    for i in range(n):\n        pile.append(next_num)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(\", \")"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    for num in range(x, y+1):\n        if num % 2 == 0 and num in range(x, y+1):\n            return num\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary = bin(rounded_avg)[2:]\n    return binary"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n    \n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = sorted(x)\n    return [i for i in x if sum(int(digit) for digit in str(i)) % 2!= 0]"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [int(arr[0])]\n    else:\n        arr.sort()\n        rev_arr = arr[::-1]\n        result = []\n        for i in range(len(arr)):\n            if i >= 1 and i <= 9:\n                result.append(str(i))\n            else:\n                result.append('')\n        return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_palindrome = 0\n    odd_palindrome = 0\n    for i in range(1, n+1):\n        if i == int(str(i)[:-1] + str(i)[-1] + str(i[:-1])):\n            even_palindrome += 1\n        else:\n            odd_palindrome += 1\n    return (even_palindrome, odd_palindrome)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n            digits = abs(num)\n        else:\n            digits = sum(int(d) for d in str(num))\n        if digits > 0:\n            return count_nums.count(1)\n        elif num == 0:\n            return count_nums.count(0)\n    return count_nums.count(0)"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[1]:\n        arr[0], arr[1] = arr[1], arr[0]\n        return move_one_ball(arr)\n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    if len(lst1) < 2:\n        return \"Error: List 1 must have at least 2 elements.\"\n    if len(lst2) < 2:\n        return \"Error: List 2 must have at least 2 elements.\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0 and lst2[i] % 2!= 0:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n            if lst1[i] % 2!= 0:\n                return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letters = test.lower().split()\n    counts = {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    return dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    \"\"\"\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for c in s:\n        if c not in c:\n            result += c\n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    output = []\n    for i, s in enumerate(lst):\n        if len(set(int(d) for d in s if d.isdigit() and int(d) % 2!= 0)) > 0:\n            output.append(\"the number of odd elements in the string {} of the input.\".format(i))\n    return output"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        min_sum = min(min_sum, sum(nums[i:]))\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    \n    # check if grid is empty\n    if not grid:\n        return 0\n    \n    # initialize variables\n    max_bucket_fill = 0\n    row_with_max_bucket_fill = None\n    max_bucket_fill_row = None\n    \n    # iterate through rows\n    for row in grid:\n        # iterate through columns\n        for col in row:\n            # check if column is 1\n            if col == 1:\n                # check if bucket is full\n                if max_bucket_fill >= capacity:\n                    # update max bucket fill and row\n                    max_bucket_fill = 0\n                    row_with_max_bucket_fill = row\n                    max_bucket_fill_row = row\n                # update bucket fill\n                max_bucket_fill += 1\n    \n    # return max bucket fill\n    return max_bucket_fill"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    Sort an array of non-negative integers according to number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1') if x >= 0 else bin(abs(x)).count('1'), x) if isinstance(x, int) else arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(set(word.lower().replace(' ', '')) - set(string.punctuation)) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 2):\n        if word[i] and word[i+1] in vowels:\n            return vowels.index(word[i+1])\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    for i in range(len(lst)-1):\n        if lst[i] == '(' and lst[i+1] == ')':\n            return 'Yes'\n        elif lst[i] == ')' and lst[i+1] == '(':\n            return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # return the top k elements\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[::2] + [i for i in lst[::2] if i % 2!= 0])"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize sum\n    sum_ = 0\n\n    # Initialize index\n    i = 0\n\n    # Loop through k elements\n    while i < k:\n        # Add current element to sum\n        sum_ += arr[i]\n        # Increment index\n        i += 1\n\n    # Return sum\n    return sum_"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n    \n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n    \n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    collatz_sequence = [n]\n    while n % 2 == 0:\n        collatz_sequence.append(n // 2)\n        n = n // 2\n    while n % 2!= 0:\n        collatz_sequence.append(n)\n        n = n * 3 + 1\n    return sorted(collatz_sequence)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Check if the date string is not empty\n    if len(date) == 0:\n        return False\n    \n    # Check if the date is in the correct format\n    if not date.startswith('0'):\n        return False\n    if not date.endswith('0000'):\n        return False\n    if not date.count('-') == 1:\n        return False\n    if not date.count('/') == 1:\n        return False\n    \n    # Extract the month, day, and year from the date string\n    month, day, year = date.split('-')\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n    "}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return len(set(txt.lower())) % 2 == 0"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    return sorted(lst) == lst"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    \"\"\"\n    Determine whether the length of intersection of two intervals is a prime number.\n\n    Args:\n        interval1 (tuple): First interval as a pair of integers.\n        interval2 (tuple): Second interval as a pair of integers.\n\n    Returns:\n        str: \"YES\" if the length of intersection is a prime number, \"NO\" otherwise.\n    \"\"\"\n    # Check if the two intervals intersect\n    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    \n    # Find the intersection of the two intervals\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n    intersection = (intersection_start, intersection_end)\n    \n    # Check if the length of intersection is a prime number\n    if len(intersection) <= 1:\n        return \"NO\"\n    elif len(intersection) > 2:\n        return \"NO\"\n    else:\n        for i in range(2, len(intersection)):\n            if intersection[i] - intersection[i-1]!= 1:\n                return \"NO\"\n        return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    arr_signs = [int(x * 1) * int(x * -1) for x in arr]\n    return sum(arr_signs)"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    lst = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] in lst:\n                continue\n            lst.append(grid[i][j])\n            if len(lst) == k:\n                return lst\n    return None"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [1 + n / 2]\n    else:\n        return [1 + tri(n - 1) + tri(n - 2) + tri(n + 1)]\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n % 2 == 0:\n        return 0\n    else:\n        return n * (1 - int(n / 10))"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n            elif len(stack) == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(round(x**2) for x in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    words = txt.split()\n    return words[-1][-1].isalpha() and not words[-1][-1].isspace()"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i+1] <= arr[i]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    lst = sorted(lst)\n    if not lst:\n        return None, None\n    a = max(lst[:len(lst)//2])\n    b = min(lst[len(lst)//2:])\n    return a, b"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        if a.endswith(',') and b.endswith(','):\n            a = a.rstrip(',').rstrip('0').strip()\n            b = b.rstrip(',').rstrip('0').strip()\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        elif a.endswith('.' and b.endswith('.')):\n            a = a.rstrip('0').strip()\n            b = b.rstrip('0').strip()\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        else:\n            return None\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n    \n    Args:\n        n (int): The number to check.\n        \n    Returns:\n        bool: True if n can be written as the sum of exactly 4 positive even numbers, False otherwise.\n    \"\"\"\n    return sum(2**i for i in range(5)) == n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n    \n    For example:\n    >>> special_factorial(4)\n    288\n    \n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        return None\n    else:\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result * n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return 'No'\n    if '.'.join(file_name.split('.'))!= file_name:\n        return 'No'\n    if file_name[0].isalpha() and file_name[2] in ['txt', 'exe', 'dll']:\n        return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    sum_sqr = 0\n    sum_cub = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            lst[i] = lst[i]**3\n        elif i % 3!= 0 and i % 4 == 0:\n            lst[i] = lst[i]**4\n        elif i % 3!= 0 and i % 4!= 0:\n            lst[i] = lst[i]\n        \n        if lst[i] > 0:\n            sum_sqr += lst[i]**2\n            sum_cub += lst[i]**3\n    \n    return sum_sqr + sum_cub"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n        \n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n        \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    prime_words = []\n    for word in sentence.split():\n        if len(word) > 0 and len(set(word)) == len(word):\n            prime_words.append(word)\n    return''.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    numerator, denominator = x.split('/')\n    if int(numerator) % int(denominator) == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    nums.sort(key=lambda x: sum(int(d) for d in str(x)))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    result = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            result += 1\n    return result"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i*i-i+1 for i in range(n)]\n    return sum(1 for i in range(n) for j in range(i+1, n) for k in range(j+1, n) if a[i] + a[j] + a[k] % 3 == 0)"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    if planet1 == \"Mercury\" and planet2 == \"Neptune\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Earth\" and planet2 == \"Mercury\":\n        return (\"Venus\")\n    elif planet1 == \"Mercury\" and planet2 == \"Jupiter\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Mercury\" and planet2 == \"Saturn\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Uranus\", \"Neptune\")\n    elif planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Neptune\")\n    elif planet1 == \"Mercury\" and planet2 == \"Neptune\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Venus\" and planet2 == \"Mercury\":\n        return (\"Earth\")\n    elif planet1 == \"Venus\" and planet2 == \"Jupiter\":\n        return (\"Mars\")\n    elif planet1 == \"Venus\" and planet2 == \"Saturn\":\n        return (\"Jupiter\", \"Uranus\")\n    elif planet1 == \"Venus\" and planet2 == \"Uranus\":\n        return (\"Jupiter\", \"Neptune\")\n    elif planet1 == \"Venus\" and planet2 == \"Neptune\":\n        return (\"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Earth\" and planet2 == \"Mercury\":\n        return (\"Venus\")\n    elif planet"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # remove odd length strings from the list\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # sort the list by length of each word\n    lst.sort(key=len)\n    \n    # remove duplicates\n    lst = list(set(lst))\n    \n    # return the sorted list\n    return lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n % 2 == 0:\n        return y\n    elif n > 2 and n % 2!= 0:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return y\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(abs(x**2) for x in lst if x.is_integer and x.is_odd())"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"Determine if a person correctly guessed the results of a number of matches.\"\"\"\n    # compare each element in the game and guess arrays\n    for i in range(len(game)):\n        # if the guess is greater than the game score, add the absolute difference to the result array\n        if game[i] < guess[i]:\n            result[i] = abs(guess[i] - game[i])\n        # if the guess is less than the game score, add 0 to the result array\n        else:\n            result[i] = 0\n    # return the result array\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    Find the strongest extension for a given class and return it in the format:\n    ClassName.StrongestExtensionName\n    \"\"\"\n    # Calculate the strength of each extension\n    strengths = []\n    for extension in extensions:\n        cap = sum(1 for letter in extension if letter.isupper())\n        sm = sum(1 for letter in extension if letter.islower())\n        strength = cap - sm\n        strengths.append((extension, strength))\n    \n    # Find the strongest extension\n    strongest_extension = None\n    for extension, strength in sorted(strengths, key=lambda x: x[1], reverse=True):\n        if strongest_extension is None or strength > len(class_name):\n            strongest_extension = extension\n    \n    # Return the strongest extension\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    \"\"\"\n    if len(a) < len(b):\n        a, b = b, a\n    for i in range(len(b)):\n        if b[i] in a:\n            return True\n        if i > 0 and b[i-1] in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        even += digit if digit % 2 == 0 else 0\n        odd += digit if digit % 2!= 0 else 0\n        num //= 10\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xli',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cdi',\n        1000:'m'\n    }\n    \n    result = ''\n    for i in range(number, 0, -1):\n        if i in roman_numerals:\n            result += roman_numerals[i]\n        else:\n            result +='m'\n    \n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if number >= need and remaining >= need:\n        return [number + remaining, remaining]\n    elif remaining >= need:\n        return [number + remaining, 0]\n    else:\n        return [number, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n    \n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n    \n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    # validate input\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"Invalid input: length of operator list should be equal to length of operand list minus one\")\n    if not all(isinstance(op, str) for op in operator):\n        raise ValueError(\"Invalid input: operator list should contain only strings\")\n    if not all(isinstance(opd, int) for opd in operand):\n        raise ValueError(\"Invalid input: operand list should contain only non-negative integers\")\n    \n    # build expression\n    expression = []\n    for i in range(len(operator)):\n        expression.append(operator[i] + str(operand[i]))\n    \n    # evaluate expression\n    result = eval(expression[0] + expression[1] + expression[2])\n    \n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                result += char.lower()\n            elif char.islower():\n                result += char.upper()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    :param text: str\n    :return: str or None\n    \"\"\"\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    even_digits = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits"}
