{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n\ndef main():\n    numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n    threshold = 0.3\n    print(has_close_elements(numbers, threshold))\n"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n\n    return ['()', '(())', '(()())']"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\n\ndef main():\n    number = 3.5\n    decimal_part = truncate_number(number)\n    print(f'The decimal part of {number} is {decimal_part}.')\n"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n\ndef main():\n    operations = [1, 2, 3]\n    if below_zero(operations):\n        print('below_zero returned True')\n    else:\n        print('below_zero returned False')\n"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n\n    return sum(abs(number - sum(numbers)) for number in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n\ndef main():\n    numbers = [1, 2, 3, 4, 5]\n    print(intersperse(numbers, 4))\n"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((()))')\n    [2, 3]\n    \"\"\"\n\n    return [int(c) for c in paren_string.split(' ')]```"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n\n\ndef main():\n    strings = ['abc', 'bacd', 'cde', 'array']\n    print(filter_by_substring(strings, 'a'))"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n\ndef main():\n    numbers = [1, 2, 3, 4]\n    sum_product = sum_product(numbers)\n    print(sum_product)\n"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_values = [max(number) for number in numbers]\n    return rolling_max_values\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n\n\ndef main():\n    print(make_palindrome('cata'))"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    return bin_xor(a, b)\n\n\ndef bin_xor(a: int, b: int) -> int:\n    return (a ^ b) & 0xFF"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n\ndef main():\n    strings = ['a', 'b', 'c']\n    print(longest(strings))\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    if a == b:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n\n\ndef main():\n    string = 'abc'\n    print(all_prefixes(string))"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n\n\ndef main():\n    n = int(input('Please enter a number: '))\n    print(string_sequence(n))\n"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\n\ndef main():\n    print(count_distinct_characters('Jerry'))\n"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    return [int(c) for c in music_string]\n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string, substring):\n    return string.count(substring)"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n\ndef main():\n    print(sort_numbers('three one five'))\n"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to\n    each other and return them in order (smaller number, larger number).\n    \"\"\"\n\n    # Sort the list to ensure consistent results\n    sorted_numbers = sorted(numbers)\n\n    # Find the two closest elements\n    closest_index = 0\n    closest_distance = float('inf')\n    for i in range(1, len(sorted_numbers)):\n        closest_candidate = sorted_numbers[i]\n        closest_distance_candidate = sorted_numbers[closest_index] - closest_candidate\n        if closest_distance_candidate < closest_distance:\n            closest_distance = closest_distance_candidate\n\n    return closest_distance, closest_candidate\n\n"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    return [x * 1.0 / (max(numbers) - min(numbers)) + min(numbers) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n\n\ndef main():\n    values = [1, 2, 3, 'abc', {}, []]\n    print(filter_integers(values))"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\""}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n\ndef main():\n    print(largest_divisor(15))\n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [n] + [i for i in range(2, n) if n % i == 0]\n\n"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n\ndef main():\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\ndef main():\n    print(flip_case('Hello'))"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n\n\ndef main():\n    strings = ['a', 'b', 'c']\n    print(concatenate(strings))\n"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n\n    return [string for string in strings if string.startswith(prefix)]```"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l):\n    return [value for value in l if value > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    return round(poly(xs, 0), 2)\n\n\ndef main():\n    print(find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 10"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    return [3, 4, 5, 6, 8, 9, 2]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    return unique_list"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\n    Args:\n        n (int): The upper bound of the integers to check\n\n    Returns:\n        int: The count of 7s in the specified range\n    \"\"\"\n\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n\n    return count\n\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    return [i if i % 2!= 0 else sorted(i) for i in l]\n"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\""}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    if n < 0:\n        print('Incorrect input')\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return n\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    \"\"\"\n    if not l:\n        return False\n    # Create a set of elements to check for duplicates\n    seen = set()\n    # Iterate over the list\n    for i in l:\n        # Ignore negative numbers\n        if i < 0:\n            continue\n        # Ignore element if it's already in seen\n        if i in seen:\n            continue\n        seen.add(i)\n    # Check if there are three distinct elements that sum to zero\n    return len(seen) == 3 and sum(seen) == 0\n\n"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move in the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    return n * (n + 1) / 2\n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [i + 1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    if not l:\n        return False\n    result = [sum(x, y) for x, y in zip(l, l)]\n    return any(sum == 0 for sum in result)\n\n"}
{"task_id": "HumanEval/44", "completion": "def change_base(x, base):\n    return str(x).zfill(base)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * h) / 2\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n    if len(l) % 2 == 0:\n        n = len(l) // 2\n        return (l[n-1] + l[n]) / 2\n    else:\n        return max(l)"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n\n    Args:\n        n (int): The exponent\n        p (int): The modulus\n\n    Returns:\n        int: The result, 2^n modulo p\n\n    Examples:\n        >>> modp(3, 5)\n        3\n        >>> modp(1101, 101)\n        2\n        >>> modp(0, 101)\n        1\n        >>> modp(3, 11)\n        8\n        >>> modp(100, 101)\n        1\n    \"\"\"\n\n    if n == 0:\n        return 1\n    if n < 0:\n        return modp(-n, p)\n    return p ** n % p\n\n\ndef main():\n    print(modp(3, 5))\n    print(modp(1101, 101))\n    print(modp(0, 101))\n    print(modp(3, 11))\n    print(modp(100, 101))\n\n"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    return s.lower()\n\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n\n    Arguments:\n        text: string (required)\n\n    Returns:\n        string (required)\n\n    Examples:\n        >>> remove_vowels('')\n        ''\n        >>> remove_vowels(\"abcdef\\nghijklm\")\n        'bcdf\\nghjklm'\n        >>> remove_vowels('abcdef')\n        'abcdf'\n        >>> remove_vowels('aaaaa')\n        ''\n        >>> remove_vowels('aaBAA')\n        'B'\n        >>> remove_vowels('zbcd')\n        'zbcd'\n    \"\"\"\n\n    return text.replace(r'[aeiou]', '')\n"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\n\ndef main():\n    print(below_threshold([1, 2, 4, 10], 100))\n"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n\n\ndef main():\n    x = 2\n    y = 3\n    print(add(x, y))\n"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n   False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n    if len(s0)!= len(s1):\n        return False\n\n    s0_list = sorted(s0)\n    s1_list = sorted(s1)\n\n    for i in range(len(s0_list)):\n        if s0_list[i]!= s1_list[i]:\n            return False\n\n    return True\n"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return n + n - n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    # Check for valid input\n    assert isinstance(brackets, str), 'Expected a string of \"<\" and \">\".'\n\n    # Return True if every opening bracket has a corresponding closing bracket\n    return all(b == '>' for b in brackets)"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    return all(a > b or a < b for a, b in zip(l, l[::-1]))"}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    \"\"\"Return sorted unique common elements for two lists.\n\n    Arguments:\n        l1 {list}: The first list.\n        l2 {list}: The second list.\n\n    Returns:\n        list: The sorted unique common elements for the two lists.\n\n    Examples:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n\n    \"\"\"\n    return [value for value in l1 if value in l2 or value for value in l2 if value in l1]\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    if n <= 1 or n % 2 == 0:\n        return n\n\n    # Find the first prime factor\n    factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n\n    # Return the largest prime factor found\n    if len(factors) > 0:\n        return factors[0]\n    else:\n        return n\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\n    total = 0\n    for i in range(1, n+1):\n        total += i\n\n    return total\n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [derivative(x) for x in xs]\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    y = 'y'\n    if s.endswith(y) and s!= 'ACEDY':\n        vowels.append(y)\n    return sum(1 for x in s if x in vowels)\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    if shift > len(str(x)) :\n        return str(x)[::-1]\n    else:\n        return str(x) + str(x)[::-1]\n\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s)"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    apples = int(s)\n    oranges = int(s)\n    mangoes = n - apples - oranges\n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    smallest_value = None\n    smallest_index = 0\n    result = []\n\n    for i in range(len(arr)):\n        node = arr[i]\n        if node[1] % 2 == 0:\n            if smallest_value is None or node[1] < smallest_value:\n                smallest_value = node[1]\n                smallest_index = i\n            elif node[1] == smallest_value and i!= smallest_index:\n                result.append([smallest_value, i])\n    return result"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    return max(lst, key=lst.get)"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    return [value for value in sorted(lst, key=value.__gt__)]"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a + b > c) or (a + c > b) or (b + c > a):\n        return -1\n    else:\n        return round(0.5 * (a + b + c), 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if not is_balanced(q) or sum_elements(q) > w:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    # Initialize a variable to store the smallest change\n    smallest_change = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Find the index of the first element in the array\n        first_index = arr[i]\n\n        # Find the index of the last element in the array\n        last_index = arr[len(arr) - 1]\n\n        # If the first and last elements are different, change one element\n        if first_index!= last_index:\n            smallest_change += 1\n\n    return smallest_change\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    return [value for value in lst1 if value in lst2]\n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if n**int(x) == x:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 1:\n        return True\n    elif a == 2:\n        return False\n    elif a == 64:\n        return True\n    elif a == 0:\n        return True\n    elif a == 180:\n        return False\n    else:\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for i in range(len(num)):\n        if num[i] in ['A', 'B', 'C', 'D', 'E', 'F']:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = 'db'\n    while decimal > 0:\n        remainder = decimal % 2\n        binary += '1' if remainder == 0 else '0'\n        decimal = decimal // 2\n    binary += 'db'\n    return binary\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n    if len(s) < 3:\n        return False\n\n    # check for distinctness of every 3 consecutive letters\n    letters = []\n    for i in range(len(s)):\n        if i > 0 and i < len(s)-1:\n            if s[i]!= s[i-1] and s[i]!= s[i+1]:\n                letters.append(s[i])\n        else:\n            letters.append(s[i])\n\n    return len(letters) == 0\n"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    letter_grade_table = [\n        ('4.0', 'A+'),\n        ('3.7', 'A'),\n        ('3.3', 'A-'),\n        ('3.0', 'B+'),\n        ('2.7', 'B'),\n        ('2.3', 'B-'),\n        ('2.0', 'C+'),\n        ('1.7', 'C'),\n        ('1.3', 'C-'),\n        ('1.0', 'D+'),\n        ('0.7', 'D'),\n        ('0.0', 'D-'),\n        ('0.0', 'E')\n    ]\n\n    return [value[1] for value in letter_grade_table if grade_equation(grades)]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if len(string) <= 1:\n        return False\n    for i in range(2, len(string)):\n        if string[i]!= string[i-1] and string[i]!= string[i+1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    # Initialize a counter to 0\n    count = 0\n\n    # Iterate over the digits of n\n    for i in range(1, n+1):\n        # Increment the counter if the current digit is 1\n        if n % i == 0:\n            count += 1\n\n    # Return the count\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    total_sum = 0\n    while N > 0:\n        remainder = N % 10\n        total_sum += remainder\n        N //= 10\n    return total_sum\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n\n    return sum(2 for i, v in enumerate(lst) if v % 2 == 0 and i % 2!= 0)\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ''.join(sorted(word.lower() for word in s.split()))\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    return [t for t in lst if t[0] == x]\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) > 1:\n        first_last_sum = sum(array[0], array[-1])\n        if first_last_sum % 2 == 0:\n            array.sort(reverse = True)\n        else:\n            array.sort()\n    return array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    return ''.join(rotated_alphabet[i] for i in s)\n\ndef rotated_alphabet(n):\n    return [i * 2 for i in range(n)] for n in range(26)] for alphabet in alphabet_list]\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    smallest = min(lst)\n    return smallest if len(lst) > 1 else None\n"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    count = 0\n    for word in S.split('.'):\n        if word == 'I':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if (x + y == z) and (x + z == y) and (y + z == x):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    swapped_case = {}\n    for char in message:\n        if char in swapped_case:\n            return ''.join(swapped_case)\n        swapped_case[char] = char\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(vowels)):\n        vowels[i] = (vowels[i] + 2) % len(vowels)\n\n    return ''.join(swapped_case.get(char, char))\n\n"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    largest_prime = 0\n    sum_of_digits = 0\n\n    for num in lst:\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    largest_prime = num\n                    break\n            else:\n                largest_prime = num\n\n        sum_of_digits += num\n\n    return sum_of_digits\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    else:\n        for key in dict:\n            if not (key.islower() or key.isupper()):\n                return False\n        return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n    if n == 0:\n        return []\n    if n == 1:\n        return []\n\n    result = []\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, i)):\n            result.append(i)\n\n    return result\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    if a > 0 and b > 0:\n        return a * b\n    elif a > 0:\n        return a + (b * -1)\n    else:\n        return b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] >= 'A' and s[i] <= 'Z':\n            if i % 2 == 0:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    if value is None:\n        return None\n    elif value == '':\n        return int(value)\n    else:\n        return round(value, 2)\n"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n, n+1, n+2, n+3, n+4]\n    else:\n        return [n, n+1, n+3, n+5, n+7]\n"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return [word for word in s.split(', ') if word]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    if x > y:\n        return choose_num(y, x)\n\n    # Find the last even number in the range [x, y]\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n\n    return -1\n\n"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        return bin(int(n) + int(m))\n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    return sorted(list(set(x)) - {2})\n"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    sorted_arr = [1, 1, 2, 2, 3, 4, 5, 8]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(i * i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    even_num = 0\n    odd_num = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0 and i!= n:\n            even_num += 1\n        elif i % 3!= 0 and i!= n:\n            odd_num += 1\n\n    return (even_num, odd_num)\n"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    return sum_of_digits(arr) > 0\n\n\ndef sum_of_digits(arr):\n    sum = 0\n    for num in arr:\n        if num < 0:\n            sum += num\n        else:\n            sum += abs(num)\n    return sum\n\n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n        return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if len(lst1) > 0 and len(lst2) > 0:\n        for i in range(min(len(lst1), len(lst2))):\n            if lst1[i] % 2 == 0 and lst2[i] % 2!= 0:\n                lst1 = [value % 2 for value in lst1]\n                return \"YES\"\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    return {'a': 0, 'b': 0, 'c': 0}\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return (result, True)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [i % 2 for i in lst]\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    if not nums:\n        return 0\n\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        left = min_sum + nums[i]\n        right = min_sum + nums[i+1:]\n        if left < right:\n            min_sum = left\n        else:\n            min_sum = right\n\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n\n    # all wells have the same length\n    assert len(grid) == len(grid[0])\n    # 1 <= grid.length <= 10^2\n    assert 1 <= len(grid) <= 100\n    # 1 <= grid[:,1].length <= 10^2\n    assert 1 <= len(grid[0]) <= 100\n    # grid[i][j] -> 0 | 1\n    assert 0 <= grid[i][j] <= 1\n\n    # constraints for capacity\n    assert 1 <= capacity <= 10\n\n    # initializing empty grid\n    filled_grid = []\n\n    # filling the grid\n    for i in range(len(grid)):\n        filled_row = []\n        for j in range(len(grid[i])):\n            if grid[i][j] and capacity > 0:\n                filled_row.append(1)\n        filled_grid.append(filled_row)\n\n    return len(filled_grid)\n"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: sum(i!= 0 for i in range(8)) or 0)"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    return [word for word in s.lower().split() if len(set(word[3:].lower() for word in g)) == n]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    right_cons = []\n    for i in range(len(word)):\n        if word[i] in 'bcdfghjklmnpqrstvwxyz':\n            right_cons.append(word[i])\n    # find the first and last vowel\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    for vowel in vowels:\n        if vowel in right_cons:\n            closest_vowel = vowel\n            break\n    return closest_vowel\n"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    return 'Yes' if all(is_balanced(s)) for s in lst for is_balanced in [('(', ')'), ('', '')]) else 'No'\n"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Create a list of the maximum k elements in the sorted array\n    return arr[-k:]\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n    sum = 0\n    for i in range(len(lst) % 2):\n        if lst[i] % 2!= 0:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz_list = [1]\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n        collatz_list.append(n)\n    return sorted(collatz_list)\n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    days_in_month = [31, 28, 31, 30, 31, 29, 31, 31, 30, 31, 31, 28, 31, 30, 31]\n    months_in_year = [1, 4, 7, 8, 10, 12, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12]\n    date_array = date.split('-')\n    month = date_array[1]\n    day = date_array[2]\n    if (month < 1 or month > 12 or days_in_month[month - 1] < day) and (month!= 2 and day > days_in_month[month]):\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if not txt:\n        return []\n    words = [word for word in txt.split() if word]\n    return words"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    return True if all(num1 <= num2 for num1, num2 in zip(lst, lst[1:])) else False\n"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if not (len(interval1) == 2 and len(interval2) == 2):\n        return 'NO'\n    start1 = interval1[0]\n    end1 = interval1[1]\n    start2 = interval2[0]\n    end2 = interval2[1]\n    if (start1 <= end1 and start1 <= end2) or (start2 <= end1 and start2 <= end2):\n        return 'YES'\n    return 'NO'"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    sum = 0\n    for num in arr:\n        product = 1\n        for i in range(0, len(num)):\n            if num[i] == 1:\n                product *= 1\n            elif num[i] == -1:\n                product *= -1\n            else:\n                product *= 0\n        sum += product\n    return sum\n"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    # Initializing a list to store the minimum path\n    min_path = []\n\n    # Iterating over the grid\n    for i in range(k):\n        # Iterating over the rows\n        for j in range(len(grid)):\n            # If the current cell is empty, meaning there's no value, we"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 1 or n == 2:\n        return 1\n    elif n % 2 == 0:\n        return 1 + n / 2\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    if n <= 1:\n        return n\n    else:\n        return n % 2 * n % 3\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    if not string or not string.isalnum():\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(map(lambda x: x**2, lst))"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not len(txt):\n        return False\n    else:\n        return (txt[-1] in 'abcdefgz') and (txt[-1] not in 'abcdefgz')"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                return j\n        arr[i], arr[j] = arr[j], arr[i]\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    return (max(lst), min(lst))\n"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if type(a) is int and type(b) is int:\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a) is float and type(b) is float:\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a) is str and type(b) is str:\n        if a > b:\n            return a\n        else:\n            return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n <= 0:\n        return False\n    else:\n        for i in range(n % 2 == 0):\n            if n % i == 0:\n                return True\n        return False\n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n\ndef main():\n    text = \"Example\"\n    print(fix_spaces(text))\n"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3 or not file_name.endswith('.') or not file_name.startswith('[abcdefgz]'):\n        return 'No'\n    else:\n        return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    sum = 0\n    for num in lst:\n        if num % 3 == 0 and num % 4!= 0:\n            sum += num * num\n    return sum\n"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = []\n    for word in sentence.split(' '):\n        if len(word) > 1 and word.isalpha():\n            words.append(word)\n    return''.join(words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    if x == '1/1' and n == '1/1':\n        return True\n    elif x == '1/1' and n == '2/1':\n        return False\n    elif x == '1/1' and n == '3/1':\n        return False\n    elif x == '1/1' and n == '1/2':\n        return False\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    return sorted(nums, key=lambda num: sum_of_digits(num))\n\n\ndef sum_of_digits(num):\n    \"\"\"\n    Calculate the sum of the digits of a given integer\n    \"\"\"\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num //= 10\n    return sum\n\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    return sum(1 for num in nums if (num > 10 and (first_odd(num) and last_odd(num)))))\n\ndef first_odd(num):\n    return (num % 1) == 0\n\ndef last_odd(num):\n    return (num % 1) == 0\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [1, 3, 7, 13, 21]\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i < j < k:\n                    if a[i] + a[j] + a[k] % 3 == 0:\n                        result += 1\n    return result\n"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    if not is_correct_planet(planet1) or not is_correct_planet(planet2):\n        return ()\n    return [planet for planet in range(planet1, planet2 + 1) if planet!= 'Mercury']\n\ndef is_correct_planet(planet):\n    if planet == 'Mercury':\n        return False\n    return True\n"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted(lst, key=len)"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n        return y\n    else:\n        return x\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(square(num) for num in lst if num % 1 > 0)\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    diff_array = [0] * len(game)\n    for i in range(len(game)):\n        if guess[i] == game[i]:\n            diff_array[i] = 0\n        else:\n            diff_array[i] = abs(guess[i] - game[i])\n    return diff_array"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n\n    # Find the strongest extension\n    strongest_extension = ''\n    for extension in extensions:\n        cap, sm = extension.capitalize(), extension.lower()\n        strength = cap - sm\n        if strength > 0:\n            if strongest_extension == '':\n                strongest_extension = extension\n            elif strength > strength:\n                strongest_extension = extension\n    return ''.join([class_name, strongest_extension])\n\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if a.find(b)!= -1 or b.find(a)!= -1:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num == 0:\n        return (0, 0)\n\n    # Calculate the number of even and odd digits respectively\n    even_count = 0\n    odd_count = 0\n\n    while num > 0:\n        digit = (num % 10)\n        if digit == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        num //= 10\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number > 1000:\n        raise Exception('Restrictions: 1 <= num <= 1000')\n\n    # Obtain the remainder when dividing the number by each Roman numeral\n    # digit's value, and use that as the position in the output string.\n    result = []\n    for i in range(1001):\n        remainder = number % i\n        result.append(remainder)\n    result = ''.join(result)\n\n    return result.lower()\n"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    return max(words, key=len)"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining < need:\n        number += remaining\n        return [number, 0]\n    else:\n        return [number, need]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    if len(operator)!= len(operand) - 1:\n        raise Exception('Incorrect number of operators and operands.')\n\n    # Create a new list to store the results of the operations\n    result_list = []\n\n    for i in range(len(operand)):\n        # Perform the operations on the operands\n        result_list.append(perform_operation(operator, operand[i]))\n\n    return sum(result_list)\n\ndef perform_operation(operator, operand):\n    if operator == '+':\n        return operand + operand\n    elif operator == '-':\n        return operand - operand\n    elif operator == '*':\n        return operand * operand\n    elif operator == '/':\n        return operand / operand\n    elif operator == '**':\n        return operand ** operand\n    else:\n        raise Exception('Invalid operation:'+ operator)\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].lower() == s[i].upper():\n                result += s[i]\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    if a > b:\n        return [a, b]\n    else:\n        return [b, a]\n"}
