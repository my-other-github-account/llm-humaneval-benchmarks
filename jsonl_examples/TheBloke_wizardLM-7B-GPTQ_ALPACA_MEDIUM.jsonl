{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] - numbers[j] < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    for opening_brace in paren_string.strip('()'):\n        if opening_brace:\n            closing_brace = paren_string[len(opening_brace):]\n            groups.append(opening_brace)\n            groups.append(closing_brace)\n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = number // 1\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n    if balance < 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    return 0"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [nums[i] for i in range(0, len(nums), 2) if i+1 < len(nums)]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    nested_parens = []\n    for i in range(1, len(paren_string)):\n        if paren_string[i] == '(':\n            nested_parens.append(i)\n        elif paren_string[i] == ')':\n            nested_parens.append(i + 1)\n    return nested_parens"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return strings[:]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return sum, product"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_num = None\n    rolling_max_list = []\n    for num in numbers:\n        if num > max_num:\n            rolling_max_list.append(num)\n            max_num = num\n        else:\n            if rolling_max_list and rolling_max_list[-1] <= max_num:\n                rolling_max_list.pop()\n            rolling_max_list.append(num)\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\""}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '0' + a + b + '0'"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    longest_string = None\n    if strings:\n        longest_string = max(strings, key=len)\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    return max(a, b) / max(a, b)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefix = string[i:i+len(string)]\n        prefixes.append(prefix)\n    return list(prefixes)"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return '0'+ str(n) +'1 2 3 4 5'\n"}
{"task_id": "HumanEval/16", "completion": ""}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = []\n    for note in music_string.split('|'):\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n        elif note == '|':\n            beats.append(1)\n        elif note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n        elif note == '|':\n            beats.append(1)\n        elif note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n        elif note == '|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": ""}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: List[str]) -> str:\n    \"\"\" Input is a list of strings, each representing a number from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the sorted list of numbers as a string, with numbers separated by spaces\n    >>> sort_numbers(['three', 'one', 'five'])\n    'one three five'\n    \"\"\""}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    \n    closest_pair = []\n    smallest_distance = float('inf')\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < smallest_distance:\n                smallest_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n    if closest_pair:\n        return closest_pair\n    else:\n        return None"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    scaled_numbers = []\n    for num in numbers:\n        if num < 0:\n            num = 0\n        elif num > 1:\n            num = 1\n        scaled_numbers.append(num)\n    return scaled_numbers"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    \ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    \ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    \ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    \ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    \ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', "}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    pass"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    divisors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            divisors.append(i)\n            n //= i\n        i += 2\n    if n > 1:\n        divisors.append(n)\n    return max(divisors)"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    prime_factors = []\n    for i in range(1, n+1):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n    prime_factors.append(n)\n    factorization = []\n    for factor in prime_factors:\n        factorization.append(factor)\n        for i in range(1, factor+1):\n            if n % i == 0:\n                factorization.append(i)\n                n //= i\n    return factorization"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    uppercase_chars = ''.join([c for c in string if c.isupper()])\n    lowercase_chars = ''.join([c for c in string if c.islower()])\n    return uppercase_chars + lowercase_chars"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return strings[:]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    positive_numbers = []\n    for num in l:\n        if num > 0:\n            positive_numbers.append(num)\n    return positive_numbers"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    \n    # Check if the number is less than 1\n    if n < 1:\n        return False\n    \n    # Check if the number is 1\n    if n == 1:\n        return True\n    \n    # Check if the number is 2\n    if n == 2:\n        return True\n    \n    # Check if the number is a prime number\n    for i in range(3, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    n = len(xs)\n    if n % 2!= 0:\n        return None\n    else:\n        x = float(n / 2)\n        for i in range(n // 2):\n            if i > 0 and xs[i]!= 0:\n                for j in range(i, n):\n                    if xs[j]!= 0:\n                        x = (x + xs[i] / xs[j]) / (1 / xs[i] + 1 / xs[j])\n                        break\n                else:\n                    break\n        return x"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list) -> list:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    l_sorted = sorted(l)\n    l' = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l' += [l[i] for j in range(3) if j % 3 == 0 and j < i]\n        else:\n            l' += [l[i] for j in range(3) if j % 3 == 0 and j > i]\n        l' += [l[i] for i in range(3) if i % 3 == 0]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list) -> list:\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\n    \"\"\"\n    if len(l) > 0:\n        return max(l)\n    else:\n        return 0\n"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    if n % 10 == 0:\n        count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    l_even = []\n    l_odd = []\n    for num in l:\n        if num % 2 == 0:\n            l_even.append(num)\n        else:\n            l_odd.append(num)\n    return l_even + [num for num in l_odd if num % 2 == 0]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups to encoded string.\n    return \"\".join(groups)\n\ndef decode_cyclic(s):\n    # encoded string.\n    s = s.replace(\"\", \"\")\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups to decoded string.\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    a = 1\n    b = 1\n    for i in range(n):\n        if i == 1:\n            fib = a\n        elif i == 0 or i == n:\n            fib = b\n        else:\n            a = b\n            b = fib + a\n            fib = a + b\n    return fib"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    distinct_sums = []\n    for num in l:\n        if num == 0:\n            distinct_sums.append(0)\n        else:\n            distinct_sums.append(sum(int(num)))\n    if len(distinct_sums) == 1:\n        return True\n    elif len(distinct_sums) == 3:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return 0"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    \"\"\"\n    Return list with elements incremented by 1.\n    \"\"\"\n    return [i + 1 for i in l]\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    for i in l:\n        for j in l:\n            if i + j == 0:\n                continue\n            if i + j == l:\n                continue\n            if i + j == l - 1:\n                continue\n            if i + j == l + 1:\n                continue\n            if i + j == l // 2:\n                continue\n            if i + j == l * 2:\n                continue\n            if i + j == l // 3:\n                continue\n            if i + j == l * 3:\n                continue\n            if i + j == l // 4:\n                continue\n            if i + j == l * 4:\n                continue\n            if i + j == l // 5:\n                continue\n            if i + j == l * 5:\n                continue\n            if i + j == l // 6:\n                continue\n            if i + j == l * 6:\n                continue\n            if i + j == l // 7:\n                continue\n            if i + j == l * 7:\n                continue\n            if i + j == l // 8:\n                continue\n            if i + j == l * 8:\n                continue\n            if i + j == l // 9:\n                continue\n            if i + j == l * 9:\n                continue\n            if i + j == l // 10:\n                continue"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x * base)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"\n    Given length of a side and high return area for a triangle.\n    :param a: int\n    :param h: int\n    :return: float\n    \"\"\"\n    return (a * h) / 2\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    elif n == 4:\n        return 0\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 8\n    elif n == 7:\n        return 14\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return (n//2 + 1) / 2\n    else:\n        return (n//2) / 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2**n) % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(ord(ch) - 5 + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdef'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    \ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdef'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    \ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdef'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    \ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n   "}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"\n    Add two numbers x and y\n    \"\"\"\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": ""}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    elif n <= 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<<\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    opening_brackets = brackets.split(\"<\")\n    closing_brackets = []\n    for opening_bracket in opening_brackets:\n        if not closing_brackets:\n            closing_brackets = [\">\"]\n        else:\n            closing_brackets.append(\"<\")\n    if len(closing_brackets) == 1:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"\n    Returns True if list elements are monotonically increasing or decreasing.\n    \"\"\"\n    for i in l:\n        if i < 0:\n            return False\n        if i > 0:\n            return True\n    return False"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    common_list = []\n    for num in l1:\n        if num in l2:\n            common_list.append(num)\n    return sorted(common_list)"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while n % i == 0:\n        i += 1\n    for j in range(i, int(n**0.5)+1):\n        if n % j == 0:\n            print(j)\n            n = n / j\n    print(n)"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list) -> list:\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    return [1]*len(xs) + [xs[i]*x for i in range(1, len(xs) + 1)] + [xs[i]*x for i in range(2, len(xs) + 2)]\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # Get the number of digits in x\n    digits = len(str(x))\n    # Shift the digits to the right by shift digits\n    shifted_digits = ''.join(str(d) for d in str(x))\n    shifted_digits = shifted_digits[:-shift]\n    # Create the result string\n    result = ''.join(str(d) for d in str(x))\n    result += shifted_digits\n    return result"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum = 0\n    for i in range(ord(s)):\n        if i > 0 and ord(s[i]) >= ord('A'):\n            sum += ord(s[i]) - ord('A') + 1\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    if s == \"0\":\n        return n - 1\n    elif s == \"1\":\n        return n - 2\n    elif s == \"2\":\n        return n - 3\n    elif s == \"3\":\n        return n - 4\n    elif s == \"4\":\n        return n - 5\n    elif s == \"5\":\n        return n - 6\n    elif s == \"6\":\n        return n - 7\n    elif s == \"7\":\n        return n - 8\n    elif s == \"8\":\n        return n - 9\n    elif s == \"9\":\n        return n - 10\n    elif s == \"10\":\n        return n - 11\n    elif s == \"11\":\n        return n - 12\n    elif s == \"12\":\n        return n - 13\n    elif s == \"13\":\n        return n - 14\n    elif s == \"14\":\n        return n - 15\n    elif s == \"15\":\n        return n - 16\n    elif s == \"16\":\n        return n - 17\n    elif s == \"17\":\n        return n - 18\n    elif s == \"18\":\n        return n - 19\n    elif s == \"19\":\n        return n - 20\n    elif s == \"20\":\n        return n - 21\n    elif s == \"21\":\n        return n - 22\n    elif s == \"22\":\n        return n - 23\n    elif s == \"23\":\n        return n - 24\n    elif s == \"24\":\n        return n - 25\n    elif s == \"25\":\n        return n - 26\n    elif s == \"26\":\n        return n - 27\n    elif s == \"27\":\n        return n - 28\n    elif s == \"28\":\n        return n - 29\n    elif s == \"29\":\n        return n - 30\n    elif s =="}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\ndef pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if smallest_value == float('inf'):\n                smallest_value = arr[i]\n            else if arr[i] < smallest_value:\n                smallest_value = arr[i]\n            smallest_index = i\n    if smallest_value == float('inf') or len(arr) == 0:\n        return []\n    else:\n        return [smallest_value, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_frequency = 0\n    max_value = 0\n    for num in lst:\n        frequency = len(lst[num])\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_value = num\n    if max_frequency == 0:\n        return -1\n    else:\n        return max_value"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort(reverse=True)\n    for i in range(len(lst)-1, -1, -1):\n        lst.remove(lst[i])\n    lst.append(lst[0])\n    return lst"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b > c or b + c > a or c + a > b:\n        return -1\n    s = (a + b + c) / 2\n    area = 0.5 * s ** 2\n    return round(area, 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if len(q) % 2 == 0:\n        return True\n    else:\n        return False\n   \ndef is_palindrome(lst):\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return lst == lst[::-1]\n    \ndef max_weight(w):\n    \"\"\"\n    Return the maximum possible weight.\n    \"\"\"\n    return 10\n    \ndef main():\n    print(will_it_fly([1, 2], 5))\n    print(will_it_fly([3, 2, 3], 1))\n    print(will_it_fly([3, 2, 3], 9))\n    print(will_it_fly([3], 5))"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                return i + j - 1\n    return n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars = sum(len(s) for s in lst1 + lst2)\n    if total_chars == len(lst1 + lst2):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 100:\n        for i in range(3, a+1):\n            if i > 1 and is_prime(i):\n                if a % i == 0:\n                    return True\n                else:\n                    break\n        return False\n    else:\n        return True\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(3, n):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    Check if a number x is a simple power of n.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return n**int == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    # Check if the input is a valid integer\n    if not isinstance(a, int) or a < 0:\n        return False\n    \n    # Calculate the cube of the input\n    cube = a**3\n    \n    # Return True if the cube is an integer and is equal to the input\n    return cube == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    hex_digits = \"0123456789ABCDEF\"\n    hex_num = num.upper()\n    count = 0\n    for digit in hex_digits:\n        if hex_num.startswith(digit):\n            primes.append(int(digit))\n            count += 1\n    if hex_num.endswith(\"A\"):\n        count += 1\n    if hex_num.endswith(\"B\"):\n        count += 1\n    if hex_num.endswith(\"C\"):\n        count += 1\n    if hex_num.endswith(\"D\"):\n        count += 1\n    if hex_num.endswith(\"E\"):\n        count += 1\n    if hex_num.endswith(\"F\"):\n        count += 1\n    return count - primes"}
{"task_id": "HumanEval/79", "completion": ""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    s = list(s)\n    n = len(s)\n    if n < 3:\n        return False\n    distinct = True\n    for i in range(n):\n        if i + 2 < n and s[i] == s[i + 2]:\n            distinct = False\n            break\n    return distinct"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"\n    Returns True if the length of the given string is a prime number, False otherwise\n    Examples:\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Check if the length of the given string is prime\n    if len(string) <= 1:\n        return True\n    elif len(string) == 2:\n        return True\n    elif len(string) == 3:\n        return True\n    elif len(string) == 5:\n        return True\n    elif len(string) == 7:\n        return True\n    elif len(string) == 11:\n        return True\n    elif len(string) == 13:\n        return True\n    elif len(string) == 17:\n        return True\n    elif len(string) == 19:\n        return True\n    elif len(string) == 23:\n        return True\n    elif len(string) == 29:\n        return True\n    elif len(string) == 31:\n        return True\n    elif len(string) == 37:\n        return True\n    elif len(string) == 41:\n        return True\n    elif len(string) == 43:\n        return True\n    elif len(string) == 47:\n        return True\n    elif len(string) == 53:\n        return True\n    elif len(string) == 59:\n        return True\n    elif len(string) == 61:\n        return True\n    elif len(string) == 67:\n        return True\n    elif len(string) == 71:\n        return True\n    elif len(string"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, n+1):\n        if i == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    if N < 0:\n        return \"Error: N must be a positive integer\"\n    elif N > 10000:\n        return \"Error: N must be less than or equal to 10000\"\n    else:\n        sum_of_digits = 0\n        digits = []\n        while N:\n            if N % 2 == 0:\n                sum_of_digits += 1\n            N //= 2\n        for digit in range(10):\n            if N % digit == 0:\n                digits.append(str(digit))\n                sum_of_digits += 1\n        if len(digits) == 0:\n            return \"Error: N must have at least one digit\"\n        else:\n            return \"\".join(digits) + \"1\" * sum_of_digits"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst. add the even elements that are at odd indices.\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    odd_indices = [i for i in range(len(lst)) if i % 2!= 0]\n    even_indices = [i for i in range(len(lst)) if i % 2 == 0]\n    even_indices.append(odd_indices.pop(0))\n    result = 0\n    for i in odd_indices:\n        result += lst[i]\n    for i in even_indices:\n        result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # Split the string into words\n    words = s.split()\n    # Sort the characters in ascending order\n    sorted_chars = sorted(list(map(ord, words)))\n    # Join the sorted characters into a new string\n    shuffled = ''.join([chr(c) for c in sorted_chars])\n    # Replace the words with their shuffled counterparts\n    shuffled_words = shuffled.replace(' ', '')\n    return ''.join(shuffled_words.split())"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    sorted_lst = sorted(lst, key=lambda x: x[0])\n    sorted_lst_by_rows = sorted_lst.items()\n    sorted_lst_by_columns = sorted(sorted_lst_by_rows, key=lambda x: x[1])\n    return [tuple(sorted_lst_by_columns[:-1]) + [x] for x in sorted_lst_by_columns]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\ndef sort_array(array):\n    if len(array) < 2:\n        return array\n    n = len(array)\n    def compare(x, y):\n        if x < y:\n            return -1\n        elif x > y:\n            return 1\n        else:\n            return 0\n    def swap(i, j):\n        temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n    def sort_helper(array, n, compare, swap):\n        for i in range(n):\n            if n % 2 == 0:\n                if compare(array[i], array[i + 1]):\n                    swap(i, i + 1)\n            else:\n                if not compare(array[i], array[i + 1]):\n                    break\n                i += 1\n    n = 0\n    sort_helper(array, n, compare, swap)\n    return array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for letter in s:\n        if letter.isalpha():\n            index = ord(letter.lower()) - 96\n            encrypted += alphabet[index] + alphabet[index + 2]\n        else:\n            encrypted += letter\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    if smallest == float('inf'):\n        return None\n    else:\n        return smallest - 1"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    words = S.split()\n    for word in words:\n        if word.startswith(\"I\"):\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x + y + z == x or x + y + z == z or x + y == z:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    # Define a dictionary to map vowels to their position in the alphabet\n    vowels = {'a': 1, 'e': 5, 'i': 9, 'o': 15, 'u': 21}\n    \n    # Encode the message by swapping case and replacing vowels\n    encoded_message = ''\n    for char in message:\n        if char.isupper():\n            encoded_message += ''.join([vowels[ord(vowel) + 1] for vowel in char.split('')])\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    largest_prime = None\n    sum_of_digits = 0\n    for num in lst:\n        if num > 1 and num % 2 == 0:\n            continue\n        for i in range(3, num):\n            if num % i == 0:\n                break\n        else:\n            largest_prime = num\n    if largest_prime is None:\n        return sum_of_digits\n    else:\n        return sum_of_digits + str(largest_prime).digits()"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str) or not key.lower() == key:\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if i > 1:\n            for j in range(i*i, n, i):\n                primes.append(j)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    product = 1\n    for digit in str(a):\n        product *= int(digit)\n    for digit in str(b):\n        product *= int(digit)\n    return product"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    vowels = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    even_indices = [i for i in range(len(s)) if i % 2 == 0]\n    count = 0\n    for i in even_indices:\n        if s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # Define a list of integers\n    integers = [10, 15, 20, 25, 30]\n    \n    # Find the smallest integer in the list that is greater than or equal to the value\n    smallest_integer = min(integers)\n    \n    # If the value is less than the smallest integer, return the smallest integer\n    if value < smallest_integer:\n        return smallest_integer\n    \n    # If the value is greater than the smallest integer, return the largest integer\n    elif value > smallest_integer:\n        return largest_integer\n    \n    # Otherwise, return the closest integer to the value\n    else:\n        return round(value - smallest_integer)\n    "}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n] + [2*i+1 for i in range(1, n+1)]\n    else:\n        return [n] + [2*i+1 for i in range(1, n+1) if i%2 == 1 else [2*i+2 for i in range(1, n+1)]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    max_num = 0\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            max_num = i\n            break\n    if max_num == 0:\n        return -1\n    else:\n        return max_num"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    \"\"\"\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(round(sum(range(n, m+1))/2))\n    # Convert the result to binary and return it\n    return bin(int(round(sum(range(n, m+1))/2)))[2:]"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"\n    Given a list of positive integers x. Return a sorted list of all elements that haven't any even digit.\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    x = [15, 33, 1422, 1]\n    Returned list = [1, 15, 33]\n    \n    x = [152, 323, 1422, 10]\n    Returned list = []\n    \"\"\"\n    even_digits = []\n    for num in x:\n        if num % 2 == 0:\n            even_digits.append(num)\n    unique_digits_list = sorted(even_digits)\n    return unique_digits_list"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    arr = list(arr)\n    if len(arr) < 2:\n        return []\n    for i in range(1, len(arr)):\n        if arr[i] > 9:\n            return []\n    for i in range(len(arr)):\n        if arr[i] < 1:\n            return []\n    return [\"One\"] + [str(num) for num in arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    if n % 2 == 0:\n        return [i*i for i in range(1, n+1)]\n    else:\n        return [i+1 for i in range(1, n+1)]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    count = 0\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            if i % 2 == 0:\n                even_count += 1\n            odd_count += 1\n        else:\n            if i % 2 == 0:\n                odd_count += 1\n            even_count += 1\n    if even_count == 0:\n        return (0, 0)\n    elif odd_count == 0:\n        return (0, 1)\n    else:\n        return (1, 0)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    sum_digits = 0\n    for num in arr:\n        if num < 0:\n            sum_digits += abs(num)\n        else:\n            sum_digits += num\n    if sum_digits > 0:\n        count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"\n    Check if it is possible to exchange elements between lst1 and lst2 to make all elements of lst1 even.\n    Return \"YES\" if it is possible, otherwise return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    Input: non-empty lists\n    \"\"\"\n    if len(lst1) > 0 and len(lst2) > 0:\n        for i in range(len(lst1)):\n            if lst1[i] % 2 == 0:\n                lst2.remove(lst2.pop(0))\n                lst1.remove(lst1.pop(0))\n                lst2.append(lst1.pop(0))\n                lst1.append(lst2.pop(0))\n                if len(lst1) == len(lst2):\n                    return \"YES\"\n                else:\n                    return \"NO\"\n    else:\n        return \"Error: input lists must be non-empty\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    count = {}\n    max_count = 0\n    for letter in test.split(' '):\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n        if count[letter] > max_count:\n            max_count = count[letter]\n            max_letter = letter\n        else:\n            if count[letter] == max_count:\n                return count\n    return {}"}
{"task_id": "HumanEval/112", "completion": ""}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    odd_num = 0\n    count = 0\n    for i in lst:\n        odd_num += len(set(i))\n        count += 1\n        if odd_num % 2 == 0:\n            break\n    return [f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\"]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(i+1, len(nums)):\n            sum += nums[j]\n        if sum < min_sum:\n            min_sum = sum\n        if i > 0 and nums[i] + nums[i-1] > nums[i-2] + nums[i-1]:\n            min_sum = min(min_sum, nums[i] + nums[i-1])\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    # Check constraints\n    if grid.length!= 10 or grid[0].length!= 10 or capacity > 10:\n        return \"Invalid input\"\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                continue\n            for k in range(capacity):\n                if grid[i][j] == 1:\n                    return \"Water can be emptied from the well\"\n                for l in range(grid.length):\n                    if grid[i][l] == 1:\n                        for m in range(grid[0].length):\n                            if grid[m][l] == 1:\n                                return \"Water can be emptied from the well\"\n    return 0"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    # Find the number of ones in the binary representation of each element\n    ones_count = [0] * len(arr)\n    for i in range(len(arr)):\n        ones_count[i] = ord(arr[i]) - ord('0')\n    \n    # Sort the array based on the number of ones in the binary representation\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if ones_count[i] > ones_count[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                ones_count[i], ones_count[j] = ones_count[j], ones_count[i]\n    \n    # Sort the array based on the decimal value of each element\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if ones_count[i] > ones_count[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                ones_count[i], ones_count[j] = ones_count[j], ones_count[i]\n    \n    return arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = []\n    for i in range(len(s)):\n        if s[i].isalpha() and s[i].isdigit():\n            continue\n        for j in range(i, len(s)):\n            if s[j].isalpha() and s[j].isdigit():\n                continue\n            if len(s[j].split()) == n:\n                words.append(s[i:j+1])\n                break\n    return words"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)):\n        for j in range(i+1, len(word)):\n            if word[i] =='' and word[j] =='' and word[i] not in vowels and word[j] not in vowels:\n                return word[j]\n    return ''"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    \n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0]!= '(' and lst[1]!= '):\n        return 'No'\n    if lst[0] == '(' and lst[1] == '):\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    max_num = arr[0]\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n            max_index = i\n    sorted_arr = arr[max_index:max_index+k]\n    return sorted_arr"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    odd_sum = 0\n    even_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even_sum += lst[i]\n        else:\n            odd_sum += lst[i]\n    return odd_sum + even_sum"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum = 0\n    for i in range(k, len(arr)):\n        sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    if n % 2 == 0:\n        return [n]\n    else:\n        return [n + 1, n + 3]"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    month = int(date[0])\n    day = int(date[1])\n    year = int(date[2])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month == 2 and day > 29:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    if not words:\n        return []\n    if words[0] == '':\n        return words[1:]\n    if words[-1] == '':\n        return words[:-1]\n    if words[0] == ',':\n        return [words[1]]\n    if words[-1] == '':\n        return [words[:-1]]\n    if len(words) % 2 == 0:\n        return sum(ord(c) % 2 == 1 for c in words)\n    else:\n        return sum(ord(c) % 2 == 0 for c in words)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    \n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    sorted_lst = sorted(lst)\n    if len(sorted_lst) > 1:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    \"\"\"\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n    start1 = interval1[0]\n    end1 = interval1[1]\n    start2 = interval2[0]\n    end2 = interval2[1]\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    if start1 + end1 == start2 + end2:\n        return \"NO\"\n    else:\n        length = start1 + end1 - start2 - end2\n        if length % 2 == 0:\n            return \"NO\"\n        else:\n            return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    product = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        if num == 0:\n            product *= 0\n        elif num == 1:\n            product *= 1\n        else:\n            product *= -1\n        sum_of_magnitudes += num\n    return sum_of_magnitudes * product"}
{"task_id": "HumanEval/129", "completion": ""}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return [1 + n / 2]\n    else:\n        return [tri(n-1) + tri(n-2) + tri(n+1)]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            product *= i\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    # Check if the input string contains only square brackets\n    if not string.isdigit():\n        return False\n    \n    # Initialize the nested counter\n    nested = 0\n    \n    # Loop through each character in the string\n    for char in string:\n        # Check if the current character is a square bracket\n        if char == '[':\n            # Increment the nested counter\n            nested += 1\n    \n    # Check if there is a valid subsequence of brackets where at least one bracket is nested\n    if nested > 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    \"\"\"\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    sum = 0\n    for num in lst:\n        sum += num ** 2\n    return sum"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    last_char = txt[-1]\n    if last_char.isalpha() and last_char not in 'aeiouAEIOU':\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    n = len(arr)\n    largest = -1\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            largest = i\n            break\n    if largest == -1:\n        return -1\n    else:\n        return largest"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    a = None\n    b = None\n    for num in lst:\n        if num < 0:\n            a = num\n        elif num > 0:\n            b = num\n    return a, b"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        if a.replace('.', '').isdigit() and b.replace('.', '').isdigit() and a > b:\n            return a\n        elif b.replace('.', '').isdigit() and a.replace('.', '').isdigit() and b > a:\n            return b\n        else:\n            return None\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return n == 4 or n == 6 or n == 8\n    else:\n        return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    \n    text = text.replace(\" \", \"_\")\n    text = text.replace(\" \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\ndef file_name_check(file_name):\n    if len(file_name) > 3:\n        return \"No\"\n    elif file_name.startswith(\".\"):\n        return \"Yes\"\n    elif file_name[0].isalpha():\n        if len(file_name) > 1:\n            if file_name[1].isalpha():\n                if file_name.endswith(\"txt\") or file_name.endswith(\"exe\") or file_name.endswith(\"dll\"):\n                    return \"Yes\"\n                else:\n                    return \"No\"\n    else:\n        return \"No\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            sum += lst[i] ** 3\n    return sum"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    new_words = []\n    for word in words:\n        if len(word) % 2 == 0:\n            new_words.append(word)\n    new_sentence = \" \".join(new_words)\n    return new_sentence"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    numerator = int(x) * int(n)\n    denominator = int(x) * int(n) // 2\n    if numerator == denominator:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    sorted_nums = sorted(nums)\n    return sorted_nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i*i-i+1 for i in range(n+1)]\n    max_triples = 0\n    for i in range(n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if i < j and j < k and a[i] + a[j] + a[k] % 3 == 0:\n                    max_triples += 1\n    return max_triples"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    if planet1.lower()!= \"jupiter\" or planet2.lower()!= \"neptune\":\n        return\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    sorted_planets = sorted(planets)\n    for planet in sorted_planets:\n        if planet.lower() >= planet1.lower() and planet.lower() <= planet2.lower():\n            return planet\n    return"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    for word in sorted_lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n    \ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(3, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    odd_nums = []\n    for num in lst:\n        if num % 2 == 1 and num >= 1:\n            odd_nums.append(num)\n    if len(odd_nums) == 0:\n        return 0\n    else:\n        return sum(int(num ** 2) for num in odd_nums)"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    \"\"\"\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    score1 = game[0]\n    score2 = game[1]\n    guess1 = guess[0]\n    guess2 = guess[1]\n    if guess1 == score1:\n        return [0] * len(guess)\n    elif guess2 == score2:\n        return [0] * len(guess)\n    else:\n        diff = abs(guess1 - score1)\n        return [diff] * len(guess)"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    extensions_sorted = sorted(extensions, key=lambda x: x)\n    strongest_extension = None\n    for extension in extensions:\n        if extension[0].isupper():\n            cap = extension[0].count('C')\n        else:\n            sm = extension[0].count('c')\n        if cap - sm > strongest_extension:\n            strongest_extension = extension\n    if strongest_extension:\n        return class_name + '.' + strongest_extension\n    else:\n        return class_name"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    if a == b or b in str(a).split():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    count = 0\n    digits = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            digits.append(i)\n            count += 1\n    if num % 2 == 0:\n        odd_count = count - 1\n    else:\n        odd_count = count\n    return odd_count, len(digits)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'ix', 100: 'c', 400: 'cd', 500: 'd', 900: 'c', 1000:'m'\n    }\n    roman_numeral = 0\n    while number > 0:\n        numeral = number % 1000\n        numeral_letter = roman_numerals[numeral]\n        roman_numeral += numeral_letter\n        number //= 1000\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or 90 degrees.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n    if a == b and b == c:\n        return True\n    elif a == c and c == b:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_characters = 0\n    max_word = \"\"\n    for word in words:\n        num_unique_chars = len(set(word))\n        if num_unique_chars > max_characters:\n            max_characters = num_unique_chars\n            max_word = word\n        if word > max_word:\n            continue\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    total_eaten = number + need\n    remaining_carrots = remaining - need\n    if remaining_carrots < 0:\n        remaining_carrots = 1000 - remaining_carrots\n    return [total_eaten, remaining_carrots]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) < len(operand) - 1:\n        raise ValueError(\"The length of operator list is not equal to the length of operand list minus one.\")\n    if not operator:\n        raise ValueError(\"Operator list cannot be empty.\")\n    if not operand:\n        raise ValueError(\"Operand list cannot be empty.\")\n    if operator['+'] and operand[0] == 0:\n        raise ValueError(\"Operator cannot be '+' if operand contains zero.\")\n    if operator['-'] and operand[0] == 0:\n        raise ValueError(\"Operator cannot be''- if operand contains zero.\")\n    if operator['*'] and operand[0] == 0:\n        raise ValueError(\"Operator cannot be '*' if operand contains zero.\")\n    if operator['//'] and operand[0] == 0:\n        raise ValueError(\"Operator cannot be '//' if operand contains zero.\")\n    if operator['**'] and operand[0] == 0:\n        raise ValueError(\"Operator cannot be '**' if operand contains zero.\")\n    result = 0\n    for operator in operator:"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    if the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    ```\n"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    \"\"\"\n    if text:\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    even_digits = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits"}
