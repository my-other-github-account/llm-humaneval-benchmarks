{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n given threshold.\n >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n False\n >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n True\n \"\"\"\n \n def has_close_elements(numbers: List[float], threshold: float) -> bool:\n \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n given threshold.\n >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n False\n >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n True\n \"\"\"\n \n def has_close_elements(numbers: List[float], threshold: float) -> bool:\n \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n given threshold.\n >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n False\n >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n True\n \"\"\"\n \n def has_close_elements(numbers: List[float], threshold: float) -> bool:\n \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n given threshold.\n >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n False\n >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n True\n \"\"\"\n \n def has_close_elements(numbers: List[float], threshold: float) -> bool:\n \"\"\" Check"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n separate those group into separate strings and return the list of those.\n Separate groups are balanced (each open brace is properly closed) and not nested within each other\n Ignore any spaces in the input string.\n >>> separate_paren_groups('( ) (( )) (( )( ))')\n ['()', '(())', '(()())']\n \"\"\"\n # Define a function to separate groups of nested parentheses\n def separate_groups(paren_string: str) -> List[str]:\n # Define a function to check if a group is balanced\n def is_balanced(paren_string: str) -> bool:\n # Check if the input string is balanced\n if paren_string.count('(') == paren_string.count(')'):\n return True\n return False\n # Define a function to split the input string into separate groups\n def split_groups(paren_string: str) -> List[str]:\n # Split the input string into separate groups\n groups = paren_string.split(' ')\n # Check if each group is balanced\n for group in groups:\n if not is_balanced(group):\n return None\n # Return the list of balanced groups\n return groups\n # Call the function to separate the input string into separate groups\n return split_groups(paren_string)\n # Call the function to separate the input string into separate groups\n return separate_groups(paren_string)"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n \"\"\" Given a positive floating point number, it can be decomposed into\n and integer part (largest integer smaller than given number) and decimals\n (leftover part always smaller than 1).\n\n Return the decimal part of the number.\n\n >>> truncate_number(3.5)\n 0.5\n \"\"\"\n return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]):\n \"\"\"\n You're given a list of deposit and withdrawal operations on a bank account that starts with\n zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n at that point function should return True. Otherwise it should return False.\n\n >>> below_zero([1, 2, 3])\n False\n >>> below_zero([1, 2, -4, 5])\n True\n \"\"\"\n if operations[0] < 0:\n return True\n else:\n return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n around the mean of this dataset.\n Mean Absolute Deviation is the average absolute difference between each\n element and a centerpoint (mean in this case):\n MAD = average | x - x_mean |\n \"\"\"\n\n def mean_absolute_deviation(numbers: List[float]) -> float:\n # calculate mean of input numbers\n mean = sum(numbers) / len(numbers)\n \n # calculate MAD\n mad = 0\n for num in numbers:\n mad += abs(num - mean)\n \n return mad / len(numbers)\n \n return mean_absolute_deviation(numbers)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n >>> intersperse([], 4)\n []\n >>> intersperse([1, 2, 3], 4)\n [1, 4, 2, 4, 3]\n \"\"\"\n return numbers"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n For each of the group, output the deepest level of nesting of parentheses.\n E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n >>> parse_nested_parens('(()()) ((())) () ((())()())')\n [2, 3, 1, 3]\n \"\"\"\n \n def parse_nested_parens(paren_string: str) -> List[int]:\n # Define a function to check the nesting of parentheses\n def check_nesting(paren_string: str) -> int:\n # Check the nesting of parentheses\n if paren_string.count('(') == paren_string.count(')'):\n return 1\n elif paren_string.count('(') == 1 and paren_string.count(')') == 1:\n return 2\n else:\n return 3\n \n # Define a function to check the nesting of parentheses\n def check_nesting(paren_string: str) -> int:\n # Check the nesting of parentheses\n if paren_string.count('(') == paren_string.count(')'):\n return 1\n elif paren_string.count('(') == 1 and paren_string.count(')') == 1:\n return 2\n else:\n return 3\n \n # Define a function to check the nesting of parentheses\n def check_nesting(paren_string: str) -> int:\n # Check the nesting of parentheses\n if paren_string.count('(') == paren_string.count(')'):\n return 1\n elif paren_string.count('(') == 1 and paren_string.count(')') == 1:\n return 2\n else:\n return 3\n \n # Define a function to check the nesting of parentheses\n def check_nesting(paren_string: str) -> int:\n # Check the nesting of parentheses\n if paren_string.count('(') == paren_string.count(')'):\n return 1"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n \"\"\" Filter an input list of strings only for ones that contain given substring\n >>> filter_by_substring([], 'a')\n []\n >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n ['abc', 'bacd', 'array']\n \"\"\"\n return strings"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n if numbers:\n sum = 0\n product = 1\n for number in numbers:\n sum += number\n product *= number\n return sum, product\n else:\n return 0, 1"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n in the sequence.\n >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n [1, 2, 3, 3, 3, 4, 4]\n \"\"\"\n\n def rolling_max(numbers: List[int]) -> List[int]:\n \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n in the sequence.\n >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n [1, 2, 3, 3, 3, 4, 4]\n \"\"\"\n \n def rolling_max(numbers: List[int]):\n \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n in the sequence.\n >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n [1, 2, 3, 3, 3, 4, 4]\n \"\"\"\n \n def rolling_max(numbers: List[int]):\n \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n in the sequence.\n >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n [1, 2, 3, 3, 3, 4, 4]\n \"\"\"\n \n def rolling_max(numbers: List[int]):\n \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n in the sequence.\n >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n [1, 2, 3, 3, 3, 4, 4]\n \"\"\"\n \n def rolling_max(numbers: List[int]):\n \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n in the sequence.\n >>> rolling_max([1, 2,"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n \"\"\" Test if given string is a palindrome \"\"\"\n return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n \"\"\" Find the shortest palindrome that begins with a supplied string.\n Algorithm idea is simple:\n - Find the longest postfix of supplied string that is a palindrome.\n - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n >>> make_palindrome('')\n ''\n >>> make_palindrome('cat')\n 'catac'\n >>> make_palindrome('cata')\n 'catac'\n \"\"\"\n"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: List[str], b: List[str]) -> List[str]:\n \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n Perform binary XOR on these inputs and return result as a list of strings.\n >>> string_xor(['010', '110'], ['101', '111'])\n ['100', '101']\n \"\"\"\n"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n if len(strings) == 0:\n return None\n elif len(strings) == 1:\n return strings[0]\n else:\n longest_length = 0\n for s in strings:\n if len(s) > longest_length:\n longest_length = len(s)\n return s\n return None"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n \"\"\" Return a greatest common divisor of two integers a and b\n >>> greatest_common_divisor(3, 5)\n 1\n >>> greatest_common_divisor(25, 15)\n 5\n \"\"\"\n \n return None"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n \"\"\" Return list of all prefixes from shortest to longest of the input string\n >>> all_prefixes('abc')\n ['a', 'ab', 'abc']\n \"\"\"\n \n return []"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n >>> string_sequence(0)\n '0'\n >>> string_sequence(5)\n '0 1 2 3 4 5'\n \"\"\"\n return ''.join(str(i) for i in range(n))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n >>> count_distinct_characters('xyzXYZ')\n 3\n >>> count_distinct_characters('Jerry')\n 4\n \"\"\"\n \n return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n Your task is to parse this string and return list of integers corresponding to how many beats does each\n not last.\n\n Here is a legend:\n 'o' - whole note, lasts four beats\n 'o|' - half note, lasts two beats\n '.|' - quater note, lasts one beat\n\n >>> parse_music('o o|.| o| o|.|.|.| o o')\n [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n \"\"\"\n music_string = music_string.lower()\n beats = []\n for note in music_string.split(' '):\n if note == 'o':\n beats.append(4)\n elif note == 'o|':\n beats.append(2)\n elif note == '.':\n beats.append(1)\n elif note == '|':\n beats.append(2)\n else:\n beats.append(1)\n return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n Count overlaping cases.\n :param string: The original string.\n :param substring: The substring to search for.\n :return: The number of times the substring can be found in the original string.\n \"\"\"\n\n def how_many_times(string: str, substring: str) -> int:\n \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n Count overlaping cases.\n :param string: The original string.\n :param substring: The substring to search for.\n :return: The number of times the substring can be found in the original string.\n \"\"\"\n \n def how_many_times(string: str, substring: str) -> int:\n \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n Count overlaping cases.\n :param string: The original string.\n :param substring: The substring to search for.\n :return: The number of times the substring can be found in the original string.\n \"\"\"\n \n def how_many_times(string: str, substring: str) -> int:\n \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n Count overlaping cases.\n :param string: The original string.\n :param substring: The substring to search for.\n :return: The number of times the substring can be found in the original string.\n \"\"\"\n \n def how_many_times(string: str, substring: str) -> int:\n \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n Count overlaping cases.\n :param string: The original string.\n :param substring: The substring to search for.\n :return: The number of times the substring can be found in the original string.\n \"\"\"\n \n def how_many_times(string: str, substring: str) -> int:\n \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n Count overlaping cases.\n :param string: The original string.\n :param substring: The substring to"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: List[str]) -> str:\n \"\"\" Input is a list of space-delimited strings of numberals from 'zero' to 'nine'.\n Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n Return the string with numbers sorted from smallest to largest.\n\n >>> sort_numbers(['three', 'one', 'five'])\n 'one three five'\n \"\"\"\n"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n other and return them in order (smaller number, larger number).\n >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n (2.0, 2.2)\n >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n (2.0, 2.0)\n \"\"\"\n"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n such that the smallest number will become 0 and the largest will become 1\n >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n [0.0, 0.25, 0.5, 0.75, 1.0]\n \"\"\"\n\n def rescale_to_unit(numbers: List[float]) -> List[float]:\n # TODO: Implement the function\n return numbers"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n \"\"\" Filter given list of any python values only for integers\n >>> filter_integers(['a', 3.14, 5])\n [5]\n >>> filter_integers([1, 2, 3, 'abc', {}, []])\n [1, 2, 3]\n \"\"\"\n\n return values"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n \"\"\" Return length of given string\n >>> strlen('')\n 0\n >>> strlen('abc')\n 3\n \"\"\"\n return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n >>> largest_divisor(15)\n 5\n \"\"\"\n \n def largest_divisor(n: int) -> int:\n # initialize variables\n smallest = 1\n largest = 1\n \n # loop until smallest is greater than n\n while smallest <= n:\n # find the next number that divides n evenly\n next_divisor = smallest + 2\n \n # check if next_divisor is the largest\n if next_divisor > largest:\n largest = next_divisor\n \n # update smallest to be the next number\n smallest = next_divisor\n \n # return the largest number\n return largest"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n Input number should be equal to the product of all factors\n >>> factorize(8)\n [2, 2, 2]\n >>> factorize(25)\n [5, 5]\n >>> factorize(70)\n [2, 5, 7]\n \"\"\"\n \n def factorize(n: int) -> List[int]:\n if n == 1:\n return []\n elif n == 2:\n return [2]\n else:\n factors = []\n for i in range(2, n):\n if n % i == 0:\n factors.append(i)\n n /= i\n \n return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n \"\"\" From a list of integers, remove all elements that occur more than once.\n Keep order of elements left the same as in the input.\n >>> remove_duplicates([1, 2, 3, 2, 4])\n [1, 3, 4]\n \"\"\"\n\n return numbers"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n >>> flip_case('Hello')\n 'hELLO'\n \"\"\"\n\n return string.upper() + string.lower()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n \"\"\" Concatenate list of strings into a single string\n >>> concatenate([])\n ''\n >>> concatenate(['a', 'b', 'c'])\n 'abc'\n \"\"\"\n\n return ''"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n >>> filter_by_prefix([], 'a')\n []\n >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n ['abc', 'array']\n \"\"\"\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n \"\"\"Return only positive numbers in the list.\n >>> get_positive([-1, 2, -4, 5, 6])\n [2, 5, 6]\n >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n \"\"\"Return true if a given number is prime, and false otherwise.\n >>> is_prime(6)\n False\n >>> is_prime(101)\n True\n >>> is_prime(11)\n True\n >>> is_prime(13441)\n True\n >>> is_prime(61)\n True\n >>> is_prime(4)\n False\n >>> is_prime(1)\n False"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n \"\"\"\n Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n \"\"\"\n return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n \"\"\" xs are coefficients of a polynomial.\n find_zero find x such that poly(x) = 0.\n find_zero returns only only zero point, even if there are many.\n Moreover, find_zero only takes list xs having even number of coefficients\n and largest non zero coefficient as it guarantees\n a solution.\n >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n -0.5\n >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n 1.0\n \"\"\"\n if len(xs) % 2!= 0:\n raise ValueError(\"xs must have even number of coefficients\")\n if len(xs) > 1:\n largest_non_zero_coeff = max(xs)\n if largest_non_zero_coeff == 0:\n return None\n return find_zero(xs[:-1]) + largest_non_zero_coeff / (xs[0] + 1)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n \"\"\"This function takes a list l and returns a list l' such that\n l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n to the values of the corresponding indicies of l, but sorted.\n >>> sort_third([1, 2, 3])\n [1, 2, 3]\n >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n \"\"\"Return sorted unique elements in a list\n >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n [0, 2, 3, 5, 9, 123]"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n if len(l) == 0:\n return None\n elif len(l) == 1:\n return l[0]\n else:\n return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n >>> fizz_buzz(50)\n 0\n >>> fizz_buzz(78)\n 2\n >>> fizz_buzz(79)\n 3"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n \"\"\"This function takes a list l and returns a list l' such that\n l' is identical to l in the odd indicies, while its values at the even indicies are equal\n to the values of the even indicies of l, but sorted.\n >>> sort_even([1, 2, 3])\n [1, 2, 3]\n >>> sort_even([5, 6, 3, 4])\n [3, 6, 5, 4]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n \"\"\"\n returns encoded string by cycling groups of three characters.\n \"\"\"\n # split string to groups. Each of length 3.\n groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n # cycle elements in each group. Unless group has fewer elements than 3.\n groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n # join groups back to original string.\n return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n \"\"\"\n takes as input string encoded with encode_cyclic function. Returns decoded string.\n \"\"\"\n # split input string into groups of 3 characters.\n groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n # join groups back to original string.\n return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n \"\"\"\n prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n \"\"\"\n \n def is_prime(num: int):\n \"\"\"\n is_prime checks if a given number is prime.\n \"\"\"\n \n if n < 2:\n return None\n \n if n == 2:\n return 2\n \n if n == 3:\n return 3\n \n if n == 5:\n return 13\n \n if n == 7:\n return 25\n \n if n == 11:\n return 34\n \n if n == 13:\n return 49\n \n if n == 17:\n return 64\n \n if n == 19:\n return 89\n \n if n == 23:\n return 128\n \n if n == 29:\n return 169\n \n if n == 31:\n return 211\n \n if n == 37:\n return 284\n \n if n == 43:\n return 381\n \n if n == 49:\n return 481\n \n if n == 53:\n return 581\n \n if n == 59:\n return 641\n \n if n == 61:\n return 702\n \n if n == 67:\n return 787\n \n if n == 73:\n return 857\n \n if n == 79:\n return 929\n \n if n == 83:\n return 1001\n \n if n == 89:\n return 1081\n \n if n == 97:\n return 1161\n \n if n == 103:\n return 1241\n \n if n == 109:\n return 1321\n \n if n == 113:\n return 1381\n \n if n == 127:\n return 14"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n if len(l) < 3:\n return False\n if l[0] + l[1] + l[2] == 0:\n return True\n return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n \"\"\"\n Imagine a road that's a perfectly straight infinitely long line.\n n cars are driving left to right;  simultaneously, a different set of n cars\n are driving right to left.   The two sets of cars start out being very far from\n each other. All cars move in the same speed.  Two cars are said to collide\n when a car that's moving left to right hits a car that's moving right to left.\n However, the cars are infinitely sturdy and strong; as a result, they continue moving\n in their trajectory as if they did not collide.\n\n This function outputs the number of such collisions.\n \"\"\"\n\n def car_race_collision(n: int):\n # initialize variables\n count = 0\n \n # loop through all possible combinations of car movements\n for i in range(n):\n for j in range(n):\n if i!= j:\n if i > 0 and j > 0:\n if i > 0 and j < n - 1:\n if i < n - 1 and j > 0:\n if i < n - 1 and j < n - 1:\n # check if two cars collide\n if car_race_collision(i - 1, j - 1):\n count += 1\n \n return count"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n \"\"\"Return list with elements incremented by 1.\n >>> incr_list([1, 2, 3])\n [2, 3, 4]\n >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n [6, 4, 6, 3, 4, 4, 10, 1, 124]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n \"\"\"\n pairs_sum_to_zero takes a list of integers as an input.\n it returns True if there are two distinct elements in the list that\n sum to zero, and False otherwise.\n >>> pairs_sum_to_zero([1, 3, 5, 0])\n False\n >>> pairs_sum_to_zero([1, 3, -2, 1])\n False\n >>> pairs_sum_to_zero([1, 2, 3, 7])\n False\n >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n True\n >>> pairs_sum_to_zero([1])\n False\n \"\"\"\n\n def pairs_sum_to_zero(l):\n if len(l) < 2:\n return False\n if l[0] + l[1] == 0:\n return True\n return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n \"\"\"Change numerical base of input number x to base.\n return string representation after the conversion.\n base numbers are less than 10.\n >>> change_base(8, 3)\n '22'\n >>> change_base(8, 2)\n '1000'\n >>> change_base(7, 2)\n '111'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n return 1/2 * h * (a / 2) ** 2\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n # initialize variables\n a = 0\n b = 1\n # loop until n is reached\n while n > 0:\n # calculate the next number in the sequence\n c = a + b\n # update the values of a and b\n a = b\n b = c\n # return the result\n return c"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n \"\"\"Return median of elements in the list l.\n >>> median([3, 1, 2, 4, 5])\n 3\n >>> median([-10, 4, 6, 1000, 10, 20])\n 15.0"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n \"\"\"\n Checks if given string is a palindrome\n Returns:\n True if string is a palindrome, False otherwise"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n if n > p:\n return 0\n if n == 0:\n return 1\n if p > 2:\n return (n % p) // p\n return (n % p) // (p - 1)"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n \"\"\"\n returns encoded string by shifting every character by 5 in the alphabet.\n \"\"\"\n return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n \"\"\"\n takes as input string encoded with encode_shift function. Returns decoded string.\n \"\"\"\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n \"\"\"\n remove_vowels is a function that takes string and returns string without vowels.\n >>> remove_vowels('')\n ''\n >>> remove_vowels(\"abcdef\")\n 'bcdf'\n >>> remove_vowels('aaaaa')\n ''\n >>> remove_vowels('aaBAA')\n 'B'\n >>> remove_vowels('zbcd')\n 'zbcd'\n \"\"\"\n\n def remove_vowels(text):\n # remove vowels from the text\n vowels = 'aeiou'\n text = text.lower()\n vowels_removed = text.translate(str.maketrans('', '', vowels))\n return vowels_removed.replace(' ', '')\n \n return vowels_removed"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n \"\"\"Return True if all numbers in the list l are below threshold t.\n >>> below_threshold([1, 2, 4, 10], 100)\n True\n >>> below_threshold([1, 20, 4, 10], 5)\n False"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n \"\"\"Add two numbers x and y\n >>> add(2, 3)\n 5\n >>> add(5, 7)\n 12"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n \"\"\"\n Check if two words have the same characters.\n :param s0: The first word to compare.\n :param s1: The second word to compare.\n :return: True if the words have the same characters, False otherwise.\n \"\"\"\n\n def same_chars(s0: str, s1: str):\n # Check if two words have the same characters.\n if len(set(s0)) == len(set(s1)):\n return True\n else:\n return False\n\n return True\n"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n \"\"\"Return n-th Fibonacci number.\n >>> fib(10)\n 55\n >>> fib(1)\n 1\n >>> fib(8)\n 21"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n \"\"\" brackets is a string of \"<\" and \">\".\n return True if every opening bracket has a corresponding closing bracket.\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n if l == []:\n return True\n elif len(l) == 1:\n return l[0] == l[len(l) - 1]\n else:\n return (l[0] <= l[-1] and l[0] >= l[-1]) or (l[0] > l[-1] and l[0] < l[-1])\n return False"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n \"\"\"Return sorted unique common elements for two lists.\n >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n [1, 5, 653]\n >>> common([5, 3, 2, 8], [3, 2])\n [2, 3]\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n if n < 2:\n return 2\n elif n < 7:\n return 2\n elif n < 17:\n return 3\n elif n < 53:\n return 5\n elif n < 89:\n return 7\n elif n < 131:\n return 11\n elif n < 197:\n return 13\n elif n < 293:\n return 17\n elif n < 399:\n return 23\n elif n < 521:\n return 29\n elif n < 677:\n return 31\n elif n < 829:\n return 37\n elif n < 1031:\n return 43\n elif n < 1231:\n return 49\n elif n < 1409:\n return 53\n elif n < 1571:\n return 59\n elif n < 1721:\n return 63\n elif n < 1871:\n return 67\n elif n < 2021:\n return 71\n elif n < 2171:\n return 73\n elif n < 2321:\n return 77\n elif n < 2471:\n return 81\n elif n < 2621:\n return 83\n elif n < 2771:\n return 87\n elif n < 2921:\n return 91\n elif n < 3071:\n return 93\n elif n < 3221:\n return 97\n elif n < 3371:\n return 101\n elif n < 3521:\n return 103\n elif n < 3671:\n return 107\n elif n < 3821:\n return 109\n elif n < 3971:\n return 113\n elif n < 4121:\n return 117\n elif n < 4271:\n return 121\n elif n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n\n sum_to_n(n)\n :param n: the number of numbers to sum\n :type n: int\n\n sum_to_n(n)\n :return: the sum of the numbers from 1 to n\n :rtype: int\n\n \n sum_to_n(30)\n :return: 465\n :rtype: int\n\n \n sum_to_n(100)\n :return: 5050\n :rtype: int\n\n \n sum_to_n(5)\n :return: 15\n :rtype: int\n\n \n sum_to_n(10)\n :return: 55\n :rtype: int\n\n \n sum_to_n(1)\n :return: 1\n :rtype: int\n\n \n sum_to_n(0)\n :return: 0\n :rtype: int\n\n \n sum_to_n(None)\n :return: ValueError: invalid input\n :rtype: ValueError\n\n \n sum_to_n([]):\n :return: ValueError: empty input\n :rtype: ValueError\n\n \n sum_to_n(''):\n :return: ValueError: empty input\n :rtype: ValueError\n\n \n sum_to_n(1.2):\n :return: ValueError: invalid input\n :rtype: ValueError\n\n \n sum_to_n(None):\n :return: ValueError: invalid input\n :rtype: ValueError\n\n \n sum_to_n([]):\n :return: ValueError: empty input\n :rtype: ValueError\n\n \n sum_to_n(''):\n :return: ValueError: empty input\n :rtype: ValueError\n\n \n sum_to_n(1.2):\n :return: ValueError: invalid input\n :rtype: ValueError\n\n \n sum_to_n(None):\n :return: ValueError: invalid input\n :rtype: ValueError\n\n \n sum_to_n("}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n \"\"\" brackets is a string of \"(\" and \")\".\n return True if every opening bracket has a corresponding closing bracket.\n"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n \"\"\" xs represent coefficients of a polynomial.\n xs[0] + xs[1] * x + xs[2] * x^2 +....\n Return derivative of this polynomial in the same form.\n >>> derivative([3, 1, 2, 4, 5])\n [1, 4, 12, 20]\n >>> derivative([1, 2, 3])\n [2, 6]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n if n == 0:\n return 0\n elif n == 1:\n return 0\n elif n == 2:\n return 1\n elif n == 3:\n return 1\n elif n == 4:\n return 1\n elif n == 5:\n return 2\n elif n == 6:\n return 2\n elif n == 7:\n return 3\n elif n == 8:\n return 24\n else:\n return 0"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n \"\"\""}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n and return the result as a string.\n If shift > number of digits, return digits reversed.\n >>> circular_shift(12, 1)\n \"21\"\n >>> circular_shift(12, 2)\n \"12\""}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n \"\"\"Task\n Task: Write a function that takes a string as input and returns the sum of the upper characters only' ASCII codes.\n\n Examples:\n - digitSum(\"\") => 0\n - digitSum(\"abAB\") => 131\n - digitSum(\"abcCd\") => 67\n - digitSum(\"helloE\") => 69\n - digitSum(\"woArBld\") => 131\n - digitSum(\"aAaaaXa\") => 153\n\n Input: A string\n Output: The sum of the upper characters only' ASCII codes.\n\n Returns: The sum of the upper characters only' ASCII codes.\n\n Notes: This function takes a string as input and returns the sum of the upper characters only' ASCII codes. It uses a for loop to iterate through the string and returns the sum of the upper ASCII codes."}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n \"\"\"\n In this task, you will be given a string that represents a number of apples and oranges \n that are distributed in a basket of fruit this basket contains \n apples, oranges, and mango fruits. Given the string that represents the total number of \n the oranges and apples and an integer that represent the total number of the fruits \n in the basket return the number of the mango fruits in the basket.\n for examble:\n fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n \"\"\"\n \n def fruit_distribution(s,n):\n # check if the input string is valid\n if s.isdigit() and n.isdigit():\n # get the total number of apples and oranges\n total_apples = int(s[0])\n total_oranges = int(s[1])\n \n # get the total number of fruits in the basket\n total_fruits = n\n \n # calculate the number of mango fruits in the basket\n mango_fruits = total_fruits - total_apples - total_oranges\n \n # return the result\n return mango_fruits\n \n return None"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n \"\"\""}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n greatest_frequency = 0\n for num in lst:\n if num > 0 and num > greatest_frequency:\n greatest_frequency = num\n return greatest_frequency"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n \"\"\"\n Given list of integers, return list in strange order.\n Strange sorting, is when you start with the minimum value,\n then maximum of the remaining integers, then minimum and so on.\n\n Examples:\n strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n strange_sort_list([]) == []\n\n Returns:\n A list in strange order.\n\n Notes:\n This function is not a stable sorting algorithm and may not always return the same result.\n"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n if a + b > c:\n return round(sqrt(a * b / 2) * (a + b) / 2, 2)\n else:\n return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n if is_balanced(q) and sum(q) <= w:\n return True\n else:\n return False\n\ndef is_balanced(q):\n if len(q) == len(list(reversed(q))):\n return True\n else:\n return False\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n \"\"\"\n Given an array arr of integers, find the minimum number of elements that\n need to be changed to make the array palindromic. A palindromic array is an array that\n is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n For example:\n smallest_change([1,2,3,5,4,7,9,6]) == 4\n smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n smallest_change([1, 2, 3, 2, 1]) == 0\n\n Returns:\n The minimum number of elements that need to be changed to make the array palindromic.\n\n Notes:\n This function assumes that the input array is a list of integers.\n It does not consider the order of the elements in the input array.\n It assumes that the input array is not already palindromic.\n\n Examples:\n smallest_change([1,2,3,5,4,7,9,6]) == 4\n smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n smallest_change([1, 2, 3, 2, 1]) == 0\n smallest_change([1, 2, 3, 2, 1, 2, 3, 2, 1]) == 3\n smallest_change([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 6\n smallest_change([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 9\n smallest_change([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, "}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n \"\"\""}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n \"\"\""}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n if n**int=x:\n return True\n else:\n return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n if a**3 == a:\n return True\n return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n \"\"\"You have been tasked to write a function that receives \n a hexadecimal number as a string and counts the number of hexadecimal \n digits that are primes (prime number, or a prime, is a natural number \n greater than 1 that is not a product of two smaller natural numbers).\n Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n So you have to determine a number of the following digits: 2, 3, 5, 7, \n B (=decimal 11), D (=decimal 13).\n Note: you may assume the input is always correct or empty string, \n and symbols A,B,C,D,E,F are always uppercase.\n Examples:\n For num = \"AB\" the output should be 1.\n For num = \"1077E\" the output should be 2.\n For num = \"ABED1A33\" the output should be 4.\n For num = \"123456789ABCDEF0\" the output should be 6.\n For num = \"2020\" the output should be 2."}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n \"\"\"You will be given a number in decimal form and your task is to convert it to\n binary format. The function should return a string, with each character representing a binary\n number. Each character in the string will be '0' or '1'.\n\n There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n The extra characters are there to help with the format.\n\n Examples:\n decimal_to_binary(15)   # returns \"db1111db\"\n decimal_to_binary(32)   # returns \"db100000db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n \"\"\"You are given a string s.\n Your task is to check if the string is happy or not.\n A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n For example:\n is_happy(a) => False\n is_happy(aa) => False\n is_happy(abcd) => True\n is_happy(aabb) => False\n is_happy(adb) => True\n is_happy(xyy) => False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n \"\"\"It is the last week of the semester and the teacher has to give the grades\n to students. The teacher has been making her own algorithm for grading.\n The only problem is, she has lost the code she used for grading.\n She has given you a list of GPAs for some students and you have to write \n a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n grades = list(grades)\n letter_grades = []\n for gpa in grades:\n if gpa > 3.7:\n letter_grades.append('A')\n elif gpa > 3.3:\n letter_grades.append('A')\n elif gpa > 3.0:\n letter_grades.append('B')\n elif gpa > 2.7:\n letter_grades.append('B')\n elif gpa > 2.3:\n letter_grades.append('B')\n elif gpa > 2.0:\n letter_grades.append('C')\n elif gpa > 1.7:\n letter_grades.append('C')\n elif gpa > 1.3:\n letter_grades.append('C')\n elif gpa > 1.0:\n letter_grades.append('D')\n elif gpa > 0.7:\n letter_"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n \"\"\""}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n \"\"\"\n Given a positive integer n, return the count of the numbers of n-digit\n positive integers that start or end with 1.\n \"\"\"\n\n def starts_one_ends(n):\n count = 0\n for i in range(10**n):\n if i % 1 == 0 and i % 10 == 1:\n count += 1\n return count\n\n return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n \n @N integer\n \n @return a string of binary number\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n Examples:\n add([4, 2, 6, 7]) ==> 2 \n\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n \"\"\"\n Write a function that takes a string and returns an ordered version of it.\n Ordered version of string, is a string where all words (separated by space)\n are replaced by a new word where all the characters arranged in\n ascending order based on ascii value.\n Note: You should keep the order of words and blank spaces in the sentence.\n\n For example:\n anti_shuffle('Hi') returns 'Hi'\n anti_shuffle('hello') returns 'ehllo'\n anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n \"\"\"\n s = s.lower()\n words = s.split()\n new_words = []\n for word in words:\n new_word = ''.join(filter(lambda c: c.isalpha(), word))\n new_words.append(new_word)\n shuffled_sentence =''.join(new_words)\n return shuffled_sentence"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n \"\"\"\n You are given a 2 dimensional data, as a nested lists,\n which is similar to matrix, however, unlike matrices,\n each row may contain a different number of columns.\n Given lst, and integer x, find integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that\n each tuple is a coordinate - (row, columns), starting with 0.\n Sort coordinates initially by rows in ascending order.\n Also, sort coordinates of the row by columns in descending order.\n Examples:\n get_row([\n [1,2,3,4,5,6],\n [1,2,3,4,1,6],\n [1,2,3,4,5,1]\n ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n get_row([], 1) == []\n get_row([[1,2,3,4,5,6]], 3) == [(2, 2)]\n \"\"\"\n # assume that lst is a nested list\n # assume that x is an integer\n # sort coordinates of the row by columns in descending order\n # return list of tuples, [(x1, y1), (x2, y2)...] such that\n # each tuple is a coordinate - (row, columns), starting with 0.\n # sort coordinates initially by rows in ascending order.\n # use a nested list to store the sorted coordinates\n # return the sorted nested list\n lst = lst\n x = x\n # sort coordinates of the row by columns in descending order\n sorted_coords = sorted(lst, key=lambda x: x[x[1]-1])\n # sort coordinates initially by rows in ascending order\n sorted_coords = sorted(sorted_coords, key=lambda x: x[0])\n # return the sorted nested list\n return sorted_coords"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n \"\"\"\n Given an array of non-negative integers, return a copy of the given array after sorting,\n you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n or sort it in descending order if the sum( first index value, last index value) is even.\n\n Note:\n * don't change the given array.\n\n Examples:\n * sort_array([]) => []\n * sort_array([5]) => [5]\n * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n \"\"\"\n def sort_array(array):\n # initialize variables\n odd_sum = 0\n even_sum = 0\n \n # iterate over each element in the array\n for i in range(len(array)):\n # calculate the sum of the current element and the next element\n odd_sum += array[i] + array[i+1]\n even_sum += array[i] + array[i+2]\n \n # return the sorted array\n return array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n \"\"\"Create a function encrypt that takes a string as an argument and\n returns a string encrypted with the alphabet being rotated. \n The alphabet should be rotated in a manner such that the letters \n shift down by two multiplied to two places.\n For example:\n encrypt('hi') returns 'lm'\n encrypt('asdfghjkl') returns 'ewhjklnop'\n encrypt('gf') returns 'kj'\n encrypt('et') returns 'ix'"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n if len(lst) == 0:\n return None\n elif len(lst) == 1:\n return lst[0]\n else:\n smallest = lst[0]\n for i in range(1, len(lst)):\n if lst[i] < smallest:\n smallest = lst[i]\n return smallest\n return None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n \"\"\"\n You'll be given a string of words, and your task is to count the number\n of boredoms. A boredom is a sentence that starts with the word \"I\".\n Sentences are delimited by '.', '?' or '!'.\n\n For example:\n >>> is_bored(\"Hello world\")\n 0\n >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n 1\n \"\"\"\n \n def is_bored(S):\n # split the string into words\n words = S.split()\n \n # count the number of words that start with 'I'\n boredoms = 0\n for word in words:\n if word.startswith('I'):\n boredoms += 1\n \n return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n if x + y == z and is_integer(x) and is_integer(y) and is_integer(z):\n return True\n else:\n return False\n\ndef is_integer(num):\n if isinstance(num, (int, float)):\n return True\n else:\n return False\n"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n \"\"\"\n Write a function that takes a message, and encodes in such a \n way that it swaps case of all letters, replaces all vowels in \n the message with the letter that appears 2 places ahead of that \n vowel in the english alphabet. \n Assume only letters. \n Examples:"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n \"\"\"You are given a list of integers.\n You need to find the largest prime value and return the sum of its digits.\n\n Examples:\n For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n For lst = [0,81,12,3,1,21] the output should be 3\n For lst = [0,8,1,2,1,7] the output should be 7\n\n def skjkasdkd(lst):\n \"\"\"You are given a list of integers.\n You need to find the largest prime value and return the sum of its digits.\n\n Examples:\n For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n For lst = [1,3,1,32,5107,34,83278,109,1"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n \"\"\"\n Given a dictionary, return True if all keys are strings in lower \n case or all keys are strings in upper case, else return False.\n The function should return False is the given dictionary is empty.\n Examples:\n check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n check_dict_case({\"a\":\"apple\", \"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n \"\"\"\n if not dict:\n return False\n for key in dict:\n if key.islower():\n return True\n elif key.isupper():\n return True\n return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n integers that are prime numbers and less than n.\n for example:\n count_up_to(5) => [2,3]\n count_up_to(11) => [2,3,5,7,11]\n count_up_to(0) => []\n count_up_to(20) => [2,3,5,7,11,13,17,19]\n count_up_to(1) => []\n count_up_to(18) => [2,3,5,7]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n \"\"\"Complete the function that takes two integers and returns \n the product of their unit digits.\n Assume the input is always valid.\n Examples:\n multiply(148, 412) should return 16.\n multiply(19, 28) should return 72.\n multiply(2020, 1851) should return 0.\n multiply(14,-15) should return 20."}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n \"\"\"\n Given a string s, count the number of uppercase vowels in even indices.\n \n For example:\n count_upper('aBCdEf') returns 1\n count_upper('abcdefg') returns 0\n count_upper('dBBE') returns 0\n \"\"\"\n \n return 0"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n if value.isdigit():\n return round(value, -1)\n else:\n return value\n"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n stones = []\n if n % 2 == 0:\n stones.append(n + 2)\n stones.append(n + 4)\n stones.append(n + 6)\n else:\n stones.append(n + 3)\n stones.append(n + 5)\n stones.append(n + 7)\n return stones"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n words = s.split(',')\n return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n \"\"\"This function takes two positive numbers x and y and returns the\n biggest even integer number that is in the range [x, y] inclusive. If\n there's no such number, then the function should return -1.\n\n For example:\n choose_num(12, 15) = 14\n choose_num(13, 12) = -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n if n > m:\n return -1\n if n == m:\n return int(n / 2)\n if n % 2 == 0:\n return int(n / 2)\n return int(n / 2) + 1\n if m % 2 == 0:\n return int(m / 2)\n return int(m / 2) + 1\n return 0"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n \"\"\"Given a list of positive integers x. return a sorted list of all \n elements that hasn't any even digit.\n\n Note: Returned list should be sorted in increasing order.\n\n For example:\n >>> unique_digits([15, 33, 1422, 1])\n [1, 15, 33]\n >>> unique_digits([152, 323, 1422, 10])\n []"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n \"\"\"\n Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n reverse the resulting array, and then replace each digit by its corresponding name from\n \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n For example:\n arr = [2, 1, 1, 4, 5, 8, 2, 3]\n -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n If the array is empty, return an empty array:\n arr = []\n return []\n\n If the array has any strange number ignore it:\n arr = [1, -1, 55]\n -> sort arr -> [-1, 1, 55]\n -> reverse arr -> [55, 1, -1]\n return ['One']"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n \"\"\" Implement the function f that takes n as a parameter,\n and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n or the sum of numbers from 1 to i otherwise.\n i starts from 1.\n the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i)."}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n \"\"\"\n Given a positive integer n, return a tuple that has the number of even and odd\n integer palindromes that fall within the range(1, n), inclusive.\n\n Note:\n 1. 1 <= n <= 10^3\n 2. returned tuple has the number of even and odd integer palindromes respectively.\n \"\"\"\n \n def even_odd_palindrome(n):\n # check if n is within range\n if n < 1 or n > 10**3:\n return \"Error: n must be a positive integer between 1 and 10^3\"\n \n # count the number of even and odd palindromes\n count = 0\n for i in range(1, n+1):\n if i % 2 == 0:\n count += 1\n if i % 3 == 0:\n count += 1\n \n # return the tuple\n return (count, count)\n \n return \"Error: n must be a positive integer between 1 and 10^3\""}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n \"\"\""}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will be randomly ordered. Your task is to determine if\n it is possible to get an array sorted in non-decreasing order by performing \n the following operation on the given array:\n \n You are allowed to perform right shift operation any number of times.\n \n One right shift operation means shifting all elements of the array by one\n position in the right direction. The last element of the array will be moved to\n the starting position in the array i.e. 0th index. \n \n If it is possible to obtain the sorted array by performing the above operation\n then return True else return False.\n \n If the given array is empty then return True.\n \n Note: The given list is guaranteed to have unique elements.\n \n For Example:\n \n move_one_ball([3, 4, 5, 1, 2])==>True\n \n Explanation: By performin 2 right shift operations, non-decreasing order can\n be achieved for the given array.\n \n move_one_ball([3, 5, 4, 1, 2])==>False\n \n Explanation:It is not possible to get non-decreasing order for the given\n array by performing any number of right shift operations.\n "}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n and determines whether it is possible to perform an exchange of elements\n between them to make lst1 a list of only even numbers.\n There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to make\n all the elements of lst1 to be even, return \"YES\".\n Otherwise, return \"NO\".\n For example:\n exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n It is assumed that the input lists will be non-empty."}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n of the letter with the most repetition and containing the corresponding count.\n If several letters have the same occurrence, return all of them.\n Example:\n histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n histogram('a b b a') == {'a': 2, 'b': 2}\n histogram('a b c a b') == {'a': 2, 'b': 2}\n histogram('b b b b a') == {'b': 4}\n histogram('') == {}\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n \"\"\"Task\n We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n then check if the result string is palindrome.\n A string is called palindrome if it reads the same backward as forward.\n You should return a tuple containing the result string and True/False for the check.\n Example\n For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n \"\"\"\n result = \"\"\n for char in s:\n if char in c:\n result += char\n else:\n result += \" \"\n return (result, True)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n Each element i of the output should be \"the number of odd elements in the\n string i of the input.\" where all the i's should be replaced by the number\n of odd digits in the i'th string of the input.\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n \"\"\"\n Given an array of integers nums, find the minimum sum of any non-empty sub-array\n of nums.\n Example\n minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n minSubArraySum([-1, -2, -3]) == -6\n \"\"\"\n \n def minSubArraySum(nums):\n # initialize variables\n total = 0\n subarr = []\n \n # iterate through each number in the array\n for num in nums:\n # check if the number is in the subarray\n if len(subarr) > 0:\n # add the number to the subarray\n subarr.append(num)\n # calculate the sum of the subarray\n sum = sum(subarr)\n # update the total sum\n total += sum\n # remove the number from the subarray\n subarr.remove(num)\n \n # return the minimum sum of any non-empty sub-array\n return min(total)"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n import math\n \"\"\"\n You are given a rectangular grid of wells. Each row represents a single well,\n and each 1 in a row represents a single unit of water.\n Each well has a corresponding bucket that can be used to extract water from it, \n and all buckets have the same capacity.\n Your task is to use the buckets to empty the wells.\n Output the number of times you need to lower the buckets.\n\n Example 1:\n Input: \n grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n bucket_capacity : 1\n Output: 6\n\n Example 2:\n Input: \n grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n bucket_capacity : 2\n Output: 5\n\n Example 3:\n Input: \n grid : [[0,0,0], [0,0,0]]\n bucket_capacity : 5\n Output: 0\n\n Constraints:\n * all wells have the same length\n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n\n \"\"\"\n def max_fill(grid, capacity):\n # initialize variables\n num_buckets = len(grid)\n num_wells = len(grid[0])\n num_rows = len(grid)\n num_cols = len(grid[0])\n num_fills = 0\n \n # loop through each row\n for i in range(num_rows):\n # loop through each column\n for j in range(num_cols):\n # check if well is empty\n if grid[i][j] == 0:\n # if bucket is available, fill well\n if capacity > 0:\n capacity -= 1\n grid[i][j] = 1\n capacity += 1\n num_fills += 1\n \n # if bucket is not available, skip"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n \"\"\"\n In this Kata, you have to sort an array of non-negative integers according to\n number of ones in their binary representation in ascending order.\n For similar number of ones, sort based on decimal value.\n It must be implemented like this:\n >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n \"\"\"\n def sort_array(arr):\n # Convert the array to a list of integers\n arr = list(arr)\n \n # Initialize a variable to keep track of the number of ones in the binary representation\n num_ones = 0\n \n # Loop through each element in the array\n for i in range(len(arr)):\n # Convert the integer to a binary representation\n binary_repr = bin(arr[i])[2:]\n \n # Count the number of ones in the binary representation\n num_ones += len(binary_repr) - 1\n \n # Compare the integer to the sorted array\n if num_ones > arr[i]:\n # Swap the integer with the sorted integer\n arr[i], arr[i+1] = arr[i+1], arr[i]\n \n # Update the number of ones in the binary representation\n num_ones -= 1\n \n # If the number of ones is the same, compare the integers based on their decimal values\n if num_ones == arr[i] == arr[i+1]:\n # Compare the integers based on their decimal values\n if arr[i] > arr[i+1]:\n # Swap the integers\n arr[i], arr[i+1] = arr[i+1], arr[i]\n \n # Update the number of ones in the binary representation\n num_ones -= 1\n \n # If the number of ones is the same, compare the integers based on their decimal values\n if num_"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n \"\"\"Given a string s and a natural number n, you have been tasked to implement \n a function that returns a list of all words from string s that contain exactly \n n consonants, in order these words appear in the string s.\n If the string s is empty then the function should return an empty list.\n Note: you may assume the input string contains only letters and spaces.\n Examples:\n select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n select_words(\"simple white space\", 2) ==> []\n select_words(\"Hello world\", 4) ==> [\"world\"]\n select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n vowels = ['a', 'e', 'i', 'o', 'u']\n \n for i in range(len(word) - 1):\n if word[i] in vowels and word[i+1] in vowels:\n return word[i]\n \n return ''"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n \"\"\"\n You are given a list of two strings, both strings consist of open\n parentheses '(' or close parentheses ')' only.\n Your job is to check if it is possible to concatenate the two strings in\n some order, that the resulting string will be good.\n A string S is considered to be good if and only if all parentheses in S\n are balanced. For example: the string '(())()' is good, while the string\n '())' is not.\n Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n Examples:\n match_parens(['()(', ')']) == 'Yes'\n match_parens([')', ')']) == 'No'\n \"\"\"\n return 'Yes'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n \"\"\"\n Given an array arr of integers and a positive integer k, return a sorted list \n of length k with the maximum k numbers in arr.\n\n Example 1:\n\n Input: arr = [-3, -4, 5], k = 3\n Output: [-4, -3, 5]\n\n Example 2:\n\n Input: arr = [4, -4, 4], k = 2\n Output: [4, 4]\n\n Example 3:\n\n Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n Output: [2]\n\n Note:\n 1. The length of the array will be in the range of [1, 1000].\n 2. The elements in the array will be in the range of [-1000, 1000].\n 3. 0 <= k <= len(arr)"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n \"\"\""}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n \"\"\"\n Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n as follows: start with any positive integer n. Then each term is obtained from the \n previous term as follows: if the previous term is even, the next term is one half of \n the previous term. If the previous term is odd, the next term is 3 times the previous\n term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n Note: \n 1. Collatz(1) is [1].\n 2. returned list sorted in increasing order.\n\n For example:\n get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n \"\"\"\n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n \"\"\"You have to write a function which validates a given date string and\n returns True if the date is valid otherwise False.\n The date is valid if all of the following rules are satisfied:\n 1. The date string is not empty.\n 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n 3. The months should not be less than 1 or higher than 12.\n 4. The date should be in the format: mm-dd-yyyy\n\n for example:\n valid_date('03-11-2000') => True\n\n valid_date('15-01-2012') => False\n\n valid_date('04-0-2040') => False\n\n valid_date('06-04-2020') => True\n\n valid_date('06/04/2020') => False\n\n return True if the date is valid, otherwise return False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n if not txt:\n return txt\n words = txt.split()\n if not words:\n return words\n if ',' in words:\n return words\n if'' in words:\n return words\n if ',' in ''.ascii_lowercase:\n return len(words)\n return 0"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n \"\"\"\n Given a list of numbers, return whether or not they are sorted\n in ascending order. If list has more than 1 duplicate of the same\n number, return False. Assume no negative numbers and only integers.\n\n Examples"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n \"\"\"You are given two intervals,\n where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n The given intervals are closed which means that the interval (start, end)\n includes both start and end.\n For each given interval, it is assumed that its start is less or equal its end.\n Your task is to determine whether the length of intersection of these two \n intervals is a prime number.\n Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n which its length is 1, which not a prime number.\n If the length of the intersection is a prime number, return \"YES\",\n otherwise, return \"NO\".\n If the two intervals don't intersect, return \"NO\".\n\n"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n if len(arr) == 0:\n return None\n else:\n return sum(arr[i] * (1 if arr[i] == 1 else -1) * (1 if arr[i] == 0 else -1) for i in range(len(arr)))"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n \"\"\""}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n the last couple centuries. However, what people don't know is Tribonacci sequence.\n Tribonacci sequence is defined by the recurrence:\n tri(1) = 3\n tri(n) = 1 + n / 2, if n is even.\n tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n For example:\n tri(2) = 1 + (2 / 2) = 2\n tri(4) = 3\n tri(3) = tri(2) + tri(1) + tri(4)\n = 2 + 3 + 3 = 8 \n You are given a non-negative integer number n, you have to a return a list of the \n first n + 1 numbers of the Tribonacci sequence.\n Examples:\n tri(3) = [1, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n if n % 2 == 0:\n return 0\n return 1"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n \"\"\"\n Create a function that takes a string as input which contains only square brackets.\n The function should return True if and only if there is a valid subsequence of brackets \n where at least one bracket in the subsequence is nested.\n\n is_nested('[[]]') \u279e True\n is_nested('[]]]]]]][[[[[]') \u279e False\n is_nested('[][]') \u279e False\n is_nested('[]') \u279e False\n is_nested('[[][]]') \u279e True\n is_nested('[[]][[') \u279e True\n"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n \"\"\"You are given a list of numbers.\n You need to return the sum of squared numbers in the given list,\n round each element in the list to the upper int(Ceiling) first.\n Examples:\n For lst = [1,2,3] the output should be 14\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should be 98\n For lst = [1,3,5,7] the output should be 84\n For lst = [1,4,9] the output should"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n # Define a function that returns True if the last character\n # of a given string is an alphabetical character and is not\n # a part of a word, and False otherwise.\n # Note: \"word\" is a group of characters separated by space.\n # Note: \"alphabetical character\" means any letter or digit.\n # Note: \"not a part of a word\" means the last character is not\n # followed by a word boundary.\n # Note: \"word boundary\" is a special character that matches\n # the position where a word boundary is expected.\n # Note: \"return\" is a keyword that specifies the return type of the function.\n # Note: \"True\" and \"False\" are built-in types in Python.\n # Note: \"txt\" is the input string.\n # Note: \"if\" and \"return\" are keywords in Python.\n # Note: \"print\" is a built-in function in Python that prints the output.\n # Note: \"None\" is a built-in type in Python that represents the absence of a value.\n # Note: \"return\" is a keyword that specifies the return type of the function.\n # Note: \"True\" and \"False\" are built-in types in Python.\n # Note: \"print\" is a built-in function in Python that prints the output.\n # Note: \"None\" is a built-in type in Python that represents the absence of a value.\n # Note: \"return\" is a keyword that specifies the return type of the function.\n # Note: \"True\" and \"False\" are built-in types in Python.\n # Note: \"print\" is a built-in function in Python that prints the output.\n # Note: \"None\" is a built-in type in Python that represents the absence of a value.\n # Note: \"return\" is a keyword that specifies the return type of the function.\n # Note: \"True\" and \"False\" are built-in types in Python.\n # Note: \"print\" is a built-in function in Python that prints the output.\n # Note: \"None\" is a built-in type in Python that represents the absence of a value.\n # Note: \"return\" is a keyword that specifies the return type of the function."}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n largest_index = -1\n for i in range(len(arr)):\n if i > 0 and arr[i] < arr[i-1]:\n largest_index = i\n break\n return largest_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n if not lst:\n return None\n a, b = lst[0], lst[-1]\n return (a, b)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n if isinstance(a, (int, float)):\n if isinstance(b, (int, float)):\n if a > b:\n return a\n elif a < b:\n return b\n else:\n return None\n elif isinstance(b, (str,)):\n if a > b:\n return a\n elif a < b:\n return b\n else:\n return None\n else:\n return None\n return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n Example\n is_equal_to_sum_even(4) == False\n is_equal_to_sum_even(6) == False\n is_equal_to_sum_even(8) == True\n \"\"\"\n\n def is_equal_to_sum_even(n):\n if n % 2 == 0:\n return False\n if n % 2 == 0 and n % 4 == 0:\n return False\n if n % 2 == 0 and n % 4 == 0 and n % 6 == 0:\n return False\n if n % 2 == 0 and n % 4 == 0 and n % 6 == 0 and n % 8 == 0:\n return False\n return True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n \"\"\"The Brazilian factorial is defined as:\n brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n where n > 0\n\n For example:\n >>> special_factorial(4)\n 288\n\n The function will receive an integer as input and should return the special\n factorial of this integer.\n \"\"\"\n return n * (n-1) * (n-2) *... * 1"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n \"\"\"\n Given a string text, replace all spaces in it with underscores, \n and if a string has more than 2 consecutive spaces, \n then replace all consecutive spaces with - \n fix_spaces(\"Example\") == \"Example\"\n fix_spaces(\"Example 1\") == \"Example_1\"\n fix_spaces(\" Example 2\") == \"_Example_2\"\n fix_spaces(\" Example   3\") == \"_Example-3\"\n \"\"\"\n text = text.replace(\" \", \"_\")\n if len(text) > 2 and text.count(\" \") > 1:\n text = text.replace(\" \", \"-\")\n return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n \"\"\"Create a function which takes a string representing a file's name, and returns\n 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n A file's name is considered to be valid if and only if all the following conditions \n are met:\n - There should not be more than three digits ('0'-'9') in the file's name.\n - The file's name contains exactly one dot '.'\n - The substring before the dot should not be empty, and it starts with a letter from \n the latin alphapet ('a'-'z' and 'A'-'Z').\n - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n Examples:\n file_name_check(\"example.txt\") # => 'Yes'\n file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n \"\"\"\n This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n Examples:\n For lst = [1,2,3] the output should be 6\n For lst = []  the output should be 0\n For lst = [-1,-5,2,-1,-5]  the output should be -126\n"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n \"\"\"\n You are given a string representing a sentence,\n the sentence contains some words separated by a space,\n and you have to return a string that contains the words from the original sentence,\n whose lengths are prime numbers,\n the order of the words in the new string should be the same as the original one.\n\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n if is_whole_number(x) and is_whole_number(n) and x * n == int(x * n):\n return True\n else:\n return False\n\ndef is_whole_number(x):\n if x.is_whole_number():\n return True\n else:\n return False\n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n \"\"\"\n Sort the given list of integers in ascending order according to the sum of their digits.\n If there are several items with similar sum of their digits, order them based on their index in original list.\n For example:\n >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n >>> order_by_points([]) == []\n \"\"\"\n nums = list(nums)\n \n def sort_by_points(nums):\n # sort the list based on the sum of their digits\n return sorted(nums, key=lambda x: sum(int(str(x)) for str in str(x)))\n \n return sort_by_points(nums)\n \n return nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n return len(filter(lambda x: x > 10 and (x // 10 % 2 == 1 and x // 10 % 10 == 1), nums))"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n \"\"\"\n You are given a positive integer n. You have to create an integer array a of length n.\n For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n and a[i] + a[j] + a[k] is a multiple of 3.\n"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n if not isinstance(planet1, str) or not isinstance(planet2, str):\n return \"\"\n if planet1.lower() not in [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"] or planet2.lower() not in [\"jupiter\", \"saturn\", \"uranus\", \"neptune\"]:\n return \"\"\n \n # create a list of all planets\n planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n \n # sort the planets by their distance from the sun\n planets.sort(key=lambda x: (abs(x.index(planet1) - planet2.index(planet1)), abs(x.index(planet2) - planet1.index(planet2))))\n \n # return the first 5 planets that are between the orbits of planet1 and planet2\n return planets[:5]"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n \"\"\"Write a function that accepts a list of strings as a parameter,\n deletes the strings that have odd lengths from it,\n and returns the resulted list with a sorted order,\n The list is always a list of strings and never an array of numbers,\n and it may contain duplicates.\n The order of the list should be ascending by length of each word, and you\n should return the list sorted by that rule.\n If two words have the same length, sort the list alphabetically.\n The function should return a list of strings in sorted order.\n You may assume that all words will have the same length.\n For example:"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n if is_prime(n):\n return x\n else:\n return y\n\ndef is_prime(n):\n if n > 1:\n for i in range(2, n):\n if n % i == 0:\n return False\n return True\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n odd_sum = 0\n for num in lst:\n if isinstance(num, (int, float)):\n if num % 2!= 0 and num > 0:\n odd_sum += num ** 2\n return odd_sum\n else:\n return 0"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n \"\"\"I think we all remember that feeling when the result of some long-awaited\n game,guess: 2D list of guesses\n return: 2D list of differences between guesses and scores\n \n def compare(game,guess):\n \"\"\"I think we all remember that feeling when the result of some long-awaited\n game,guess: 2D list of guesses\n return: 2D list of differences between guesses and scores\n \n def compare(game,guess):\n \"\"\"I think we all remember that feeling when the result of some long-awaited\n game,guess: 2D list of guesses\n return: 2D list of differences between guesses and scores\n \n def compare(game,guess):\n \"\"\"I think we all remember that feeling when the result of some long-awaited\n game,guess: 2D list of guesses\n return: 2D list of differences between guesses and scores\n \n def compare(game,guess):\n \"\"\"I think we all remember that feeling when the result of some long-awaited\n game,guess: 2D list of guesses\n return: 2D list of differences between guesses and scores\n \n def compare(game,guess):\n \"\"\"I think we all remember that feeling when the result of some long-awaited\n game,guess: 2D list of guesses\n return: 2D list of differences between guesses and scores\n "}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n \"\"\"You will be given the name of a class (a string) and a list of extensions.\n The extensions are to be used to load additional classes to the class. The\n strength of the extension is as follows: Let CAP be the number of the uppercase\n letters in the extension's name, and let SM be the number of lowercase letters \n in the extension's name, the strength is given by the fraction CAP - SM. \n You should find the strongest extension and return a string in this \n format: ClassName.StrongestExtensionName.\n If there are two or more extensions with the same strength, you should\n choose the one that comes first in the list.\n For example, if you are given \"Slices\" as the class and a list of the\n extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n (its strength is -1).\n Example:\n for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n \"\"\"\n \n class_name = class_name.lower()\n extensions = extensions\n \n for extension in extensions:\n extension = extension.lower()\n \n if len(extension) > len(class_name):\n continue\n \n extension_strength = (len(extension) - len(class_name)) / (len(extension) - len(class_name))\n \n if extension_strength > 0:\n return f\"{class_name}.{extension}\"\n \n return None\n \n return None"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n cycpattern_check(\"abcd\",\"abd\") => False\n cycpattern_check(\"hello\",\"ell\") => True\n cycpattern_check(\"whassup\",\"psus\") => False\n cycpattern_check(\"abab\",\"baa\") => True\n cycpattern_check(\"efef\",\"eeff\") => False\n cycpattern_check(\"himenss\",\"simen\") => True\n\n\n def cycpattern_check(a, b):\n # Convert the input words to lowercase\n a = a.lower()\n b = b.lower()\n \n # Check if the second word or any of its rotations is a substring in the first word\n for i in range(2, 24):\n for j in range(i, 24):\n if a[i] == b[j] and cyc_pattern(a, i, j):\n return True\n \n return False\n \n def cyc_pattern(a, i, j):\n # Check if the second word or any of its rotations is a substring in the first word\n if i == j:\n return a[i] == a[j]\n elif i + 1 == j:\n return a[i] == a[j] or a[i] == a[j - 1]\n else:\n return a[i] == a[j] or a[i] == a[j - 1] or a[i] == a[j - 2]\n \n return False\n \n return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n Example:\n even_odd_count(-12) ==> (1, 1)\n even_odd_count(123) ==> (1, 2)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n \"\"\"\n Given a positive integer, obtain its roman numeral equivalent as a string,\n and return it in lowercase.\n Restrictions: 1 <= num <= 1000\n Examples:\n >>> int_to_mini_roman(19) == 'xix'\n >>> int_to_mini_roman(152) == 'clii'\n >>> int_to_mini_roman(426) == 'cdxxvi'\n \"\"\"\n \n def int_to_mini_roman(number):\n roman_numerals = {\n 'I': 1,\n 'V': 5,\n 'X': 10,\n 'L': 50,\n 'C': 100,\n 'D': 500,\n 'M': 1000\n }\n roman_numeral = 0\n for (roman, value) in roman_numerals.items():\n if number >= value:\n roman_numeral = roman\n break\n roman_numeral = roman_numerals[roman_numeral]\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_numeral}\"\n return f\"{roman_"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n if a == b and a == c:\n return True\n elif a == 90:\n return True\n return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n \"\"\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n \"\"\"\n You're a hungry rabbit, and you already have eaten a certain number of carrots,\n but now you need to eat more carrots to complete the day's meals.\n you should return an array of [ total number of eaten carrots after your meals,\n the number of carrots left after your meals ]\n if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n \"\"\"\n Given two lists operator, and operand. The first list has basic algebra operations, and \n the second list is a list of integers. Use the two given lists to build the algebric \n expression and return the evaluation of this expression.\n\n The basic algebra operations:\n Addition ( + ) \n Subtraction ( - ) \n Multiplication ( * ) \n Floor division ( // ) \n Exponentiation ( ** ) \n\n Example:\n operator['+', '*', '-']\n array = [2, 3, 4, 5]\n result = 2 + 3 * 4 - 5\n => result = 9\n\n Note:\n The length of operator list is equal to the length of operand list minus one.\n Operand is a list of of non-negative integers.\n Operator list has at least one operator, and operand list has at least two operands.\n\n \"\"\"\n\n def do_algebra(operator, operand):\n \"\"\"\n Given two lists operator, and operand. The first list has basic algebra operations, and \n the second list is a list of integers. Use the two given lists to build the algebric \n expression and return the evaluation of this expression.\n\n The basic algebra operations:\n Addition ( + ) \n Subtraction ( - ) \n Multiplication ( * ) \n Floor division ( // ) \n Exponentiation ( ** ) \n\n Example:\n operator['+', '*', '-']\n array = [2, 3, 4, 5]\n result = 2 + 3 * 4 - 5\n => result = 9\n\n Note:\n The length of operator list is equal to the length of operand list minus one.\n Operand is a list of of non-negative integers.\n Operator list has at least one operator, and operand list has at least two operands.\n\n \"\"\""}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n if s[i] is a letter, reverse its case from lower to upper or vise versa, \n otherwise keep it as it is.\n If the string contains no letters, reverse the string.\n The function should return the resulted string."}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n if text:\n return hashlib.md5(text.encode()).hexdigest()\n return None"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n \"\"\"\n Given two positive integers a and b, return the even digits between a\n and b, in ascending order.\n\n For example:\n generate_integers(2, 8) => [2, 4, 6, 8]\n generate_integers(8, 2) => [2, 4, 6, 8]\n generate_integers(10, 14) => []\n \"\"\"\n return []"}
