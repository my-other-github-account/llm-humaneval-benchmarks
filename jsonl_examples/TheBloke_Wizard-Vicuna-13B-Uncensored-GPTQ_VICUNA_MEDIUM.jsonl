{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n given threshold.\n \n >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n False\n >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n True\n \"\"\"\n if not isinstance(numbers, List):\n raise TypeError(\"Input must be a list\")\n if not all(isinstance(n, (float,)) for n in numbers):\n raise TypeError(\"All elements must be float\")\n if not threshold:\n return False\n numbers.sort()\n left = 0\n right = len(numbers) - 1\n while left < right:\n mid = (left + right) // 2\n if (numbers[mid] - numbers[mid - 1]) <= threshold:\n left = mid + 1\n elif (numbers[mid] - numbers[mid + 1]) <= threshold:\n right = mid - 1\n return left < right"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n paren_groups = []\n index = 0\n in_group = False\n for char in paren_string:\n if char == '(':\n if in_group:\n paren_groups.append(paren_string[index:char_index])\n in_group = False\n index = char_index\n elif not in_group:\n in_group = True\n paren_groups.append('')\n elif char == ')':\n if in_group:\n in_group = False\n paren_groups.append(paren_string[index:char_index])\n index = char_index\n elif char == '(':\n in_group = True\n paren_groups.append('')\n elif char =='':\n pass\n else:\n paren_groups.append(char)\n return paren_groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n \"\"\" Given a positive floating point number, it can be decomposed into\n and integer part (largest integer smaller than given number) and decimals\n leftover part always smaller than 1).\n\n Return the decimal part of the number.\n >>> truncate_number(3.5)\n 0.5"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n at that point function should return True. Otherwise it should return False.\n \"\"\"\n balance = 0\n for op in operations:\n if op > 0:\n balance += op\n else:\n balance -= op\n if balance < 0:\n return True\n return False\n "}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n around the mean of this dataset.\n Mean Absolute Deviation is the average absolute difference between each\n element and a centerpoint (mean in this case):\n MAD = average | x - x_mean |\n >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n 1.0\n \"\"\"\n mean = sum(numbers) / len(numbers)\n deviation = [abs(x - mean) for x in numbers]\n return sum(deviation) / len(deviation)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n \n >>> intersperse([], 4)\n []\n >>> intersperse([1, 2, 3], 4)\n [1, 4, 2, 4, 3]\n \"\"\"\n numbers = list(numbers) # type: ignore\n result = []\n for i in range(len(numbers) - 1):\n result.append(numbers[i] + delimeter)\n result.append(numbers[i+1])\n return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n nested_levels = []\n current_level = 0\n for char in paren_string:\n if char == '(':\n current_level += 1\n elif char == ')':\n current_level -= 1\n if current_level < 0:\n nested_levels.append(current_level)\n return nested_levels"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n filtered_strings = []\n for string in strings:\n if substring in string:\n filtered_strings.append(string)\n return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n Empty sum should be equal to 0 and empty product should be equal to 1.\n \"\"\"\n if not numbers:\n return (0, 1)\n return (sum(numbers), product(numbers))\n"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n max_so_far = numbers[0]\n max_sequence = [max_so_far]\n for num in numbers:\n if num > max_so_far:\n max_so_far = num\n max_sequence = [max_so_far]\n for i in range(len(max_sequence) - 1):\n if max_sequence[i] > max_sequence[i+1]:\n max_sequence.insert(i, max_sequence[i+1])\n return max_sequence"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n \"\"\" Test if given string is a palindrome \"\"\"\n return string == string[::-1]\ndef make_palindrome(string: str) -> str:\n \"\"\" Find the shortest palindrome that begins with a supplied string.\n Algorithm idea is simple:\n - Find the longest postfix of supplied string that is a palindrome.\n - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n \n >>> make_palindrome('')\n ''\n >>> make_palindrome('cat')\n 'catac'\n >>> make_palindrome('cata')\n 'catac'\n \"\"\"\n string = string.strip()\n if not string:\n return string\n longest_palindrome = string\n longest_prefix = ''\n while True:\n longest_prefix = string[:-1]\n longest_palindrome = string\n string = string[::-1]\n if string == longest_palindrome:\n break\n if longest_palindrome == longest_palindrome[::-1]:\n break\n if longest_prefix:\n longest_palindrome = longest_prefix + longest_palindrome[::-1]\n return longest_palindrome"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n Perform binary XOR on these inputs and return result also as a string.\n \n >>> string_xor('010', '110')\n '100'\n \"\"\"\n return ''.join(chr(ord(a) ^ ord(b)) for ord(a), ord(b) in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n if not strings:\n return None\n elif len(strings) == 1:\n return strings[0]\n else:\n max_len = max(len(s) for s in strings)\n longest_string = ''.join(strings[0:len(strings)])\n return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n \"\"\" Return a greatest common divisor of two integers a and b\n \n >>> greatest_common_divisor(3, 5)\n 1\n >>> greatest_common_divisor(25, 15)\n 5\n \"\"\"\n if a == 0:\n return b\n elif b == 0:\n return a\n else:\n gcd = greatest_common_divisor(a % b, b)\n return gcd"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n prefixes = []\n current_prefix = string\n while current_prefix:\n prefixes.append(current_prefix)\n current_prefix = current_prefix.lstrip('0')\n return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n sequence = []\n for i in range(n+1):\n sequence.append(str(i))\n return''.join(sequence)"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n distinct_chars = set()\n for char in string:\n distinct_chars.add(char.lower())\n return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n beats = []\n current_beat = 0\n for note in music_string:\n if note == 'o':\n beats.append(current_beat)\n current_beat = 4\n elif note == 'o|':\n beats.append(current_beat)\n current_beat = 2\n elif note == '.|':\n beats.append(current_beat)\n current_beat = 1\n else:\n print(\"Invalid note:\", note)\n return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n count = 0\n index = 0\n while index < len(string):\n if string[index:index+len(substring)] == substring:\n count += 1\n index += len(substring)\n return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n sorted_numbers = sorted(numbers.split())\n return ''.join(sorted_numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n closest_pair = max_min_pair(numbers)\n return closest_pair\n\ndef max_min_pair(numbers: List[float]) -> Tuple[float, float]:\n min_number = min(numbers)\n max_number = max(numbers)\n return (min_number, max_number)"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n such that the smallest number will become 0 and the largest will become 1\n \"\"\"\n if len(numbers) < 2:\n return numbers\n smallest, largest = min(numbers), max(numbers)\n ratio = (largest - smallest) / (1 - smallest)\n numbers = [x * ratio for x in numbers]\n return numbers"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n \"\"\" Filter given list of any python values only for integers\n \n >>> filter_integers(['a', 3.14, 5])\n [5]\n >>> filter_integers([1, 2, 3, 'abc', {}, []])\n [1, 2, 3]\n \"\"\"\n for value in values:\n if isinstance(value, int):\n yield value\n"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n \"\"\" Return length of given string\n \n >>> strlen('')\n 0\n >>> strlen('abc')\n 3\n \"\"\"\n "}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n largest_divisor = n\n for i in range(2, int(n**0.5)+1):\n if n % i == 0:\n largest_divisor = i\n break\n return largest_divisor"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n factors = []\n i = 2\n while i * i <= n:\n if n % i == 0:\n factors.append(i)\n n //= i\n i += 1\n factors.append(n)\n return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n unique_numbers = []\n for num in numbers:\n if num not in unique_numbers:\n unique_numbers.append(num)\n return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n \n >>> flip_case('Hello')\n 'hELLO'\n \"\"\"\n \n return string.translate(str.maketrans('', '', string.casefold()))"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n \"\"\" Concatenate list of strings into a single string\n \n >>> concatenate([])\n ''\n >>> concatenate(['a', 'b', 'c'])\n 'abc'\n \"\"\"\n return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n filtered_strings = []\n for string in strings:\n if string.startswith(prefix):\n filtered_strings.append(string)\n return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n \"\"\"Return only positive numbers in the list.\"\"\"\n return [num for num in l if num >= 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n \"\"\"Return true if a given number is prime, and false otherwise.\n \n >>> is_prime(6)\n False\n >>> is_prime(101)\n True\n >>> is_prime(11)\n True\n >>> is_prime(13441)\n True\n >>> is_prime(61)\n True\n >>> is_prime(4)\n False\n >>> is_prime(1)\n False\n \"\"\"\n \n if n < 2:\n return False\n elif n == 2:\n return True\n else:\n for i in range(2, int(n**0.5)+1):\n if n % i == 0:\n return False\n return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n \"\"\"\n Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n \"\"\"\n return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\ndef find_zero(xs: list):\n \"\"\" xs are coefficients of a polynomial.\n find_zero find x such that poly(x) = 0.\n find_zero returns only only zero point, even if there are many.\n Moreover, find_zero only takes list xs having even number of coefficients\n and largest non zero coefficient as it guarantees\n a solution.\n \"\"\"\n if len(xs) % 2 == 0 and max(abs(coeff) for coeff in xs) == 1:\n return round(poly([1, 2, 3, 4, 5], 0.5), 2)\n else:\n return \"Error: Invalid input\""}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n l' = l[:] # make a copy of l\n for i in range(len(l)):\n if i % 3 == 0: # if i is divisible by 3, sort the corresponding value in l'\n l'[i] = sorted(l[i])[0] # sort the corresponding value in l\n return l'"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n unique_set = set()\n for item in l:\n if item not in unique_set:\n unique_set.add(item)\n return sorted(unique_set)"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n \"\"\"Return maximum element in the list.\n \n >>> max_element([1, 2, 3])\n 3\n >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n 123\n \"\"\"\n if not l:\n return None\n return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n count = 0\n for i in range(2, n+1):\n if i % 3 == 0 and (i % 5 == 0 or i % 15 == 0):\n count += 1\n if i % 7 == 0:\n count += 1\n return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n l' = l.copy()\n for i in range(len(l)):\n if i % 2 == 0:\n l'[i] = min(l[i], l'[i+1])\n return l'"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n \"\"\"\n returns encoded string by cycling groups of three characters.\n \"\"\"\n # split string to groups. Each of length 3.\n groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n # cycle elements in each group. Unless group has fewer elements than 3.\n groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n return \"\".join(groups)\ndef decode_cyclic(s: str):\n \"\"\"\n takes as input string encoded with encode_cyclic function. Returns decoded string.\n \"\"\"\n # split string to groups of length 3.\n groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n # join groups to get decoded string.\n return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n if n <= 2:\n return n\n elif n % 2 == 0:\n return 2\n else:\n i = 3\n while i * i <= n:\n if i * i + i == n:\n return n\n i += 1\n return -1 # n is not a prime fibonacci number"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n \"\"\"\n triples_sum_to_zero takes a list of integers as an input.\n it returns True if there are three distinct elements in the list that\n sum to zero, and False otherwise.\n \"\"\"\n if len(l) < 3:\n return False\n for i in range(len(l)):\n for j in range(i+1, len(l)):\n for k in range(j+1, len(l)):\n if l[i] + l[j] + l[k] == 0:\n return True\n return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n \"\"\"\n Imagine a road that's a perfectly straight infinitely long line.\n n cars are driving left to right; simultaneously, a different set of n cars\n are driving right to left.\n The two sets of cars start out being very far from\n each other. All cars move in the same speed. Two cars are said to collide\n when a car that's moving left to right hits a car that's moving right to left.\n However, the cars are infinitely sturdy and strong; as a result, they continue moving\n in their trajectory as if they did not collide.\n This function outputs the number of such collisions.\n \"\"\"\n collisions = 0\n for i in range(n):\n for j in range(n):\n if i!= j:\n if (i == 0 and j == 0) or (i == n - 1 and j == n - 1):\n continue\n if (i == 0 and j == n - 1) or (i == n - 1 and j == 0):\n continue\n if (i == 0 and j == 0) or (i == n - 1 and j == n - 1):\n continue\n collisions += 1\n return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n \"\"\"Return list with elements incremented by 1.\n >>> incr_list([1, 2, 3])\n [2, 3, 4]\n >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n [6, 4, 6, 3, 4, 4, 10, 1, 124]\n \"\"\"\n for i in range(len(l)):\n l[i] += 1\n return l"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n \"\"\"\n pairs_sum_to_zero takes a list of integers as an input.\n it returns True if there are two distinct elements in the list that\n sum to zero, and False otherwise.\n \"\"\"\n if len(l) < 2:\n return False\n for i in range(len(l)):\n for j in range(i+1, len(l)):\n if l[i] + l[j] == 0:\n return True\n return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n \"\"\"Change numerical base of input number x to base.\n return string representation after the conversion.\n base numbers are less than 10.\n \n >>> change_base(8, 3)\n '22'\n >>> change_base(8, 2)\n '1000'\n >>> change_base(7, 2)\n '111'\n \"\"\"\n \n if base == 10:\n return str(x)\n \n elif base < 10:\n return ''.join(str(d) for d in str(x) if d.isdigit())\n \n else:\n return 'Invalid base value'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n if h == 0:\n return 0\n else:\n return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n if n == 0:\n return 0\n elif n == 1:\n return 0\n elif n == 2:\n return 2\n elif n == 3:\n return 0\n else:\n fib4_cache = [0, 0] # cache the first two values\n for i in range(4):\n fib4_cache.append(fib4_cache[i] + fib4_cache[i-1] + fib4_cache[i-2] + fib4_cache[i-3])\n return fib4_cache[n-4]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n n = len(l)\n if n % 2 == 0:\n mid = (n // 2) - 1\n else:\n mid = n // 2\n return sorted(l)[mid]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n \"\"\"\n Checks if given string is a palindrome\n \"\"\"\n return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n \"\"\"Return 2^n modulo p (be aware of numerics).\n \n >>> modp(3, 5)\n 3\n >>> modp(1101, 101)\n 2\n >>> modp(0, 101)\n 1\n >>> modp(3, 11)\n 8\n >>> modp(100, 101)\n 1\n \"\"\"\n if p == 0:\n raise ValueError(\"p must be a positive integer\")\n if n == 0:\n return 0\n if n == 1:\n return 1\n if n == p - 1:\n return p - 2\n \n result = 1\n while n % 2 == 0:\n result = (result * 2) % p\n n //= 2\n \n return result"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n \"\"\"\n returns encoded string by shifting every character by 5 in the alphabet.\n \"\"\"\n return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\ndef decode_shift(s: str) -> str:\n \"\"\"\n takes as input string encoded with encode_shift function. Returns decoded string.\n \"\"\"\n return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n vowels = 'aeiouAEIOU'\n return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n \"\"\"\n Return True if all numbers in the list l are below threshold t.\n \"\"\"\n return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n \"\"\"\n Check if two words have the same characters.\n \"\"\"\n if len(s0)!= len(s1):\n return False\n \n s0_set = set(s0)\n s1_set = set(s1)\n \n return s0_set == s1_set"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n if n <= 1:\n return n\n else:\n return (fib(n-1) + fib(n-2))\n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n \"\"\"\n brackets is a string of \"<\" and \">\".\n return True if every opening bracket has a corresponding closing bracket.\n \"\"\"\n if not brackets:\n return True\n count = 0\n for char in brackets:\n if char == \">\":\n count += 1\n if count % 2 == 0:\n return False\n count = 0\n for i in range(len(brackets) - 1):\n if brackets[i] == \">\" and brackets[i+1] == \"<\":\n count += 1\n if count % 2 == 0:\n return False\n return True"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n \"\"\"Return True is list elements are monotonically increasing or decreasing.\n \n >>> monotonic([1, 2, 4, 20])\n True\n >>> monotonic([1, 20, 4, 10])\n False\n >>> monotonic([4, 1, 0, -10])\n True\n \"\"\"\n if len(l) < 2:\n return True\n elif all(l[i] >= l[i-1] for i in range(len(l))):\n return True\n else:\n return False"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n \"\"\"Return sorted unique common elements for two lists.\n >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n [1, 5, 653]\n >>> common([5, 3, 2, 8], [3, 2])\n [2, 3]"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n if n < 2:\n return 0\n elif n == 2:\n return n\n else:\n i = 2\n while i * i <= n:\n if n % i == 0:\n return i\n i += 1\n return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n \n >>> sum_to_n(30)\n 465\n >>> sum_to_n(100)\n 5050\n >>> sum_to_n(5)\n 15\n >>> sum_to_n(10)\n 55\n >>> sum_to_n(1)\n 1\n \"\"\"\n total = 0\n for i in range(n + 1):\n total += i\n return total"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n \"\"\"\n brackets is a string of \"(\" and \")\".\n return True if every opening bracket has a corresponding closing bracket.\n \"\"\"\n if not brackets:\n return True\n left_bracket = 0\n right_bracket = 0\n for i in range(len(brackets)):\n if brackets[i] == \")\":\n right_bracket += 1\n if right_bracket!= left_bracket:\n return False\n left_bracket += 1\n return True"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n \"\"\" xs represent coefficients of a polynomial.\n xs[0] + xs[1] * x + xs[2] * x^2 +....\n Return derivative of this polynomial in the same form.\n \n >>> derivative([3, 1, 2, 4, 5])\n [1, 4, 12, 20]\n >>> derivative([1, 2, 3])\n [2, 6]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n if n <= 2:\n return n\n else:\n return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n vowels = \"aeiouy\"\n count = 0\n for char in s:\n if char.lower() in vowels and (char == s[-1] or s[-1] == \"y\"):\n count += 1\n return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n if shift > len(str(x)):\n return str(x)[-shift:] + str(x)[-shift:][::-1]\n else:\n return str(x)[shift:] + str(x)[shift:][::-1]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n total = 0\n for c in s:\n if ord(c) >= 65 and ord(c) <= 90:\n total += ord(c) - 65\n return total"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n apples, oranges = s.split(' and ')\n apples = int(apples.split(' ')[0])\n oranges = int(oranges.split(' ')[0])\n mango = n - apples - oranges\n return mango"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n smallest_even_value = None\n smallest_index = None\n for i, node in enumerate(arr):\n if node % 2 == 0 and node < smallest_even_value:\n smallest_even_value = node\n smallest_index = i\n elif node < smallest_even_value:\n smallest_even_value = node\n smallest_index = i\n if smallest_even_value is None:\n return []\n return [smallest_even_value, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n max_freq = lst[0]\n max_val = lst[0]\n for num in lst:\n if num > 0:\n freq = lst.count(num)\n if freq >= num:\n if freq > max_freq:\n max_freq = freq\n max_val = num\n return max_val\n else:\n return -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n if not lst:\n return []\n min_val = max(lst)\n max_val = min_val\n for val in lst:\n if val < min_val:\n min_val = val\n else:\n max_val = max(max_val, val)\n return [min_val, max_val]"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n if (a + b > c) and (b + c > a) and (a + c > b):\n return math.sqrt(a * (b * c) / 2)\n else:\n return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n if not is_balanced(q) or sum(q) > w:\n return False\n return is_balanced(reversed(q))\ndef is_balanced(q):\n return all(q[i] == q[-1-i] for i in range(len(q) // 2))"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n \"\"\""}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n if len(lst1) == len(lst2):\n return lst1\n else:\n return [s for s in lst1 if len(s) < len(lst2)]"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n if a < 100:\n return False\n for i in range(2, int(a**0.5)+1):\n if a % i == 0:\n return False\n for j in range(2, int(a**0.5)+1):\n for k in range(2, int(a**0.5)+1):\n if a % (i*j*k) == 0:\n return True\n return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n if x == n**int(1):\n return True\n else:\n return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n if a == 0:\n return True\n elif a == int(a**0.5):\n return True\n else:\n return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n count = 0\n for char in num:\n if char.isalpha() and char.isupper():\n count += 1\n if count > 0:\n break\n return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n binary = ''\n while decimal > 0:\n binary = str(decimal & 1) + binary\n decimal //= 2\n return 'db' + binary + 'db'"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n if len(s) < 3:\n return False\n elif s == s[1:]:\n return False\n else:\n for i in range(len(s) - 2):\n if s[i] == s[i+1] == s[i+2]:\n return False\n return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n letter_grades = []\n for grade in grades:\n if grade >= 4.0:\n letter_grades.append(\"A+\")\n elif grade >= 3.7:\n letter_grades.append(\"A\")\n elif grade >= 3.3:\n letter_grades.append(\"A-\")\n elif grade >= 3.0:\n letter_grades.append(\"B+\")\n elif grade >= 2.7:\n letter_grades.append(\"B\")\n elif grade >= 2.3:\n letter_grades.append(\"B-\")\n elif grade >= 2.0:\n letter_grades.append(\"C+\")\n elif grade >= 1.7:\n letter_grades.append(\"C\")\n elif grade >= 1.3:\n letter_grades.append(\"C-\")\n elif grade >= 1.0:\n letter_grades.append(\"D+\")\n elif grade >= 0.7:\n letter_grades.append(\"D\")\n elif grade >= 0.3:\n letter_grades.append(\"D-\")\n else:\n letter_grades.append(\"E\")\n return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n \"\"\"Write a function that takes a string and returns True if the string\n length is a prime number or False otherwise\n Examples\n prime_length('Hello') == True\n prime_length('abcdcba') == True\n prime_length('kittens') == True\n prime_length('orange') == False\n \"\"\"\n \n if len(string) <= 1:\n return False\n \n i = 2\n while True:\n if i == len(string):\n break\n if string[i] % string[i-1] == 0:\n break\n i += 1\n \n return True\n "}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n count = 0\n for i in range(10**n):\n if str(i) == '1' or str(i)[-1] == '1':\n count += 1\n return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n binary = bin(N)[2:]\n return sum(int(digit) for digit in binary)"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n even_indices = [i for i in range(len(lst)) if i % 2 == 0 and i % 4!= 0]\n even_elements = [lst[i] for i in even_indices]\n return sum(even_elements)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n # split the string into words\n words = s.split()\n \n # sort the words by their ascii values\n sorted_words = sorted(words, key=lambda x: ord(x))\n \n # join the sorted words back into a string\n return''.join(sorted_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n rows = []\n for i in range(len(lst)):\n row = lst[i]\n if len(row) == x:\n rows.append((i, x))\n elif len(row) < x:\n rows.append((i, len(row)))\n rows.sort(key=lambda x: x[0])\n for i in range(len(rows)):\n rows[i] = (rows[i][0], rows[i][1] - 1)\n return rows"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n if not array:\n return array\n first = array[0]\n last = array[-1]\n if (first + last) % 2 == 0:\n array.sort(reverse=True)\n else:\n array.sort()\n return array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n # create a list of characters in the string\n chars = list(s)\n \n # rotate the alphabet by two multiplied to two places\n alphabet = 'abcdefghijklmnopqrstuvwxyz'\n rotated_alphabet = ''.join([alphabet[i] for i in (alphabet.index(alphabet[0], 2) - 2)])\n \n # encrypt the string\n encrypted = ''.join([rotated_alphabet[i] + rotated_alphabet[i+1] for i in (len(chars) - 1)])\n \n return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n if not lst:\n return None\n \n second_smallest = lst[0]\n for i in range(1, len(lst)):\n if lst[i] < second_smallest:\n second_smallest = lst[i]\n \n return second_smallest"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n boredoms = 0\n for i in range(len(S)):\n if S[i] in ['.', '?', '!']:\n if i > 0 and S[i-1] not in ['.', '?', '!']:\n boredoms += 1\n return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n return False\n if x + y == z and x == y == z:\n return True\n return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n # Swap case of all letters\n message = message.lower()\n \n # Replace vowels with next letter in english alphabet\n vowels = 'aeiou'\n message = message.replace(vowels[0], chr(ord(vowels[0]) + 2))\n message = message.replace(vowels[1], chr(ord(vowels[1]) + 2))\n message = message.replace(vowels[2], chr(ord(vowels[2]) + 2))\n message = message.replace(vowels[3], chr(ord(vowels[3]) + 2))\n \n return message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n \"\"\"You are given a list of integers.\n You need to find the largest prime value and return the sum of its digits.\n\n Examples:\n For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n For lst = [0,81,12,3,1,21] the output should be 3\n For lst = [0,8,1,2,1,7] the output should be 7\n \"\"\"\n largest_prime = max(lst)\n prime_sum = sum(int(d) for d in str(largest_prime))\n return prime_sum"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n if not dict:\n return False\n all_str = True\n all_lower = True\n all_upper = True\n for key in dict:\n if not isinstance(key, str):\n all_str = False\n if not key.islower():\n all_lower = False\n if not key.isupper():\n all_upper = False\n if all_str and all_lower and all_upper:\n return True\n return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n primes = []\n if n <= 1:\n return []\n elif n == 2:\n primes.append(2)\n elif n == 3:\n primes.append(3)\n else:\n primes = [2]\n for i in range(5, n+1, 2):\n is_prime = True\n for j in range(2, int(i ** 0.5) + 1):\n if i % j == 0:\n is_prime = False\n break\n if is_prime:\n primes.append(i)\n return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n if not isinstance(a, int) or not isinstance(b, int):\n raise TypeError(\"Inputs must be integers\")\n \n if not a or not b:\n return 0\n \n if not a.isdigit() or not b.isdigit():\n return 0\n \n if a == 0:\n return 0\n \n if b == 0:\n return 0\n \n if a == 1:\n return b\n \n if b == 1:\n return a\n \n if a == -1 and b == -1:\n return 20\n \n result = int(a * b % 10)\n return result"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n count = 0\n for i in range(len(s)):\n if i % 2 == 0 and s[i].isupper():\n count += 1\n return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n if value.isdigit():\n return int(value)\n else:\n return round(float(value))"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n if n % 2 == 0:\n next_num = n + 2\n else:\n next_num = n + 1\n \n pile = [n]\n for i in range(next_num):\n pile.append(i+1)\n \n return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n words = s.split(\", \")\n return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n if x > y:\n x, y = y, x\n \n even_num = 0\n for i in range(x, y+1):\n if i % 2 == 0:\n even_num = i\n break\n \n if even_num == 0:\n return -1\n return even_num"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n if n > m:\n return -1\n avg = (m + n) / 2\n rounded_avg = int(round(avg))\n binary = bin(rounded_avg)[2:]\n return binary"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n unique_nums = []\n for num in x:\n if num % 2 == 0:\n continue\n for digit in str(num):\n if int(digit) % 2 == 0:\n break\n else:\n unique_nums.append(num)\n unique_nums.sort()\n return unique_nums"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n if not arr:\n return []\n arr.sort(key=lambda x: int(x) if 1 <= int(x) <= 9 else float('inf'))\n return [str(i) if i == 1 else str(i) +'' for i in reversed(arr)]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n result = []\n for i in range(n):\n if i % 2 == 0:\n result.append(i)\n else:\n result.append(sum(1, n))\n return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n even_palindrome = 0\n odd_palindrome = 0\n even_odd_palindrome = []\n for i in range(1, n+1):\n if i == int(i):\n even_palindrome += 1\n elif i % 2 == 0:\n odd_palindrome += 1\n else:\n even_odd_palindrome.append((even_palindrome, odd_palindrome))\n return even_odd_palindrome"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n count = 0\n for num in arr:\n if num < 0:\n num = abs(num)\n digits = sum(int(digit) for digit in str(num))\n if digits > 0:\n count += 1\n return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n if not arr:\n return True\n if len(arr) == 1:\n return True\n if len(arr) == 2:\n if arr[1] >= arr[0]:\n return True\n return False\n for i in range(len(arr)):\n if arr[i] >= arr[i+1]:\n return True\n return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n if len(lst1) == 0 or len(lst2) == 0:\n return \"NO\"\n if len(set(lst1) & set(lst2)) == len(lst1):\n return \"YES\"\n return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n letters = test.lower().split()\n counts = {}\n max_count = 0\n for letter in letters:\n if letter in counts:\n counts[letter] += 1\n else:\n counts[letter] = 1\n if counts[letter] > max_count:\n max_count = counts[letter]\n result = {}\n result[max_count] = letter\n return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n \"\"\"Task\n We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n then check if the result string is palindrome.\n A string is called palindrome if it reads the same backward as forward.\n You should return a tuple containing the result string and True/False for the check.\n Example\n For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n \"\"\"\n result = \"\"\n for i in range(len(s)):\n if s[i] not in c:\n result += s[i]\n else:\n i -= 1\n c.remove(s[i])\n return (result, s == result == reverse_delete(result, c))"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n result = []\n for i in range(len(lst)):\n if len(lst[i]) % 2 == 1:\n result.append(\"the number of odd elements in the string \" + str(i+1) + \" of the input.\")\n return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n if not nums:\n return 0\n left = 0\n right = nums[0]\n min_sum = right\n for num in nums:\n left = right\n right = left + num\n if right > max(nums):\n right = max(nums)\n min_sum = min(min_sum, right - left + num)\n return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n n, m = len(grid), len(grid[0])\n max_fill = 0\n for i in range(n):\n for j in range(m):\n if grid[i][j] == 1:\n for k in range(capacity):\n for l in range(capacity):\n if grid[i+k][j+l] == 1:\n max_fill = max(max_fill, k+l)\n break\n return max_fill"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n if not isinstance(arr, list):\n raise TypeError(\"Input must be a list\")\n if not all(isinstance(x, int) and x >= 0 for x in arr):\n raise ValueError(\"Input must be a list of non-negative integers\")\n arr.sort(key=lambda x: sum(1 for _ in bin(x)[2:]), reverse=True)\n return arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n words = []\n for word in s.split():\n if len(set(word.lower().translate(str.maketrans('', '', string.punctuation))) & set('bcdfghjklmnpqrstvwxyz')) <= n:\n words.append(word)\n return words"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n vowels = ['a', 'e', 'i', 'o', 'u']\n \n # Check if the word contains only English letters\n if not all(char in 'abcdefghijklmnopqrstuvwxyz' for char in word):\n return ''\n \n # Check if the word contains only vowels\n if all(char in 'aeiou' for char in word):\n return 'U'\n \n # Check if the word contains only consonants\n if not any(char in 'bcdfghjklmnpqrstvwxyz' for char in word):\n return ''\n \n # Check if the word contains only consonants from the right side\n right_consonants = ''.join(char for char in word if char in 'bcdfghjklmnpqrstvwxyz')\n right_vowels = ''.join(char for char in word if char in 'aeiou')\n \n # Check if there is a vowel between two consonants from the right side\n if right_vowels.count('') == 1:\n return right_vowels[0]\n \n # Check if there is a vowel between two consonants from the right side\n if right_consonants.count('') == 1:\n return 'U'\n \n # If there is no vowel between two consonants from the right side\n return ''"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n if len(lst) == 2 and all(c in '()' for c in lst):\n return 'Yes'\n return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n if not isinstance(arr, list) or not isinstance(k, int) or k <= 0:\n return None\n if len(arr) < k:\n return None\n if len(arr) == 1:\n return arr[0]\n max_arr = sorted(arr[:k])\n return max_arr"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n odd_even_sum = 0\n for i in range(len(lst)):\n if i % 2 == 0:\n odd_even_sum += lst[i]\n if lst[i] % 2 == 1:\n odd_even_sum += lst[i]\n return odd_even_sum"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n \"\"\"\n Given a non-empty array of integers arr and an integer k, return\n the sum of the elements with at most two digits from the first k elements of arr.\n \"\"\"\n # Initialize variables\n sum = 0\n count = 0\n # Loop through the first k elements of arr\n for i in range(k):\n # Check if the current element has at most two digits\n if len(str(arr[i])) <= 2:\n # Add the current element to the sum\n sum += arr[i]\n # Increment the count\n count += 1\n # Check if the count is greater than k\n if count > k:\n break\n # Return the sum\n return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n \"\"\"\n Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n Note: \n 1. Collatz(1) is [1].\n 2. returned list sorted in increasing order.\n \"\"\"\n if n == 1:\n return [1]\n elif n % 2 == 0:\n return [n]\n else:\n odd_collatz = []\n while n > 1:\n odd_collatz.append(n)\n n = n // 2 if n % 2 == 0 else 3 * n + 1\n return sorted(odd_collatz)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n # Check if the date is not empty\n if not date:\n return False\n \n # Check if the number of days is valid\n months = [31, 31, 30, 31, 31, 30, 31, 30, 31, 30, 31]\n days = int(date.split('-')[1])\n month = int(date.split('-')[0].split('m')[1])\n if month < 1 or month > 12 or days < 1 or days > months[month]:\n return False\n \n # Check if the month is valid\n if month < 1 or month > 12:\n return False\n \n # Check if the date is in the correct format\n if date.count('-')!= 3 or len(date.split('-'))!= 3:\n return False\n \n return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n if ',' in txt:\n return txt.split(',')\n elif'' in txt:\n return txt.split()\n else:\n return len(set(txt.lower())) - len(txt.lower())"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n if len(lst) < 2:\n return True\n elif len(lst) == 2 and all(x == y for x, y in zip(lst, lst[1:])):\n return True\n else:\n return False"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n \"\"\"You are given two intervals,\n where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n The given intervals are closed which means that the interval (start, end)\n includes both start and end.\n For each given interval, it is assumed that its start is less or equal its end.\n Your task is to determine whether the length of intersection of these two \n intervals is a prime number.\n Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n which its length is 1, which not a prime number.\n If the length of the intersection is a prime number, return \"YES\",\n otherwise, return \"NO\".\n If the two intervals don't intersect, return \"NO\".\n\n"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n if not arr:\n return None\n \n sign_arr = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n product = 1\n for i in range(len(arr)):\n product *= sign_arr[i]\n \n return product"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n # Find the length of the longest diagonal\n max_diagonal = max(len(row) for row in grid)\n \n # Create a list of lists to represent the grid\n grid_list = [[None] * max_diagonal for _ in range(len(grid[0]))]\n \n # Fill in the grid with values from 1 to N^2\n for i in range(len(grid)):\n for j in range(len(grid[0])):\n for k in range(max_diagonal):\n grid_list[i][j] = k + 1\n \n # Find the minimum path of length k\n visited = set()\n queue = [(0, 0)]\n visited.add((0, 0))\n \n while queue:\n curr = queue.pop(0)\n \n # Check all neighboring cells\n for i in range(-1, 2):\n for j in range(-1, 2):\n if i == 0 and j == 0:\n continue\n \n neighbor = (curr[0] + i, curr[1] + j)\n if not (0 <= neighbor[0] < len(grid) and 0 <= neighbor[1] < len(grid[0])):\n continue\n \n if (0, 0) in visited and (curr[0], curr[1]) in visited:\n continue\n \n if (curr[0], curr[1]) in visited:\n continue\n \n # Add the current cell to the visited set\n visited.add((curr[0], curr[1]))\n \n # Check if the current cell is the end of the path\n if k == 0 or k == len(grid_list[curr[0]][curr[1]]) - 1:\n path = []\n for i in range(k):\n path.append(grid_list[curr[0]][curr[1]][i])\n return path\n \n # Check if the current cell is the start of a new path\n if k == 0:\n path = []\n for i in range(k):\n path.append(grid_list[curr[0]][curr[1]][i])\n return path\n \n # Add the current"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n tribonacci = [1, 3]\n if n <= 1:\n return tribonacci\n elif n % 2 == 0:\n return tribonacci + [n / 2]\n else:\n return tribonacci + tri(n - 1) + tri(n - 2) + tri(n + 1)\n \n # Example usage\n print(tri(3)) # [1, 3, 2, 8]\n print(tri(5)) # [1, 3, 2, 8, 13]\n print(tri(10)) # [1, 3, 2, 8, 13, 21, 28, 36, 45, 55]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n odd_digits = 0\n even_digits = 0\n \n if n < 2:\n return 0\n \n while n % 10 == 0:\n even_digits += n // 10\n n //= 10\n \n while n % 10!= 0:\n odd_digits += n % 10\n n //= 10\n \n if n == 0:\n return odd_digits * even_digits\n elif n == 1:\n return odd_digits\n else:\n return 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n if not string:\n return False\n if ']' not in string or '[' not in string:\n return False\n nested = False\n for i in range(len(string)):\n if string[i] == '[' and string[i+1] == ']':\n nested = True\n if nested and (string[i+2] == '[' or string[i-1] == ']' or string[i+2] == ']' and string[i-1] == '['):\n return True\n return False"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n sum_squares_helper = 0\n for num in lst:\n num = int(num)\n sum_squares_helper += num**2\n return sum_squares_helper"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n words = txt.split()\n last_word = words.pop(-1)\n if last_word.isalpha() and not last_word.isspace():\n return True\n return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n n = len(arr)\n max_idx = 0\n for i in range(n-1):\n if arr[i] <= arr[i+1]:\n max_idx = i\n else:\n break\n if max_idx == 0:\n return -1\n return max_idx"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n if not lst:\n return None, None\n \n neg_lst = [num for num in lst if num < 0]\n pos_lst = [num for num in lst if num > 0]\n \n neg_max = max(neg_lst)\n pos_min = min(pos_lst)\n \n return neg_max, pos_min"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n if a > b:\n return a\n elif b > a:\n return b\n elif isinstance(a, str) and isinstance(b, str) and a!= b:\n if a.endswith(','):\n a = float(a.replace(',', '.'))\n if b.endswith(','):\n b = float(b.replace(',', '.'))\n if a > b:\n return a\n elif b > a:\n return b\n elif a == b:\n return None\n else:\n return None\n else:\n return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n Example\n is_equal_to_sum_even(4) == False\n is_equal_to_sum_even(6) == False\n is_equal_to_sum_even(8) == True\n \"\"\"\n if n <= 4:\n return True\n elif n % 4 == 0:\n return False\n else:\n for i in range(4):\n if n % i == 0:\n return True\n return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n \"\"\"The Brazilian factorial is defined as:\n brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n where n > 0\n\n For example:\n >>> special_factorial(4)\n 288\n\n The function will receive an integer as input and should return the special\n factorial of this integer.\n \"\"\"\n if n < 0:\n return None\n else:\n brazilian_factorial = 1\n for i in range(n, -1, -1):\n brazilian_factorial *= i\n return n * brazilian_factorial"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n text = text.replace(\" \", \"_\")\n text = text.replace(\"  \", \"-\")\n return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n if len(file_name) > 3:\n return \"No\"\n dot_index = file_name.find(\".\")\n if dot_index == -1:\n return \"No\"\n if not file_name[0].isalpha():\n return \"No\"\n if file_name[dot_index-1]!= '.':\n return \"No\"\n if file_name.endswith(\"txt\") or file_name.endswith(\"exe\") or file_name.endswith(\"dll\"):\n return \"Yes\"\n else:\n return \"No\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n total = 0\n for num in lst:\n if num is None:\n total += 0\n elif num is 0:\n total += 0\n elif num is 1:\n total += 1\n elif num is 2:\n total += 4\n elif num is 3:\n total += 9\n elif num is 4:\n total += 16\n elif num is 5:\n total += 25\n elif num is 6:\n total += 36\n elif num is 7:\n total += 49\n elif num is 8:\n total += 64\n elif num is 9:\n total += 81\n elif num is 10:\n total += 100\n elif num is 11:\n total += 121\n elif num is 12:\n total += 144\n elif num is 13:\n total += 169\n elif num is 14:\n total += 196\n elif num is 15:\n total += 225\n elif num is 16:\n total += 256\n elif num is 17:\n total += 289\n elif num is 18:\n total += 324\n elif num is 19:\n total += 361\n elif num is 20:\n total += 400\n elif num is 21:\n total += 441\n elif num is 22:\n total += 484\n elif num is 23:\n total += 529\n elif num is 24:\n total += 576\n elif num is 25:\n total += 625\n elif num is 26:\n total += 676\n elif num is 27:\n total += 729\n elif num is 28:\n total += 784\n elif num is 29:\n total += 841\n elif num is 30:\n total += 900\n elif num is 31:\n total += 961\n elif num is 32:\n total += 1024\n elif num is"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n words = sentence.split()\n prime_words = []\n for word in words:\n if len(word) == 2:\n prime_words.append(word)\n return \" \".join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n numerator, denominator = map(int, x.split(\"/\"))\n if denominator == n.split(\"/\")[0] and numerator % n.split(\"/\")[0] == 0:\n return True\n else:\n return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n # create a list of tuples, where each tuple contains the sum of the digits of each number\n # and the index of the number in the original list\n tuples = [(sum(int(digit) for digit in str(n)), i) for i, n in enumerate(nums)]\n # sort the tuples in ascending order\n sorted_tuples = sorted(tuples, key=lambda x: x[0])\n # extract the numbers from the sorted tuples and return them in ascending order\n return [nums[i] for i, x in sorted_tuples]"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n count = 0\n for num in nums:\n if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n count += 1\n return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n a = [i*i-i+1 for i in range(n)]\n max_triples = 0\n for i in range(n-2):\n for j in range(i+1, n):\n for k in range(j+1, n):\n if a[i] + a[j] + a[k] % 3 == 0:\n max_triples += 1\n return max_triples"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n if planet1 not in planets or planet2 not in planants:\n return ()\n planets_between = []\n for planet in planets:\n if planet!= planet1 and planet!= planet2 and planet not in planets_between:\n planets_between.append(planet)\n planets_between.sort(key=lambda x: (x[1] - x[0]))\n return tuple(planets_between)\n else:\n return ()"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n sorted_lst = sorted(lst, key=lambda x: len(x))\n return sorted_lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n if n % 2 == 0:\n return y\n else:\n return x"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n if not lst:\n return 0\n result = 0\n for num in lst:\n if num.isdigit() and int(num) > 0:\n result += int(num)**2\n return result"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n # initialize an empty list to store the differences\n diffs = []\n \n # iterate over each match in the game and guess arrays\n for i in range(len(game)):\n # if the guess matches the game score, return 0\n if game[i] == guess[i]:\n diffs.append(0)\n \n # otherwise, calculate the difference and append it to the list\n else:\n diffs.append(abs(game[i] - guess[i]))\n \n # return the list of differences\n return diffs"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n strongest_extension = None\n strongest_extension_index = None\n for i, extension in enumerate(extensions):\n if i == 0:\n continue\n strength = abs(len(set(extension.upper()) - set(extension.lower())) - len(extension))\n if strongest_extension is None or strength > strongest_extension[1]:\n strongest_extension = (class_name, extension)\n strongest_extension_index = i\n return strongest_extension[0] + '.' + strongest_extension[1]"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n # Check if the second word is a substring of the first word\n if a.find(b)!= -1:\n return True\n \n # Check if any of the rotations of the second word is a substring of the first word\n for i in range(1, len(b)):\n rotated = b[i:] + b[:i]\n if rotated.find(a)!= -1:\n return True\n \n return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n even_digits = 0\n odd_digits = 0\n \n if num < 0:\n num = -num\n \n if num == 0:\n even_digits += 1\n odd_digits += 1\n \n elif num % 10 in [0, 2, 4, 6, 8]:\n even_digits += 1\n else:\n odd_digits += 1\n \n return (even_digits, odd_digits)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n roman_numerals = {\n 1: 'i',\n 2: 'ii',\n 3: 'iii',\n 4: 'iv',\n 5: 'v',\n 6: 'vi',\n 7: 'vii',\n 8: 'viii',\n 9: 'ix',\n 10: 'x',\n 100: 'c',\n 1000:'m'\n }\n return roman_numerals[number]"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n if a == b == c == 0:\n return False\n elif a + b + c == 2 * (a + b) * math.sqrt(3) / 2:\n return True\n else:\n return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n max_word = \"\"\n for word in words:\n if len(set(word)) == len(word):\n if max_word == \"\":\n max_word = word\n else:\n if word < max_word:\n max_word = word\n return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n if remaining >= need:\n return [number + need, remaining - need]\n else:\n return [number + need, 0]\n"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n if len(operator) == len(operand) - 1:\n result = operator[0](operator[1], operand[0])\n elif len(operator) == len(operand) - 2:\n result = operator[0](operator[1](operator[2], operand[1]), operand[0])\n else:\n result = operator[0](operator[1](operator[2], operand[1]), operand[0])\n return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n if not isinstance(s, str):\n return s\n if not s:\n return s[::-1]\n s = ''.join(s)\n s = s.lower()\n s = s.replace('a', 'A')\n s = s.replace('b', 'B')\n s = s.replace('c', 'C')\n s = s.replace('d', 'D')\n s = s.replace('e', 'E')\n s = s.replace('f', 'F')\n s = s.replace('g', 'G')\n s = s.replace('h', 'H')\n s = s.replace('i', 'I')\n s = s.replace('j', 'J')\n s = s.replace('k', 'K')\n s = s.replace('l', 'L')\n s = s.replace('m', 'M')\n s = s.replace('n', 'N')\n s = s.replace('o', 'O')\n s = s.replace('p', 'P')\n s = s.replace('q', 'Q')\n s = s.replace('r', 'R')\n s = s.replace('s', 'S')\n s = s.replace('t', 'T')\n s = s.replace('u', 'U')\n s = s.replace('v', 'V')\n s = s.replace('w', 'W')\n s = s.replace('x', 'X')\n s = s.replace('y', 'Y')\n s = s.replace('z', 'Z')\n return s"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n if not text:\n return None\n md5_hash = hashlib.md5(text.encode()).hexdigest()\n return md5_hash"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n even_digits = []\n while a <= b:\n if a % 2 == 0:\n even_digits.append(a)\n a += 2\n return even_digits"}
