{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    if not numbers:\n        return False\n    min_distance = float('inf')\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n    return min_distance < threshold"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(\" \", \"\")\n    paren_string = paren_string.replace(\"\", \"\")\n    paren_string = paren_string.replace(\"(\", \"\")\n    paren_string = paren_string.replace(\")\", \"\")\n    paren_string = paren_string.replace(\")(\", \"\")\n    paren_string = paren_string.replace(\"))\", \"\")\n    paren_string = paren_string.replace(\"((\", \"\")\n    paren_string = paren_string.replace(\"))\", \"\")\n    paren_string = paren_string.replace(\"))\", \"\")\n    paren_string = paren_string.replace(\"))\", \"\")\n    paren_string = paren_string.replace(\"))\", \"\")\n    paren_string = paren_string.replace(\"))\", \"\")\n    paren_string = paren_string.replace(\"))))\", \"\")\n    paren_string = paren_string.replace(\"))))\", \"\")\n    paren_string = paren_string.replace(\"))))\", \"\")\n    paren_string = paren_string.replace(\"))))\", \"\")\n    paren_string = paren_string.replace(\"))))\", \"\")\n    paren_string = paren_string.replace(\"))))\", \"\")\n    paren_string = paren_string.replace(\"))))\", \"\")\n    paren_string = paren_string.replace(\"))))\", \"\")\n    paren_string = paren_string.replace(\"))))\", \"\")\n    paren_string = paren_string.replace(\"))))\", \"\")\n    paren_string = par"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = math.floor(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        else:\n            balance -= op\n    return balance < 0"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate the mean of the given list\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the absolute difference between each element and the mean\n    mad = sum([abs(x - mean) for x in numbers]) / len(numbers)\n\n    return mad"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return [numbers[0]]\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(numbers[i] + delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def count_parens(paren_string: str) -> int:\n        count = 0\n        for i in range(len(paren_string)):\n            if paren_string[i] == '(':\n                count += 1\n            elif paren_string[i] == ')':\n                count -= 1\n        return count\n\n    def parse_nested_parens_helper(paren_string: str) -> List[int]:\n        result = []\n        for i in range(len(paren_string)):\n            if paren_string[i] == '(':\n                result.append(1)\n            elif paren_string[i] == ')':\n                result.pop()\n            elif result:\n                result[-1] += 1\n        return result\n\n    def parse_nested_parens(paren_string: str) -> List[int]:\n        return parse_nested_parens_helper(paren_string)\n\n    return parse_nested_parens(paren_string)"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \n    Args:\n        strings (List[str]): List of strings to filter\n        substring (str): Substring to search for\n    \n    Returns:\n        List[str]: List of strings that contain the substring\n    \"\"\"\n    # Your code here\n\n"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), numbers[-1] * sum(numbers) // numbers[-1]"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list = []\n    rolling_max_num = 0\n    for i in range(len(numbers)):\n        rolling_max_list.append(numbers[i])\n        rolling_max_num = max(rolling_max_num, numbers[i])\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    if string[0] == string[-1]:\n        return string[1:-1]\n\n    left, right = 0, len(string) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        if string[mid] == string[mid][::-1]:\n            left = mid + 1\n        else:\n            right = mid\n\n    return string[:-len(string[right])] + string[left:right][::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Your code here\n\n"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n    if len(strings) == 0:\n        return None\n\n    longest_str = strings[0]\n    for str in strings:\n        if len(str) > len(longest_str):\n            longest_str = str\n\n    return longest_str"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a % b, b)\n    return greatest_common_divisor(a, b % a)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[i])\n        prefixes.extend(all_prefixes(string[i+1:]))\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n == 0:\n        return '0'\n    else:\n        return '0' + string_sequence(n-1)"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Count the number of distinct characters\n    count = sum(1 for c in string if c.isalpha())\n\n    return count"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # initialize result list\n    result = []\n    # iterate over each character in the string\n    for char in music_string:\n        # check if the character is 'o'\n        if char == 'o':\n            # add 4 to the result list\n            result.append(4)\n        # check if the character is 'o|'\n        elif char == 'o|':\n            # add 2 to the result list\n            result.append(2)\n        # check if the character is '.|'\n        elif char == '.|':\n            # add 1 to the result list\n            result.append(1)\n    # return the result list\n    return result"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    start = 0\n    while start < len(string):\n        if string[start:start+len(substring)] == substring:\n            count += 1\n            start += len(substring)\n        else:\n            start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\ndef sort_numbers(numbers: str) -> str:\n    numbers = numbers.split(' ')\n    numbers.sort()\n    return''.join(numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to\n    each other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    closest_numbers = None\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_numbers = (numbers[i], numbers[j])\n    return closest_numbers"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [0 if num == min(numbers) else (num - min(numbers)) * (1 - min(numbers)) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \n    Args:\n        values (List[Any]): List of any python values\n    \n    Returns:\n        List[int]: List of integers\n    \"\"\"\n    # Convert values to list of integers\n    int_values = [int(x) for x in values]\n    \n    # Filter out non-integer values\n    int_values = list(filter(lambda x: isinstance(x, int), int_values))\n    \n    return int_values"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    if string == '':\n        return 0\n    else:\n        return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n+1):\n            if n % i == 0:\n                return i\n        return n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n /= i\n        else:\n            i += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    if not strings:\n        return ''\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    n = len(xs)\n    if n % 2 == 0 and xs[-1]!= 0:\n        # find the largest non-zero coefficient\n        largest_coeff = xs[n // 2]\n        # find the x-value that makes the polynomial zero\n        for i in range(n - 1, -1, -1):\n            if xs[i] == -largest_coeff:\n                # if the polynomial is zero at this point, return it\n                return -largest_coeff / xs[i]\n    return None"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list) -> list:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l.sort()\n    return l"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not (x in seen.add(x))]"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        return 0\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 and i % 13!= 0:\n            count += 1\n        elif i % 11 == 0 and i % 13 == 0:\n            count += 1\n        elif i % 13 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    even_list = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_list.append(l[i])\n        else:\n            even_list.append(l[i])\n    return even_list"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # reverse the cycled string\n    s = s[::-1]\n    # split string to groups of three\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # join the groups\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        fib = [0, 1]\n        for i in range(2, n+1):\n            fib.append(fib[i-1] + fib[i-2])\n        for i in range(2, n+1):\n            if fib[i] > n:\n                break\n            if is_prime(fib[i]):\n                return fib[i]\n        return -1\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime returns True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    Args:\n    l: list of integers\n\n    Returns:\n    bool: True if there are three distinct elements in the list that sum to zero,\n         False otherwise\n    \"\"\"\n    # Create a set of elements in the list\n    s = set(l)\n    # Create a list of elements that are not zero\n    non_zero = [x for x in l if x!= 0]\n    # Check if there are three distinct elements in the list that sum to zero\n    if len(s) == 3 and len(set(non_zero).intersection(s)) == 3:\n        return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    left_cars = set(range(n))\n    right_cars = set(range(n, 2*n))\n    return len(left_cars.intersection(right_cars))"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # check if the list is empty\n    if len(l) == 0:\n        return False\n\n    # check if the list has only one element\n    if len(l) == 1:\n        return False\n\n    # check if the list has only two elements\n    if len(l) == 2:\n        return abs(l[0] - l[1]) == 0\n\n    # check if the list has more than two elements\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l)):\n            if abs(l[i] - l[j]) == 0:\n                return True\n\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    # convert to string\n    s = str(x)\n    # initialize result\n    res = \"\"\n    # iterate over each digit\n    for i in range(len(s)):\n        # get the current digit\n        digit = int(s[i])\n        # convert to new base\n        new_digit = digit * (base ** (len(s) - i - 1))\n        # append to result\n        res += str(new_digit)\n    return res"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    s = (a + h) / 2\n    area = (s*(s-a))/(2*h)\n    return area"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib4_n = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        return fib4_n"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        middle = length // 2\n        median = (sorted_list[middle - 1] + sorted_list[middle]) / 2\n    else:\n        middle = length // 2\n        median = sorted_list[middle]\n    return median"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    if not text:\n        return True\n    elif text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \n    Args:\n        n (int): The exponent.\n        p (int): The modulo.\n    \n    Returns:\n        int: The result of 2^n modulo p.\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        return modp(abs(n), p)\n    if p == 1:\n        return 0\n    if n < p // 2:\n        return (2 ** n) % p\n    if n == p // 2:\n        return 1 % p\n    if n > p // 2:\n        return (2 ** (p // 2)) % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(ord(ch) - 5 + 26) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n\ndef remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \n    Args:\n        l (list): A list of integers.\n        t (int): The threshold value.\n    \n    Returns:\n        bool: True if all numbers in the list l are below threshold t, False otherwise.\n    \"\"\"\n    return all(x <= t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    if len(s0)!= len(s1):\n        return False\n    s0_set = set(s0)\n    s1_set = set(s1)\n    return len(s0_set) == len(s1_set)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return False\n    elif l[1] <= l[0]:\n        return False\n    elif l[1] >= l[0]:\n        return True\n    else:\n        return monotonic(l[1:])"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1.sort()\n    l2.sort()\n    return [i for i in l1 if i in l2]"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 2\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return i\n        return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if len(xs) == 0:\n        return []\n    elif len(xs) == 1:\n        return [0]\n    else:\n        return [x[0] + x[1] * xs[0]] + derivative(xs[1:])"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouy\"\n    count = 0\n    for c in s:\n        if c in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # Get the length of the number\n    n = len(str(x))\n\n    # If the shift is greater than the length of the number,\n    # return the digits reversed\n    if shift > n:\n        return str(x)[::-1]\n\n    # Otherwise, shift the digits to the right\n    # and return the result as a string\n    else:\n        return str(x)[n-shift:n]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    # Create a dictionary to store the sum of each upper character\n    upper_sum = {chr(i+97):0 for i in range(ord('a'), ord('z')+1)}\n    \n    # Loop through each character in the string\n    for c in s:\n        # If the character is uppercase, add its ASCII code to the corresponding key in the dictionary\n        if c.isupper():\n            upper_sum[c] += ord(c)\n    \n    # Return the sum of the upper characters\n    return sum(upper_sum.values())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples, oranges = s.split()\n    apples_num = int(apples)\n    oranges_num = int(oranges)\n    total_num = n\n    mango_num = total_num - apples_num - oranges_num\n    return mango_num"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nodes = []\n    for node in arr:\n        if node % 2 == 0:\n            even_nodes.append(node)\n    if not even_nodes:\n        return []\n    smallest_even_node = min(even_nodes)\n    smallest_even_node_index = arr.index(smallest_even_node)\n    return [smallest_even_node, smallest_even_node_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    max_freq = 0\n    max_num = -1\n    \n    for num in freq:\n        if freq[num] >= num:\n            if freq[num] > max_freq:\n                max_freq = freq[num]\n                max_num = num\n    \n    return max_num"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    sorted_lst = [min_val]\n    for val in lst:\n        if val > max_val:\n            sorted_lst.append(max_val)\n            max_val = val\n        else:\n            sorted_lst.append(val)\n    if max_val!= min(lst):\n        sorted_lst.append(max_val)\n    return sorted_lst"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = math.sqrt(s)\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if not q:\n        return True\n    if q[0] > w:\n        return False\n    if q[0] == w:\n        return True\n    if q[0] < w // 2:\n        return will_it_fly(q[1:], w - q[0])\n    return will_it_fly(q[1:], w)"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    # Create a copy of the array\n    arr_copy = arr.copy()\n\n    # Initialize the number of changes needed\n    changes_needed = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current element is equal to the element at the other end of the array\n        if arr[i] == arr[-i-1]:\n            # If it is, increment the number of changes needed\n            changes_needed += 1\n\n        # If the current element is not equal to the element at the other end of the array,\n        # we need to change it to match\n        else:\n            # Find the index of the element we need to change to\n            for j in range(len(arr)):\n                if arr[j] == arr[i]:\n                    # Change the element\n                    arr_copy[j] = arr_copy[i]\n                    break\n\n    # Return the number of changes needed\n    return changes_needed"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1)!= len(lst2):\n        return lst1\n    total_chars_lst1 = sum(len(x) for x in lst1)\n    total_chars_lst2 = sum(len(x) for x in lst2)\n    if total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a, 2):\n            if is_prime(i) and is_prime(a//i):\n                return True\n    return False\n\ndef is_prime(a):\n    \"\"\"Write a function that returns true if the given number is prime\n    and false otherwise.\n    \"\"\"\n    if a < 2:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    Returns True if x is a simple power of n, False otherwise.\n    \"\"\"\n    # Check if x is a power of n\n    if x == n**int(x):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0:\n        return True\n    elif a < 0:\n        return iscube(-a)\n    else:\n        for i in range(1, int(a**(1/3))+1):\n            if a % i == 0:\n                return True\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for char in num:\n        if char.isalpha() and char.isupper() and (char.lower() in \"2357BDEF\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    binary = 'db' + binary + 'db'\n    return binary"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    if len(string) < 2:\n        return False\n    for i in range(2, int(string.count('a') or string.count('A')) + 1):\n        if string.count('a') or string.count('A') % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**n):\n        if str(i) == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = bin(N)[2:]\n    return binary"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and i % 2!= 0:\n            even_sum += lst[i]\n    return even_sum"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = \"\"\n        for char in word:\n            new_word += chr(ord(char) + 1)\n        new_words.append(new_word)\n    return \" \".join(new_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    def get_row(lst, x):\n        res = []\n        for i, row in enumerate(lst):\n            for j, val in enumerate(row):\n                if val == x:\n                    res.append((i, j))\n        return sorted(res, key=lambda x: (x[0], -x[1]))\n\n    return get_row"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sort_array(array[:-1]) + [array[-1]]\n    else:\n        return sort_array(array[:-1]) + array[-1][::-1]"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for letter in s:\n        if letter.isalpha():\n            shifted = (alphabet.index(letter) - 2) % 26\n            encrypted += alphabet[shifted]\n        else:\n            encrypted += letter\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    lst.sort()\n    return lst[1] if len(lst) > 1 else None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredoms = 0\n    i = 0\n    while i < len(S):\n        if S[i].lower() == 'i':\n            boredoms += 1\n            i += 1\n        elif S[i].lower() in ['.', '?', '!']:\n            i += 1\n        else:\n            i += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if type(x)!= int or type(y)!= int or type(z)!= int:\n        return False\n    if x == y + z:\n        return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    result = \"\"\n    for char in message.lower():\n        if char in vowels:\n            result += chr(ord(char) + 2 - ord('a') - 2)\n        else:\n            result += chr(ord(char) - 32)\n    return result"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    # Initialize the sum of digits of the largest prime\n    largest_prime = 0\n    largest_prime_digits_sum = 0\n\n    # Iterate through the list\n    for num in lst:\n        # Check if the number is prime\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                # If the number is prime, update the sum of digits of the largest prime\n                largest_prime_digits_sum += sum(int(digit) for digit in str(num))\n                # Update the largest prime\n                largest_prime = max(largest_prime, num)\n\n    # Return the sum of digits of the largest prime\n    return largest"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    elif all(isinstance(key, str) and (key.islower() if key.isupper() else key.isupper()) for key in dict.keys()):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return []\n    elif n == 2:\n        return [2]\n    elif n % 2 == 0:\n        return [2]\n    else:\n        primes = []\n        for i in range(3, n+1, 2):\n            is_prime = True\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(i)\n        return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    while b:\n        a *= 10\n        b //= 10\n    return a % 10"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in ['A', 'E', 'I', 'O', 'U'] and s[i+1] in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    try:\n        value = float(value)\n        rounded_value = round(value)\n        if abs(value - rounded_value) < abs(value - (rounded_value + 1)):\n            return rounded_value + 1\n        else:\n            return rounded_value\n    except ValueError:\n        return value"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n, (n+2)//2]\n    else:\n        return [n, (n+1)//2]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.split(',') if s.endswith(',') else s.split(' ')\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        x, y = y, x\n    for i in range(x, y+1):\n        if i % 2 == 0 and i > max(x, y):\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    rounded_total = round(total)\n    binary_rounded_total = bin(rounded_total)[2:]\n    return binary_rounded_total"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Create a set of all even digits\n    even_digits = set(str(i) for i in range(10))\n\n    # Create a set of all odd digits\n    odd_digits = set(str(i) for i in range(1, 10))\n\n    # Create a list of all elements in x that don't contain any even digits\n    result = []\n    for digit in x:\n        if str(digit) not in even_digits and str(digit) not in odd_digits:\n            result.append(digit)\n\n    # Sort the list and return it\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    arr = [int(x) for x in arr if 1 <= int(x) <= 9]\n    arr.sort()\n    arr.reverse()\n    return [x for x in \"One Two Three Four Five Six Seven Eight Nine\" if x == x[0]]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    if n == 0:\n        return []\n    if n % 2 == 0:\n        return [n]\n    else:\n        return [n] + [n * i for i in range(1, n+1)]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n: int) -> tuple:\n    even_palindrome = 0\n    odd_palindrome = 0\n    for i in range(1, n+1):\n        if str(i) == str(i) and int(str(i)) % 2 == 0:\n            even_palindrome += 1\n        else:\n            odd_palindrome += 1\n    return (even_palindrome, odd_palindrome)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n        while num > 0:\n            digit = num % 10\n            if digit > 0:\n                count += 1\n            num //= 10\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[-1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    # Check if lst1 is already a list of even numbers\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n\n    # Check if lst2 contains all even numbers\n    if all(num % 2 == 0 for num in lst2):\n        return \"YES\"\n\n    # Check if lst2 contains all odd numbers\n    if all(num % 2 == 1 for num in lst2):\n        return \"NO\"\n\n    # Check if lst1 contains all odd numbers\n    if all(num % 2 == 1 for num in lst1):\n        return \"NO\"\n\n    # Check if lst1 contains all even numbers\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n\n    # If none of the above conditions are met, return \"NO\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b b b a') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create a dictionary to store the counts of each letter\n    letter_count = {}\n\n    # Loop through each letter in the string\n    for letter in test.split():\n        # If the letter is not in the dictionary, add it with a count of 1\n        if letter not in letter_count:\n            letter_count[letter] = 1\n        # If the letter is already in the dictionary, increment its count\n        else:\n            letter_count[letter] += 1\n\n    # Return the dictionary with the letter with the most repetition\n    return {k: v for k, v in letter_count.items() if v == max(letter_count.values())}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # reverse_delete([], '') == []\n    # reverse_delete(['a'], 'a') == []\n    # reverse_delete(['abcd'], 'c') == ['abcd']\n    # reverse_delete(['abcd'], 'a') == ['bcd']\n    # reverse_delete(['abcd'], 'b') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    # reverse_delete(['abcd'], 'ab') == ['acd']\n    #"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd digits in the i'th string of the input.\"\n    where all the i's should be replaced by the number of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd digits in the 4th string of the input.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd digits in the 1st string of the input.\",\n     \"the number of odd digits in the 8th string of the input.\"]\n    \"\"\"\n    result = []\n    for i, s in enumerate(lst):\n        odd_digits = sum(int(d) for d in s if int(d) % 2!= 0)\n        result.append(f\"the number of odd digits in the {i+1}th string of the input.\")\n        result.append(f\"{odd_digits}\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    left, right = 0, sum(nums)\n    while left < right:\n        mid = (left + right) // 2\n        if mid >= sum(nums):\n            right = mid\n        else:\n            left = mid + 1\n    return left"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    buckets = [[0]*cols for _ in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                buckets[i][j] = capacity\n    max_fill = 0\n    for i in range(rows):\n        for j in range(cols):\n            if buckets[i][j] > 0:\n                buckets[i][j] -= 1\n                max_fill += 1\n    return max_fill"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Count the number of ones in binary representation of each element\n    ones_count = [bin(i).count('1') for i in arr]\n\n    # Sort the array based on number of ones\n    arr.sort(key=lambda x: ones_count[ones_count.index(x)])\n\n    # If there are multiple elements with the same number of ones, sort based on decimal value\n    if len(ones_count) > 1 and len(set(ones_count)) == 1:\n        arr.sort(key=lambda x: x)\n\n    return arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(set(word[1:])) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    left, right = 0, len(word) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if word[mid] in vowels:\n            if word[left] in consonants and word[mid] in vowels:\n                return word[mid]\n            elif word[mid] in consonants and word[right] in consonants:\n                return word[mid]\n            elif word[left] in consonants and word[mid] in consonants:\n                return word[mid]\n            elif word[mid] in consonants and word[right] in consonants:\n                return word[mid]\n            elif word[left] in vowels and word[mid] in vowels:\n                return word[mid]\n            elif word[mid] in vowels and word[right] in vowels:\n                return word[mid]\n            elif word[left] in consonants and word[mid] in consonants:\n                return word[mid]\n            elif word[mid] in consonants and word[right] in consonants:\n                return word[mid]\n            elif word[left] in vowels and word[mid] in consonants:\n                return word[mid]\n            elif word[mid] in vowels and word[right] in consonants:\n                return word[mid]\n            elif word[left] in consonants and word[mid] in vowels:\n                return word[mid]\n            elif word[mid] in consonants and word[right] in vowels:\n                return word[mid]\n            elif word[left] in vowels and word[mid] in vowels:\n                return word[mid]\n            elif word[mid] in vowels and word[right] in vowels:\n                return word[mid]\n            elif word[left] in consonants and word[mid] in consonants:\n                return word[mid]\n            elif word[mid] in conson"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        if s == '(':\n            stack.append(s)\n        elif s == ')':\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    return 'Yes' if len(stack) == 0 else 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the result array\n    result = []\n\n    # Iterate through the array\n    for i in range(k):\n        # If the current element is greater than the first k elements\n        if i == 0 or arr[i] > arr[i-1]:\n            # Append it to the result array\n            result.append(arr[i])\n\n    return result"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum_odd_in_even_pos = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum_odd_in_even_pos += lst[i]\n    return sum_odd_in_even_pos"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize the sum\n    total = 0\n    # Iterate through the first k elements\n    for i in range(k):\n        # Check if the current element has at most two digits\n        if len(str(arr[i])) <= 2:\n            # Add the current element to the sum\n            total += arr[i]\n            break\n\n    return total"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n//2]\n    else:\n        return [3*n + 1] + get_odd_collatz(n//2)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\ndef valid_date(date):\n    # Split the date string into month, day and year\n    month, day, year = date.split('-')\n\n    # Check if the month is valid\n    if int(month) < 1 or int(month) > 12:\n        return False\n\n    # Check if the day is valid\n    if int(month) in [1,3,5,7,8,10,12]:\n        if int(day) < 1 or int(day) > 31:\n            return False\n    elif int(month) in [4,6,9,11]:\n        if int(day) < 1 or int(day) > 30:\n            return False\n    else:\n        if int(day) < 1 or int(day) > 29:\n            return False\n\n    # Check"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if txt.count(',') > 0:\n        return txt.split(',')\n    elif txt.count(' ') > 0:\n        return txt.split()\n    else:\n        return txt.count(lambda c: ord(c.lower()) % 2 == 1, len(txt))"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    # Check if the list is empty\n    if len(lst) == 0:\n        return True\n\n    # Check if the list has only one element\n    if len(lst) == 1:\n        return True\n\n    # Check if the list has more than one element\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    # check if the intervals don't intersect\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n\n    # check if the length of intersection is a prime number\n    if interval1[1] - interval1[0] + 1 > 2:\n        return \"YES\"\n\n    # calculate the intersection\n    intersection = [interval1[0] + interval2[0]]\n    for i in range(1, interval1[1] - interval1[0] + 1):\n        intersection.append(interval1[0] + i*interval2[0])\n\n    # check if the length of intersection is a prime number\n    if len(intersection) > 2:\n        return \"YES\"\n\n    # if the length of intersection is not a prime number, return \"NO\"\n    return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    res = 0\n    for num in arr:\n        res += abs(num) * (1 if num > 0 else -1)\n    return res"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # Create a list of all the values in the grid\n    lst = [row[0] + row[1] + row[2] for row in grid]\n\n    # Sort the list\n    lst.sort()\n\n    # Create a list of all the values in the grid in reverse order\n    rev_lst = [row[0] + row[1] + row[2] for row in grid[::-1]]\n\n    # Sort the list\n    rev_lst.sort()\n\n    # Create a list of all the values in the grid in reverse order\n    rev_lst.sort()\n\n    # Create a list of all the values in the grid in reverse order\n    rev_lst.sort()\n\n    # Create a list of all the values in the grid in reverse order\n    rev_lst.sort()\n\n    # Create a list of all the values in the grid in reverse order\n    rev_lst.sort()\n\n    # Create a list of all the values in the grid in reverse order\n    rev_lst.sort()\n\n    # Create a list of all the values in the grid in reverse order\n    rev_lst.sort()\n\n    # Create a list of all the values in the grid in reverse order\n    rev_lst.sort()\n\n    # Create a list of all the values in the grid in reverse order\n    rev_lst.sort()\n\n    # Create a list of all the values in the grid in reverse order\n    rev_lst.sort()\n\n    # Create a list of all the values in the grid in reverse order\n    rev_lst.sort()\n\n    # Create a list of all the values in the grid in reverse order\n    rev_lst.sort()\n\n    # Create a list of all the values in the grid in reverse order\n    rev_lst.sort()\n\n    # Create a list of all the values in the grid in reverse order\n    rev_lst.sort()\n\n    # Create a list of all the values in the grid in reverse order\n    rev_lst.sort()\n\n    # Create a list of all the values in the grid in reverse order\n    rev_lst.sort()\n\n    # Create a list of all"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n % 2 == 0:\n        return [1 + n / 2]\n    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1)]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    result = 0\n    while n % 10!= 0:\n        result += n % 10\n        n //= 10\n    return result"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    sum_squares = 0\n    for num in lst:\n        num = round(num)\n        sum_squares += num**2\n    return sum_squares"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\" or txt[-1] == \" \":\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return -1\n        else:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return None, None\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    if negatives and positives:\n        return max(negatives), min(positives)\n    elif negatives:\n        return max(negatives), None\n    elif positives:\n        return None, min(positives)\n    else:\n        return None, None"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        if a.replace(\".\", \",\") == b.replace(\".\", \",\") and float(a) == float(b):\n            return a\n        elif a.replace(\".\", \",\") > b.replace(\".\", \",\") or float(a) > float(b):\n            return a\n        else:\n            return b\n    elif isinstance(a, str) or isinstance(b, str):\n        if a.replace(\".\", \",\") > b.replace(\".\", \",\") or float(a) > float(b):\n            return a\n        elif a.replace(\".\", \",\") == b.replace(\".\", \",\") and float(a) == float(b):\n            return a\n        else:\n            return b\n    elif isinstance(a, str) or isinstance(b, str):\n        if a.replace(\".\", \",\") > b.replace(\".\", \",\") or float(a) > float(b):\n            return a\n        elif a.replace(\".\", \",\") == b.replace(\".\", \",\") and float(a) == float(b):\n            return a\n        else:\n            return b\n    else:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Check if n is even\n    if not n % 2 == 0:\n        return False\n\n    # Check if n is divisible by 4\n    if n % 4!= 0:\n        return False\n\n    # Check if n is divisible by 8\n    if n % 8!= 0:\n        return False\n\n    # Check if n is divisible by 16\n    if n % 16!= 0:\n        return False\n\n    # Check if n is divisible by 32\n    if n % 32!= 0:\n        return False\n\n    # Check if n is divisible by 64\n    if n % 64!= 0:\n        return False\n\n    # Check if n is divisible by 128\n    if n % 128!= 0:\n        return False\n\n    # Check if n is divisible by 256\n    if n % 256!= 0:\n        return False\n\n    # Check if n is divisible by 512\n    if n % 512!= 0:\n        return False\n\n    # Check if n is divisible by 1024\n    if n % 1024!= 0:\n        return False\n\n    # Check if n is divisible by 2048\n    if n % 2048!= 0:\n        return False\n\n    # Check if n is divisible by 4096\n    if n % 4096!= 0:\n        return False\n\n    # Check if n is divisible by 8192\n    if n % 8192!= 0:\n        return False\n\n    # Check if n is divisible by 16384"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    # Initialize the result\n    result = 1\n\n    # Calculate the special factorial\n    for i in range(1, n+1):\n        result *= i\n        result //= (i-1)\n\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    if len(text.split()) > 2:\n        text = text.replace(\"  \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3 or not file_name.startswith(str.lower(file_name)[0]):\n        return \"No\"\n    elif file_name.find('.') == -1 or file_name.split('.')[0] == \"\":\n        return \"No\"\n    elif file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    else:\n        return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\n    # Initialize sum\n    total = 0\n\n    # Iterate through the list\n    for i, num in enumerate(lst):\n        # Check if index is a multiple of 3 or 4\n        if i % 3 == 0 or (i % 4!= 0 and i % 3!= 0):\n            # Square the number if index is a multiple of 3\n            if i % 3 == 0:\n                total += num**2\n            # Cube the number if index is a multiple of 4 and not a multiple of 3\n            elif i % 4 == 0 and i % 3!= 0:\n                total += num**3\n        else:\n            total += num\n\n    # Return the sum\n    return total"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if len(word) == 2:\n            result += word\n    return result"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    \"\"\"\n    Simplify the expression x * n.\n    :param x: string representation of a fraction.\n    :param n: string representation of a fraction.\n    :return: True if x * n evaluates to a whole number, False otherwise.\n    \"\"\"\n    x_numerator, x_denominator = x.split('/')\n    n_numerator, n_denominator = n.split('/')\n    \n    x_numerator = int(x_numerator)\n    x_denominator = int(x_denominator)\n    n_numerator = int(n_numerator)\n    n_denominator = int(n_denominator)\n    \n    if x_numerator * n_numerator == x_denominator * n_denominator:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    # create a list of tuples, where each tuple contains a number and its sum of digits\n    num_sum_tuples = [(num, sum(int(digit) for digit in str(num))) for num in nums]\n\n    # sort the list of tuples by the sum of digits\n    num_sum_tuples.sort(key=lambda x: x[1])\n\n    # create a list to store the sorted list\n    sorted_nums = []\n\n    # iterate through the sorted list of tuples and add the numbers to the sorted_nums list\n    for num_sum_tuple in num_sum_tuples:\n        # find the index of the number in the original list\n        index = nums.index(num_sum_tuple[0])\n\n        # add the number to the sorted_nums list\n        sorted_nums.append(nums[index])\n\n    return sorted_nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) in [1, 3, 5, 7, 9] and ((num % 10) % 2)!= 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Create the array\n    a = [i*i-i+1 for i in range(1, n+1)]\n\n    # Initialize the counter\n    count = 0\n\n    # Iterate through the array\n    for i in range(len(a)-2):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return []\n    if planet1 == planet2:\n        return []\n    planets_between = []\n    for planet in planets:\n        if planet!= planet1 and planet!= planet2 and planet!= planet1.lower() and planet!= planet2.lower():\n            if planet1 < planet <= planet2:\n                planets_between.append(planet)\n    planets_between.sort(key=lambda x: (len(x) - len(planet1) - len(planet2) - len(x.lower()) - len(x.upper()), x))\n    return planets_between"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Create a list of tuples with the length of each word and the word itself\n    word_lengths = [(len(word), word) for word in lst]\n    # Sort the list by length of each word\n    word_lengths.sort()\n    # Create a new list with only the words with even length\n    result = [word[1] for word in word_lengths if word[1] in word[1]]\n    return result"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    if n % 2 == 0:\n        return y\n    else:\n        for i in range(3, n+1):\n            if n % i == 0:\n                return x\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    \"\"\"\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 == 1:\n                result += num**2\n    return result"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\n    # Create a list to store the result\n    result = []\n\n    # Iterate over the guesses and scores\n    for i in range(len(game)):\n        # If the guess is correct\n        if guess[i] == game[i]:\n            # Set the result to 0\n            result.append(0)\n        # If the guess is incorrect\n        else:\n            # Set the result to the absolute difference between the guess and the score\n            result.append(abs(guess[i] - game[i]))\n\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strongest_extension = None\n    max_strength = 0\n    for extension in extensions:\n        if class_name + '.' + extension in class_name + '.' + ''.join(sorted(extension, key=lambda x: x.isupper())):\n            strength = abs(len(extension.upper()) - len(extension.lower()))\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if len(a) < len(b):\n        a, b = b, a\n    for i in range(len(b)):\n        if b[i] in a:\n            for j in range(i, len(a)):\n                if a[j] == b[i]:\n                    return True\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {\n        'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000\n    }\n    roman_string = []\n    while number > 0:\n        remainder = number % 1000\n        number = number // 1000\n        roman_string.append(roman_numerals[str(remainder)] if remainder in roman_numerals else '')\n    return ''.join(roman_string[::-1]).lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Check if the given triangle is right angled\n    if a <= b + c / 2 or b <= a + c / 2 or c <= a + b / 2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_word = word\n            max_count = count\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining < need:\n        return [remaining, 0]\n    else:\n        return [remaining + need - remaining, remaining]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand)-1:\n        return \"Error: Invalid input\"\n    if not operator or not operand:\n        return \"Error: Invalid input\"\n    if not all(isinstance(op, int) for op in operand) or not all(isinstance(op, str) for op in operator):\n        return \"Error: Invalid input\"\n    if operator[0] == '+':\n        result = sum(operator[1:], operand)\n    elif operator[0] == '-':\n        result = operator[1:] + operand\n    elif operator[0] == '*':\n        result = operator[1:] * operand\n    elif operator[0] == '//':\n        result = operator[1:] // operand\n    elif operator[0] == '**':\n        result = operator[1:] ** operand\n    else:\n        return \"Error: Invalid operator\"\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not s:\n        return s\n    elif s[0].isalpha():\n        return s if s[0].isupper() else s[0].lower() + solve(s[1:])\n    else:\n        return s[::-1]"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == '':\n        return None\n    else:\n        hash_value = hashlib.md5(text.encode()).hexdigest()\n        return hash_value"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
