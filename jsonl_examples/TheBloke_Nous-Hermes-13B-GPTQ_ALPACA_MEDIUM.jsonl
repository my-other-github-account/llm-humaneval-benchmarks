{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    # Split the string by all characters that are not parentheses\n    paren_groups = paren_string.split('()[]{}')\n    \n    # Initialize an empty list to store the separated groups\n    separated_groups = []\n    \n    # Iterate over each substring in the list\n    for group in paren_groups:\n        # Check if the current group is balanced\n        if group[0] == '(' and group[-1] == ')':\n            # If it is, add it to the list of separated groups\n            separated_groups.append(group)\n        else:\n            # If it is not, skip it\n            pass\n    \n    # Return the list of separated groups\n    return separated_groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    integer_part = math.floor(number)\n    decimal_part = number - integer_part\n    \n    return decimal_part\n\n"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \n    Args:\n        operations (List[int]): List of deposit and withdrawal operations.\n    \n    Returns:\n        bool: True if the balance falls below zero, False otherwise.\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        elif operation < 0:\n            balance -= operation\n    return balance < 0"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate mean of the dataset\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate absolute difference between each element and mean\n    deviations = [abs(x - mean) for x in numbers]\n    \n    # Calculate mean of absolute differences\n    mad = sum(deviations) / len(deviations)\n    \n    return mad"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    if not numbers:\n        return []\n    \n    if delimeter == 0:\n        return numbers\n    \n    result = []\n    current = 0\n    for num in numbers:\n        if num == current:\n            result.append(delimeter)\n        else:\n            result.append(num)\n        current += 1\n        if current == num:\n            result.append(delimeter)\n        else:\n            result.append(num)\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Split the string by spaces\n    paren_groups = paren_string.split()\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over the list of paren groups\n    for paren_group in paren_groups:\n        # Check if the paren group is empty\n        if paren_group == '':\n            # If it is, add 1 to the result\n            result.append(result[-1] + 1)\n        # If it is not empty, add its depth to the result\n        else:\n            result.append(max(result[-1], int(paren_group)))\n    \n    # Return the result\n    return result"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \n    Args:\n        strings (List[str]): List of strings to filter\n        substring (str): Substring to filter for\n    \n    Returns:\n        List[str]: List of strings that contain the given substring\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    \n    product = 1\n    for num in numbers:\n        product *= num\n    \n    sum = sum(numbers)\n    \n    return (sum, product)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_values = []\n    current_max = numbers[0]\n    \n    for num in numbers:\n        if num > current_max:\n            max_values.append(current_max)\n            current_max = num\n        else:\n            max_values.append(current_max)\n            current_max = num\n    \n    max_values.append(current_max)\n    \n    return max_values"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n\n"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    # Convert input strings to lists\n    a_list = list(a)\n    b_list = list(b)\n    \n    # Perform XOR operation on the lists\n    result_list = [a_list[i] ^ b_list[i] for i in range(len(a_list))]\n    \n    # Convert the result list back to a string\n    result = ''.join(str(x) for x in result_list)\n    \n    return result\n"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n    >>> longest([])\n    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    \n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    \n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \n    Args:\n        a (int): First integer\n        b (int): Second integer\n    \n    Returns:\n        int: The greatest common divisor of a and b\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    \n    if a > b:\n        return greatest_common_divisor(b, a % b)\n    return greatest_common_divisor(a, b % a)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            prefix = string[i:j]\n            if prefix not in prefixes:\n                prefixes.append(prefix)\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return''.join(str(i) for i in range(n+1))\n\n"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    distinct_characters = set()\n    for char in string:\n        distinct_characters.add(char.lower())\n    return len(distinct_characters)\n\n"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = []\n    current_note = 0\n    \n    for char in music_string:\n        if char == 'o':\n            beats.append(4)\n        elif char == '|':\n            if current_note == 0:\n                beats.append(2)\n            else:\n                beats.append(1)\n        elif char == '.':\n            if current_note == 0:\n                beats.append(1)\n            else:\n                beats.append(2)\n        current_note += 1\n    \n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    index = 0\n    \n    while index!= -1:\n        index = string.find(substring, index)\n        if index!= -1:\n            count += 1\n            index += 1\n    \n    return count\n\n"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    # Split the input string into a list of individual numbers\n    numbers_list = list(map(int, numbers.split()))\n    \n    # Sort the list of numbers in ascending order\n    numbers_list.sort()\n    \n    # Join the sorted list of numbers back into a string\n    return''.join(str(num) for num in numbers_list)\n\n"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n    Args:\n        numbers (List[float]): List of numbers to search through.\n    Returns:\n        Tuple[float, float]: Tuple containing the two closest numbers.\n    \"\"\"\n    # Sort the list of numbers in ascending order\n    numbers.sort()\n    \n    # Initialize variables to keep track of the smallest and largest numbers found so far\n    smallest = numbers[0]\n    largest = numbers[0]\n    \n    # Loop through the list of numbers and find the two closest numbers\n    for number in numbers:\n        if number < smallest:\n            smallest = number\n        elif number > largest:\n            largest = number\n    \n    # Return the two closest numbers in order\n    return (smallest, largest)"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \n    Args:\n        numbers (List[float]): List of numbers to be rescaled\n    \n    Returns:\n        List[float]: Rescaled list of numbers\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    \n    min_num = min(numbers)\n    max_num = max(numbers)\n    \n    rescaled_numbers = [ (num - min_num) / (max_num - min_num) for num in numbers]\n    \n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \n    Args:\n        values (List[Any]): List of any python values\n    \n    Returns:\n        List[int]: List of integers\n    \"\"\"\n    return [v for v in values if isinstance(v, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    divisors = []\n    i = 1\n    while i * i <= n:\n        divisors.append(i)\n        i += 1\n    if n > 0:\n        largest_divisor = max(divisors)\n    else:\n        largest_divisor = 0\n    return largest_divisor\n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    # initialize empty list\n    factors = []\n    \n    # find prime factors\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    \n    # add 1 if n is not a perfect square\n    if n > 1:\n        factors.append(1)\n    \n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \"\"\"\n    return string.swapcase()\n\n"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    \n    Args:\n        strings (List[str]): List of strings to concatenate\n    \n    Returns:\n        str: Concatenated string\n    \"\"\"\n    if not strings:\n        return ''\n    \n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \n    Args:\n        strings (List[str]): The list of strings to filter.\n        prefix (str): The prefix to filter for.\n    \n    Returns:\n        List[str]: The filtered list of strings.\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    \n    Args:\n        l (list): List of numbers.\n    \n    Returns:\n        list: List of positive numbers in the input list.\n    \"\"\"\n    return [num for num in l if num > 0]\n"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    \n    Args:\n        n (int): The number to check for primality.\n        \n    Returns:\n        bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2!= 0 or max(abs(coeff) for coeff in xs) == 0:\n        return None\n    elif len(xs) % 2 == 0:\n        return round(poly([1, 0, 1, 0, 1]), 2)\n    else:\n        return round(poly([1, 2, 1, 2, 1]), 2)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    l' = l[:]  # create a copy of the list\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l'[i] = l[i]\n        elif i % 3 == 0:\n            l'[i] = sorted(l[i])\n    return l'\n"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    \n    Args:\n        l (list): List of elements\n    \n    Returns:\n        list: Sorted unique elements in the list\n    \"\"\"\n    unique_set = set(l)\n    unique_list = list(unique_set)\n    unique_list.sort()\n    return unique_list\n\n"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n):\n    count = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            count += 1\n        elif i % 3 == 0 and i % 5!= 0:\n            count += 1\n        elif i % 5 == 0 and i % 3!= 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    l_copy = l.copy()\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_copy[i], l_copy[i//2] = l_copy[i//2], l_copy[i]\n    return l_copy"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n <= 1:\n        return n\n    elif n <= 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    else:\n        a = 0\n        b = 1\n        fib = [a, b]\n        while True:\n            c = a + b\n            fib.append(c)\n            if c > n:\n                break\n            if is_prime(c):\n                return c\n            a = b\n            b = c\n    raise ValueError(\"No prime Fibonacci number found for n = {}\".format(n))\n\n\ndef is_prime(n):\n    \"\"\"\n    is_prime checks if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Initialize the number of collisions to 0\n    collisions = 0\n\n    # Check if the number of cars is even\n    if n % 2 == 0:\n        # If the number of cars is even, the number of collisions will be 0\n        collisions = 0\n\n    # Check if the number of cars is odd\n    elif n % 2 == 1:\n        # If the number of cars is odd, the number of collisions will be equal to the number of cars\n        collisions = n\n\n    # Return the number of collisions\n    return collisions\n\n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l):\n    \"\"\"Return list with elements incremented by 1.\n    \n    Args:\n        l (list): List to be incremented.\n    \n    Returns:\n        list: List with elements incremented by 1.\n    \"\"\"\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if base > 10:\n        return \"Invalid base\"\n    elif base == 10:\n        return str(x)\n    elif base == 2:\n        return bin(x)[2:]\n    elif base == 8:\n        return hex(x)[2:]\n    elif base == 4:\n        return oct(x)[2:]\n    else:\n        return \"Invalid base\"\n\n"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    \n    Args:\n        a (float): Length of a side.\n        h (float): Height of the triangle.\n    \n    Returns:\n        float: Area of the triangle.\n    \"\"\"\n    return (a * h) / 2\n\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib4_cache = [0, 1]\n        for i in range(2, n+1):\n            fib4_cache.append(fib4_cache[i-2] + fib4_cache[i-1])\n        return fib4_cache[n]"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n    else:\n        return l[len(l)//2]\n"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    # reverse the string\n    rev_text = text[::-1]\n    \n    # check if the reversed string is equal to the original string\n    if rev_text == text:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \n    Args:\n        n (int): The exponent.\n        p (int): The modulus.\n    \n    Returns:\n        int: The result of 2^n modulo p.\n    \"\"\"\n    if n == 0 and p == 2:\n        return 1\n    elif n == 0 and p == 1:\n        return 0\n    elif n == 0 and p == 0:\n        return 1\n    elif p == 0:\n        return 0\n    else:\n        return pow(2, n) % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char in vowels:\n            continue\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \n    Args:\n        l (list): A list of numbers.\n        t (int): The threshold value.\n    \n    Returns:\n        bool: True if all numbers in the list are below the threshold, False otherwise.\n    \"\"\"\n    return all(x < t for x in l)\n"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    \n    Args:\n        x (int): First number\n        y (int): Second number\n    \n    Returns:\n        int: The sum of x and y\n    \n    Example:\n        add(2, 3)  # 5\n        add(5, 7)  # 12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    if len(s0)!= len(s1):\n        return False\n    \n    s0_set = set(s0)\n    s1_set = set(s1)\n    \n    return len(s0_set) == len(s1_set) and all(c in s0_set for c in s1_set)\n\n"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    # Count the number of opening brackets\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n    # Count the number of closing brackets\n    closing_brackets = len(brackets) - opening_brackets\n    # Check if every opening bracket has a corresponding closing bracket\n    for i in range(opening_brackets):\n        if brackets[i] == \"<\" and brackets[i+closing_brackets] == \">\":\n            i += 1\n            continue\n        else:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    \n    Args:\n        l (list): List of elements.\n    \n    Returns:\n        bool: True if elements are monotonically increasing or decreasing, False otherwise.\n    \"\"\"\n    # Check if list is empty\n    if len(l) == 0:\n        return True\n    \n    # Check if list has only one element\n    if len(l) == 1:\n        return True\n    \n    # Check if all elements are equal\n    if l[0] == l[-1]:\n        return True\n    \n    # Check if list has no repeated elements\n    if len(set(l)) == len(l):\n        return True\n    \n    # Check if list is sorted\n    if sorted(l):\n        return True\n    \n    # Check if list is reverse sorted\n    if sorted(reversed(l)):\n        return True\n    \n    # If none of the above conditions are met, return False\n    return False"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    \n    Args:\n        l1 (list): First list.\n        l2 (list): Second list.\n        \n    Returns:\n        list: Sorted unique common elements for two lists.\n    \"\"\"\n    # Get common elements\n    common_elements = list(set(l1) & set(l2))\n    \n    # Sort the common elements\n    common_elements.sort()\n    \n    # Return unique common elements\n    return list(set(common_elements))\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \n    Args:\n        n (int): The number to find the prime factor of.\n        \n    Returns:\n        int: The largest prime factor of n.\n    \"\"\"\n    # Find the prime factors of n\n    prime_factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            prime_factors.append(i)\n    # Find the largest prime factor\n    largest_prime_factor = max(prime_factors)\n    return largest_prime_factor\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \n    Args:\n        n (int): The number to sum up to.\n    \n    Returns:\n        int: The sum of numbers from 1 to n.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    # check if brackets is empty\n    if not brackets:\n        return True\n    \n    # check if brackets is only one bracket\n    if len(brackets) == 1:\n        return True\n    \n    # check if brackets is balanced\n    if brackets[0] == '(' and brackets[-1] == ')':\n        return True\n    \n    # check if brackets is not balanced\n    return False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    derivative_list = []\n    for i in range(len(xs)-1):\n        derivative_list.append(xs[i] + (xs[i+1] * i) + (xs[i+1] * i**2))\n    derivative_list.append(xs[-1])\n    return derivative_list\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a = 0\n        b = 1\n        c = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    y_as_vowel = True\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n        elif char == 'y' and y_as_vowel:\n            count += 1\n        elif char =='':\n            count = 0\n            y_as_vowel = False\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    # Get the number of digits in x\n    n = len(str(x))\n    \n    # Circular shift the digits\n    if shift > n:\n        return str(x[n-1] + x)\n    else:\n        return str(x >> shift) + str(x << (n-shift))\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    # initialize sum to 0\n    sum = 0\n    \n    # loop through the string\n    for char in s:\n        # check if the character is a digit\n        if char.isdigit():\n            # add the character to the sum\n            sum += int(char)\n    \n    # return the sum\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples, oranges = 0, 0\n    for i in s:\n        if i.lower() == 'apple':\n            apples += 1\n        elif i.lower() == 'orange':\n            oranges += 1\n    total_fruits = apples + oranges\n    mango_fruits = n - total_fruits\n    return mango_fruits\n"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_nodes = []\n    for node in arr:\n        if node % 2 == 0:\n            even_nodes.append((node, node))\n    if not even_nodes:\n        return []\n    \n    smallest_even_node = min(even_nodes, key=lambda x: x[1])\n    return [smallest_even_node[1], smallest_even_node[1]]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_freq = 0\n    max_val = -1\n    for val in lst:\n        if val > 0 and lst.count(val) >= val:\n            if max_freq < lst.count(val):\n                max_freq = lst.count(val)\n                max_val = val\n    return max_val\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    \n    min_val = min(lst)\n    lst.remove(min_val)\n    sorted_lst = [min_val]\n    \n    for val in lst:\n        if val == min(lst):\n            sorted_lst.append(val)\n        else:\n            new_min = min(lst)\n            lst.remove(new_min)\n            sorted_lst.append(new_min)\n    \n    return sorted_lst"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if (a + b <= c) and (b + c <= a) and (c + a <= b):\n        area = (a * b * c) / 2\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if len(q) == 1:\n        return True\n    if len(q) == 2 and q[0] == q[1]:\n        return True\n    if len(q) == 3 and q[0] == q[2] and q[1] == q[3]:\n        return True\n    if sum(q) <= w:\n        return True\n    return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                return 1\n    return 0\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    for i in range(2, a):\n        if is_prime(i) and is_prime(a/i) and is_prime((a*i)/2):\n            return True\n    return False\n\n\ndef is_prime(n):\n    \"\"\"Write a function that returns true if the given number is prime and false otherwise.\n    Example:\n    is_prime(2) == True\n    is_prime(3) == True\n    is_prime(4) == False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == n**int:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0:\n        return True\n    elif a == 1:\n        return True\n    elif a == -1:\n        return True\n    elif a % 3 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for char in num:\n        if char.isalpha and char.isupper():\n            if char.hexdiget() in [2, 3, 5, 7, 11, 13]:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n    binary = \"db\" + binary + \"db\"\n    return binary\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    # Create a dictionary of letter grades and their corresponding GPA ranges\n    letter_grades = {\n        'A+': (4.0,),\n        'A': (3.7,),\n        'A-': (3.3,),\n        'B+': (3.0,),\n        'B': (2.7,),\n        'B-': (2.3,),\n        'C+': (2.0,),\n        'C': (1.7,),\n        'C-': (1.3,),\n        'D+': (1.0,),\n        'D': (0.7,),\n        'D-': (0.3,),\n        'E': (0.0,)\n    }\n\n    # Convert the list of GPAs to a list of floats\n    gpas = [float(grade) for grade in grades]\n"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # check if the string length is a prime number\n    if len(string) <= 1:\n        return False\n    for i in range(2, len(string)):\n        if string[i] == string[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i == 1 or i % 10 == 1:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_str = bin(N)\n    total_sum = int(binary_str, 2)\n    return str(total_sum)\n\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_indices = [i for i in range(len(lst)) if i % 2 == 1]\n    even_elements = [lst[i] for i in even_indices]\n    return sum(even_elements)\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # Split the string into words\n    words = s.split()\n    # Sort the words based on ASCII value\n    sorted_words = sorted(words, key=lambda x: ord(x))\n    # Join the sorted words and blank spaces\n    ordered_string =''.join(sorted_words)\n    return ordered_string\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    # sort coordinates initially by rows in ascending order\n    lst.sort(key=lambda x: x[0])\n    # sort coordinates of the row by columns in descending order\n    lst.sort(key=lambda x: (-x[0], x[1]))\n    return [(row, col) for row, col in lst[x]]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    n = len(array)\n    for i in range(n):\n        for j in range(n-1):\n            if (array[j] + array[j+1]) % 2 == 0:\n                temp = array[j]\n                array[j] = array[j+1]\n                array[j+1] = temp\n    return array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            encrypted += chr((ord(char) - 97 + 2) % 26 + 97)\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    return sorted(lst)[1]\n"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split():\n        if sentence.startswith('I'):\n            boredoms += 1\n    return boredums"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n    '''\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n    if x + y == z:\n        return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = \"\"\n    for char in message:\n        if char.lower() in vowels:\n            encoded_char = chr(ord(char.lower()) + 2)\n        else:\n            encoded_char = chr(ord(char) - 29)\n        encoded_message += encoded_char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    largest_prime = 0\n    sum_of_digits = 0\n    for num in lst:\n        if num > largest_prime:\n            largest_prime = num\n        if num > 0 and is_prime(num):\n            sum_of_digits += sum(int(d) for d in str(num))\n    return sum_of_digits\n\n\ndef is_prime(num):\n    \"\"\"Checks if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    elif len(dict) == 1:\n        return True\n    else:\n        for key in dict:\n            if not isinstance(key, str) or not key.islower() or not key.isupper():\n                return False\n        return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14, -15) should return 20.\n    \"\"\"\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 or b == 0:\n        return 0\n    if a > b:\n        a, b = b, a\n    if a > 9 or b > 9:\n        return 0\n    if a < b:\n        a, b = b, a\n    if a < 9 or b < 9:\n        return 0\n    if a == 9 and b == 9:\n        return 0\n    if a == 9 and b == 0:\n        return 0\n    if a == 0 and b == 9:\n        return 0\n    if a == 1 and b == 1:\n        return 1\n    if a == 1 and b == 0:\n        return 0\n    if a == 0 and b == 1:\n        return 0\n    if a == -1 and b == 1:\n        return 1\n    if a == -1 and b == 0:\n        return 0\n    if a == 0 and b == -1:\n        return 0\n    if a == 1 and b == -1:\n        return 1\n    if a == 1 and b == 0:\n        return 0\n    if a == 0 and b == 1:\n        return 0\n    if a == -1 and b == 0:\n        return 0\n    if a == 0 and b == -1:\n        return 0\n    if a == 1 and b == 2:\n        return 2\n    if a == 1 and b == "}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].upper() in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # convert the string to float\n    float_value = float(value)\n    \n    # find the integer part\n    integer_part = int(float_value)\n    \n    # find the decimal part\n    decimal_part = float_value - integer_part\n    \n    # find the closest integer to the decimal part\n    closest_decimal = abs(decimal_part)\n    \n    # round the decimal part away from zero\n    if decimal_part >= 0:\n        closest_integer = integer_part + round(closest_decimal)\n    else:\n        closest_integer = integer_part - round(abs(closest_decimal))\n    \n    return closest_integer"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        next_num = n + 1\n    else:\n        next_num = (n + 1) // 2\n    pile = [n]\n    for i in range(n, next_num):\n        pile.append(i)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the string by commas or spaces\n    words = s.split(\",| \")\n    \n    # Return the array of words\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y+1):\n        if i % 2 == 0 and i in range(x, y+1):\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary = bin(rounded_avg)[2:]\n    return binary\n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n    \n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = sorted(x)\n    result = []\n    for i in x:\n        if i and int(i) % 2!= 0:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [str(arr[0])]\n    else:\n        arr.sort()\n        rev_arr = arr[::-1]\n        result = []\n        for num in rev_arr:\n            if 1 <= num <= 9:\n                result.append(str(num))\n        return result\n"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_palindromes = []\n    odd_palindromes = []\n\n    for i in range(1, n + 1):\n        if i in palindromes_even:\n            even_palindromes.append(i)\n        elif i in palindromes_odd:\n            odd_palindromes.append(i)\n\n    return (len(even_palindromes), len(odd_palindromes))\n\n\ndef is_palindrome(n):\n    \"\"\"\n    Check if a given number is a palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\n\ndef palindromes_even():\n    \"\"\"\n    Return a list of even palindromes within the range(1, n).\n    \"\"\"\n    return [i for i in range(1, n + 1) if is_palindrome(i)]\n\n\ndef palindromes_odd():\n    \"\"\"\n    Return a list of odd palindromes within the range(1, n).\n    \"\"\"\n    return [i for i in range(1, n + 1) if is"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        # check if num is negative\n        if num < 0:\n            # get the signed digits\n            signed_digits = list(str(abs(num)))\n            # check if any of the signed digits is greater than 0\n            if any(digit > 0 for digit in signed_digits):\n                count += 1\n        else:\n            # check if num is positive or zero\n            if sum(int(digit) for digit in str(num)) > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    if arr[0] < arr[1]:\n        return True\n    for i in range(2, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n        if arr[i] < arr[i-1]:\n            return True\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    if len(lst1) == 0 or len(lst2) == 0:\n        return \"Empty lists\"\n    if all(num % 2 == 0 for num in lst1):\n        return \"All elements of lst1 are even\"\n    if all(num % 2!= 0 for num in lst2):\n        return \"All elements of lst2 are odd\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0 and lst2[i] % 2!= 0:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n            if all(num % 2 == 0 for num in lst1) and all(num % 2!= 0 for num in lst2):\n                return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    # split the string into a list of lowercase letters\n    letters = test.lower().split()\n    \n    # create an empty dictionary to store the letter frequencies\n    freq = {}\n    \n    # iterate through the list of letters\n    for letter in letters:\n        # if the letter is not already in the dictionary, add it with a count of 1\n        if letter not in freq:\n            freq[letter] = 1\n        # if the letter is already in the dictionary, increment its count\n        else:\n            freq[letter] += 1\n    \n    # return the dictionary of letter frequencies\n    return freq"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    \"\"\"\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Deleting characters from s that are in c\n    s = ''.join(c for c in s if c not in c)\n    \n    # Checking if the result string is palindrome\n    if s == s[::-1]:\n        return (s, True)\n    else:\n        return (s, False)\n"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    output = []\n    for s in lst:\n        if len(s) > 0:\n            num_odd = sum(int(d) % 2 for d in s)\n            output.append(\"the number of odd elements in the string {} of the input.\".format(num_odd))\n    return output\n\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        min_sum = min(min_sum, sum(nums[i:]))\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    # check if grid is valid\n    if not all(len(row) == len(grid) for row in grid):\n        return 0\n    if not all(1 <= len(row) <= 10**2 for row in grid):\n        return 0\n    if not all(1 <= len(row) <= 10**2 for col in range(len(grid[0]))):\n        return 0\n    if not all(1 <= capacity <= 10 and 1 <= len(grid[0]) <= 10**2 for col in range(len(grid[0]))):\n        return 0\n    # initialize variables\n    max_fill_count = 0\n    row_count = 0\n    col_count = 0\n    # fill the grid\n    for row in grid:\n        for col in range(len(row)):\n            if row[col] == 1 and row_count == 0:\n                row_count += 1\n                col_count += 1\n                max_fill_count += 1\n            elif row[col] == 1 and row_count > 0:\n                row_count -= 1\n                col_count -= 1\n                max_fill_count += 1\n            elif col_count == 0:\n                row_count += 1\n                col_count = max_fill_count\n    return max_fill_count"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    # sort the array based on the number of ones in binary representation\n    sorted_arr = sorted(arr, key=lambda x: sum(int(y) == 1 for y in str(x)))\n    # sort the array based on decimal value for similar number of ones\n    return sorted_arr\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(set(word.lower().replace(' ', '')) - set(string.punctuation)) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 2):\n        if word[i] and word[i+1] in vowels:\n            return vowels.index(word[i+1])\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    s1, s2 = lst\n    if s1 == '(' and s2 == ')':\n        return 'Yes'\n    if s1 == ')' and s2 == '(':\n        return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted_arr[:k]\n\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2!= 0:\n            result += lst[i]\n    return result\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize sum\n    sum_ = 0\n\n    # Iterate over k elements\n    for i in range(k):\n        # Get the current element\n        current_element = arr[i]\n\n        # Check if the current element has more than two digits\n        if len(str(current_element)) > 2:\n            # If yes, add the current element to the sum\n            sum_ += current_element\n\n    # Return the sum\n    return sum_\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n    \n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n    \n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    collatz_sequence = [n]\n    while n % 2 == 0:\n        collatz_sequence.append(n // 2)\n        n = n // 2\n    while n % 2!= 0:\n        collatz_sequence.append(n)\n        n = n * 3 + 1\n    \n    return sorted(collatz_sequence)\n\n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    # Check if the date is not empty\n    if len(date) == 0:\n        return False\n    \n    # Check if the date is in the format mm-dd-yyyy\n    if date.count('-')!= 1 or len(date)!= 10:\n        return False\n    \n    # Check if the month is between 1 and 12\n    if int(date[0:2]) < 1 or int(date[0:2]) > 12:\n        return False\n    \n    # Check if the day is between 1 and the number of days for the month\n    if int(date[2:4]) < 1 or int(date[2:4]) > int(date[0:2]):\n        return False\n    \n    # Check if the year is a valid year\n    if int(date[4:]) < 1900 or int(date[4:]) > 2099:\n        return False\n    \n    # Check if the date is valid\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if txt.count(' ') > 0:\n        words = txt.split(' ')\n        return words\n    elif txt.count(',') > 0:\n        words = txt.split(',')\n        return words\n    else:\n        odd_letters = 0\n        for char in txt.lower():\n            if ord(char) % 2!= 0:\n                odd_letters += 1\n        return odd_letters"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Check if the list is empty\n    if len(lst) == 0:\n        return True\n\n    # Check if the list has only one element\n    if len(lst) == 1:\n        return True\n\n    # Check if the list has more than one duplicate of the same number\n    if len(lst) > 1 and len(set(lst))!= len(lst):\n        return False\n\n    # Sort the list\n    lst.sort()\n\n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if not interval1 or not interval2:\n        return \"NO\"\n    \n    if interval1[0] >= interval2[1] or interval1[1] <= interval2[0]:\n        return \"NO\"\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 >= end2 or end1 <= start2:\n        return \"NO\"\n    \n    if start1 >= start2 and end1 <= end2:\n        return \"YES\"\n    \n    if start1 >= start2 and end2 <= end1:\n        return \"YES\"\n    \n    if start1 <= start2 and end2 >= end1:\n        return \"YES\"\n    \n    if start1 <= start2 and end1 >= end2:\n        return \"YES\"\n    \n    return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    \n    prod_sign = 1\n    for num in arr:\n        if num == 0:\n            prod_sign = -prod_sign\n        elif num == 1:\n            prod_sign = 1\n        else:\n            prod_sign = -prod_sign\n    \n    return prod_sign"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # Create a list to store the visited cells\n    visited = []\n    \n    # Create a list to store the values on the cells that the minimum path go through\n    lst = []\n    \n    # Create a function to check if a cell is in the grid\n    def isInGrid(x, y):\n        return 0 <= x < N and 0 <= y < N\n    \n    # Create a function to check if a cell is in the visited list\n    def isVisited(x, y):\n        return x in visited\n    \n    # Create a function to get the value of a cell\n    def getValue(x, y):\n        return grid[x][y]\n    \n    # Create a function to get the ordered list of the values on the cells that the minimum path go through\n    def getOrderedList():\n        return lst\n    \n    # Start from the first cell\n    visited.append((0, 0))\n    lst.append(getValue((0, 0)))\n    \n    # Check if the current cell is out of the grid\n    if not isInGrid(N-1, N-1):\n        return getOrderedList()\n    \n    # Check if the current cell is in the visited list\n    if isVisited(x, y):\n        return getOrderedList()\n    \n    # Check if the current cell is in the grid\n    if not isInGrid(x, y):\n        return getOrderedList()\n    \n    # Check if the current cell is in the visited list\n    if isVisited(x, y):\n        return getOrderedList()\n    \n    # Check if the current cell is in the grid\n    if not isInGrid(x+1, y) or not isInGrid(x, y+1):\n        return getOrderedList()\n    \n    # Check if the current cell is in the visited list\n    if isVisited(x+1, y) or isVisited(x, y+1):\n        return getOrderedList()\n    \n    # Check if the current cell is in the grid\n    if not isInGrid(x, y+1):\n        return getOrdered"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    result = []\n    if n == 0:\n        return []\n    elif n % 2 == 0:\n        result.append(1 + n / 2)\n    else:\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    result.append(n + 1)\n    return result"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    product = 1\n    n = int(str(n)[0])\n    while n > 0:\n        if n % 2 == 1:\n            product *= n\n        n //= 2\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n            elif len(stack) == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    rounded_lst = [round(num) for num in lst]\n    return sum(num**2 for num in rounded_lst)\n\n"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Split the string into words\n    words = txt.split()\n    \n    # Check if the last character is not part of a word\n    if len(words[-1]) == 1:\n        # Check if the last character is an alphabetical character\n        if not txt.endswith(words[-1][0].upper()):\n            return False\n    else:\n        return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i+1] >= arr[i]:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    if negatives:\n        largest_negative = max(negatives)\n    else:\n        largest_negative = None\n    \n    if positives:\n        smallest_positive = min(positives)\n    else:\n        smallest_positive = None\n    \n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    \"\"\"\n    # Check if the values are equal\n    if a == b:\n        return None\n    \n    # Check if the values are integers\n    if isinstance(a, int) and isinstance(b, int):\n        # Compare the integers\n        if a > b:\n            return a\n        else:\n            return b\n    \n    # Check if the values are floats\n    elif isinstance(a, float) and isinstance(b, float):\n        # Compare the floats\n        if a > b:\n            return a\n        else:\n            return b\n    \n    # Check if the values are strings\n    elif isinstance(a, str) and isinstance(b, str):\n        # Convert the strings to floats\n        a = float(a)\n        b = float(b)\n        # Compare the floats\n        if a > b:\n            return a\n        else:\n            return b\n    \n    # If none of the above conditions are met, return None\n    return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Initialize a list of even numbers\n    even_numbers = [2, 4, 6, 8, 10, 12, 14, 16]\n    \n    # Check if n can be written as the sum of 4 even numbers\n    for i in range(len(even_numbers)):\n        if n - even_numbers[i] in even_numbers[:i]:\n            return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        return None\n    else:\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result * n\n\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return 'No'\n    if '.'.join(file_name.split('.'))!= file_name:\n        return 'No'\n    if file_name[0].isalpha() and file_name[-4:] in ['txt', 'exe', 'dll']:\n        return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    sum_sqr = 0\n    sum_cub = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            lst[i] = lst[i]**3\n            sum_cub += lst[i]**3\n        elif i % 3!= 0 and i % 4 == 0:\n            lst[i] = lst[i]**2\n            sum_sqr += lst[i]**2\n        elif i % 3!= 0 and i % 4!= 0:\n            sum_sqr += lst[i]**2\n            sum_cub += lst[i]**3\n    return sum_sqr + sum_cub\n\n"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # check if the sentence is valid\n    if not isinstance(sentence, str) or len(sentence) > 100 or not all(char.isalpha(char) for char in sentence):\n        return None\n    \n    # create a list of words in the sentence\n    words = sentence.split()\n    \n    # create an empty list to store the words whose lengths are prime\n    prime_words = []\n    \n    # loop through the words\n    for word in words:\n        # check if the length of the word is prime\n        if all(char.isprime(char) for char in word):\n            prime_words.append(word)\n    \n    # return the first word in the list\n    return prime_words[0]"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    numerator, denominator = x.split(\"/\")\n    n_numerator, n_denominator = n.split(\"/\")\n    \n    if int(n_numerator) > int(denominator) or int(n_denominator) <= int(numerator):\n        return False\n    \n    if int(numerator) % int(denominator) == 0 and int(n_numerator) % int(n_denominator) == 0:\n        return True\n    \n    return False\n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n\n    # calculate the sum of digits for each number\n    num_dict = {}\n    for num in nums:\n        digits = sum(int(digit) for digit in str(num))\n        if num in num_dict:\n            num_dict[num] += digits\n        else:\n            num_dict[num] = digits\n\n    # sort the list by the sum of digits\n    sorted_nums = sorted(nums, key=lambda x: num_dict[x])\n\n    # add the index of the original list to the sorted list\n    return sorted_nums + [i for i in range(len(nums))]"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    result = 0\n    for num in nums:\n        if num > 10 and (num % 10 in [1, 3, 5, 7, 9] and (num % 100 / 10 in [1, 3, 5, 7, 9])):\n            result += 1\n    return result"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(n)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n - 1):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    if planet1 == \"Mercury\" and planet2 == \"Neptune\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Earth\" and planet2 == \"Mercury\":\n        return (\"Venus\")\n    elif planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Venus\" and planet2 == \"Mercury\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Venus\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Earth\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Earth\" and planet2 == \"Mercury\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Earth\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Earth\" and planet2 == \"Neptune\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Mars\" and planet2 == \"Jupiter\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 =="}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Remove duplicates\n    lst = list(dict.fromkeys(lst))\n    \n    # Sort by length\n    lst.sort(key=len)\n    \n    # Remove odd length strings\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    return lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n % 2 == 0:\n        return y\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return x\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num.isdigit():\n            if num % 2!= 0:\n                result += num**2\n    return result"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # check if the length of game and guess are equal\n    if len(game)!= len(guess):\n        return [-1, -1, -1, -1, -1, -1]\n    # create an empty array to store the result\n    result = [-1, -1, -1, -1, -1, -1]\n    # iterate over the game and guess arrays\n    for i in range(len(game)):\n        # if the guess is equal to the score, the result is 0\n        if guess[i] == game[i]:\n            result[i] = 0\n        # otherwise, the result is the absolute difference between the guess and the score\n        else:\n            result[i] = abs(guess[i] - game[i])\n    # return the result array\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    # Calculate the strength of each extension\n    strength = {}\n    for extension in extensions:\n        cap = sum(extension.upper())\n        sm = sum(extension.lower())\n        strength[extension] = - (cap - sm)\n    \n    # Find the strongest extension\n    strongest_extension = None\n    for extension in extensions:\n        if extension in strength:\n            if strongest_extension is None or strength[extension] > strength[strongest_extension]:\n                strongest_extension = extension\n    \n    # Return the strongest extension as a string\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    \"\"\"\n    # check if the second word is a substring of the first word\n    if b in a:\n        return True\n    # check if any of the rotations of the second word is a substring of the first word\n    for i in range(1, len(b) + 1):\n        if b[i-1] + b[i] in a:\n            return True\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        even += digit if digit % 2 == 0 else 0\n        odd += digit if digit % 2!= 0 else 0\n        num //= 10\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xli',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cdi',\n        1000:'m'\n    }\n    \n    result = ''\n    for i in range(number, 0, -1):\n        if i in roman_numerals:\n            result += roman_numerals[i]\n        else:\n            result += 'x'\n    \n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a == b and b == c:\n        return True\n    elif a == c or b == c or a == b:\n        return False\n    else:\n        return (a + b + c) % 2 == 0"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n    \n    Have fun :)\n    \"\"\"\n    if number >= remaining:\n        return [remaining, 0]\n    else:\n        return [number + remaining, remaining - number]\n\n"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n    \n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n    \n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"Length of operator list should be equal to the length of operand list minus one.\")\n    \n    if not operator:\n        raise ValueError(\"Operator list has at least one operator.\")\n    \n    if not operand:\n        raise ValueError(\"Operand list has at least two operands.\")\n    \n    expression = []\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            expression.append(operand[i] + operand[i+1])\n        elif operator[i] == '-':\n            expression.append(operand[i] - operand[i+1])\n        elif operator[i] == '*':\n            expression.append(operand[i] * operand[i+1])\n        elif operator[i] == '/':\n            expression.append(operand[i] // operand[i+1])\n        elif operator[i] == '**':\n            expression.append(operand[i] ** operand[i+1])\n        else:\n            raise ValueError(\"Invalid"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            elif s[i].islower():\n                result += s[i].upper()\n        else:\n            result += s[i]\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash\n\n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        return generate_integers(b, a)\n    \n    result = []\n    while a % 2 == 0:\n        result.append(a)\n        a += 1\n    \n    return result"}
