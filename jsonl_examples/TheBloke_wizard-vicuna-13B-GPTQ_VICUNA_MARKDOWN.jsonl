{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    paren_stack = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if len(paren_stack) == 0:\n                continue\n            paren_stack.pop()\n            groups.append(''.join(paren_stack))\n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = math.floor(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        elif balance >= 0:\n            balance -= operation\n        else:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(numbers[i] - mean) for i in range(len(numbers))]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [num if i % delimeter == 0 else num for i, num in enumerate(numbers)]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    nested_parens = paren_string.split()\n    result = []\n    for i in range(len(nested_parens)):\n        if i % 2 == 0:\n            continue\n        level = 0\n        for j in range(i, len(nested_parens)):\n            if nested_parens[j] == '(':\n                level += 1\n            elif nested_parens[j] == ')':\n                level -= 1\n        result.append(level)\n    return result"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if len(numbers) == 0:\n        return 0, 1\n    else:\n        return sum(numbers) * len(numbers), numbers[0] * len(numbers)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max = []\n    curr_max = numbers[0]\n    for num in numbers[1:]:\n        if num > curr_max:\n            rolling_max.append(curr_max)\n            curr_max = num\n        else:\n            curr_max = num\n    rolling_max.append(curr_max)\n    return rolling_max"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string.lower()\n    if string.startswith('a') or string.startswith('e') or string.startswith('i') or string.startswith('o') or string.startswith('u'):\n        string = string[1:]\n    start = 0\n    end = len(string) - 1\n    while start < end:\n        if is_palindrome(string[start:end]):\n            return string[:start] + string[start+1:end] + string[0:start]\n        start += 1\n        end -= 1\n    return ''"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join(chr(ord(a) ^ ord(b)) for char in a for char in b)"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    longest_string = \"\"\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    gcd = 1\n    while b:\n        gcd = max(gcd, b % a)\n        a, b = b, a % b\n    return gcd"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[i:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return''.join(str(i) for i in range(n))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    notes = []\n    current_note = 0\n    for char in music_string:\n        if char == 'o':\n            notes.append(current_note)\n            current_note += 1\n        elif char == '|':\n            if current_note % 2 == 0:\n                notes.append(current_note)\n                current_note += 1\n            else:\n                notes.append(current_note)\n                current_note += 2\n        elif char == '.':\n            if current_note % 2!= 0:\n                notes.append(current_note)\n                current_note += 1\n            else:\n                notes.append(current_note)\n                current_note += 2\n        else:\n            pass\n    return notes"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        if string[start:len(string)] == substring:\n            count += 1\n            start += len(substring)\n        else:\n            start = len(string)\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    numbers = numbers.split()\n    numbers.sort()\n    return ''.join(numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if i == j:\n                continue\n            distance = abs(numbers[i] - numbers[j])\n            if closest_pair is None or distance < closest_pair[0]:\n                closest_pair = (numbers[i], distance)\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    min_val, max_val = min(numbers), max(numbers)\n    rescaled_vals = (val - min_val) / (max_val - min_val) * 1.0\n    return [rescaled_vals]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n        else:\n            n %= i\n    return n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n % divisor == 0:\n        factors.append(divisor)\n        n //= divisor\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.lower().replace(string.lower(), string.upper())"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    :param xs: list of coefficients of the polynomial\n    :param x: float value to evaluate the polynomial at\n    :return: float value of the polynomial at x\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\"\n    Finds x such that the polynomial with coefficients xs equals zero.\n    :param xs: list of coefficients of the polynomial\n    :return: float value of the zero point of the polynomial\n    \"\"\"\n    if len(xs) % 2!= 0:\n        raise ValueError(\"List of coefficients must have an even number of coefficients\")\n    if xs[0] == 0:\n        return 0.0\n    else:\n        for i in range(1, len(xs)):\n            if xs[i] * math.pow(i, len(xs) - 1) == -1:\n                return -math.pow(i, len(xs) - 1)\n        return None"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l' = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l'.append(l[i])\n    return l'"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list) -> int:\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    result = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 and i % 13 == 0:\n            result += 1\n        elif i % 11 == 0:\n            result += 1\n        elif i % 13 == 0:\n            result += 1\n    return result"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    return sorted(l)"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    return s"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n):\n    if n <= 2:\n        return n\n    elif is_prime(n):\n        return n\n    fib_n = fibonacci(n)\n    while fib_n % 2 == 0:\n        fib_n = fibonacci(n - 1)\n    if is_prime(fib_n):\n        return fib_n\n    else:\n        n -= 1\n        return prime_fib(n)"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    return len([x for x in l if sum(x) == 0]) == 3"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    cars_left = range(n)\n    cars_right = range(n, 0, -1)\n    for i in range(len(cars_left)):\n        for j in range(len(cars_right)):\n            if cars_left[i] == cars_right[j]:\n                continue\n            else:\n                print(cars_left[i], cars_right[j])\n    return 0"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [i+1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    Returns True if there are two distinct elements in the list that sum to zero, False otherwise.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    result = \"\"\n    while x:\n        result = str(x % base) + result\n        x //= base\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    :param a: length of a side\n    :param h: height of the triangle\n    :return: area of the triangle\n    \"\"\"\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    fib_table = [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "}
{"task_id": "HumanEval/47", "completion": "def median(l: list) -> float:\n    n = len(l)\n    if n % 2 == 0:\n        m = n // 2\n        return (l[m - 1] + l[m]) / 2\n    else:\n        m = (n + 1) // 2\n        return l[m]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    :param n: int\n    :param p: int\n    :return: int\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be greater than 1\")\n    if p == 2:\n        return 0\n    elif p == 3:\n        return n % 3\n    elif p == 5:\n        return n % 5\n    elif p == 7:\n        return n % 7\n    elif p == 11:\n        return n % 11\n    elif p == 13:\n        return n % 13\n    elif p == 17:\n        return n % 17\n    elif p == 19:\n        return n % 19\n    elif p == 23:\n        return n % 23\n    elif p == 29:\n        return n % 29\n    elif p == 31:\n        return n % 31\n    elif p == 37:\n        return n % 37\n    elif p == 41:\n        return n % 41\n    elif p == 43:\n        return n % 43\n    elif p == 47:\n        return n % 47\n    elif p == 53:\n        return n % 53\n    elif p == 59:\n        return n % 59\n    elif p == 61:\n        return n % 61\n    elif p == 67:\n        return n % 67\n    elif p == 71:\n        return n % 71\n    elif p == 73:\n        return n % 73\n    elif p == 79:\n        return n % 79\n    elif p == 83:\n        return n % 83\n    elif p == 89:\n        return n % 89\n    elif p == 9"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(int((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return len(set(s0)) == len(set(s1))"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == \"<\":\n            count += 1\n        elif char == \">\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    :param l: list of elements\n    :return: True if elements are monotonically increasing or decreasing, False otherwise\n    \"\"\"\n    if len(l) < 2:\n        return False\n    if l[0] < l[-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    return sorted(list(set(l1).intersection(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == \"(\":\n            count += 1\n        elif char == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    n = len(xs)\n    if n == 1:\n        return xs[0]\n    else:\n        return n * xs[0] + xs[1]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n <= 2:\n        return 0\n    elif n <= 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = 0\n    for c in s:\n        if c in 'aeiou' and c!= 'y' or c in 'Y':\n            vowels += 1\n    return vowels"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    return str(int(x) >> shift * 31)"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"\n    Task: Write a function that takes a string as input and returns the sum of the upper characters only' ASCII codes.\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    total = 0\n    for char in s:\n        if ord(char) >= 65 and ord(char) <= 90:\n            total += ord(char) - 65\n    return total"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    apples, oranges, mangoes = s.split()\n    apples_count = int(apples)\n    oranges_count = int(oranges)\n    mangoes_count = n - apples_count - oranges_count\n    return mangoes_count"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even = None\n    smallest_index = None\n    for node in arr:\n        if node % 2 == 0 and smallest_even is None or smallest_even is None:\n            smallest_even = node\n        elif smallest_even is None and node % 2 == 0 and smallest_index is None or smallest_index is None:\n            smallest_index = arr.index(node)\n        elif smallest_even is None and smallest_index is None:\n            break\n    return [smallest_even, smallest_index] if smallest_even is not None else []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_freq = 0\n    max_val = None\n    for num in lst:\n        freq = lst.count(num)\n        if freq >= num:\n            if max_freq < freq:\n                max_freq = freq\n                max_val = num\n            elif max_val is not None and freq >= max_val:\n                max_val = num\n    return max_val"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    return [lst[i] for i in range(len(lst)) if lst[i] < lst[i+1]]"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c or b + c > a or c + a > b:\n        return -1\n    else:\n        return (a * b * c) / 2"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if len(q) % 2 == 0:\n        sum_q = sum(q)\n        if sum_q <= w:\n            return q == list(map(lambda x: x, q))\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i]!= arr[n-i-1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    lst1_chars = set(''.join(lst1))\n    lst2_chars = set(''.join(lst2))\n    if len(lst1_chars) < len(lst2_chars):\n        return lst1\n    elif len(lst1_chars) > len(lst2_chars):\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"\n    Returns True if the given number is the multiplication of 3 prime numbers and False otherwise.\n    :param a: The number to be checked.\n    :return: True if the given number is the multiplication of 3 prime numbers and False otherwise.\n    \"\"\"\n    if a < 100:\n        for i in range(2, a, 3):\n            if is_prime(i):\n                for j in range(2, a, 3):\n                    if is_prime(j):\n                        for k in range(2, a, 3):\n                            if is_prime(k):\n                                if i * j * k == a:\n                                    return True\n                                else:\n                                    return False\n                            else:\n                                return False\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    Returns True if x is a simple power of n, False otherwise.\n    \"\"\"\n    return n**int(x) == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a**3 == a:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit.isalpha() and digit.isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_string = \"\"\n    while decimal > 0:\n        binary_string = str(decimal % 2) + binary_string\n        decimal //= 2\n    binary_string = \"db\" + binary_string\n    return binary_string"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    length = len(s)\n    if length < 3:\n        return False\n    for i in range(0, length-2, 3):\n        if s[i:i+3] in s:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    grades_dict = {\n        \"A+\": 4.0,\n        \"A\": 3.7,\n        \"A-\": 3.3,\n        \"B+\": 3.0,\n        \"B\": 2.7,\n        \"B-\": 2.3,\n        \"C+\": 2.0,\n        \"C\": 1.7,\n        \"C-\": 1.3,\n        \"D+\": 1.0,\n        \"D\": 0.7,\n        \"D-\": 0.3,\n        \"E\": 0.0\n    }\n    letter_grades = []\n    for grade in grades:\n        if grade in grades_dict:\n            letter_grades.append(grades_dict[grade])\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"\n    Returns True if the string length is a prime number or False otherwise.\n    Examples:\n    - prime_length('Hello') == True\n    - prime_length('abcdcba') == True\n    - prime_length('kittens') == True\n    - prime_length('orange') == False\n    \"\"\"\n    try:\n        len(string)\n        if len(string) <= 1:\n            return False\n        for i in range(2, int(len(string)**0.5)+1):\n            if string.count(str(i)) == 0:\n                continue\n            elif string.count(str(i)) == len(string):\n                continue\n            else:\n                return False\n        return True\n    except TypeError:\n        return False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**n):\n        if i >= 10**n or i % 10 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    binary = str(N)\n    return ''.join(int(digit) for digit in binary)"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return [x for i, x in enumerate(lst) if i % 2 == 0 and i % 2!= 0][::-1]"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Returns an ordered version of a string where words are replaced by a new word with sorted characters.\n    \"\"\"\n    s = s.lower().replace(\" \", \"\")\n    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = \"\"\n        for char in word:\n            new_word += str(ord(char))\n        new_words.append(new_word)\n        new_word = \"\".join(sorted(new_word))\n        new_words.append(new_word)\n    new_string = \" \".join(new_words)\n    return new_string"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    Find integers x in the list and return a list of tuples,\n    [(x1, y1), (x2, y2)...] such that each tuple is a coordinate\n    - (row, columns), starting with 0. Sort coordinates initially\n    by rows in ascending order. Also, sort coordinates of the row\n    by columns in descending order.\n    \"\"\"\n    rows = []\n    for i in range(len(lst)):\n        row = []\n        for j in range(len(lst[i])):\n            if j == x:\n                row.append((i, j))\n        rows.append(row)\n    rows.sort(key=lambda x: x[0])\n    for i in range(len(rows)):\n        rows[i].sort(key=lambda x: -x[1])\n    return rows"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n    n = len(array)\n    if n == 1:\n        return array\n    if n % 2 == 0:\n        return array[n//2:], array[:n//2]\n    else:\n        left = 0\n        right = n - 1\n        while left < right:\n            if (array[left] + array[right]) % 2 == 0:\n                left = left + 1\n            else:\n                right = right - 1\n        return array[left:n:right]"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            char_code = ord(char.lower())\n            shifted_code = (char_code - 65 + 2) % 26\n            encrypted += alphabet[shifted_code]\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    return lst[1] if len(lst) > 1 else None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    boredoms = 0\n    sentence = \"\"\n    for i in S:\n        if i == \".\":\n            sentence += i\n        elif i == \"?\":\n            sentence += i\n        elif i == \"!\":\n            sentence += i\n        elif i == \"I\":\n            boredoms += 1\n        else:\n            if sentence:\n                boredoms += 1\n                sentence = \"\"\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == int(y + z):\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    message = message.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                new_message += chr(ord(char) - 32 + 12)\n            else:\n                new_message += chr(ord(char) - 32 + 12)\n        else:\n            new_message += char\n    return new_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    max_prime = 0\n    sum_of_digits = 0\n    for num in lst:\n        if num > max_prime:\n            max_prime = num\n        for digit in str(num):\n            sum_of_digits += int(digit)\n        if sum_of_digits > 0 and is_prime(max_prime):\n            return sum_of_digits\n    return 0\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str) or not key.islower() or not key.isupper():\n            return False\n        if not isinstance(dict[key], str) or not dict[key].islower() or not dict[key].isupper():\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = []\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, int(i ** 0.5) + 1)):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    product = a % 10 * b % 10\n    if a % 100 <= 4 and b % 100 <= 4:\n        product += (a // 100 - 1) * (b // 100 - 1)\n    return product"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(2, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    if value.isdigit() and int(value) == value:\n        return int(value)\n    elif value.isdigit() and int(value) == int(value) == int(value + '0.5'):\n        return int(value + '0.5')\n    elif value.isdigit() and int(value) == int(value + '0.5') and int(value + '0.4') == int(value + '0.5'):\n        return int(value + '0.5')\n    elif value.isdigit() and int(value) == int(value + '0.4') and int(value + '0.5') == int(value + '0.4'):\n        return int(value + '0.5')\n    else:\n        return int(value)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        num = n\n        while num % 2 == 0:\n            num += 1\n        num -= 1\n    else:\n        num = n\n        while num % 2!= 0:\n            num += 1\n        num -= 1\n    return [num] * (n - num)"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(\", \")"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(y, x, 2):\n        if i == 0:\n            return -1\n        elif i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    avg = (n + m) / 2\n    if avg > m:\n        return -1\n    elif avg > n:\n        return \"0b\" + str(round(avg - n))\n    else:\n        return str(round(avg))"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([num for num in x if str(num)[-1] % 2!= 0])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    arr.sort(reverse=True)\n    result = []\n    for digit in str(arr):\n        if int(digit) between 1 and 9:\n            result.append(str(int(digit)))\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    return [i if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if i == int(i) == i:\n            if int(i) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(digit) for digit in str(num)) > 0)"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].\n    The numbers in the array will be randomly ordered. Your task is to determine\n    if it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation: It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\""}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    for i in range(min(len(lst1), len(lst2))):\n        if lst1[i] % 2 == 0 and lst2[i] % 2!= 0:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n            if all(lst1[i] % 2 == 0):\n                return \"YES\"\n        elif lst2[i] % 2 == 0 and lst1[i] % 2!= 0:\n            lst2[i], lst1[i] = lst1[i], lst2[i]\n            if all(lst2[i] % 2 == 0):\n                return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    histogram_dict = {}\n    max_count = 0\n    max_char = ''\n    for char in test.split():\n        if char in histogram_dict:\n            histogram_dict[char] += 1\n        else:\n            if histogram_dict[char] > max_count:\n                max_count = histogram_dict[char]\n                max_char = char\n        if len(histogram_dict) > max_count:\n            max_count = len(histogram_dict)\n            max_char = ''.join(sorted(histogram_dict.keys(), key=lambda x: histogram_dict[x], reverse=True))\n        if len(histogram_dict) == max_count:\n            max_char = ''.join(sorted(histogram_dict.keys(), key=lambda x: histogram_dict[x], reverse=True))\n        if len(histogram_dict) == 0:\n            max_char = ''.join(sorted(test.split(), key=lambda x: test.count(x), reverse=True))\n        if max_char!= '':\n            return {max_char: max_count}\n    return {}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    \"\"\"\n    Task: delete all characters in s that are equal to any character in c, then check if the result string is palindrome.\n    Returns a tuple containing the result string and True/False for the check.\n    Example:\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # delete all characters in s that are equal to any character in c\n    result = \"\"\n    for char in s:\n        if char!= c:\n            result += char\n    # check if the result string is palindrome\n    is_palindrome = True\n    for i in range(len(result)):\n        if result[i]!= result[len(result)-i-1]:\n            is_palindrome = False\n            break\n    return (result, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i in lst:\n        num_odd = sum(1 for j in i if j % 2!= 0)\n        result.append(num_odd)\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = nums[0]\n    curr_sum = nums[0]\n    for num in nums[1:]:\n        curr_sum = max(num, curr_sum)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    n, m = len(grid), len(grid[0])\n    max_value = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                buckets = 0\n                for direction in ((0, 1), (1, 0), (-1, 0), (0, -1)):\n                    dx, dy = direction\n                    x = i + dx\n                    y = j + dy\n                    if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == 1:\n                        continue\n                    buckets += grid[x][y]\n                if buckets <= capacity:\n                    grid[i][j] = 0\n                    max_value = max(max_value, buckets)\n                else:\n                    grid[i][j] = 1\n    return max_value"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    Sort an array of non-negative integers based on the number of ones in their binary representation and decimal value.\n    \"\"\"\n    def binary_sort(arr):\n        return sorted(arr, key=lambda x: bin(x)[2:])\n    \n    def decimal_sort(arr):\n        return sorted(arr, key=lambda x: x)\n    \n    return binary_sort(decimal_sort(arr))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(filter(str.isalpha, word)) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    for i in range(len(word)-1):\n        if word[i] in vowels and word[i+1].isalpha() and word[i]!= word[i+1]:\n            if len(word[i:i+2]) > len(closest_vowel):\n                closest_vowel = word[i:i+2]\n            if len(closest_vowel) > len(word[i:i+2]):\n                closest_vowel = word[i:i+2]\n    return closest_vowel.lower()"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    good_string = ''\n    for s in lst:\n        good_string += s\n        if '(' in good_string:\n            if ')' in good_string:\n                if good_string.count('(') == good_string.count(')'):\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        else:\n            if s == ')' and good_string.count('(') == good_string.count(')'):\n                return 'Yes'\n            else:\n                return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # check constraints\n    if len(arr) <= 0 or len(arr) > 100 or k <= 0 or k > len(arr):\n        return None\n\n    # calculate sum of at most two digits from first k elements\n    sum = 0\n    for i in range(k):\n        if i > 0 and (arr[i-1] < 10 or arr[i-1] > 9):\n            sum += arr[i-1]\n        else:\n            sum += int(arr[i-1])\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    collatz = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    collatz.sort()\n    return collatz"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"Validates a given date string and returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    date_str = date\n    if not date_str:\n        return False\n    try:\n        month, day, year = date_str.split('-')\n        month = int(month)\n        day = int(day)\n        year = int(year)\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day > 30:\n                if month == 2:\n                    if day > 29:\n                        return False\n                else:\n                    if day > 30:\n                        return False\n            else:\n                if month in [4, 6, 9, 11]:\n                    if day > "}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ',' in txt:\n        words = txt.split(',')\n    else:\n        words = txt.split()\n    if not words:\n        return 0\n    count = 0\n    for i in range(len(words)):\n        if ord(words[i].lower()) % 2 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    \"\"\"\n    unique_nums = set(lst)\n    if len(unique_nums)!= len(lst):\n        return False\n    for num in unique_nums:\n        if len(set([num]*len(lst)))!= len(lst):\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if not interval1[0] <= interval1[1]:\n        return \"NO\"\n    if not interval2[0] <= interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval2[0]:\n        return \"NO\"\n    if interval1[1] > interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"NO\"\n    for i in range(interval1[0], interval2[1] + 1):\n        if is_prime(i):\n            if i == interval1[1] or i == interval2[1]:\n                return \"NO\"\n            else:\n                return \"YES\"\n    return \"NO\"\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    sign = 1\n    prod = 1\n    for num in arr:\n        sign = -sign * num\n        prod *= sign\n    return prod"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    lst_grid = [[grid[i][j] for j in range(len(grid[0]))] for i in range(len(grid))]\n    n = len(lst_grid)\n    k_lst = [list(range(n)) for _ in range(n)]\n    k_lst.sort()\n    k_lst.reverse()\n    path = []\n    for i in range(n):\n        for j in range(len(lst_grid[0])):\n            if lst_grid[i][j] == 0:\n                path.append(i)\n                path.append(j)\n                break\n        if len(path) == k:\n            return path\n        for j in range(len(lst_grid[0])):\n            if lst_grid[i][j] == 0:\n                for l in range(len(k_lst)):\n                    if k_lst[l][0] == i and k_lst[l][1] == j:\n                        path.append(k_lst[l])\n                        break\n                if len(path) == k:\n                    return path\n    return None"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n < 0:\n        return []\n    elif n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [3]\n    elif n % 2 == 0:\n        return [1 + n / 2, 1 + n / 2, n]\n    elif n % 2 == 1:\n        return [1, 1, tri(n - 1) + tri(n - 2) + tri(n + 1)]\n    else:\n        return []"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            break\n        else:\n            product *= i\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n            continue\n        elif char == ']':\n            if not stack or not is_nested(stack[-1]):\n                return False\n            stack.pop()\n            continue\n        elif char in stack:\n            return False\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(map(lambda x: round(x**2, 0), lst))"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    words = txt.split()\n    last_char = words[-1]\n    if not last_char.isalpha() or last_char in ',.;:?!':\n        return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i] <= arr[i+1]:\n            continue\n        else:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    return tuple((max(lst[:len(lst)//2]), min(lst[:len(lst)//2]))) if len(lst) > 0 else None"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        a_float = float(a)\n        b_float = float(b)\n        if a_float > b_float:\n            return a\n        elif a_float < b_float:\n            return b\n        else:\n            return None\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\"\"\"\n    if n < 4:\n        return False\n    if n % 4!= 0:\n        return False\n    for i in range(n, 0, -1):\n        if i % 4!= 0:\n            return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        return None\n    else:\n        factorial = 1\n        for i in range(n, -1, -1):\n            factorial *= i\n        return factorial"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) <= 3 and file_name.count('.') == 1 and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalpha() and file_name."}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    lst[i] = (i+1)%3!= 0 and (i+1)%4!= 0 and i+1\n    return sum(lst)"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    prime_words = []\n    for word in sentence.split():\n        if len(word) <= 1:\n            prime_words.append(word)\n    if len(prime_words) == 0:\n        return \"\"\n    else:\n        return''.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    numerator, denominator = map(int, x.split('/'))\n    if denominator == 0:\n        return False\n    elif denominator == 1:\n        return numerator % 1 == 0 and denominator % 1 == 0\n    else:\n        return numerator % denominator == 0 and denominator % numerator == 0"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Sort a list of integers in ascending order by the sum of their digits.\n    If there are multiple items with the same sum of digits, sort them\n    based on their index in the original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(digit) for digit in str(x)), reverse=True)"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    return sum(nums[num % 10] % 2 == 1 and nums[num // 10] % 2 == 1 for num in nums)"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i**2 - i + 1 for i in range(n)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planets_tuple = sorted(planets[planet1:planet2])\n    if planet1 in planets and planet2 in planets:\n        return planets_tuple\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort()\n    return lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n % 2 == 0:\n        y = y\n    elif n % 3 == 0:\n        y = x\n    else:\n        y = x or y\n    if n < 2:\n        x = y\n    return x or y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(abs(int(x**2)) for x in lst if x % 2!= 0)"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    return abs(game[guess]-game[guess])"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_extension_name = None\n    for extension in extensions:\n        cap = sum(1 for letter in extension.upper())\n        sm = sum(1 for letter in extension.lower())\n        strength = cap - sm\n        if strongest_extension is None or strength > strongest_extension.strength:\n            strongest_extension = extension\n            strongest_extension_name = extension.replace('_', '.')\n    return class_name + '.' + strongest_extension_name"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    a = set(a.lower().split())\n    b = set(b.lower().split())\n    for i in range(len(b)):\n        if b[i] in a:\n            return True\n        if b[i] in a - b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even = 0\n    odd = 0\n    digit = 0\n    \n    while digit in [1, 2, 3, 4, 5, 6, 7, 8, 9]:\n        digit = int(str(num % 10))\n        if digit == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    \n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    roman_string = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            roman_string += numeral\n            number -= value\n    return roman_string.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if a + b + c == 9:\n        return True\n    elif a == b or b == c or c == a:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_chars = \"\"\n    max_word = \"\"\n    for word in words:\n        unique_chars = set(word.lower().replace(\".\", \"\"))\n        if len(unique_chars) > len(max_chars):\n            max_chars = word\n            max_word = word\n        elif len(unique_chars) == len(max_chars):\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if number >= remaining:\n        return [remaining, 0]\n    elif need <= remaining - number:\n        return [number, remaining - number]\n    else:\n        return [remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator) == len(operand) - 1:\n        if all(isinstance(x, int) for x in operand):\n            result = eval(operator[0] +''.join(str(x) for x in operand))\n            return result\n        else:\n            return \"Operand must be a list of non-negative integers.\"\n    else:\n        return \"Operator list must have at least one operator and operand list must have at least two operands.\""}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    for i in range(len(s)):\n        if i < len(s):\n            if s[i].isalpha():\n                if s[i].islower():\n                    s[i] = s[i].upper()\n                elif s[i].isupper():\n                    s[i] = s[i].lower()\n            result += s[i]\n        else:\n            result += s[i]\n    return result"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n    else:\n        hash_object = hashlib.md5()\n        hash_object.update(text.encode('utf-8'))\n        return hash_object.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    even_digits = []\n    while a % 10 == 0 and b % 10 == 0:\n        even_digits.append(a % 10)\n        a //= 10\n        b //= 10\n    return even_digits"}
