{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Split the input string into a list of strings\n    paren_list = paren_string.split()\n    \n    # Initialize a list to store the separated groups\n    separated_groups = []\n    \n    # Loop through the list of strings\n    for i in range(len(paren_list)):\n        # If the current string is a parenthesis, add it to the current group\n        if paren_list[i] == '(':\n            current_group = []\n            separated_groups.append(current_group)\n        # If the current string is a close parenthesis, add it to the current group\n        elif paren_list[i] == ')':\n            current_group.append(paren_list[i])\n        # If the current string is a space, add it to the current group\n        elif paren_list[i] =='':\n            current_group.append(paren_list[i])\n        # If the current string is a close parenthesis and the current group is not empty, add it to the current group\n        elif paren_list[i] == ')':\n            if len(current_group) > 0:\n                separated_groups[-1].append(paren_list[i])\n        # If the current string is a space and the current group is not empty, add it to the current group\n        elif paren_list[i] =='' and len(current_group) > 0:\n            separated_groups[-1].append(paren_list[i])\n    # Return the list of separated groups\n    return separated_groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    integer_part = math.floor(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        elif operation < 0:\n            balance += operation\n        else:\n            balance += operation\n    return balance < 0"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute difference between each element and the mean\n    deviations = [abs(x - mean) for x in numbers]\n    \n    # Calculate the mean of the absolute differences\n    mad = sum(deviations) / len(deviations)\n    \n    return mad"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return [numbers[0]]\n    return [numbers[0]] + intersperse(numbers[1:], delimeter) + [numbers[-1]]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Convert the string to a list of strings\n    paren_list = paren_string.split()\n\n    # Initialize the output list\n    output = []\n\n    # Loop through the list of strings\n    for i in range(len(paren_list)):\n        # If the current string is a parenthesis, add it to the output list\n        if paren_list[i] == '(':\n            output.append(i)\n\n        # If the current string is a closing parenthesis, remove the last element from the output list\n        elif paren_list[i] == ')':\n            output.pop()\n\n    # Return the output list\n    return output"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), product(numbers)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far = numbers[0]\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n    return [max_so_far] + rolling_max(numbers[1:])"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if string[0] == string[-1] and is_palindrome(string[1:-1]):\n        return string + string[::-1]\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if string[i] == string[-1 - i] and is_palindrome(string[i:]):\n            longest_palindrome = string[:i] + string[i:]\n            break\n    if longest_palindrome:\n        return longest_palindrome + string[::-1]\n    return string"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    result = []\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '1':\n            result.append('0')\n        elif a[i] == '1' and b[i] == '0':\n            result.append('1')\n        elif a[i] == '0' and b[i] == '1':\n            result.append('1')\n        else:\n            result.append('0')\n    return ''.join(result)"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    while a % 2 == 0 or b % 2 == 0:\n        a //= 2\n        b //= 2\n    while a % 2 == 0 or b % 2 == 0:\n        a //= 2\n        b //= 2\n    return a"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i]\n        prefixes.append(prefix)\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return''.join(str(i) for i in range(n))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Convert the string to a list of characters\n    music_list = list(music_string)\n\n    # Initialize the beat counter\n    beat_count = 0\n\n    # Loop through the list of characters\n    for char in music_list:\n        # Check if the character is a whole note\n        if char == 'o':\n            # Increment the beat counter\n            beat_count += 4\n\n        # Check if the character is a half note\n        elif char == 'o|':\n            # Increment the beat counter\n            beat_count += 2\n\n        # Check if the character is a quarter note\n        elif char == '.|':\n            # Increment the beat counter\n            beat_count += 1\n\n    # Return the beat counter\n    return [beat_count] * len(music_string)"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if substring in string[i:i+len(substring)]:\n            count += 1\n            i += len(substring)\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to\n    each other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return None, None\n    # find the two closest numbers\n    closest_numbers = sorted(numbers, key=lambda x: abs(x - numbers[0]))\n    # return the two closest numbers in order\n    return closest_numbers[0], closest_numbers[-1]"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scale_factor = (max_num - min_num) / (1.0 - min_num)\n    return [num * scale_factor for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    if n <= 1:\n        return n\n    elif n % 2 == 0:\n        return n // 2\n    else:\n        return largest_divisor(n // 2)"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            n /= i\n            factors.append(i)\n    factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return list(set(numbers))"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    if not strings:\n        return ''\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2!= 0:\n        return \"Error: list xs must have even number of coefficients\"\n    if xs[0] == 0:\n        return \"Error: list xs must have non-zero largest coefficient\"\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            break\n    else:\n        return \"Error: list xs must have non-zero largest coefficient\"\n    for i in range(len(xs)):\n        if xs[i] == 0:\n            return \"Error: list xs must have non-zero largest coefficient\"\n    return round(x, 2)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_sorted = sorted(l)\n    l_third = [l_sorted[i] if i % 3 == 0 else l_sorted[i] for i in range(len(l))]\n    return l_third"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            if i % 11 == 0:\n                if i % 7 == 0:\n                    count += 1\n            else:\n                if i % 7 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_even = [x[::2] for x in l]\n    l_odd = [x[1::2] for x in l]\n    return l_even + l_odd"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n <= 1:\n        return n\n    elif n <= 2:\n        return 2\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i+1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + l[i+1] == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if base == 1:\n        return str(x)\n    elif base == 2:\n        return ''.join(map(str, x))\n    elif base == 3:\n        return ''.join(map(str, x))\n    elif base == 4:\n        return ''.join(map(str, x))\n    elif base == 5:\n        return ''.join(map(str, x))\n    elif base == 6:\n        return ''.join(map(str, x))\n    elif base == 7:\n        return ''.join(map(str, x))\n    elif base == 8:\n        return ''.join(map(str, x))\n    elif base == 9:\n        return ''.join(map(str, x))\n    else:\n        return 'Invalid base'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 5\n    elif n == 7:\n        return 6\n    elif n == 8:\n        return 7\n    elif n == 9:\n        return 8\n    elif n == 10:\n        return 9\n    elif n == 11:\n        return 10\n    elif n == 12:\n        return 11\n    elif n == 13:\n        return 12\n    elif n == 14:\n        return 13\n    elif n == 15:\n        return 14\n    elif n == 16:\n        return 15\n    elif n == 17:\n        return 16\n    elif n == 18:\n        return 17\n    elif n == 19:\n        return 18\n    elif n == 20:\n        return 19\n    elif n == 21:\n        return 20\n    elif n == 22:\n        return 21\n    elif n == 23:\n        return 22\n    elif n == 24:\n        return 23\n    elif n == 25:\n        return 24\n    elif n == 26:\n        return 25\n    elif n =="}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num <= t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    # Check if the string is empty\n    if not brackets:\n        return True\n    \n    # Check if the string is a single bracket\n    if brackets == \"<\" or brackets == \">\" or brackets == \"<<\" or brackets == \">>\":\n        return True\n    \n    # Check if the string is a pair of brackets\n    if brackets == \"<>\" or brackets == \"><\" or brackets == \"><\":\n        return True\n    \n    # Check if the string is a triplet of brackets\n    if brackets == \"<><\" or brackets == \"><><\" or brackets == \"><><\":\n        return True\n    \n    # Check if the string is a quadruplet of brackets\n    if brackets == \"<><><\" or brackets == \"><><><\" or brackets == \"><><><><\":\n        return True\n    \n    # Check if the string is a quintuplet of brackets\n    if brackets == \"<><><><\" or brackets == \"><><><><><\":\n        return True\n    \n    # Check if the string is a sextuplet of brackets\n    if brackets == \"<><><><><\" or brackets == \"><><><><><><\":\n        return True\n    \n    # Check if the string is a septuplet of brackets\n    if brackets == \"<><><><><><\" or brackets == \"><><><><><><><\":\n        return True\n    \n    # Check if the string is an octuplet of brackets\n    if brackets == \"<><><><><><><\" or brackets == \"><><><><><><><><\":\n        return True\n    \n    # Check if the string is a nonet of brackets\n    if brackets == \"<><><><><><><><\" or brackets == \"><><><><><><><><><\":\n        return True\n    \n    # Check if the string is a decuplet of brackets\n    if brackets == \"<><><><><><><><><\" or brackets == \"><><><><><><><><><><\":\n       "}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            return True\n        else:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(set(l1).intersection(set(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 0\n    if n < 3:\n        return 1\n    if n < 5:\n        return 2\n    if n < 7:\n        return 3\n    if n < 11:\n        return 4\n    if n < 13:\n        return 5\n    if n < 17:\n        return 6\n    if n < 19:\n        return 7\n    if n < 23:\n        return 8\n    if n < 29:\n        return 9\n    if n < 31:\n        return 10\n    if n < 37:\n        return 11\n    if n < 41:\n        return 12\n    if n < 43:\n        return 13\n    if n < 47:\n        return 14\n    if n < 53:\n        return 15\n    if n < 59:\n        return 16\n    if n < 61:\n        return 17\n    if n < 67:\n        return 18\n    if n < 71:\n        return 19\n    if n < 73:\n        return 20\n    if n < 79:\n        return 21\n    if n < 83:\n        return 22\n    if n < 89:\n        return 23\n    if n < 97:\n        return 24\n    if n < 101:\n        return 25\n    if n < 103:\n        return 26\n    if n < 107:\n        return 27\n    if n < 109:\n        return 28\n    if n < 113:\n       "}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    if not brackets:\n        return True\n    if brackets[0] == '(' and brackets[-1] == ')':\n        return True\n    return False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    n = len(xs)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        return [xs[0] + xs[1] * x + xs[2] * x**2 +...]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    vowels_count = 0\n    for char in s:\n        if char in vowels:\n            vowels_count += 1\n    return vowels_count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    # convert string to list of characters\n    s = list(s)\n    # remove lowercase characters\n    s = [c for c in s if ord(c) >= 65 and ord(c) <= 90]\n    # sum the remaining characters\n    return sum(s)"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    apples = s.split()[0]\n    oranges = s.split()[1]\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    smallest_even_value = None\n    smallest_index = None\n    for node in arr:\n        if node % 2 == 0:\n            if smallest_even_value is None or node < smallest_even_value:\n                smallest_even_value = node\n                smallest_index = arr.index(node)\n    if smallest_even_value is None:\n        return []\n    return [smallest_even_value, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_freq = 0\n    max_val = -1\n    for val in lst:\n        if val > 0:\n            freq = lst.count(val)\n            if freq >= val:\n                if freq > max_freq:\n                    max_freq = freq\n                    max_val = val\n    return max_val"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    else:\n        return [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + [min(lst)] + [max(lst[lst!= min(lst)])] + ["}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c or b + c > a or c + a > b:\n        return -1\n    else:\n        return (a * (b + c) / 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    \"\"\"\n    Check if the given list q is balanced and has a sum less than or equal to the maximum possible weight w.\n    :param q: list of integers\n    :param w: maximum possible weight\n    :return: True if the object q will fly, False otherwise\n    \"\"\"\n    if len(q) % 2 == 0:\n        # Check if the list is balanced\n        if sum(q) == sum(reversed(q)):\n            # Check if the sum of the elements is less than or equal to the maximum possible weight\n            if sum(q) <= w:\n                return True\n    return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    # Initialize the minimum number of changes needed\n    min_changes = 0\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the current element is not equal to the previous element,\n        # then we need to change it to make the array palindromic\n        if arr[i]!= arr[i-1]:\n            # If we have already made a change, then we need to add 1 to the minimum number of changes\n            if min_changes > 0:\n                min_changes += 1\n            # If we have not made a change yet, then we need to set the minimum number of changes to 1\n            else:\n                min_changes = 1\n\n    # Return the minimum number of changes needed\n    return min_changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a//2+1):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n**int(x) == x:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0:\n        return True\n    elif a == 1:\n        return True\n    elif a == 2:\n        return False\n    elif a == 3:\n        return True\n    elif a == 4:\n        return True\n    elif a == 5:\n        return True\n    elif a == 6:\n        return True\n    elif a == 7:\n        return True\n    elif a == 8:\n        return True\n    elif a == 9:\n        return True\n    elif a == 10:\n        return True\n    elif a == 11:\n        return True\n    elif a == 12:\n        return True\n    elif a == 13:\n        return True\n    elif a == 14:\n        return True\n    elif a == 15:\n        return True\n    elif a == 16:\n        return True\n    elif a == 17:\n        return True\n    elif a == 18:\n        return True\n    elif a == 19:\n        return True\n    elif a == 20:\n        return True\n    elif a == 21:\n        return True\n    elif a == 22:\n        return True\n    elif a == 23:\n        return True\n    elif a == 24:\n        return True\n    elif a == 25:\n        return True\n    elif a == 26:\n        return True\n    elif a == 27:\n        return True\n    elif a == 28:\n        return True\n    elif a == 29:\n        return True\n    elif a == 30:\n        return True\n    elif a == 31:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0\n    elif num == \"\":\n        return 0"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = []\n    while decimal > 0:\n        binary.append(decimal % 2)\n        decimal //= 2\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal % 2)\n    binary.append(decimal // 2)\n    binary.append(decimal %"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Convert the grades to a list\n    grades_list = list(grades)\n    \n    # Create a dictionary to store the letter grades\n    letter_grades = {\n        'A+': 4.0,\n        'A': 3.7,\n        'A-': 3.3,\n        'B+': 3.0,\n        'B': 2.7,\n        'B-': 2.3,\n        'C+': 2.0,\n        'C': 1.7,\n        'C-': 1.3,\n        'D+': 1.0,\n        'D': 0.7,\n        'D-': 0.3,\n        'E': 0.0\n    }\n    \n    # Loop through the grades list and assign the letter grades\n    letter_grades_list = []"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    if len(string) <= 1:\n        return False\n    for i in range(2, len(string)):\n        if string[i] == string[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i == 1 or i == n:\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Convert N to binary\n    binary = bin(N)[2:]\n    # Convert binary to string\n    binary_str = ''.join(binary)\n    # Calculate the sum of digits in binary\n    sum_digits = sum(int(digit) for digit in binary_str)\n    # Return the sum of digits in binary\n    return str(sum_digits)"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    even_indices = [i for i in range(len(lst)) if i % 2 == 0]\n    even_elements = [lst[i] for i in even_indices]\n    return sum(even_elements)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"\n    # split the string into words\n    words = s.split()\n    # sort the words in ascending order based on ascii value\n    sorted_words = sorted(words, key=lambda x: ord(x))\n    # join the sorted words back into a string\n    return''.join(sorted_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Sort coordinates initially by rows in ascending order.\n    lst = sorted(lst, key=lambda x: x[0])\n    # Sort coordinates of the row by columns in descending order.\n    lst = sorted(lst, key=lambda x: x[1])\n    # Find integers x in the list.\n    x_lst = [x for x in lst if x[0] == x]\n    # Return list of tuples.\n    return [(x[0], x[1]) for x in x_lst]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # check if the array is empty\n    if not array:\n        return []\n\n    # calculate the sum of the first and last elements\n    first_last_sum = array[0] + array[-1]\n\n    # sort the array in ascending order if the sum is odd\n    if first_last_sum % 2 == 1:\n        return sorted(array)\n\n    # sort the array in descending order if the sum is even\n    else:\n        return sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    # create a dictionary to store the rotated alphabet\n    alphabet = {\n        'a': 'i', 'b': 'j', 'c': 'k', 'd': 'l', 'e':'m', 'f': 'n', 'g': 'o', 'h': 'p', 'i': 'q', 'j': 'r', 'k':'s', 'l': 't','m': 'u', 'n': 'v', 'o': 'w', 'p': 'x', 'q': 'y', 'r': 'z','s': '1', 't': '2', 'u': '3', 'v': '4', 'w': '5', 'x': '6', 'y': '7', 'z': '8', '0': '9'\n    }\n    # rotate the alphabet\n    alphabet = {v: k for k, v in alphabet.items()}\n    # encrypt the string\n    encrypted = ''\n    for char in s:\n        # get the rotated alphabet index\n        index = alphabet.get(char, char)\n        # add the rotated alphabet index to the encrypted string\n        encrypted += index\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    for i in range(len(S)):\n        if S[i] == 'I' and S[i+1] in ['?', '.', '!']:\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x == (y + z):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    # Swap case of all letters\n    message = message.upper()\n    \n    # Replace vowels with the letter that appears 2 places ahead of that vowel in the english alphabet\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for vowel in vowels:\n        message = message.replace(vowel, chr(ord(vowel) + 2))\n    \n    return message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    # find the largest prime value\n    prime_lst = [i for i in lst if is_prime(i)]\n    max_prime = max(prime_lst)\n    # find the sum of its digits\n    sum_digits = sum(int(d) for d in str(max_prime))\n    return sum_digits\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str) or key.lower()!= key:\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = [2, 3]\n    for i in range(5, n+1, 2):\n        primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    if a < 0 or b < 0:\n        return \"Error: input is negative\"\n    if a == 0 or b == 0:\n        return \"Error: input is zero\"\n    if a == 1 or b == 1:\n        return \"Error: input is one\"\n    if a == 2 or b == 2:\n        return \"Error: input is two\"\n    if a == 3 or b == 3:\n        return \"Error: input is three\"\n    if a == 4 or b == 4:\n        return \"Error: input is four\"\n    if a == 5 or b == 5:\n        return \"Error: input is five\"\n    if a == 6 or b == 6:\n        return \"Error: input is six\"\n    if a == 7 or b == 7:\n        return \"Error: input is seven\"\n    if a == 8 or b == 8:\n        return \"Error: input is eight\"\n    if a == 9 or b == 9:\n        return \"Error: input is nine\"\n    if a == 10 or b == 10:\n        return \"Error: input is ten\"\n    if a == 11 or b == 11:\n        return \"Error: input is eleven\"\n    if a == 12 or b == 12:\n        return \"Error: input is twelve\"\n    if a == 13 or b == 13:\n        return \"Error: input is thirteen\"\n    if a == 14 or b == 14:\n        return \"Error: input is fourteen\"\n    if a"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].upper() in 'AEIOU':\n            count += 1\n            if i % 2 == 0:\n                break\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # Convert the value to a float\n    value = float(value)\n    \n    # Find the closest integer\n    closest_integer = round(value)\n    \n    # If the closest integer is equidistant from two integers, round it away from zero\n    if abs(value - closest_integer) < 0.001:\n        closest_integer = round(value)\n        \n    return closest_integer"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n, 2*n, 2*n+1]\n    else:\n        return [n, 2*n+1, 2*n+2]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.split(',') if ',' in s else s.split(' ')\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < y:\n        return -1\n    else:\n        return max(x, y)"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return binary_avg"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(x) if all(int(d) % 2!= 0 for d in x) else []"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    sorted_arr = sorted(arr)\n    reversed_arr = sorted_arr[::-1]\n    result = []\n    for num in reversed_arr:\n        if num >= 1 and num <= 9:\n            result.append(str(num))\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n        sum_digits = sum(int(digit) for digit in str(num))\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    return move_one_ball(arr[1:])"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            lst1[i] = lst2[i]\n            lst2[i] = lst1[i]\n            lst1[i] = lst2[i]\n            lst2[i] = lst1[i]\n            lst1[i] = lst2[i]\n            lst2[i] = lst1[i]\n            lst1[i] = lst2[i]\n            lst2[i] = lst1[i]\n            lst1[i] = lst2[i]\n            lst2[i] = lst1[i]\n            lst1[i] = lst2[i]\n            lst2[i] = lst1[i]\n            lst1[i] = lst2[i]\n            lst2[i] = lst1[i]\n            lst1[i] = lst2[i]\n            lst2[i] = lst1[i]\n            lst1[i] = lst2[i]\n            lst2[i] = lst1[i]\n            lst1[i] = lst2"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    histogram_dict = {}\n    for letter in test.split():\n        if letter in histogram_dict:\n            histogram_dict[letter] += 1\n        else:\n            histogram_dict[letter] = 1\n    return histogram_dict"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcde\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = s.replace(c, '')\n    if result == s:\n        return (result, True)\n    else:\n        return (result, False)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    output = []\n    for i, s in enumerate(lst):\n        if all(c % 2!= 0 for c in s):\n            output.append(f\"the number of odd elements {i+1}n the str{i+1}ng {i+1} of the {i+1}nput.\")\n    return output"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + min_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # initialize variables\n    n = len(grid)\n    m = len(grid[0])\n    # initialize empty list to store bucket positions\n    bucket_positions = []\n    # initialize empty list to store bucket positions\n    bucket_positions_2 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_3 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_4 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_5 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_6 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_7 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_8 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_9 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_10 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_11 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_12 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_13 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_14 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_15 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_16 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_17 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_18 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_19 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_20 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_21 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_22 = []\n    # initialize empty list to store bucket positions\n    bucket_positions_23 = []"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort the array based on number of ones in binary representation\n    sorted_arr = sorted(arr, key=lambda x: bin(x)[2:])\n    # Sort the array based on decimal value\n    sorted_arr = sorted(arr, key=lambda x: int(x))\n    return sorted_arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for word in s.split():\n        if len(word) == n:\n            words.append(word)\n    return words"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    # check if the word is empty\n    if not word:\n        return \"\"\n    \n    # check if the word only contains vowels\n    if all(char.isalpha() and char.lower() in \"aeiou\" for char in word):\n        return \"\"\n    \n    # check if the word only contains consonants\n    if all(char.isalpha() and char.lower() not in \"aeiou\" for char in word):\n        return \"\"\n    \n    # check if the word is a vowel\n    if word.lower() in \"aeiou\":\n        return \"\"\n    \n    # check if the word is a consonant\n    if word.lower() not in \"aeiou\":\n        return \"\"\n    \n    # check if the word is a vowel between two consonants\n    if word[-1].lower() in \"bcdfghjklmnpqrstvwxyz\" and word[-2].lower() in \"bcdfghjklmnpqrstvwxyz\" and word[-3].lower() in \"bcdfghjklmnpqrstvwxyz\":\n        return word[-2]\n    \n    # check if the word is a vowel between two consonants\n    if word[-1].lower() in \"bcdfghjklmnpqrstvwxyz\" and word[-2].lower() in \"bcdfghjklmnpqrstvwxyz\" and word[-3].lower() in \"bcdfghjklmnpqrstvwxyz\":\n        return word[-3]\n    \n    # check if the word is a vowel between two consonants\n    if word[-1].lower() in \"bcdfghjklmnpqrstvwxyz\" and word[-2].lower() in \"bcdfghjklmnpqrstvwxyz\" and word[-3].lower() in \"bcdfghjklmnpqrstvwxyz\":\n        return word[-4]\n    \n    # check if the word is a vowel between two consonants\n    if word[-1].lower() in \"bcdfghjklmnpqrstv"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    # Check if the first string is empty\n    if not lst[0]:\n        return 'No'\n    \n    # Check if the second string is empty\n    if not lst[1]:\n        return 'No'\n    \n    # Check if the first string is a close parenthesis\n    if lst[0] == ')':\n        # Check if the second string is a close parenthesis\n        if lst[1] == ')':\n            # Check if the first string is a close parenthesis\n            if lst[0] == ')':\n                # Check if the second string is a close parenthesis\n                if lst[1] == ')':\n                    # Check if the first string is a close parenthesis\n                    if lst[0] == ')':\n                        # Check if the second string is a close parenthesis\n                        if lst[1] == ')':\n                            # Check if the first string is a close parenthesis\n                            if lst[0] == ')':\n                                # Check if the second string is a close parenthesis\n                                if lst[1] == ')':\n                                    # Check if the first string is a close parenthesis\n                                    if lst[0] == ')':\n                                        # Check if the second string is a close parenthesis\n                                        if lst[1] == ')':\n                                            # Check if the first string is a close parenthesis\n                                            if lst[0] == ')':\n                                                # Check if the second string is a close parenthesis\n                                                if lst[1] == ')':\n                                                    # Check if the first string is a close parenthesis\n                                                    if lst[0] == ')':\n                                                        # Check if the second string is a close parenthesis\n                                                        if lst[1] == ')':\n                                                            # Check if the first string is a close parenthesis\n                                                            if lst[0] == ')':\n                                                                # Check if the second string is a close parenthesis\n                                                                if lst[1] == ')':\n                                                                    # Check if the first string is a"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Sort the array in ascending order\n    arr = sorted(arr)\n    \n    # Find the maximum k numbers in the sorted array\n    max_k_nums = arr[-k:]\n    \n    # Return the sorted list of length k with the maximum k numbers\n    return max_k_nums"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    odd_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            odd_sum += lst[i]\n    return odd_sum"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # check if k is within range\n    if k > len(arr):\n        return 0\n    \n    # initialize the sum\n    sum = 0\n    \n    # iterate over the first k elements of arr\n    for i in range(k):\n        # check if the element is within range\n        if i >= len(arr):\n            return 0\n        \n        # add the element to the sum\n        sum += arr[i]\n        \n    # return the sum\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_collatz = []\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        odd_collatz.append(n)\n    return sorted(odd_collatz)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Check if the date string is empty\n    if date == '':\n        return False\n    \n    # Check if the number of days is valid\n    if int(date[2:]) < 1 or int(date[2:]) > 31:\n        return False\n    \n    # Check if the month is valid\n    if int(date[0:2]) < 1 or int(date[0:2]) > 12:\n        return False\n    \n    # Check if the date is in the correct format\n    if date[0:2]!= '0' and date[0:2]!= '1':\n        return False\n    \n    # Check if the date is in the correct format\n    if date[2:4]!= '/' and date[2:4]!= '-':\n        return False\n    \n    # Check if the date is in the correct format"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ',' in txt:\n        words = txt.split(',')\n    else:\n        words = txt.split()\n    return words"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2 and lst[0] == lst[1]:\n        return True\n    else:\n        return sorted(lst) == lst"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    elif interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= (num > 0) - (num < 0)\n    return product"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # Initialize a list to store the visited cells\n    visited = []\n    # Initialize a list to store the path\n    path = []\n    # Initialize a list to store the visited cells in the path\n    visited_path = []\n    # Initialize a list to store the visited cells in the path\n    visited_path_lst = []\n    # Initialize a list to store the visited cells in the path\n    visited_path_lst_lst = []\n    # Initialize a list to store the visited cells in the path\n    visited_path_lst_lst_lst = []\n    # Initialize a list to store the visited cells in the path\n    visited_path_lst_lst_lst_lst = []\n    # Initialize a list to store the visited cells in the path\n    visited_path_lst_lst_lst_lst_lst = []\n    # Initialize a list to store the visited cells in the path\n    visited_path_lst_lst_lst_lst_lst_lst = []\n    # Initialize a list to store the visited cells in the path\n    visited_path_lst_lst_lst_lst_lst_lst_lst = []\n    # Initialize a list to store the visited cells in the path\n    visited_path_lst_lst_lst_lst_lst_lst_lst_lst = []\n    # Initialize a list to store the visited cells in the path\n    visited_path_lst_lst_lst_lst_lst_lst_lst_lst_lst = []\n    # Initialize a list to store the visited cells in the path\n    visited_path_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst = []\n    # Initialize a list to store the visited cells in the path\n    visited_path_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst = []\n    # Initialize a list to store the visited cells in the path\n    visited_path_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst = []\n    # Initialize a list to store the visited cells in the path\n    visited_path_lst_lst_lst_lst_lst_lst_lst_lst_"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        return tri(n-1) + tri(n-2) + tri(n+1)"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n % 2 == 0:\n        return 0\n    else:\n        odd_digits = n % 10\n        product = 1\n        while odd_digits:\n            product *= odd_digits % 2\n            odd_digits //= 2\n        return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    # check if the string is empty\n    if not string:\n        return False\n    \n    # check if the first character is a left bracket\n    if string[0] == '[':\n        # check if the last character is a right bracket\n        if string[-1] == ']':\n            # check if the string is nested\n            return True\n        else:\n            # check if the string is not nested\n            return False\n    else:\n        # check if the string is not nested\n        return False"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    return sum([int(i)**2 for i in lst])"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    # check if the last character is a letter\n    if txt[-1].isalpha():\n        # check if the last character is not a part of a word\n        if txt[-1] not in txt[-2:].lower():\n            return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    # create a list of indices where the element is not greater than or equal to the element immediately preceding it\n    indices = [i for i, x in enumerate(arr) if x!= arr[i-1] and x!= arr[i+1]]\n    # if there are no such indices, return -1\n    if not indices:\n        return -1\n    # return the largest index\n    return max(indices)"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return None, None\n    neg_lst = [num for num in lst if num < 0]\n    pos_lst = [num for num in lst if num > 0]\n    if neg_lst:\n        neg_max = max(neg_lst)\n        neg_min = min(neg_lst)\n        return neg_max, neg_min\n    if pos_lst:\n        pos_max = max(pos_lst)\n        pos_min = min(pos_lst)\n        return pos_max, pos_min\n    return None, None"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        elif b > a:\n            return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n < 4:\n        return False\n    if n % 4 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 1:\n        return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    # replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # replace consecutive spaces with -\n    text = re.sub(r's+', '-', text)\n    \n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    if file_name.split('.')[0] == '':\n        return 'No'\n    if file_name.split('.')[0][0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # initialize the sum of squares\n    sum_squares = 0\n    \n    # iterate through the list\n    for i in lst:\n        # check if the index is a multiple of 3 or 4\n        if i % 3 == 0 or i % 4 == 0:\n            # square the integer if index is a multiple of 3\n            if i % 3 == 0:\n                i = i**2\n            # cube the integer if index is a multiple of 4 and not a multiple of 3\n            elif i % 4 == 0 and i % 3!= 0:\n                i = i**3\n            # add the squared or cubed integer to the sum of squares\n            sum_squares += i\n        else:\n            # add the original integer to the sum of squares\n            sum_squares += i\n    \n    # return the sum of squares\n    return sum_squares"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if len(word) in prime_numbers:\n            prime_words.append(word)\n    return''.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    # Check if x is a whole number\n    if int(x) == x:\n        return True\n    else:\n        return False\n\n    # Check if n is a whole number\n    if int(n) == n:\n        return True\n    else:\n        return False\n\n    # Check if x * n is a whole number\n    if int(x) * int(n) == int(x * n):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n    # Convert all numbers to strings\n    nums = [str(num) for num in nums]\n    # Calculate the sum of digits for each number\n    sums = [sum(int(digit) for digit in num) for num in nums]\n    # Sort the numbers in ascending order based on the sum of their digits\n    sorted_nums = sorted(nums, key=lambda num: sums[nums.index(num)])\n    # Convert the sorted numbers back to integers\n    sorted_nums = [int(num) for num in sorted_nums]\n    return sorted_nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    nums = sorted(nums)\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] % 2!= 0 and str(num)[-1] % 2!= 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i**2 - i + 1 for i in range(n)]\n    triples = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    triples.append((a[i], a[j], a[k]))\n    return len(triples)"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    if planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Earth\" and planet2 == \"Mercury\":\n        return (\"Venus\")\n    elif planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # create a list of tuples, where each tuple contains the length of the word and the word itself\n    word_lengths = [(len(word), word) for word in lst]\n    # sort the list of tuples by length of the word\n    sorted_word_lengths = sorted(word_lengths, key=lambda x: x[0])\n    # create a new list to store the sorted words\n    sorted_words = []\n    # iterate through the sorted word lengths\n    for length, word in sorted_word_lengths:\n        # if the length is odd, skip it\n        if length % 2 == 1:\n            continue\n        # if the length is even, add the word to the sorted list\n        if length % 2 == 0:\n            sorted_words.append(word)\n    # return the sorted words\n    return sorted_words"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n % 2 == 0:\n        return y\n    else:\n        for i in range(3, int(n**0.5) + 1):\n            if n % i == 0:\n                return x\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    \"\"\"\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 == 1:\n                result += num**2\n    return result"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Convert the guesses to integers\n    guess = [int(guess[i]) for i in range(len(guess))]\n    # Calculate the absolute difference between the guesses and the scores\n    diff = [abs(guess[i] - score[i]) for i in range(len(guess))]\n    # Return the absolute difference array\n    return diff"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    # Define a function to calculate the strength of an extension\n    def calculate_strength(extension):\n        cap = len(extension)\n        sm = sum([ord(c) - 97 for c in extension])\n        return cap - sm\n    \n    # Find the strongest extension\n    strongest_extension = max(extensions, key=calculate_strength)\n    \n    # Return the class name with the strongest extension\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    # check if b is a substring of a\n    if b in a:\n        return True\n    # check if any of b's rotations is a substring of a\n    for i in range(1, len(b)+1):\n        rotated = b[i-1:] + b[:i]\n        if rotated in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num:\n        if num % 10 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num /= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError(\"Number must be between 1 and 1000\")\n    roman_numeral = \"\"\n    while number > 0:\n        if number % 1000 == 100:\n            roman_numeral += \"M\"\n        elif number % 100 == 90:\n            roman_numeral += \"CM\"\n        elif number % 50 == 40:\n            roman_numeral += \"XC\"\n        elif number % 40 == 9:\n            roman_numeral += \"XCIX\"\n        elif number % 10 == 4:\n            roman_numeral += \"XLI\"\n        elif number % 10 == 9:\n            roman_numeral += \"XLIX\"\n        elif number % 10 == 5:\n            roman_numeral += \"LI\"\n        elif number % 10 == 6:\n            roman_numeral += \"LVI\"\n        elif number % 10 == 7:\n            roman_numeral += \"LVII\"\n        elif number % 10 == 8:\n            roman_numeral += \"LVIII\"\n        elif number % 10 == 9:\n            roman_numeral += \"XCIX\"\n        elif number % 10 == 4:\n            roman_numeral += \"XLI\"\n        elif number % 10 == 5:\n            roman_numeral += \"LI\"\n        elif number % 10 == 6:\n            roman_numeral += \""}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n    if a == b == c:\n        return True\n    elif a == c == b:\n        return True\n    elif b == a == c:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > len(word):\n            max_len = len(set(word))\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining <= 0:\n        return [number, 0]\n    if number >= need:\n        return [number, remaining]\n    return eat(number + 1, need, remaining - 1)"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    # Check if operator list is empty\n    if operator == []:\n        return operand\n    # Check if operand list is empty\n    if operand == []:\n        return operator\n    # Check if operator list has at least one operator\n    if operator == []:\n        return \"Error: operator list is empty\"\n    # Check if operand list has at least two operands\n    if operand == []:\n        return \"Error: operand list is empty\"\n    # Check if operator list has at least one operator\n    if operator == []:\n        return \"Error: operator list is empty\"\n    # Check if operand list has at least two operands\n    if operand == []:\n        return \"Error: operand list is empty\"\n    # Check if operator list has at least one operator\n    if operator == []:\n        return \"Error: operator list is empty\"\n    # Check if operand list has at least two operands\n    if operand == []:\n        return \"Error: operand list is empty\"\n    # Check if operator list has at least one operator\n    if operator == []:\n        return \"Error: operator list is empty\"\n   "}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    if not s:\n        return s[::-1]\n    elif all(c.isalpha() for c in s):\n        return ''.join(solve_letter(c) for c in s)\n    else:\n        return s\n\ndef solve_letter(c):\n    if c.isupper():\n        return c.lower()\n    elif c.islower():\n        return c.upper()\n    else:\n        return c"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        return []\n    else:\n        return [a, b]"}
