{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack[-1]!= '(':\n                groups.append(paren_string[stack.index('(') + 1:])\n            stack.pop()\n        elif char =='':\n            if not stack or stack[-1]!= '(':\n                groups.append(paren_string[stack.index('(') + 1:])\n            stack.pop()\n    if stack:\n        groups.append(paren_string[stack.index('(') + 1:])\n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    for operation in operations:\n        if operation < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum([abs(x - mean) for x in numbers]) / len(numbers)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" insert a number 'delimeter' between every two consecutive elements of input list 'numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\""}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    nested_levels = []\n    for group in paren_string.split():\n        if group.startswith('('):\n            nested_levels.append(len(group.split(' ').count('(')))\n        elif group.endswith(')'):\n            nested_levels.append(len(group.split(' ').count(')'))\n    return nested_levels"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_so_far = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            result.append(max_so_far)\n            max_so_far = numbers[i]\n    result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    def find_palindrome_suffix(prefix: str, suffix: str) -> bool:\n        \"\"\" helper function to find the longest palindrome suffix of a given prefix \"\"\"\n        if len(suffix) > len(prefix):\n            return False\n        for i in range(len(suffix)):\n            if suffix[i]!= suffix[-i-1]:\n                return False\n        return True\n    \n    def find_palindrome_prefix(suffix: str) -> str:\n        \"\"\" helper function to find the shortest prefix that makes a palindrome with a given suffix \"\"\"\n        for i in range(len(suffix)):\n            prefix = suffix[i:]\n            if find_palindrome_suffix(prefix, suffix):\n                return prefix\n        return ''\n    \n    if len(string) < 2:\n        return string\n    else:\n        palindrome_suffix = find_palindrome_suffix(string, string[-1:])\n        if palindrome_suffix:\n            return string + reverse(string[:-1])\n        else:\n            return find_palindrome_prefix(string) + reverse(string)"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join(chr(int(a[i] ^ int(b[i])) % 2 + ord('0')) for i in range(max(len(a), len(b))))"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n    while a % b == 0:\n        a //= b\n    return a"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\""}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return''.join([str(i) for i in range(n+1)])"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = []\n    for note in music_string.split(' '):\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if substring in string[i:i+len(substring)]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    words = numbers.split()\n    words.sort()\n    return''.join(words)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    smallest_distance = float('inf')\n    closest_pair = None\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if i == j:\n                continue\n            distance = abs(numbers[i] - numbers[j])\n            if distance < smallest_distance:\n                smallest_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return scaled_numbers"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factors = []\n    for i in range(2, n+1):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n    if n > 1:\n        prime_factors.append(n)\n    return prime_factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join(chr(ord(c) ^ 0x20) for c in string)"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\""}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float) -> float:\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    if len(xs) % 2!= 0:\n        raise ValueError(\"List of coefficients must have even number of elements\")\n    if xs[0] == 0:\n        raise ValueError(\"Largest non zero coefficient must be non zero\")\n    return -xs[0] / (2 * xs[1])"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l_sorted = sorted(l)\n    result = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(l_sorted[i])\n        else:\n            result.append(l[i])\n    return result"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_sorted = sorted(even_values)\n    odd_indices = [i for i in range(len(l)) if i % 2!= 0]\n    odd_values = [l[i] for i in odd_indices]\n    odd_sorted = sorted(odd_values)\n    return [even_sorted[i] if i % 2 == 0 else odd_sorted[i] for i in range(len(l))]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # TODO: implement decode_cyclic function\n    pass"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    fib = [0, 1]\n    for i in range(2, n+1):\n        fib.append(fib[i-1] + fib[i-2])\n    is_prime = [False] * (n+1)\n    is_prime[0] = True\n    is_prime[1] = true\n    for i in range(2, n+1):\n        if fib[i] > 1:\n            is_prime[fib[i]] = False\n    return fib[n] if is_prime[fib[n]] else None"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns true if there are three distinct elements in the list that\n    sum to zero, and false otherwise.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n            if l[i] + l[j] + l[k] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    # Imagine a road that's a perfectly straight infinitely long line.\n    # n cars are driving left to right;  simultaneously, a different set of n cars\n    # are driving right to left.   The two sets of cars start out being very far from\n    # each other.  All cars move in the same speed.  Two cars are said to collide\n    # when a car that's moving left to right hits a car that's moving right to left.\n    # However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    # in their trajectory as if they did not collide.\n    # This function outputs the number of such collisions.\n    # We can simulate this scenario by creating two lists of n cars, one for each direction.\n    # We can then loop through each car in the left-to-right list and check if it collides\n    # with any car in the right-to-left list.  If it does, we increment a counter.\n    # Finally, we return the counter.\n    left_to_right = [0] * n\n    right_to_left = [0] * n\n    collision_counter = 0\n    for i in range(n):\n        for j in range(n):\n            if i < n // 2 and j >= n // 2:\n                # left-to-right car collides with right-to-left car\n                left_to_right[i] += 1\n                right_to_left[j] -= 1\n                collision_counter += 1\n    return collision_counter"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns true if there are two distinct elements in the list that\n    sum to zero, and false otherwise.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if base < 10:\n        # convert input number to string\n        x_str = str(x)\n        # remove leading zeros\n        while x_str.startswith('0'):\n            x_str = x_str[1:]\n        # convert to base\n        base_chars = [str(i) for i in range(10)]\n        base_chars += [chr(i + ord('A')) for i in range(10)]\n        base_chars = ''.join(base_chars)\n        x_str = base_chars[x_str[0]] + x_str[1:]\n        return x_str\n    else:\n        return \"Error: base must be less than 10\""}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n <= 4:\n        return 0 if n == 0 or n == 1 or n == 2 or n == 3 else 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2\n    else:\n        return sorted_l[mid]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    return 2 ** n % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    if len(s0)!= len(s1):\n        return False\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n <= 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    opening_count = brackets.count(\"<\")\n    closing_count = brackets.count(\">\")\n    if opening_count!= closing_count:\n        return False\n    if opening_count == 0:\n        return True\n    if brackets.endswith(\">\"):\n        return True\n    if brackets.startswith(\"<\") and brackets.endswith(\">\"):\n        return True\n    return False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    elif l[0] > l[-1]:\n        return False\n    else:\n        return all(l[i] <= l[i-1] for i in range(1, len(l)))"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    if n <= 1:\n        return None\n    elif n == 2:\n        return 2\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return i\n        return None"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    opening_count = brackets.count(\"(\")\n    closing_count = brackets.count(\")\")\n    \n    if opening_count!= closing_count:\n        return False\n    \n    if opening_count == 0:\n        return True\n    \n    if brackets.endswith(\")\"):\n        return True\n    \n    if brackets.startswith(\"(\"):\n        return True\n    \n    return False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [xs[i] * (i+1) for i in range(len(xs))]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n <= 2:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char in vowels and (not s[-1] or char == s[-1]):\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) - 48 for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # split the string into a list of words\n    words = s.split()\n    # count the number of apples and oranges\n    num_apples = int(words[0])\n    num_oranges = int(words[1])\n    # calculate the total number of fruits in the basket\n    total_fruits = num_apples + num_oranges\n    # subtract the number of apples and oranges from the total number of fruits\n    num_mango_fruits = n - total_fruits\n    return num_mango_fruits"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_nodes = [node for node in arr if node % 2 == 0]\n    if len(even_nodes) == 0:\n        return []\n    smallest_even_value = min(even_nodes)\n    smallest_index = even_nodes.index(smallest_even_value)\n    return [smallest_even_value, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_freq = 0\n    max_val = 0\n    for num in lst:\n        if num > 0:\n            freq = lst.count(num)\n            if freq >= 1 and freq >= max_freq:\n                max_freq = freq\n                max_val = num\n    return max_val if max_freq > 0 else -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    if len(sorted_lst) == 1:\n        return sorted_lst\n    else:\n        return [sorted_lst[0]] + [sorted_lst[1:][::-1]]"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return round((a * b * c) / 2, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    # Create a copy of the array and make it palindromic\n    palindromic_arr = arr[:]\n    for i in range(n // 2):\n        if arr[i]!= arr[n - i - 1]:\n            palindromic_arr[i], palindromic_arr[n - i - 1] = arr[n - i - 1], arr[i]\n    # Count the number of changes made to the palindromic array\n    change_count = 0\n    for i in range(n):\n        if palindromic_arr[i]!= arr[i]:\n            change_count += 1\n    # Return the minimum number of changes needed to make the original array palindromic\n    return change_count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 100:\n        return any(is_prime(i) for i in [a, a//3, a//3//2])\n    else:\n        return False\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n ** int(n)"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0:\n        return True\n    elif a < 0:\n        return False\n    else:\n        return (a ** 3) == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for digit in num:\n        if str(digit) in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # remove the '0b' prefix\n    return 'db' + binary + 'db'  # add 'db' at the beginning and end"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) >= 3:\n        for i in range(len(s) - 2):\n            if s[i] == s[i+1] == s[i+2]:\n                return False\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 2.7:\n            letter_grades.append('B+')\n        elif gpa > 2.3:\n            letter_grades.append('B')\n        elif gpa > 1.7:\n            letter_grades.append('B-')\n        elif gpa > 1.0:\n            letter_grades.append('C+')\n        elif gpa > 0.7:\n            letter_grades.append('C')\n        elif gpa > 0.3:\n            letter_grades.append('C-')\n        elif gpa > 0.0:\n            letter_grades.append('D+')\n        else:\n            letter_grades.append('D')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if len(string) <= 1:\n        return False\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10**n):\n        if i % 10 == 1 or i // 10 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary = bin(N)[2:]  # convert N to binary\n    binary_sum = sum(int(digit) for digit in binary)  # sum the digits in binary\n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum([lst[i] for i in range(len(lst)) if i % 2!= 0 and i < len(lst)])"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = ''\n        for char in word:\n            new_word += chr(ord(char) + 1)\n        new_words.append(new_word)\n    return''.join(new_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    rows = []\n    for row in lst:\n        if x in row:\n            for i, y in enumerate(row):\n                if y == x:\n                    rows.append((row.index(x), i))\n                    break\n    rows.sort(key=lambda x: (x[0], -x[1]))\n    return rows"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) == 0:\n        return array\n    elif len(array) == 1:\n        return array\n    elif sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shifted_alphabet = alphabet[2:] + alphabet[:2]\n    encrypted_s = s.translate(str.maketrans('', '', zip(alphabet, shifted_alphabet)))\n    return encrypted_s"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    count = 0\n    words = S.split()\n    for i in range(len(words)):\n        if words[i] == \"I\" and i < len(words) - 1 and words[i+1] in [\".\", \"?\", \"!\"]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if (x == y + z) or (y == x + z) or (z == x + y):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr(ord(char) + 2)\n            else:\n                encoded_char = char.upper()\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    max_prime = 0\n    max_sum = 0\n    for num in lst:\n        if num > 1:\n            for i in range(2, num):\n                if num % i == 0:\n                    break\n            else:\n                if max_prime < num:\n                    max_prime = num\n                    max_sum = sum(str(digit) for digit in str(max_prime))\n    return max_sum"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str) or not (key.islower() or key.isupper()):\n            return False\n        if key.islower():\n            continue\n        elif key.isupper():\n            return True\n        else:\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes[:n]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    product = 1\n    while a > 0 and b > 0:\n        if a % 10 == 0 and b % 10 == 0:\n            product *= 100\n            a //= 10\n            b //= 10\n        else:\n            product *= 10\n            a //= 10\n        if a == 0:\n            break\n    return product"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    try:\n        return int(value)\n    except ValueError:\n        return round(float(value), 0)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    levels = []\n    if n % 2 == 0:\n        n_stones = 2\n    else:\n        n_stones = 1 + n % 2\n    for i in range(n_stones, n+1, 2):\n        levels.append(i)\n    return levels"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x <= y:\n        return 2 * (x // 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": ""}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([num for num in x if not any(int(digit) % 2 == 0 for digit in str(num))])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if len(arr) == 0:\n        return []\n    elif all(x >= 1 and x <= 9 for x in arr):\n        sorted_arr = sorted(arr)\n        reversed_arr = sorted_arr[::-1]\n        return [str(x) for x in reversed_arr]\n    else:\n        return ['One']"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i * i * (i-1) * (i-2) * (i-3) * (i-4) * (i-5))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if i == str(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num >= 0:\n            count += sum(int(digit) for digit in str(num))\n        else:\n            count += sum(int(digit) for digit in str(num)[1:])\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        if arr[1] >= arr[0]:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(arr)):\n            if arr[i] >= arr[i+1]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n                if i == len(arr)-1:\n                    return True\n                else:\n                    return move_one_ball(arr[i+1:])\n        return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    break\n    if all(lst1):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letters = test.lower().split()\n    max_count = 0\n    max_letter = ''\n    for letter in letters:\n        if letter in letters:\n            count = letters.count(letter)\n            if count > max_count:\n                max_count = count\n                max_letter = letter\n    return {max_letter: max_count}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] not in c:\n            result += s[i]\n    if result == result[::-1]:\n        return (result, True)\n    else:\n        return (result, False)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i in range(len(lst)):\n        odd_count_i = 0\n        for j in range(len(lst[i])):\n            if lst[i][j] % 2!= 0:\n                odd_count_i += 1\n        result.append(f\"the number of odd elements {odd_count_i} in the string {i} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return float('inf')\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        min_sum = float('inf')\n        for i in range(len(nums)):\n            curr_sum = nums[i]\n            for j in range(i+1, len(nums)):\n                curr_sum += nums[j]\n            if curr_sum < min_sum:\n                min_sum = curr_sum\n        return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    total_water = 0\n    num_drops = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                total_water += 1\n                if total_water <= capacity:\n                    num_drops += 1\n                else:\n                    break\n    return num_drops"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    def sort_helper(arr):\n        # sort based on number of ones in binary representation\n        ones_count = [sum(int(bit) for bit in bin(n)[2:]) for n in arr]\n        indices = sorted(range(len(arr)), key=lambda i: ones_count[i])\n        return [arr[i] for i in indices]\n    \n    # sort based on decimal value for similar number of ones\n    sorted_arr = sort_helper(arr)\n    if len(set(sorted_arr)) == len(sorted_arr):\n        return sorted_arr\n    else:\n        return sorted(sorted_arr, key=lambda n: n)"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = []\n    for word in s.split():\n        if len([char for char in word if not word.isalpha(char)]) == n:\n            words.append(word)\n    return words"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)-1):\n        if word[i] not in vowels and word[i+1] not in vowels:\n            if word[i] == word[i+1]:\n                return word[i]\n            elif word[i] in vowels and word[i+1] not in vowels:\n                return word[i]\n            elif word[i] not in vowels and word[i+1] in vowels:\n                return word[i+1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        if s == '(':\n            stack.append(s)\n        elif s == ')':\n            if not stack or stack[-1]!= '(':\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum([num for num in lst if (num % 2 == 1 and lst.index(num) % 2 == 0) or (num % 2 == 0 and lst.index(num) % 2 == 1)])"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum_ = 0\n    for i in range(min(k, len(arr))):\n        if i < k:\n            sum_ += arr[i]\n    return sum_"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    def collatz(n):\n        if n == 1:\n            return [1]\n        elif n % 2 == 0:\n            return collatz(n // 2) + [n]\n        else:\n            return collatz(3 * n + 1) + collatz(n)\n    return sorted(collatz(n))"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"\n    Validates a given date string and returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \"\"\"\n    if not date:\n        return False\n    months = ['01', '03', '05', '07', '08', '10', '12']\n    days = [31, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 3"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if'' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(ord(c) % 2 == 0 for c in txt.lower())"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(set(lst)) == len(lst):\n        return sorted(lst) == lst\n    else:\n        return False"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    elif start1 >= start2 and end1 <= end2:\n        return \"NO\"\n    else:\n        length = end2 - start1\n        if length > 1:\n            for i in range(2, length):\n                if length % i == 0:\n                    return \"NO\"\n        else:\n            return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    else:\n        result = 1\n        for num in arr:\n            if num == 0:\n                result *= 0\n            elif num > 0:\n                result *= 1\n            else:\n                result *= -1\n        return result"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # Define a function to find the neighbors of a cell\n    def get_neighbors(cell):\n        row = cell[0]\n        col = cell[1]\n        neighbors = []\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            if 0 <= row + dx < len(grid) and 0 <= col + dy < len(grid[0]):\n                neighbors.append((row + dx, col + dy))\n        return neighbors\n    \n    # Define a function to find the minimum path of length k starting from a cell\n    def find_min_path(cell, visited):\n        if len(visited) == k:\n            return visited\n        neighbors = get_neighbors(cell)\n        for neighbor in neighbors:\n            if (row, col) not in visited:\n                visited.add((row, col))\n                if len(visited) == k:\n                    return visited\n                else:\n                    path = find_min_path(neighbor, visited.copy())\n                    if path:\n                        return path + [(cell,)]\n        return None\n    \n    # Define a function to compare two paths\n    def compare_paths(path1, path2):\n        for i in range(min(len(path1), len(path2))):\n            if path1[i]!= path2[i]:\n                return path1[i] < path2[i]\n        return False\n    \n    # Find the minimum path of length k starting from any cell\n    def find_min_path_any_cell(grid, k):\n        visited = set()\n        for row in range(len(grid)):\n            for col in range(len(grid[0])):\n                if (row, col) not in visited:\n                    path = find_min_path((row, col), visited)\n                    if path:\n                        return path\n        return None\n    \n    # Find the minimum path of length k in the grid\n    def find_min_path_grid(grid, k):"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 1:\n        return [3]\n    elif n % 2 == 0:\n        return [3, 1, 3]\n    else:\n        return [3, 1, 3, 2, 3]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    if n < 0:\n        return 0\n    else:\n        return functools.reduce(lambda x, y: x * y, [int(digit) for digit in str(n) if int(digit) % 2!= 0])"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1]!= '[':\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum([round(x**2) for x in lst])"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) > 0:\n        last_char = txt[-1]\n        if last_char.isalpha() and not last_char.isword():\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    max_index = -1\n    for i in range(len(arr)):\n        if i > 0 and arr[i] <= arr[i-1]:\n            max_index = i\n            break\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    a = None\n    b = None\n    for num in lst:\n        if num < 0:\n            if a is None or num > a:\n                a = num\n        elif num > 0:\n            if b is None or num < b:\n                b = num\n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        if float(a) > float(b):\n            return a\n        elif float(a) < float(b):\n            return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    example:\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return any(is_equal_to_sum_even(n - i) for i in range(1, n))"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n < 0:\n        return None\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace all consecutive spaces with -\n    text = re.sub(r\" +\", \"-\", text)\n    \n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3 or not '.' in file_name:\n        return 'No'\n    if not file_name.startswith(chr(65) + 'a' + chr(97) + 'z' + '.'):\n        return 'No'\n    ext = file_name.split('.')[1]\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            num = num ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            num = num ** 3\n        result += num\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    new_sentence = \"\"\n    for word in words:\n        if len(set(word)) == 1:\n            new_sentence += word + \" \"\n    return new_sentence.strip()"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    numerator = int(x.split('/')[0])\n    denominator = int(x.split('/')[1])\n    if denominator == 1:\n        return numerator == int(n.split('/')[0])\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    sorted_nums = sorted(nums, key=lambda x: sum(int(digit) for digit in str(x)), reverse=True)\n    return sorted_nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 == 1 and (num // 10) % 2 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(n)]\n    return sum(1 for i in range(n) for j in range(i+1, n) for k in range(j+1, n)\n               if a[i] + a[j] + a[k] % 3 == 0)"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 and planet2 and all(planet in planets for planet in [planet1, planet2]):\n        orbits = [planet_distance(planet1, planet2) for planet in planets if planet in [planet1, planet2]]\n        sorted_orbit_indices = sorted(orbit_indices(orbit_distances(orbit_distances(planets)))[orbit_indices(orbit_distances(orbit_distances(planets))) == [planet_distance(planet1, planet2)]])\n        sorted_planets = [planets[i] for i in sorted_orbit_indices]\n        return sorted_planets\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort()\n    return lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2!= 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = \"\"\n    for extension in extensions:\n        strength = (sum(1 for c in extension if c.isupper()) - sum(c.islower() for c in extension))\n        if strength > 0:\n            strongest_extension = extension\n            break\n    if strongest_extension == \"\":\n        return class_name\n    else:\n        return class_name + \".\" + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        for j in range(i, len(b)):\n            if b[i:j+1] in a:\n                return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x',\n        40: 'XL', 50: 'L', 90: 'XC', 100: 'C',\n        400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'\n    }\n    roman_numeral = ''\n    while number > 0:\n        if number in roman_numerals:\n            roman_numeral += roman_numerals[number]\n        else:\n            roman_numeral += str(number)\n        number -= 1\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if a == 0 or b == 0 or c == 0:\n        return False\n    elif a == b or b == c or c == a:\n        return True\n    elif math.sqrt(a**2 + b**2) == c:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    unique_chars = {}\n    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        for char in word:\n            if char in unique_chars:\n                unique_chars[char] += 1\n            else:\n                unique_chars[char] = 1\n        if len(unique_chars) > max_chars:\n            max_chars = len(unique_chars)\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining <= 0:\n        return [number + need, 0]\n    elif number >= need:\n        return [number, remaining]\n    else:\n        return [number + need, remaining - 1]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"Operator and operand lists must have the same length, minus one.\")\n    for i in range(len(operator)):\n        if operator[i] not in ['+', '-', '*', '/', '**']:\n            raise ValueError(\"Invalid operator: {}\".format(operator[i]))\n    for j in range(len(operand)):\n        if operand[j] < 0:\n            raise ValueError(\"Operand must be non-negative.\")\n    result = []\n    for i in range(len(operator)):\n        if i == 0:\n            result.append(operand[i])\n        elif i == len(operator) - 1:\n            result.append(operand[i])\n        else:\n            result.append(operand[i])\n            if operator[i] == '+':\n                result.append(operand[i+1])\n            elif operator[i] == '-':\n                result.append(operand[i+1])\n            elif operator[i] == '*':\n                result.append(operand["}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not s.isalpha():\n        return s[::-1]\n    else:\n        return ''.join([chr(ord(c) if c.islower() else ord(c.upper())) for c in s])"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    even_digits = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            even_digits.append(str(i))\n    return sorted(even_digits)"}
