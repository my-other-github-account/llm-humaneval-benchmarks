{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for num in numbers:\n        if num - threshold < 0.5:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    for i in range(len(paren_string)):\n        if i == 0:\n            groups.append(paren_string)\n        else:\n            group = []\n            for j in range(i+1, len(paren_string)):\n                if i == j:\n                    group.append(paren_string[j])\n                else:\n                    group.append(paren_string[i])\n            groups.append(group)\n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - (number * 10) + 0.5"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]):\n    for op in operations:\n        if op < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = 0\n    for num in numbers:\n        deviation += abs(num - mean)\n    return deviation / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [numbers[i+1] for i in range(len(numbers)-1)]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for i in range(len(paren_string)):\n        if i == 0:\n            result.append(0)\n        else:\n            result.append(parse_nested_parens(paren_string[i]))\n    return result"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return Tuple(sum, product)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]):\n    max_num = numbers[0]\n    rolling_max_list = []\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n            rolling_max_list.append(max_num)\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    return string[::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return a ^ b"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> str:\n    longest_str = \"\"\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a, b):\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(b, a)\n    return a * b"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    return [string[0]] + [string[1]] + [string[2]] + [string[3]] + [string[4]] + [string[5]] + [string[6]] + [string[7]] + [string[8]] + [string[9]] + [string[10]] + [string[11]] + [string[12]] + [string[13]] + [string[14]] + [string[15]] + [string[16]] + [string[17]] + [string[18]] + [string[19]] + [string[20]] + [string[21]] + [string[22]] + [string[23]] + [string[24]] + [string[25]] + [string[26]] + [string[27]] + [string[28]] + [string[29]] + [string[30]] + [string[31]] + [string[32]] + [string[33]] + [string[34]] + [string[35]] + [string[36]] + [string[37]] + [string[38]] + [string[39]] + [string[40]] + [string[41]] + [string[42]] + [string[43]] + [string[44]] + [string[45]] + [string[46]] + [string[47]] + [string[48]] + [string[49]] + [string[50]] + [string[51]] + [string[52]] + [string[53]] + [string[54]] + [string[55]] + [string[56]] + [string[57]] + [string[58]] + [string[59]] + [string[60]] +"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ''.join(str(i) for i in range(n))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n    return count"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    notes = []\n    for char in music_string:\n        if char == 'o':\n            notes.append(4)\n        elif char == 'o|':\n            notes.append(2)\n        elif char == '.':\n            notes.append(1)\n        else:\n            notes.append(int(char))\n    return notes"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if substring in string:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    numbers = numbers.strip()\n    numbers = numbers.split()\n    numbers = [int(n) for n in numbers]\n    numbers.sort()\n    return ''.join(numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = (float('inf'), float('inf'))\n    for num in numbers:\n        if num < closest_pair[0]:\n            closest_pair = (num, closest_pair[1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    return [numbers[0] / (numbers[0] + numbers[1]) for numbers in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [int(v) for v in values if isinstance(v, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n):\n    if n == 1:\n        return n\n    else:\n        return largest_divisor(n // 2) + 1"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.upper() + string.lower()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    return round(poly(xs, 0), 2)\n"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l.sort()\n    return l"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    unique_list = []\n    for num in l:\n        if num not in unique_list:\n            unique_list.append(num)\n    return unique_list"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort(key=lambda x: l[x])\n    return l[even_indices]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    groups = [s[3:] for i in range(len(s) // 3)]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[3:] for i in range(len(s) // 3)]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return n * prime_fib(n-1) + 1"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    sum = 0\n    for num in l:\n        if num == 0:\n            return False\n        if num == 1:\n            return True\n        if num == 2:\n            return sum == 0\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if i < j:\n                    collisions += 1\n                else:\n                    collisions += 1\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [l[0] + 1] + l[1:]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    sum = 0\n    for num in l:\n        if num == 0:\n            return False\n        if num == 1:\n            return True\n    return sum == 0"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if base == 2:\n        return str(x * base)\n    else:\n        return str(x) * base + str(base - 1)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    area = (a * h) / 2\n    return area"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2-1])/2\n    else:\n        return l[len(l)//2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    if text == text:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    if n == 0:\n        return 1\n    else:\n        return n * p % p - 1"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    text = text.lower()\n    for letter in text:\n        if letter in vowels:\n            text = text.replace(letter, '')\n    return text"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l, t):\n    return all(l <= t for l in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x, y):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0, s1):\n    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    if len(brackets)!= 2:\n        return False\n    if brackets[0]!= brackets[1]:\n        return False\n    return True"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    for i in range(len(l)):\n        if l[i]!= l[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    common_list = []\n    for num in l1:\n        common_list.append(num)\n    common_list.sort()\n    return common_list"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    if n <= 1:\n        return n\n    for i in range(2, n):\n        if n % i == 0:\n            return i * largest_prime_factor(n - i + 1)\n    return n * largest_prime_factor(n - 1)"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets):\n    if len(brackets) == 0:\n        return False\n    for i in range(len(brackets)):\n        if i == len(brackets) - 1:\n            return True\n    return False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [xs[0] + xs[1] * x + xs[2] * x^2 +... + xs[n-1] * x + xs[n] * x^n] for n=0, xs[n] = xs[n+1] for n=1, xs[n] = xs[n-1] + xs[n-2] * x + xs[n-3] * x^n] for n=2, xs[n] = xs[n-1] + xs[n-2] * x + xs[n-3] * x^n] for n=3, xs[n] = xs[n-1] + xs[n-2] * x + xs[n-3] * x^n] for n=4, xs[n] = xs[n-1] + xs[n-2] * x + xs[n-3] * x^n] for n=5, xs[n] = xs[n-1] + xs[n-2] * x + xs[n-3] * x^n] for n=6, xs[n] = xs[n-1] + xs[n-2] * x + xs[n-3] * x^n] for n=7, xs[n] = xs[n-1] + xs[n-2] * x + xs[n-3] * x^n] for n=8, xs[n] = xs[n-1] + xs[n-2] * x + xs[n-3] * x^n] for n=9, xs[n] = xs[n-1] + xs[n-2] * x + xs[n-3] * x^n] for n=10"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    if shift > len(str(x)):\n        return x*len(str(x))\n    else:\n        return x*len(str(x)+shift)"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum = 0\n    for char in s:\n        if char.isalpha():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    total_apples = 0\n    total_oranges = 0\n    total_mango = 0\n    for i in range(n):\n        total_apples += s[i]\n        total_oranges += s[n-i]\n        total_mango += s[n-n*i]\n    return total_mango - total_apples - total_oranges"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_index = 0\n    smallest_value = float('-inf')\n    for node in arr:\n        if node == 0:\n            smallest_value = node\n            smallest_index = 1\n        elif node == 1:\n            if node == 0:\n                smallest_value = node\n            else:\n                smallest_value = node + 1\n        else:\n            if node == 2:\n                if node == 0:\n                    smallest_value = node + 1\n                else:\n                    smallest_value = node + 1\n            else:\n                if node == 3:\n                    if node == 0:\n                        smallest_value = node + 1\n                        smallest_index = 1\n                    else:\n                        smallest_value = node + 1\n                        smallest_index = 1\n    return [smallest_value, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_value = 0\n    for num in lst:\n        if num > max_value:\n            max_value = num\n    return max_value"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    min_index = 0\n    max_index = len(lst) - 1\n    for i in range(min_index, max_index + 1):\n        if lst[i] < lst[min_index]:\n            min_index = i\n    for i in range(min_index, max_index + 1):\n        if lst[i] > lst[min_index]:\n            max_index = i\n    for i in range(min_index, max_index + 1):\n        if lst[i] < lst[max_index]:\n            lst[i], lst[max_index] = lst[max_index], lst[i]\n    return lst\n"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b + c == 3:\n        return a * b * c / 2\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if len(q)!= len(w):\n        return False\n    if q == []:\n        return True\n    if q == [1, 2] and q.count(1)!= 1:\n        return False\n    if q.count(2)!= 1:\n        return q.count(1)!= 1\n    if q.count(3)!= 1:\n        return q.count(2)!= 1\n    if q.count(4)!= 1:\n        return q.count(3)!= 1\n    if q.count(5)!= 1:\n        return q.count(4)!= 1\n    return q.count(1)!= 1"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    if n == 1:\n        return 1\n    else:\n        min_change = 0\n        for i in range(n):\n            if arr[i]!= arr[n-i]:\n                min_change += 1\n        return min_change"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_length = 0\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            if len(lst1[i]) > len(lst2[j]) or len(lst1[j]) > len(lst2[i]):\n                total_length += 1\n    return lst1 + lst2 + [lst1[0] for i in range(len(lst1))] + [lst2[0] for j in range(len(lst2))] + [lst1[0] for j in range(len(lst2))] + [lst2[0] for i in range(len(lst2))] + [lst1[0] for i in range(len(lst2))] + [lst2[0] for j in range(len(lst2))] + [lst1[0] for j in range(len(lst2))] + [lst2[0] for i in range(len(lst2))] + [lst1[0] for j in range(len(lst2))] + [lst2[0] for i in range(len(lst2))] + [lst1[0] for j in range(len(lst2))] + [lst2[0] for i in range(len(lst2))] + [lst1[0] for j in range(len(lst2))] + [lst2[0] for i in range(len(lst2))] + [lst1[0] for j in range(len(lst2))] + [lst2[0] for i in range(len(lst2))] + [lst1[0] for j in range(len(lst2))] + [lst2[0] for i in range(len(lst2))] + [lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a <= 100:\n        return True\n    for i in range(2, a + 1):\n            if a % i == 0:\n                return False\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if n**x == x:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 1:\n        return True\n    if a == 2:\n        return True\n    if a == 3:\n        return True\n    if a == 4:\n        return True\n    if a == 5:\n        return True\n    if a == 6:\n        return True\n    if a == 7:\n        return True\n    if a == 8:\n        return True\n    if a == 9:\n        return True\n    if a == 10:\n        return True\n    if a == 11:\n        return True\n    if a == 12:\n        return True\n    if a == 13:\n        return True\n    if a == 14:\n        return True\n    if a == 15:\n        return True\n    if a == 16:\n        return True\n    if a == 17:\n        return True\n    if a == 18:\n        return True"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    num_len = len(str(num))\n    num_hex = str(num)\n    num_hex = num_hex.zfill(num_len)\n    num_hex = num_hex.replace(\"0\", \"0x\")\n    num_hex = num_hex.replace(\"1\", \"0x\")\n    num_hex = num_hex.replace(\"2\", \"0x\")\n    num_hex = num_hex.replace(\"3\", \"0x\")\n    num_hex = num_hex.replace(\"4\", \"0x\")\n    num_hex = num_hex.replace(\"5\", \"0x\")\n    num_hex = num_hex.replace(\"6\", \"0x\")\n    num_hex = num_hex.replace(\"7\", \"0x\")\n    num_hex = num"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_string = \"\"\n    for i in range(decimal):\n        binary_string += \"0\"\n    return binary_string"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 1):\n        if s[i]!= s[i+1] and s[i+1]!= s[i+2] and s[i+2]!= s[i+3]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    grades = [0] * len(grades)\n    for i in range(len(grades)):\n        grades[i] = grades[i] + grades[i+1] + grades[i+2] + grades[i+3]\n    return grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if len(string) <= 1:\n        return False\n    for i in range(2, len(string)):\n        if string[i] % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, n+1):\n        if n == i:\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    sum = 0\n    for i in range(N):\n        sum += N * i\n    return sum"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_indices = [i for i in range(len(lst)) if lst[i] % 2 == 0]\n    return [lst[even_indices[i]] for i in range(len(lst))]"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    shuffled_words = []\n    for word in words:\n        shuffled_word = ''\n        for char in word:\n            shuffled_word += str(ord(char))\n        shuffled_words.append(shuffled_word)\n    return shuffled_words"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    rows = []\n    cols = []\n    for i in range(len(lst)):\n        row = []\n        col = []\n        for j in range(len(lst[i])):\n            row.append(lst[i][j])\n            col.append(lst[i][j])\n        rows.append(row)\n        cols.append(col)\n    return [(row[0], col[0]) for row in rows for col in cols]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) <= 1:\n        return array\n    else:\n        middle = len(array) // 2\n        left = array[:middle]\n        right = array[middle:]\n        sorted_array = [sorted(item) for item in left + right]\n        return sorted_array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', '"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst, key=lst.count(1))"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    count = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x == y == z:\n        return True\n    if x!= y:\n        return False\n    if y!= z:\n        return x!= z\n    return x + z == y + z"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    message = message.lower()\n    message = ''.join(map(lambda x: ''.join([x.capitalize() for x in message]), message))\n    return message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    largest_num = 0\n    for num in lst:\n        if num > largest_num:\n            largest_num = num\n    return sum(lst) * largest_num"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    for key in dict:\n        if key.lower() in dict:\n            return True\n        elif key.upper() in dict:\n            return False\n    return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = [2, 3]\n    count = [0] * n\n    for i in range(n):\n        if primes[i] % 2 == 0:\n            count[i] = 1\n    return count"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    if a == 0:\n        return 0\n    if b == 0:\n        return 1\n    if a > b:\n        return a * b\n    else:\n        return a + b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'a' or s[i] == 'b' or s[i] == 'c' or s[i] == 'd' or s[i] == 'e' or s[i] == 'f' or s[i] == 'g' or s[i] == 'h' or s[i] == 'i' or s[i] == 'j' or s[i] == 'k' or s[i] == 'l' or s[i] =='m' or s[i] == 'n' or s[i] == 'o' or s[i] == 'p' or s[i]"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    closest_int = 0\n    for i in range(1, len(value)):\n        closest_int = closest_int + (value - i) ** 2\n    return closest_int"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n == 1:\n        return n\n    else:\n        return make_a_pile(n-1) + 1"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.split(\" \")\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return x\n    else:\n        return y + 1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    rounded_avg = 0\n    for i in range(n, m+1):\n        rounded_avg += rounded_avg / (n * i)\n    rounded_avg = rounded_avg / (n * i)\n    rounded_avg = rounded_avg * (n * i)\n    rounded_avg = rounded_avg * (n * i)\n    rounded_avg = rounded_avg * (n * i)\n    rounded_avg = rounded_avg * (n * i)\n    rounded_avg = rounded_avg * (n * i)\n    rounded_avg = rounded_avg * (n * i)\n    rounded_avg = rounded_avg * (n * i)\n    rounded_avg = rounded_avg * (n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted(set(x))"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    arr.sort()\n    arr.reverse()\n    return [arr[i] for i in range(len(arr))]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    if n == 1:\n        return [1]\n    else:\n        return [n] * f(n-1)"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_odd_pals = (1, 2)\n    even_odd_pals += (n % 2 == 0)\n    return even_odd_pals"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    sum = 0\n    for num in arr:\n        if num > 0:\n            sum += num\n    return sum"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(1, len(arr)):\n            arr[i] = arr[i] + arr[i-1]\n        return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if len(lst1)!= len(lst2):\n        return False\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[i]:\n            return False\n    return True"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letters = test.split()\n    counts = {}\n    for letter in letters:\n        counts[letter] = 0\n    for letter in test:\n        counts[letter] += 1\n    max_count = max(counts.values())\n    return {letter: max_count for letter in counts}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] == c:\n            result += s[i]\n    return result, True"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j]!= '0':\n                count += 1\n    return [count]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('-inf')\n    for num in nums:\n        if num!= -1:\n            min_sum = min(min_sum, num)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    bucket_capacity = 1\n    for i in range(grid.length):\n        for j in range(grid[i].length):\n            if grid[i][j] == 0:\n                bucket_capacity = 1\n            else:\n                bucket_capacity = max(bucket_capacity, grid[i][j])\n    return bucket_capacity * grid[0][0]"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    arr.sort()\n    return arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = []\n    for i in range(len(s)):\n        if s[i] =='':\n            words.append(s[i])\n    return words"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    closest_vowels = []\n    for letter in word:\n        closest_vowels.append(letter)\n    closest_vowels.sort()\n    closest_vowels.reverse()\n    closest_vowels.remove(word[-1])\n    closest_vowels.append(word[-1])\n    closest_vowels.reverse()\n    closest_vowels.remove(word[-1])\n    closest_vowels.append(word[-1])\n    closest_vowels.reverse()\n    closest_vowels.append(word[-1])\n    closest_vowels.reverse()\n    closest_vowels.append(word[-1])\n    closest_vowels.reverse()\n    closest_vowels.append(word[-1])\n    closest_vowels.reverse()\n    closest_vowels.append(word[-1])\n    closest_v"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    if len(lst)!= 2:\n        return 'No'\n    if len(lst[0])!= len(lst[1]):\n        return 'No'\n    if lst[0]!= lst[1]:\n        return 'No'\n    if lst[0]!= '()':\n        return 'No'\n    if lst[1]!= '()':\n        return 'No'\n    if lst[0]!= lst[1]:\n        return 'No'\n    if lst[0]!= '()':\n        return 'No'\n    if lst[1]!= '()':\n        return 'No'\n    if lst[0]!= '()':\n        return 'No'\n    if lst[1]!= '()':\n        return 'No'\n   "}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr = [arr[i] for i in range(len(arr))]\n    arr.sort()\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum = 0\n    for num in lst:\n        if num % 2!= 0:\n            sum += num\n    return sum"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    if n == 1:\n        return [1]\n    else:\n        return [n*3 + 1]"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if len(date) == 0:\n        return False\n    if len(date)!= 11:\n        return False\n    if date[0]!= '0':\n        return False\n    if date[1]!= '0':\n        return False\n    if date[2]!= '0':\n        return False\n    if date[3]!= '0':\n        return False\n    if date[4]!= '0':\n        return False\n    if date[5]!= '0':\n        return False\n    if date[6]!= '0':\n        return False\n    if date[7]!= '0':\n        return False\n    if date[8]!= '0':\n        return False\n    if date[9]!= '0':\n        return False\n    if date[10]!= '0':\n        return False\n    if date[11"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    return [word.strip() for word in words]"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) == 1:\n        return True\n    else:\n        for num in lst:\n            if num!= lst[0]:\n                return False"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if len(interval1)!= len(interval2):\n        return \"NO\"\n    if len(interval1)!= len(interval2):\n        return \"NO\"\n    if len(interval1)!= len(interval2) - 1:\n        return \"NO\"\n    if len(interval1)!= len(interval2) - 1:\n        return \"NO\"\n    if len(interval1)!= len(interval2) - 1:\n        return \"NO\"\n    if len(interval1)!= len(interval2) - 1:\n        return \"NO\"\n    if len(interval1)!= len(interval2) - 1:\n        return \"NO\"\n    if len(interval1)!= len(interval2) - 1:\n        return \"NO\"\n    if len("}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    prod = 0\n    for i in range(len(arr)):\n        prod += arr[i] * prod_signs(arr[i])\n    return prod"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    if k == 1:\n        return [grid[0][0]]\n    else:\n        return [grid[0][0] + [grid[1][0] + [grid[2][0] +... + grid[k][0]]] + [grid[0][1] + [grid[1][1] + [grid[2][1] +... + grid[k][1]]]])"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [1, 1, 1]\n    elif n == 1:\n        return [1]\n    else:\n        return [tri(n-1), tri(n-2), tri(n+1)]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    if n % 2 == 0:\n        return n * n\n    else:\n        return n * n + 1"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return len(string) == 1\n    if len(string) == 3:\n        return len(string) == 2\n    if len(string) == 4:\n        return len(string) == 3\n    if len(string) == 5:\n        return len(string) == 4\n    if len(string) == 6:\n        return len(string) == 5\n    if len(string) == 7:\n        return len(string) == 6\n    if len(string) == 8:\n        return len(string) == 7\n    if len(string) == 9:\n        return len(string) == 8\n    if"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    sum = 0\n    for num in lst:\n        sum += num ** 2\n    return sum"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 1:\n        return True\n    elif len(txt) == 2:\n        return txt[0] == 'a' or txt[1] == 'b'\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1] and arr[i]!= arr[i+1]:\n            largest_index = i + 1\n    return largest_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    a, b = 0, 0\n    for num in lst:\n        if num < 0:\n            a = num\n            num = -num\n        elif num > a:\n            b = num\n    return a, b"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if type(a) == type(b):\n        return a\n    if type(a) == float:\n        return a\n    if type(b) == float:\n        return b\n    if type(a) == str:\n        return a\n    if type(b) == str:\n        return b\n    if a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n    if n == 17:\n        return True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1) * (n-2) *... * 1"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name)!= 3:\n        return False\n    if file_name.startswith('.'):\n        return False\n    if file_name.startswith('txt'):\n        return True\n    if file_name.startswith('exe'):\n        return True\n    if file_name.startswith('dll'):\n        return True\n    return False"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    sum = 0\n    for num in lst:\n        if num % 3 == 0 and num % 4!= 0:\n            sum += num ** 2\n        elif num % 4 == 0:\n            sum += num ** 3\n    return sum"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    words = [word.strip() for word in words]\n    words = [word for word in words if len(word) > 1]\n    words = [word for word in words if len(word) > 3]\n    words = [word for word in words if len(word) > 5]\n    words = [word for word in words if len(word) > 7]\n    words = [word for word in words if len(word) > 10]\n    words = [word for word in words if len(word) > 13]\n    words = [word for word in words if len(word) > 20]\n    words = [word for word in words if len(word) > 30]\n    words = ["}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    if x == \"0\" or x == \"1\":\n        return False\n    if n == \"0\" or n == \"1\":\n        return True\n    if x == \"2\" and n == \"1\":\n        return True\n    if x == \"3\" and n == \"2\":\n        return True\n    if x == \"4\" and n == \"3\":\n        return True\n    if x == \"5\" and n == \"4\":\n        return True\n    if x == \"6\" and n == \"5\":\n        return True\n    if x == \"7\" and n == \"6\":\n        return True\n    if x == \"8\" and n == \"7\":\n        return True\n    if x == \"9\" and n == \"8"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            count += 1\n        if num % 10!= 0:\n            if num > 10:\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [1, 3, 7, 13, 21]\n    max_triples = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                if i+j+k == n:\n                    max_triples = max(max_triples, a[i] * a[j] * a[k])\n    return max_triples"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [{\"name\": planet1, \"distance\": 0}, {\"name\": planet2, \"distance\": 0}]\n    for planet in planets:\n        if planet[\"distance\"] < planet1[\"distance\"] + planet2[\"distance\"]:\n            planets.append(planet)\n    return tuple(planets)"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    sorted_list = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            sorted_list.append(word)\n    return sorted_list"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n == 1:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    sum = 0\n    for num in lst:\n        if num % 2!= 0:\n            sum += num ** 2\n    return sum"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    diff = 0\n    for i in range(len(game)):\n        if game[i]!= guess[i]:\n            diff += 1\n    return [diff] + [0] * len(game)"}
{"task_id": "HumanEval/153", "completion": ""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    if number <= 1000:\n        return 'x' + str(number)\n    else:\n        return 'xx' + str(number)"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if a == b == c:\n        return True\n    if a == b > c:\n        return False\n    if b == c > a:\n        return True\n    if b == c == a:\n        return False\n    return True"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = \"\"\n    for word in words:\n        max_word = max(max_word, len(word))\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = 0\n    for i in range(number, remaining+1):\n        total_eaten += remaining\n    return [total_eaten, remaining]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = 0\n    for i in range(len(operand)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if s[i] == 'a':\n        s[i] = 'A'\n    elif s[i] == 'b':\n        s[i] = 'B'\n    elif s[i] == 'c':\n        s[i] = 'C'\n    elif s[i] == 'd':\n        s[i] = 'D'\n    elif s[i] == 'e':\n        s[i] = 'E'\n    elif s[i] == 'f':\n        s[i] = 'F'\n    elif s[i] == 'g':\n        s[i] = 'G'\n    elif s[i] == 'h':\n        s[i] = 'H'\n    elif s[i] == 'i':\n        s"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    md5_hash = hashlib.md5(text.encode('utf-8'))\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    even_digits = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits"}
