{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove all spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Use a stack to keep track of open parentheses\n    stack = []\n\n    # Loop through the input string character by character\n    for char in paren_string:\n        if char == \"(\":\n            # Push the opening parenthesis onto the stack\n            stack.append(char)\n        elif char == \")\":\n            # Pop the closing parenthesis off the stack\n            stack.pop()\n\n            # If the stack is now empty, we have completed a balanced group\n            if not stack:\n                # Add the completed group to the output list\n                output = \"\".join(paren_string[start:end])\n                start = end\n                end += 1\n                yield output\n                # Reset the stack for the next group\n                stack = []\n        else:\n            # Ignore any other characters\n            pass\n\n    # If the stack is not empty at the end of the input string, there is an unbalanced group\n    if stack:\n        raise ValueError(\"Unbalanced parentheses in input string\")\n\n    # Return the list of separated groups\n    return list(filter(None, output.split(\"\\n\")))\n"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n\n    >>> truncate_number(3.5)\n    0.5\n    >>> truncate_number(4.6)\n    0.6\n    >>> truncate_number(123.45)\n    0.45\n    >>> truncate_number(0.5)\n    0.5\n    >>> truncate_number(0.0)\n    0.0\n    >>> truncate_number(-0.5)\n    0.5\n    >>> truncate_number(-123.45)\n    0.45\n    >>> truncate_number(-0.5)\n    0.5\n    >>> truncate_number(-0.0)\n    0.0\n    \"\"\"\n    if number > 0:\n        return number - int(number)\n    else:\n        return number"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    current_balance = 0\n    for operation in operations:\n        current_balance += operation\n        if current_balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        return 0.0\n    mean = float(sum(numbers)) / len(numbers)\n    return float(sum(abs(x - mean) for x in numbers)) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i + 1 < len(numbers):\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_counts = []\n    for group in paren_string.split():\n        if group == \"\":\n            paren_counts.append(0)\n            continue\n        paren_counts.append(len(group.replace(\"(\", \"\")).replace(\")\", \"\")))\n    return paren_counts"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    return (\n        sum(numbers),\n        reduce(lambda x, y: x * y, numbers),\n    )\n"}
{"task_id": "HumanEval/9", "completion": ""}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    postfix = string[::-1]\n    while not is_palindrome(postfix):\n        postfix = postfix[:-1]\n    return string + postfix[::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(a) - 1):\n        if a[i] == \"1\" and b[i] == \"1\":\n            result += \"0\"\n        elif a[i] == \"0\" and b[i] == \"0\":\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len, default=None)\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string]\n    while len(prefixes) < len(string):\n        prefixes.append(prefixes[-1][:-1])\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return''.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    music_notes = music_string.split('|')\n    beat_counts = []\n    for note in music_notes:\n        if note == '.':\n            beat_counts.append(1)\n        elif note.startswith('o'):\n            beat_counts.append(4)\n        elif note.startswith('.'):\n            beat_counts.append(2)\n    return beat_counts"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if substring in string[i:i + len(substring)]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": ""}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least 2 elements\")\n    closest_diff = float(\"inf\")\n    closest_numbers = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < closest_diff:\n                closest_diff = diff\n                closest_numbers = (numbers[i], numbers[j])\n    return closest_numbers"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n    min_value = min(numbers)\n    max_value = max(numbers)\n    scale_factor = 1.0 / (max_value - min_value)\n    return [number * scale_factor for number in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": ""}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    if n < 2:\n        return n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n //= 2\n        else:\n            for i in range(3, int(n ** 0.5) + 1, 2):\n                if n % i == 0:\n                    factors.append(i)\n                    n //= i\n                    break\n            else:\n                factors.append(n)\n                break\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    seen_add = seen.add\n    return [n for n in numbers if seen.add(n) or seen.get(n)]\n\n\ndef main():\n    numbers = [1, 2, 3, 2, 4]\n    unique_numbers = remove_duplicates(numbers)\n    print(unique_numbers)\n\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)\n"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2!= 0:\n        raise ValueError(\"List of coefficients must have an even number of elements\")\n    if abs(xs[-1]) < 1e-10:\n        raise ValueError(\"List of coefficients must have a non-zero largest coefficient\")\n    x = math.sqrt(abs(xs[-1]) / 2)\n    y = poly([xs[i] / xs[-1] for i in range(len(xs)) if i!= -1], x)\n    if y < 0:\n        return x\n    return -x"}
{"task_id": "HumanEval/33", "completion": ""}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": ""}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if i % 7 == 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": ""}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    if n <= 0:\n        return None\n    fib_numbers = [0, 1]\n    for i in range(2, n+1):\n        fib_numbers.append(fib_numbers[i-1] + fib_numbers[i-2])\n    for i in range(len(fib_numbers)-1):\n        if fib_numbers[i] > 0 and fib_numbers[i] % 2 == 0:\n            fib_numbers.pop(i)\n    return fib_numbers[n-1]"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    return len([x for x in itertools.combinations(l, 3) if sum(x) == 0]) > 0\n"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Define a function to calculate the time it takes for two cars to collide\n    def collision_time(speed, distance):\n        return distance / speed\n\n    # Define a function"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    return any(abs(a - b) == 0 for a in l for b in l if a!= b)"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    if base < 2 or base > 10:\n        raise ValueError(\"Invalid base value\")\n    if x < 0:\n        raise ValueError(\"Negative number not allowed\")\n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result or \"0\"\n"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n):\n    if n < 4:\n        return n\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n ** n) % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    return ''.join(c for c in text if c not in 'aeiou')"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    if len(s0)!= len(s1):\n        return False\n    s0_set = set(s0)\n    s1_set = set(s1)\n    return s0_set == s1_set"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    x1, x2 = l[0], l[1]\n    if x1 > x2:\n        return False\n    for i in range(2, len(l)):\n        x1, x2 = l[i-1], l[i]\n        if x1 > x2:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    if n <= 1:\n        return 1\n    for i in range(2, int(n ** 0.5) + 1, 1):\n        if n % i == 0:\n            return i if is_prime(i) else largest_prime_factor(i)\n    return n\n\n\ndef is_prime(n: int):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1, 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/60", "completion": ""}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"\n    Derivative of a polynomial.\n\n    Args:\n        xs (list): A list of coefficients of a polynomial in descending order.\n\n    Returns:\n        list: The derivative of the polynomial in the same form.\n\n    \"\"\"\n    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [sum(xs[i + 1:] * (i + 1) for i in range(n - 1)) / (n - 1)]\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    if n < 3:\n        return n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    return len([c for c in s if c in 'aeiouy' and (not s.endswith('y') or c!= 'y')])"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[shift:] + str(x)[:shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples, oranges = s.split()\n    apples = int(apples)\n    oranges = int(oranges)\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_values = [value for value in arr if value % 2 == 0]\n    if not even_values:\n        return []\n    smallest_index = min(arr, key=lambda x: x // 2)\n    return [smallest_index, arr.index(smallest_index)]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq_dict = {}\n    for i in lst:\n        freq = freq_dict.get(i, 0)\n        freq_dict[i] = freq + 1\n    max_freq = max(freq_dict, key=freq_dict.get)\n    if max_freq == 0:\n        return -1\n    return max(i for i in freq_dict if freq_dict[i] == max_freq)"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return lst\n    min_value = min(lst)\n    max_value = max(lst)\n    return [min_value] + [max_value] + strange_sort_list(lst[1:-1])\n\n\ndef strange_sort_list(lst):\n    if not lst:\n        return lst\n    min_value = min(lst)\n    max_value = max(lst)\n    return [min_value] + [max_value] + strange_sort_list(lst[1:-1])"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return round(0.5 * (a + b + c) * (a * b - c * c / 4), 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return (\n        len(set(q)) == 1 and\n        sum(q) <= w\n    )"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n    if n == 2:\n        return arr[0] == arr[1]\n    forward = arr[0] + arr[1]\n    for i in range(2, n):\n        forward += arr[i]\n    backward = arr[-1] + arr[-2]\n    for i in range(n-2, 0, -1):\n        backward += arr[i]\n    return abs(forward - backward)"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) == 0 or len(lst2) == 0:\n        return lst1 if len(lst1) > len(lst2) else lst2\n    return [x for x in lst1 if x in lst2 and len(x) < len(y) for y in lst2]"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 2 or a % 2 == 0:\n        return False\n    for i in range(3, int(a ** 0.5) + 1, 2):\n        if a % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if n == 0 or x == 0:\n        return False\n    if x % n == 0:\n        return True\n    if math.log(x, n) == int(math.log(x, n)):\n        return True\n    return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return (a ** 3).is_integer()"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in \"2357BDE\":\n            if digit == \"B\":\n                count += 2\n            else:\n                count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:].zfill(32).rstrip('0')\n    return 'db' + binary + 'db'"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    letters = set(s)\n    for i in range(len(s) - 2):\n        if letters.intersection(s[i:i + 3])!= set(s[i:i + 3]):\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    grade_table = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n    }\n    return [grade_table.get(grade, 'E') for grade in grades]\n"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    length = len(string)\n    return math.isprime(length)"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    return (10**n - 1) // 9 - (10**(n-1) - 1) // 9"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(N).replace('-', '').zfill(ceil(log2(N)) + 1)"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    if not lst or len(lst) == 1:\n        return 0\n    return lst[0] + add(lst[1::2])"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return''.join(sorted(s.split(), key=lambda x: (ord(x[0]), x)))\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coords = []\n    for i, row in enumerate(lst):\n        if len(row) == 0:\n            continue\n        row_coords = [(i, j) for j, _ in enumerate(row) if j == x]\n        coords.extend(row_coords)\n    return sorted(coords)"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) % 2 == 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    return ''.join(chr((ord(c) - 97 + 2) % 26) for c in s.lower())\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) == 1:\n        return None\n    elif len(lst) == 2:\n        return lst[1]\n    else:\n        return sorted(lst)[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    count = 0\n    for sentence in S.split(\".\"):\n        if sentence.startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if not all(map(int, (x, y, z))):\n        return False\n    return x == y + z or y == x + z or z == x + y\n"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    message = message.lower()\n    message = message.replace(\"a\", \"c\")\n    message = message.replace(\"e\", \"g\")\n    message = message.replace(\"i\", \"k\")\n    message = message.replace(\"o\", \"q\")\n    message = message.replace(\"u\", \"w\")\n    message = message.upper()\n    return message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    largest_prime = 0\n    for i in lst:\n        if i > 0 and i!= 1:\n            for j in range(2, int(i**0.5) + 1):\n                if i % j == 0:\n                    break\n            else:\n                largest_prime = i\n    return sum(str(largest_prime)[::-1])"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict_):\n    if not dict_:\n        return False\n    return all(\n        isinstance(key, str) and key.islower()\n        or isinstance(key, str) and key.isupper()\n        for key in dict_.keys()\n    )"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = [2]\n    for i in range(3, n):\n        if all(i % j!= 0 for j in primes if j <= i):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (a // 10 ** (len(a) - 1)) * (b // 10 ** (len(b) - 1))"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    return sum(c.isupper() and (i % 2 == 0) for i, c in enumerate(s) if c.isalpha())"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    value = float(value)\n    if value.is_integer():\n        return int(value)\n    return int(value + (1 if value > 0 else -1) / 2)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    levels = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = (n + 1) // 2\n        levels.append(n)\n    return levels"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x % 2 == 0 and y % 2 == 0:\n        if x > y:\n            return y\n        elif x < y:\n            return x\n        else:\n            return x\n    elif x % 2!= 0 and y % 2!= 0:\n        if x > y:\n            return -1\n        elif x < y:\n            return -1\n        else:\n            return -1\n    elif x % 2 == 0 and y % 2!= 0:\n        if x > y:\n            return y\n        elif x < y:\n            return -1\n        else:\n            return -1\n    elif x % 2!= 0 and y % 2 == 0:\n        if x > y:\n            return x\n        elif x < y:\n            return -1\n       "}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(int(math.floor(avg)))[2:]"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    def digit_sum(n):\n        return sum(int(d) for d in str(n))\n    \n    seen = set()\n    for n in x:\n        digit_sum_n = digit_sum(n)\n        if digit_sum_n % 2 == 0 and digit_sum_n not in seen:\n            seen.add(digit_sum_n)\n    return sorted(n for n in x if digit_sum(n) in seen)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    sorted_arr = sorted(arr)\n    reversed_arr = sorted_arr[::-1]\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [digit_names[i-1] for i in reversed_arr if i in range(1, 10)]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = [1] * n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result[i] = math.factorial(i)\n        else:\n            result[i] = sum(math.factorial(i) for i in range(1, i + 1))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n+1):\n        if i == len(str(i))*2 and i % 2 == 0:\n            even_palindromes += 1\n        elif i == len(str(i))*2 and i % 2!= 0:\n            odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digit_sum = sum(int(d) for d in str(num))\n        if digit_sum > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    if len(set(arr))!= len(arr):\n        return False\n    if arr[0] >= arr[1]:\n        return False\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] >= arr[i - 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    even_count = len([x for x in lst1 if x % 2 == 0])\n    if even_count == len(lst1):\n        return \"YES\"\n    if even_count == 0:\n        return \"NO\"\n    for i in range(len(lst2)):\n        if lst2[i] % 2 == 0:\n            if lst1[i] % 2 == 1:\n                lst1[i], lst2[i] = lst2[i], lst1[i]\n                even_count += 1\n                if even_count == len(lst1):\n                    return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    return counts"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Step 1: Delete all characters in s that are equal to any character in c\n    s = ''.join(c for c in set(s) if c not in set(c))\n\n    # Step 2: Check if the result string is a palindrome\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [f\"the number of odd elements {len(set(digit) for digit in string if digit % 2 == 1)}n the str{len(string)}ng {len(string)} of the {len(string)}nput.\" for string in lst]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    return min(sum(nums[i:j+1]) for i in range(len(nums)) for j in range(i, len(nums)) if j-i+1 and nums[i:j+1].count(0))\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    return [word for word in words if len(set(c for c in word if c.isconsonant())) == n]\n"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set('aeiou')\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels and word[-1] not in vowels:\n            return word[i]\n    return ''"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for char in lst[0] + lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort()\n    return arr[:k]\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(elem for i, elem in enumerate(lst) if i % 2 == 0 and elem % 2 == 1)\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(arr[:k])"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n + 1\n        yield n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    month, day, year = date.split(\"-\")\n    if month not in range(1, 13):\n        return False\n    if day not in range(1, 32 if (month in [1, 3, 5, 7, 8, 10, 12]) else 31 if (month in [4, 6, 9, 11]) else 29 if (month == 2) else 0):\n        return False\n    if year not in range(1900, 2021):\n        return False\n    if len(date)!= 10 or date[2]!= \"/\":\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if txt.split():\n        return txt.split()\n    if txt.split(','):\n        return txt.split(',')\n    return len(set(c for c in txt if ord(c) % 2 == 1))"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(set(lst))!= len(lst):\n        return False\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if not interval1[1] >= interval1[0] or not interval2[1] >= interval2[0]:\n        return \"NO\"\n    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    return \"YES\" if math.gcd(interval1[1] - interval1[0] + 1, interval2[1] - interval2[0] + 1)!= 1 else \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    return sum(abs(x) for x in arr) * reduce(lambda x, y: x * y, signs)\n"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    def get_paths(grid, k, path, visited):\n        if len(path) == k:\n            if path not in visited:\n                visited.append(path)\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] not in path and (i + 1 < len(grid) and grid[i + 1][j] or i - 1 >= 0 and grid[i - 1][j] or j + 1 < len(grid[0]) and grid[i][j + 1] or j - 1 >= 0 and grid[i][j - 1]):\n                    path.append(grid[i][j])\n                    get_paths(grid, k, path, visited)\n                    path.pop()\n    visited"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    a = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            a.append(i // 2 + 1)\n        else:\n            a.append(a[-3] + a[-2] + a[-1])\n    return a"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    n_str = str(n)\n    odd_digits = [int(digit) for digit in n_str if int(digit) % 2 == 1]\n    return 1 if len(odd_digits) > 0 and all(odd_digits) else 0\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            stack.pop()\n        else:\n            continue\n\n    return not stack\n"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(int(x)**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    words = txt.split()\n    last_char = txt[-1]\n    return last_char.isalpha() and not words[-1].endswith(last_char)\n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] > arr[i-1]:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    if negatives:\n        largest_negative = max(negatives)\n    else:\n        largest_negative = None\n    if positives:\n        smallest_positive = min(positives)\n    else:\n        smallest_positive = None\n    return (largest_negative, smallest_positive)\n"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n    if isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    if isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return (n % 2 == 0 and n >= 8) or (n // 2 + n // 4 == n and n >= 12)"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n <= 0:\n        return 1\n    return n * special_factorial(n-1)\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    return \"_\" + re.sub(r\"[ ]+\", \"-\", text.strip()).replace(\" \", \"_\")"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    if not re.search(r'^\\w+\\.', file_name):\n        return 'No'\n    if not re.search(r'\\.(?:txt|exe|dll)$', file_name):\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum(i ** 2 for i in lst if (len(lst) - 1 - i) % 3 or (len(lst) - 1 - i) % 4)"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if all(ord(c) in {'a', 'e', 'i', 'o', 'u'} for c in word) and len(word) == 2]\n    return''.join(prime_words)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_den = x.split(\"/\")\n    n_num, n_den = n.split(\"/\")\n    if x_den == n_den:\n        return True\n    if x_den!= n_den:\n        if int(x_num) * int(n_den) == int(n_num) * int(x_den):\n            return True\n    return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    nums.sort(key=lambda x: (x, len(str(x)) if str(x) else 0))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 2!= 0 and num % 2!= 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return len([(i, j, k) for i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0])"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    if planet1 not in ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']:\n        return ()\n    if planet2 not in ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']:\n        return ()\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index > planet2_index:\n        planet1,"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted(lst, key=len, reverse=True)"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    return x if is_prime(n) else y\n\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(n ** 2 for n in lst if n > 0 and n % 2 == 1)\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    extensions.sort(key=lambda x: (x.upper().count('A') - x.lower().count('a'), x))\n    return f\"{class_name}.{extensions[0]}\"\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if len(a) < len(b):\n        return False\n    if b in a:\n        return True\n    for i in range(len(b)):\n        if a[i:i + len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    count_even = 0\n    count_odd = 0\n    while num:\n        digit = num % 10\n        if digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num //= 10\n    return count_even, count_odd\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    if number < 1 or number > 1000:\n        raise ValueError(\"Number must be between 1 and 1000\")\n    roman_numeral = \"\"\n    if number < 5:\n        roman_numeral = {\"I\": 1, \"II\": 2, \"III\": 3, \"IV\": 4, \"V\": 5}[number]\n    else:\n        roman_numeral = int_to_mini_roman(number // 5) + int_to_mini_roman(number % 5)\n    return roman_numeral.lower()\n"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return (a * a) + (b * b) == (c * c)"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    unique_chars = [len(set(word)) for word in words]\n    max_count = max(unique_chars)\n    max_index = words.index(words[unique_chars.index(max_count)])\n    return words[max_index]\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if need > remaining:\n        return [remaining, 0]\n    if need <= number:\n        return [number, 0]\n    return [number + need - remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    expression = operand[0]\n    for i in range(1, len(operand)):\n        operator_i = operator[i-1]\n        if operator_i == '+':\n            expression = expression + operand[i]\n        elif operator_i == '-':\n            expression = expression - operand[i]\n        elif operator_i == '*':\n            expression = expression * operand[i]\n        elif operator_i == '//':\n            expression = expression // operand[i]\n        elif operator_i == '**':\n            expression = expression ** operand[i]\n    return expression"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    return ''.join(c.upper() if c.isalpha() else c for c in s[::-1])"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        return []\n    if a % 2 == 0:\n        yield a\n    for i in range(a // 2 + 1, b // 2 + 1):\n        if i * i > b:\n            break\n        if i * i <= b:\n            yield i"}
