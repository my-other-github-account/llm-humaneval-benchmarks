{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \n    Parameters:\n        numbers (List[float]): List of floats\n        threshold (float): Threshold for closeness of numbers\n    \n    Returns:\n        bool: True or False depending on whether there are close elements or not\n    \"\"\""}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    left = []\n    right = []\n    for opening in paren_string.strip().split():\n        if opening == ')':\n            left.append('')\n        elif opening == '(':\n            right.append('')\n    return [left, right]"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"Given a positive floating point number, it can be decomposed into an integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1)."}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    for operation in operations:\n        if operation < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate Mean Absolute Deviation for a given list of input numbers.\n    The function takes a list of floating point numbers and returns the average\n    absolute difference between each element and the mean of the dataset.\n    The formula used to calculate Mean Absolute Deviation is:\n        MAD = average | x - x_mean |\n    where x is each number in the list and x_mean is the mean of the list.\n    This function was tested with the example input [1.0, 2.0, 3.0, 4.0] which\n    returned the value of 1.0.\n    \"\"\""}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list 'numbers'.\n    \n    Parameters:\n        numbers (List[int]): Input list of integers.\n        delimeter (int): The value to insert between each element of the input list.\n        \n    Returns:\n        List[int]: Output list with the inserted delimiter between every two consecutive elements.\n    \"\"\""}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depth = 0\n    result = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            depth += 1\n        elif paren_string[i] == ')':\n            depth -= 1\n        elif paren_string[i] == '{' or paren_string[i] == '[':\n            result.append(depth)\n        else:\n            break\n    return result"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n       \n    Args:\n    strings (List[str]): Input list of strings to filter\n    substring (str): String to search for in each string of the input list\n    \n    Returns:\n    List[str]: Output list of strings containing the searched substring\n        \n    Example:\n    ```\n    filter_by_substring([['hello', 'world'], ['goodbye', 'world']], 'world')\n    ['hello world']\n    ```"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]):\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    :param numbers: A list of integers\n    :return: A tuple containing the sum and product of the input list\n    :rtype: Tuple[int, int]\n    \"\"\"\n    "}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_num = None\n    current_max = None\n    result = []\n    for num in numbers:\n        if current_max is None or num > current_max:\n            current_max = num\n        else:\n            if num > max_num:\n                result.append(current_max)\n                max_num = num\n            else:\n                result.append(current_max)\n    return result[:len(result) - 1] # remove last element since it's already max"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string):\n    \"\"\"Test if given string is a palindrome\"\"\"\n    return string == string[::-1]\n    \ndef make_palindrome(string):\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\"\"\"\n    # Define the length of the input string\n    n = len(string)\n    \n    # Loop through all possible strings of length n+1\n    for i in range(n + 2):\n        for j in range(i, n + 1):\n            # Check if the current substring is a palindrome\n            if string[j] > string[-j]:\n                continue\n            \n            # If it is, append it and reverse it to get the desired result\n            palindrome = string[:j].reverse() + string[j:]\n            palindrome += string[0]\n            palindrome += string[1]\n            palindrome += string[2]\n            palindrome += string[3]\n            palindrome += string[4]\n            palindrome += string[5]\n            palindrome += string[6]\n            palindrome += string[7]\n        \n            # Return the resulting palindrome\n            return palindrome"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \n    :param a: str\n    :param b: str\n    :return: str\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            continue\n        else:\n            result += a[i]\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n    Parameters:\n        strings (List[str]): The list of strings to check for the longest one.\n        \n    Returns:\n        str or None: The longest string in the list, or None if the list is empty.\n    \"\"\"\n    longest_string = ''\n    max_length = 0\n    for s in strings:\n        if len(s) > max_length:\n            longest_string = s\n            max_length = len(s)\n    if len(strings) == 0:\n        return None\n    elif len(strings) == 1 and len(longest_string) == len(strings[0]):\n        return longest_string\n    else:\n        return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    return max(a, b) / gcd(a, b)"}
{"task_id": "HumanEval/14", "completion": "def find_all_prefixes(string):\n        # Find all possible prefixes of the input string\n        prefixes = []\n        for i in range(1, len(string)):\n            if string[i] == string[i+1]:\n                continue\n            else:\n                break\n            prefixes.append(string[:i])\n        return prefixes\n        \n        # Convert the prefixes to a list and return it\n        return list(find_all_prefixes(string))\n    \n    return find_all_prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n):\n    return '0' + '-'*(n+1)+'0'"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    # Create a set to store unique characters\n    charSet = set()\n    # Iterate over each character in the string and add it to the set\n    for char in string:\n        if char.isalpha():\n            charSet.add(char)\n    # Return the number of elements in the set\n    return len(charSet)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n        else:\n            beats.append(0)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i] == substring[0]:\n            count += 1\n            for j in range(1, len(substring)):\n                if string[i+j] == substring[j]:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    "}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\"\"\"\n    \n    min_diff = float('inf')\n    result = None\n    \n    for i in range(len(numbers)):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    \n    return result"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \n    Args:\n        numbers (List[float]): The input list of numbers\n        \n    Returns:\n        List[float]: The transformed output list of numbers\n    \"\"\"\n    return [x * 2 for x in numbers if x > 0 else x for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    "}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\"Return length of given string\n    ```\n    if string == '':\n        return 0\n    elif len(string) < 1:\n        return 0\n    else:\n        return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    divisors = [2]\n    for i in range(3, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return max(divisors)"}
{"task_id": "HumanEval/25", "completion": "def factorize(n):\n    if n < 1:\n        return []\n    factors = []\n    for i in range(1, n+1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    "}
{"task_id": "HumanEval/27", "completion": "def flip_case(string):\n    return string.upper() + string.lower()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate list of strings into a single string\n    \n    Parameters:\n        strings (List[str]): A list of strings to concatenate\n    \n    Returns:\n        str: The concatenated string\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    ```\n    from typing import List\n    \n    def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n        \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n        \n        Args:\n            strings (List[str]): The input list of strings to filter.\n            prefix (str): The prefix string to match against.\n            \n        Returns:\n            List[str]: A filtered list of strings that start with the given prefix.\n    \"\"\"\n        return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    \n    Notes: This function checks whether a given integer is divisible by any of its digits when multiplied by the sum of its digits. If it is, then it's not prime. Otherwise, it's prime.\n    \n    Parameters: n (integer)\n    \n    Returns: boolean\n    \n    Examples:\n        is_prime(6) = False\n        is_prime(101) = True\n        is_prime(11) = True\n        is_prime(13441) = True\n        is_prime(61) = True\n        is_prime(4) = False\n        is_prime(1) = False\n    \"\"\""}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float) -> float:\n    \"\"\"Evaluates polynomial with coefficients xs at point x.\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list) -> float:\n    \"\"\"xs are coefficients of a polynomial.\n    Finds x such that poly(x) = 0.\n    Returns only one zero point, even if there are many.\n    Moreover, finds only zero point, even if there are many.\n    This function takes a list xs having an even number of coefficients\n    and the largest nonzero coefficient as input to guarantee\n    a solution exists.\n    Return value is rounded off to two decimal places.\n    \"\"\"\n    n = len(set(range(len(xs)))))\n    if n % 2!= 0 or set(map(abs, xs)).count(0) > 1:\n        raise ValueError(\"No real root found.\")\n    else:\n        for k in range(int((n + 1) / 2)):\n            x = (k + 1) / 2\n            if poly(xs, x):\n                return x"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list) -> list:\n    l_sorted = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_sorted.append(l[i])\n    for j in range(len(l)):\n        if j % 3!= 0:\n            l_sorted.append(l[j])\n    return l_sorted"}
{"task_id": "HumanEval/34", "completion": "def unique(lst):\n    return sorted(set(lst))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n):\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    return sorted(l)[::2]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    encodes a given string by cycling groups of three characters.\n    \n    Returns: an encoded string\n    \"\"\"\n    groups = []\n    remaining_length = len(s)\n    for i in range((remaining_length + 2) // 3):\n        start = 0\n        end = min(start + 3, remaining_length)\n        groups.append(s[start:end])\n        remaining_length -= 9\n    groups[-1] += groups[0] if len(groups) == 2 else groups[0]\n    return \"\".join(groups)\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    decodes an input string encoded with encode_cyclic function.\n    \n    Returns: the original string\n    \"\"\"\n    encoded_str = s\n    groups = []\n    for char in encoded_str:\n        if char!= '':\n            groups.append(char)\n    return \"\".join([groups[i] for i in range(3)][::-1]).strip()"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n):\n    if n < 0:\n        raise ValueError(\"N must be positive\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        fib = [1, 1]\n        for i in range(2, n+1):\n            fib.append(fib[i-1] + fib[i-2])\n        while True:\n            num = next((x > n for x in primes if x <= n), n + 1)\n            if all(num % i!= 0 for i in range(2, num)):\n                return num"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    for i in range(len(l)):\n        if l[i] + l[-1-i] == l[-2-i]:\n            return False\n    return True"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    # Assume n is positive integer\n    return sum([1 for _ in range(n)])"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    for i in l:\n        l.append(i + 1)\n    return l"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    Returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \n    Parameters:\n        l (list): A list of integers.\n    \n    Returns:\n        bool: Whether there are two distinct elements in the list that\n        sum to zero or not.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            if l[j] == l[-1]:\n                continue\n            if l[i] + l[j]!= 0 and l[i]!= l[j]:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if base < 10:\n        return \"invalid base\"\n    elif x > 9:\n        return f\"{x}0\"\n    else:\n        return f\"{x}s\""}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"\n    Given length of a side and height return area for a triangle.\n    :param a: int\n    :param h: int\n    :return: float\n    \"\"\"\n    return (1/2)*h*(a/10)+(1/4)*a**2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "def median(lst: List[float]) -> float:\n    n = len(lst) // 2\n    if len(lst) % 2 == 0:\n        return (lst[-1] + lst[0]) / 2\n    else:\n        return (lst[-1] - lst[0]) / 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \n    Returns True if string is a palindrome, False otherwise\n    \n    Parameters:\n        text (str): The string to check for palindromicity\n    \n    Example:\n        is_palindrome('') -> True\n        is_palindrome('aba') -> True\n        is_palindrome('aaaaa') -> True\n        is_palindrome('zbcd') -> False\n    \"\"\""}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n        \n        n: integer, the number to be modulated\n        p: integer, the modulus\n        \n        Returns: integer, the result of the modulation\n    \"\"\"\n    return pow(2, n, mod=p)"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n    \"\"\"\n    encodes a given string by shifting each character by 5 places in the alphabet.\n    Returns an encoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    decodes an input string encoded with `encode_shift` function.\n    Returns the original unencoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    return text"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return len(filter(lambda x: x < t, l)) == len(l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \n    Returns:\n    boolean\n    \"\"\"\n    return len(set(s0)) == len(set(s1)) and set(s0).intersection(set(s1))"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 1:\n        return n * 1 + 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<<\")\n    True\n    >>> correct_bracketing(\"><>\"))\n    False\n    ```"}
{"task_id": "HumanEval/57", "completion": "def monotonic(lst):\n    for i in range(len(lst)):\n        if lst[i] < lst[i+1]:\n            return False\n    else:\n        return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> List[int]:\n    return list(set(l1).intersection(set(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    if n < 2:\n        return n + 1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0 or n % (i+2) == 0:\n            continue\n        else:\n            break\n    prime = i\n    while n // prime!= 0:\n        prime += 1\n    return prime"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    Return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\""}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list) -> list:\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    return [f\"{x}*\"*xs[i]+\"{xs[i]}**\" for i in range(len(xs)) if len(set([i+j*xs[i] for j in range(len(xs))])) == len(range(len(xs))) else None]*xs[-1]/((xs[0] + xs[1]*x + xs[2]*x**2 +...)*xs[-1])"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    if n < 0:\n        raise ValueError(\"Must take positive integer values\")\n    elif n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    count = 0\n    for char in s:\n        if char == 'a':\n            count += 1\n        elif char == 'e':\n            count += 1\n        elif char == 'i':\n            count += 1\n        elif char == 'o':\n            count += 1\n        elif char == 'u':\n            count += 1\n        elif char == 'y' and len(s) > 1 and s[-1]!= 'b':\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    if len(str(x)) < shift:\n        return str(x)[::-1]\n    else:\n        return str(x) + str(x)[::-1]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum([int(c) for c in s if ord(c) >= 65])"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    if s == \"\":\n        return \"Please enter a value for the number of apples\"\n    elif n < 0:\n        return \"The total number of fruits cannot be negative.\"\n    else:\n        return int((n / 4) * 2 + (n % 4)) - ((s // 4) * 2 + (s % 4))"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if len(arr) < 1:\n        return []\n    elif len(arr) == 1:\n        return [arr[0]]\n    else:\n        smallest = arr[-1]\n        for i in range(len(arr)):\n            if arr[i] % 2 == 0:\n                if smallest > arr[i]:\n                    smallest = arr[i]\n                else:\n                    break\n        return [smallest, i+1]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_frequency = 0\n    max_value = 0\n    \n    for num in lst:\n        if num > 0:\n            freq = len(lst[num])\n            if freq >= num:\n                max_frequency = num\n                max_value = num\n            \n    if max_frequency == 0:\n        return -1\n    else:\n        return max_value"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    lst_sorted = sorted(lst, reverse=True)[:-1] + sorted(lst, reverse=False)[0:]\n    return lst_sorted"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    \"\"\"\n    Returns the area of a triangle given its three sides, rounded to 2 decimal points.\n    \n    If the three sides do not form a valid triangle, returns -1.\n    \n    A valid triangle has sides that satisfy the inequality a + b > c.\n    \n    Parameters:\n        a (int): The length of the first side of the triangle.\n        b (int): The length of the second side of the triangle.\n        c (int): The length of the third side of the triangle.\n        \n    Returns:\n        float: The area of the triangle, rounded to 2 decimal points.\n    \"\"\"\n    # Check if the three sides form a valid triangle\n    if a + b > c or b + c > a or c + a > b:\n        return -1\n    \n    # Calculate the area of the triangle\n    area = (b * c / 2) + (a * sqrt(c**2 - b**2))\n    \n    # Round the area to 2 decimal points\n    area = round(area, 2)\n    \n    return area"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    \"\"\"\n    Check if an object q will fly by checking if it's balanced and the sum of its elements is less than or equal to the maximum possible weight w.\n    \n    Parameters:\n        q (list): An object to check\n        w (int): Maximum possible weight\n        \n    Returns:\n        bool: True if q will fly, False otherwise\n    \"\"\"\n    return q[-1] == q[0] and len(set(sum([int(x) for x in q])) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    min_changes = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[-i - 1]:\n            return min_changes + 1\n        elif arr[i] < arr[-i - 1]:\n            left = [x for x in arr if x!= arr[i][::-1]]\n            right = [x for x in arr if x!= arr[i][::i+1]]\n            if len(left) >= len(right):\n                return min_changes + 1\n            else:\n                return min_changes\n    return 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    num_chars = sum(len(s) for s in lst1 + lst2)\n    if len(lst1)!= len(lst2):\n        return lst1\n    elif num_chars < len(lst2):\n        return lst1[:num_chars] + lst2\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"\n    Checks if the given number is the multiplication of 3 prime numbers\n    and returns True or False accordingly.\n    Parameters:\n        a (int): The number to check.\n    Returns:\n        bool: True or False depending on the number's multiplicity.\n    Notes:\n        - This function assumes that the input number is less than 100.\n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\n    num = a % 10 + 1\n    for i in range(7, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"Returns True if `x` is a simple power of `n`, False otherwise.\n    \n    `x` is a simple power of `n` if `n^int = x`.\n    \n    Examples:\n    - is_simple_power(1, 4) == True\n    - is_simple_power(2, 2) == True\n    - is_simple_power(8, 2) == True\n    - is_simple_power(3, 2) == False\n    - is_simple_power(3, 1) == False\n    - is_simple_power(5, 3) == False\n    \"\"\"\n    return n**int == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    \"\"\"\n    This function checks whether a given integer is a cube or not.\n    \n    Parameters:\n        a (int): The integer to check.\n    \n    Returns:\n        bool: True if the integer is a cube, False otherwise.\n    \"\"\"\n    return a > 1 and int(a**0.5) == a and a % 1 == 0"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for digit in num.split():\n        if int(digit) > 1 and all(i <= 6 for i in range(1, int(digit**0.5)+1)) and str(int(digit)).isdigit() == len(str(int(digit))) == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    db = \"db\"\n    binary = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary += str(remainder).zfill(8) + \"0\"\n        decimal //= 2\n    return f\"{binary} {db}\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    # Check if length of string is at least 3\n    if len(s) < 3:\n        return False\n    \n    # Initialize variables for checking consecutive letters\n    count = 0\n    prev_letter = None\n    \n    # Loop through each character in the string\n    for char in s:\n        # If current letter is different from previous two, mark as happy\n        if char!= prev_letter:\n            count += 1\n            prev_letter = char\n            if count >= 3:\n                return True\n            else:\n                break\n    \n    # If all characters have been checked without finding three distinct ones, return False\n    return False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        else:\n            letter_grades.append('D-')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    # check if length of string is divisible by any number between 2 and string.index(\" \") + 1\n    for i in range(2, len(string)+1):\n        if string[i] =='':\n            continue\n        elif i % i!= 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if str(i).startswith('1'):\n            count += 1\n    print(\"The number of n-digit positive integers starting or ending with 1 is\", count)"}
{"task_id": "HumanEval/84", "completion": "def solve(n):\n    # Get the sum of digits in binary for each digit from 1 to n\n    digits_sum = [0] * (n+1)\n    for i in range(1, n+1):\n        digits_sum[i] = int('' + str(i))\n    \n    # Combine all digits into one binary number\n    binary_num = ''.join([str(digit) for digit in digits_sum])\n    \n    # Return the result\n    return binary_num"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"Given a non-empty list of integers lst. Add the even elements that are at odd indices.\"\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 0:\n            lst[i], lst[-1 - i] = lst[-1 - i], lst[i]\n    return lst"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # Split the input string into list of words\n    words = s.split()\n    \n    # Sort each word in ascending order based on ASCII value\n    sorted_words = [sorted(word) for word in words]\n    \n    # Join the sorted words back into a string\n    shuffled =''.join([word for word in sorted_words])\n    \n    return shuffled"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    # Find indices of all rows containing x\n    idx = [i for i, _ in enumerate(lst) if x in _][::-1].index(x) + 1\n    # Create empty list to store sorted coordinates\n    coords = []\n    # Sort rows by columns in descending order\n    for r in range(len(idx)):\n        cols = len(lst[idx[r]])\n        cols = max(cols, cols[:-1])\n        for c in range(cols):\n            for d in range(c, cols):\n                for r in range(len(lst)):\n                    if lst[r][d] > lst[r][d+1]:\n                        break\n                else:\n                    coords.append((r, d))\n    # Return list of tuples of coordinates\n    return coords"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \n    Note:\n    * don't change the given array.\n        \n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\ndef sort_array(array):\n    # create a new list to hold the sorted elements\n    sorted_list = []\n    \n    # iterate through the original list and append each element to the sorted list\n    for i in range(len(array)):\n        if array[i] > array[i]:\n            # if the current element is greater than the previous one, swap them\n            temp = array[i]\n            array[i] = array[i - 1]\n            array[i - 1] = temp\n        else:\n            # otherwise, append the current element to the sorted list\n            sorted_list.append(array[i])\n    \n    # return the sorted list\n    return sorted_list"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    return s[0] + s[-1] + \"l\" + s[1] + \"m\" + s[-2] + \"e\" + s[-3] + \"w\" + s[-4] + \"h\" + s[-5] + \"k\" + s[-6] + \"n\" + s[-7] + \"o\" + s[-8] + \"p\" + s[-9] + \"t\" + s[-10] + \"a\" + s[-11] + \"r\" + s[-12] + \"d\" + s[-13] + \"f\" + s[-14] + \"b\" + s[-15] + \"y\""}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    min_val = float('inf')\n    for num in lst:\n        if num < min_val:\n            min_val = num\n    return min_val"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    num_boredoms = 0\n    for i in range(len(S)):\n        if S[i] == 'I':\n            for j in range(i+1, len(S)+1):\n                if S[j] == '.' or S[j] == '!' or S[j] == '?':\n                    break\n            else:\n                num_boredoms += 1\n    return num_boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    \"\"\"\n    Creates a function that takes three numbers.\n    Returns True if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns False otherwise.\n    \n    Example usage:\n    any_int(5, 2, 7) -> True\n    \n    example usage:\n    any_int(3, -2, 1) -> True\n    \n    example usage:\n    any_int(3.6, -2.2, 2) -> False\n    \"\"\""}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    # Define a list of tuples containing the original word and its replaced version\n    encoded_words = [(\"love\", \"Luv\"), (\"hate\", \"HatE\"), (\"time\", \"Tim\"), (\"life\", \"Liv\")]\n    \n    # Loop through each character in the message\n    for i in range(len(message)):\n        # Check if the current character is a vowel\n        if message[i] in ['a', 'e', 'i', 'o', 'u']:\n            # Find the index of the vowel in the alphabet\n            vowel_index = ord(message[i]) - 13 + 26\n            \n            # Replace the vowel with the corresponding consonant\n            new_char = chr(vowel_index)\n            message = message[:i] + new_char + message[i+1:]\n        \n    return message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    max_prime = None\n    total_digits = 0\n    \n    for num in lst:\n        if isinstance(num, int) and num > 1:\n            for i in range(len(str(num))+1):\n                digit = ord(str(num)[i]) - ord('0') + 1\n                if num % 2 == 0:\n                    digit *= 2\n                elif num % 3 == 0:\n                    digit *= 3\n                else:\n                    break\n            if num >= 11 and num <= 19:\n                break\n        elif isinstance(num, str) and len(num) > 0:\n            total_digits += len(num)\n            max_prime = max(max_prime, int(num))\n    \n    if max_prime is None or total_digits < 1:\n        return \"Error: invalid input\"\n    else:\n        return max_prime + total_digits"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Checks if all keys of a dictionary are either strings in lower case or strings in upper case.\n    \n    Returns True if all keys are so and False otherwise. Empty dictionaries are also checked for False.\n    \n    Parameters:\n    dict - Dictionary to be checked\n    \n    Returns:\n    Boolean value indicating success/failure\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    elif len(dict) == 1:\n        key = dict.keys()[0]\n        if key!= '':\n            return False\n    else:\n        for key in dict.keys():\n            if not isinstance(key, str) or not key.lower().isalpha():\n                return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = [2, 3] # start with these two prime numbers\n    while len(primes) < n:\n        is_prime = True\n        for i in range(4, int(n**0.5)+1):\n            if n % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes[:n]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    result = 1\n    while a > 0 and b > 0:\n        if a % 10 == 0 or b % 10 == 0:\n            result *= 10\n        else:\n            result += 10\n        a //= 10\n        b //= 10\n    return result"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    num_vowels = sum([1 for char in s if ord(char) > 64 and chr(ord(char)).isupper()])\n    return num_vowels // 2 == 0 or num_vowels // 2!= 0"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    \"\"\"\n    Creates a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    Examples:\n        >> closest_integer(\"10\")\n        10\n        >> closest_integer(\"15.3\")\n        15\n    Note:\n        Rounding away from zero means that if the given number is equidistant\n        from two integers, the one you should return is the one that is the\n        farthest from zero. For example closest_integer(\"14.5\") should\n        return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    try:\n        num = float(value)\n        nearest = int((num + 0.5) * 2)\n        distance = abs(num - nearest)\n        if distance == 0:\n            return nearest\n        elif distance > 0:\n            return nearest + 1\n        else:\n            return nearest - 1\n    except ValueError:\n        return None"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    # create empty lists for each level\n    levels = [[0]*(n+1) for _ in range(n+1)]\n    \n    # determine number of stones for each level based on n's parity\n    if n % 2 == 0:\n        levels[0][0] = 1\n        levels[0][1:] += 1\n    else:\n        levels[0][0] = 1\n        levels[0][1:] += 3\n    \n    # fill remaining levels with consecutive numbers starting from 1\n    for i in range(n+1):\n        for j in range(i+2, n+2, 2):\n            levels[i].append(j)\n    \n    return levels"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return x // 2\n    else:\n        return y // 2"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        binary_answer = bin(int(avg))[2:]\n        return binary_answer"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    # Create an empty set to store unique digits\n    unique_digits_set = set()\n    \n    # Loop through each element in the input list\n    for num in x:\n        # Check if the current number has any even digits\n        if sum(num % i == 0 for i in range(2, num)):\n            # If it does, add it to the set and break out of the loop\n            unique_digits_set.add(num)\n            break\n        \n    # Sort the set in ascending order\n    unique_digits_set_sorted = sorted(unique_digits_set)\n    \n    # Return the sorted list of unique digits\n    return unique_digits_set_sorted"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Define a list of names for numbers\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    \n    # Sort the array based on length\n    sorted_nums = sorted([n[0] for n in arr if len(n) == 1])\n    \n    # Reverse the order of the sorted array\n    reversed_sorted_nums = sorted_nums[::-1]\n    \n    # Replace each number with its corresponding name\n    result = \"\"\n    for i in range(len(reversed_sorted_nums)):\n        result += nums[reversed_sorted_nums[i]] + \" \"\n    \n    return result.strip()"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i*i)\n        else:\n            result.append(sum(range(1, i)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    if n < 1 or n > 10**3:\n        raise ValueError(\"n must be between 1 and 10**3\")\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n    if n % 2 == 0:\n        return (count // 2, count - 1)\n    else:\n        return (count // 2, count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    nums = [int(n) for n in arr]\n    total = sum(nums)\n    return len([n for n in nums if abs(n) > 0])"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"\n    We have an array `arr` of N integers `arr[1], arr[2],..., arr[N]`.\n    The numbers in the array will be randomly ordered. Your task is to determine\n    if it is possible to get an array sorted in non-decreasing order by\n    performing the following operation on the given array:\n        \n    You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved\n    to the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above\n    operation then return `True` else return `False`.\n    \n    If the given array is empty then return `True`.\n    \n    Note: The given list is guaranteed to have unique elements.\n    \n    For Example:\n    \n    `move_one_ball([3, 4, 5, 1, 2])` => `True`\n    \n    Explanation: By performing 2 right shift operations, non-decreasing order can\n            be achieved for the given array.\n    \n    `move_one_ball([3, 5, 4, 1, 2])` => `False`\n    \n    Explanation: It is not possible to get non-decreasing order for the given\n            array by performing any number of right shift operations.\n            \n    \"\"\""}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if len(set(lst1)) == len(set(lst2)):\n        for i in range(len(lst1)):\n            if lst1[i] % 2!= 0 or lst2[i] % 2!= 0:\n                continue\n            j = int(lst1[i]/2)\n            k = int(lst2[i]/2)\n            while j + k!= 0 and k <= len(lst2):\n                lst1[i], lst2[k] = lst2[k], lst1[i]\n                j += 2\n                i += 1\n            if j == 0:\n                return \"NO\"\n            elif j > len(lst2):\n                return \"NO\"\n            else:\n                return \"YES\"\n    else:\n        print(\"Error: The input lists must be non-empty.\")\n        return None"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if test:\n        count = len(test)\n        freq = dict()\n        for char in test:\n            if char in freq:\n                freq[char] += 1\n            else:\n                freq[char] = 1\n        max_freq = max(freq.values())\n        result = {char: count - sum(freq.values()) + max_freq for char in freq}\n        return result\n    else:\n        return {}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    result = \"\"\n    for char in s:\n        if char in c:\n            result += char\n    if len(result) % 2 == 0:\n        result = result[::]\n    else:\n        result = result[:-1]\n    return result, False"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \n    >>> odd_count(['1234567'])\n    ['the number of odd elements 4n the str4ng 4 of the 4nput.']\n    >>> odd_count(['3', '11111111'])\n    ['the number of odd elements 1n the str1ng 1 of the 1nput.,'\n     'the number of odd elements 8n the str8ng 8 of the 8nput.]'\n    \"\"\"\ndef odd_count(lst):\n    count = 0\n    for num in lst:\n        if len(num) % 2 == 0:\n            count += 1\n    return [f\"{i}n the {str(len(lst))+0*len(lst)} of the input.\" for i in range(count)]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Return value: int\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    "}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # Define a helper function to check if there's at least one way to fill a well\n    def can_fill_well(row):\n        for i in range(len(row)):\n            if row[i] == 1:\n                return True\n            elif len(set([i])) < len(set([i+1])):\n                return True\n        return False\n        \n    # Check constraints\n    if len(grid)!= len(grid[0]) + len(grid[-1]):\n        raise ValueError(\"all wells have the same length\")\n    if len(grid[:,0])!= len(grid[:,1]) or len(grid[:,0]) > 10**2:\n        raise ValueError(\"all rows have the same length\")\n    if len(grid[0])!= len(grid[-1]) or len(grid[0]) > 10**2:\n        raise ValueError(\"all columns have the same length\")\n    if capacity % 2!= 0:\n        raise ValueError(\"bucket capacity must be even\")\n    if capacity >= len(grid):\n        raise ValueError(\"bucket capacity cannot exceed total number of units\")\n    \n    # Find maximum number of fills using dynamic programming\n    n = len(grid)\n    m = len(grid[0])\n    max_fills = [0] * n\n    max_fills[0] = 1\n    for k in range(n - 1):\n        for l in range(m - 1):\n            if can_fill_well(grid[l][k]):\n                max_fills[k + 1] = max(max_fills[k], max_fills[k + 1]) + 1\n    return max_fills[n - 1]"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    sorted_arr = sorted(arr)\n    return sorted_arr\n    "}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if len(s) == 0:\n        return []\n    else:\n        words = s.split()\n        result = []\n        for word in words:\n            count = sum(word.count('C') + word.count('N'))\n            if count == n:\n                result.append(word)\n        return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    # Define a list of vowels\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    # Loop through each character in the word\n    for i in range(len(word)):\n        # Check if current character is a vowel\n        if word[i] in vowels:\n            # If so, check which vowel is closer to next consonant\n            for j in range(i+1, len(word)+1):\n                if word[j] == '':\n                    return word[:i] + vowels[0] + word[i+1:]\n                elif word[j] in vowels:\n                    candidates = [candidates, word[j]]\n                    break\n            else:\n                candidates = [candidates, word[j]]\n        \n    # If no vowel found, return empty string\n    return ''"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    \"\"\"\n    Given a list of two strings, both consisting of either left parenthesis or right parenthesis, determine whether it is possible to concatenate them in some order such that the resulting string is valid. If so, return \"Yes\", else return \"No\".\n    \n    Example inputs:\n        ['()'] returns 'Yes'\n        ['(()'] returns 'Yes'\n        \n    Example outputs:\n       'match_parens([')'] returns 'No'\n       'match_parens([(']) returns 'No'\n    \"\"\"\n    # base case: if len(lst) <= 1, we can concatenate immediately\n    if len(lst) <= 1:\n        return 'Yes'\n    \n    # recursively check each sublist\n    for s in lst:\n        if ')' in s and '(' in s:\n            # concatenation is possible!\n            return 'Yes'\n        elif '(' in s and not s.endswith(')'):\n            # concatenation is possible!\n            return 'Yes'\n        else:\n            # no concatenation possible\n            return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    max_nums = []\n    for num in arr:\n        if num > 0:\n            max_nums.append(num)\n    for i in range(k):\n        remaining_nums = arr[:i] + arr[i+1:]\n        max_nums += remaining_nums\n    return max_nums"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    total = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i < len(lst)/2:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    if k > len(arr):\n        raise ValueError(\"k must be less or equal to length of arr\")\n    \n    sum = 0\n    for i in range(k):\n        while len(arr) > 0:\n            sum += ord(arr[0])\n            arr = arr[:1]\n        break\n            \n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    if n % 2 == 0:\n        return [n] + [i for i in range(2*n+1)]\n    else:\n        return [n] + [i for i in range(n+1)] + [3*(i+1)+1 for i in range(2*n+1)]"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n        1. The date string is not empty.\n        2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n        3. The months should not be less than 1 or higher than 12.\n        4. The date should be in the format: mm-dd-yyyy\n    for example: \n        valid_date('03-11-2000') => True\n        \n        valid_date('15-01-2012') => False\n        \n        valid_date('04-0-2040') => False\n        \n        valid_date('06-04-2020') => True\n        \n        valid_date('06/04/2020') => False\n    \"\"\"\n    month = int(date[0])\n    day = int(date[1])\n    year = int(date[2])\n    if month < 1 or month > 12:\n        return False\n    elif day < 1 or day > 31:\n        return False\n    elif year < 2020 or year > 2021:\n        return False\n    elif day!= month * 30 + (year % 4 == 0 and 0 else 42):\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    # Split on whitespace or comma\n    words = txt.split()\n    \n    # Count lower-case letters with odd order in the alphabet\n    count = sum([ord(c) % 2!= 0 for c in words])\n    \n    return words, count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    \n    Examples\n    is_sorted([5]) -> True\n    is_sorted([1, 2, 3, 4, 5]) -> True\n    is_sorted([1, 3, 2, 4, 5]) -> False\n    is_sorted([1, 2, 3, 4, 5, 6]) -> True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) -> True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) -> False\n    is_sorted([1, 2, 2, 3, 3, 4]) -> True\n    is_sorted([1, 2, 2, 2, 3, 4]) -> False\n    \"\"\""}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if interval1[0] > interval1[-1]:\n        raise ValueError(\"The first interval should have start < end.\")\n    if interval2[0] > interval2[-1]:\n        raise ValueError(\"The second interval should have start < end.\")\n    for i in range(len(interval1)):\n        if interval1[i+1] - interval1[i]!= interval2[i+1] - interval2[i]:\n            raise ValueError(\"The two intervals must have the same width.\")\n    for i in range(len(interval1)):\n        if interval1[i+1] == interval2[i+1]:\n            continue\n        else:\n            break\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) > 0:\n        result = 1\n        for num in arr:\n            sign = num % 2 == 0\n            if sign == '+':\n                result *= num ** 2\n            elif sign == '-':\n                result *= (-num) ** 2\n            else:\n                result *= num ** 2\n        return result\n    else:\n        return None"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # Create a dictionary to store the values on the cells\n    vals = {cell: 0 for cell in grid}\n    \n    def dfs(row, col, paths=[]):\n        # Find all the neighbors of the current cell\n        nbrs = [(0, 1), (1, -1), (-1, 0), (0, -1)]\n        for d in nbrs:\n            r, c = row + d, col + d\n            if r >= 1 and r <= len(grid) and c >= 1 and c <= len(grid[0]) and \\\n            (c == len(grid) or (r, c) in grid and grid[(r, c)] > 0):\n                # Visit the neighbor cell\n                vals[nbrs[d]] += 1\n                paths.append((row, col))\n                dfs(row, col+1, paths)\n                dfs(row+1, col, paths)\n                dfs(row, col-1, paths)\n                dfs(row+1, col-1, paths)\n        \n    # Initialize the shortest path found so far\n    shortest = []\n    \n    # Recursive DFS starting from the top left corner\n    dfs(0, 0, shortest + [])\n    \n    # Sort the paths by their lengths\n    shortest = sorted([shortest], key=len)\n    \n    # Get the first path of length k\n    return shortest[:k]\n    \n    # Example usage\n    print(minPath([[1,2,3],[4,5,6]], 3)) # Output: [[1, 2, 1]]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n < 0:\n        raise ValueError(\"Must provide a non-negative integer\")\n    \n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        seq = [1, 1]\n        \n        for i in range(2, n+1):\n            if n % 2 == 0:\n                seq.append(i)\n            else:\n                seq += [tri(n//2)] * (n - 2) + [i]\n                \n        return seq[:n]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            continue\n        product *= i\n    if n % 2 == 0:\n        return 0\n    else:\n        return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    # Check if the input string contains only square brackets\n    if '[' in string and ']' in string:\n        # Split the string into a list of substrings\n        substrings = string.split(' ')\n        \n        # Loop through each substring and check if it has a nested bracket\n        for substring in substrings:\n            if '[' in substring and ']' in substring:\n                index = substring.index('[')\n                length = substring.index(']') + 1\n                nested = substring[:length]\n                if len([subsubstring for subsubstring in substrings if subsubstring == nested]) > 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    squares = [num**2 for num in lst]\n    rounded_sum = sum([int(round(num)) for num in squares])\n    return rounded_sum"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Checks if the last character of a given string is an alphabetical character and is not part of a word.\n    \n    Returns: True or False\n    \n    Parameters:\n    txt (str): The input string to check.\n    \n    Notes:\n    This function assumes that words are separated by spaces.\n    \n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") -> False\n    check_if_last_char_is_a_letter(\"apple pi e\") -> True\n    check_if_last_char_is_a_letter(\"apple pi e \") -> False\n    check_if_last_char_is_a_letter(\"\") -> False\n    \"\"\""}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if lst:\n        n = len(lst)\n        numbers = [int(num) for num in lst]\n        negatives = [num for num in lst if num < 0]\n        positives = [num for num in lst if num >= 0]\n        if n > 1:\n            smallest = min(positives + negatives)\n            largest = max(positives - negatives)\n        else:\n            smallest = None\n        largest = None\n        if negatives:\n            smallest = int(smallest * (-n))\n        if positives:\n            largest = int(largest * n)\n        return smallest, largest\n    else:\n        return None, None"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return a > b or (a == b and isinstance(a, str) and isinstance(b, str) and a!= b)\n    elif isinstance(a, str) and isinstance(b, str):\n        return a + \"\" > b + \"\" or a + \"0\" > b + \"0\"\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 2!= 0:\n        return False\n    for i in range(1, int(n/2)+1):\n        if n % i == 0 and i <= 4:\n            return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"\")\n    text += \"_\"\n    # If a string has more than 2 consecutive spaces, replace them with hyphens\n    while len(re.findall('[ ]', text)) > 1:\n        text = text[:len(text)-1] + \"-\" + text[-1]\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"Check if a file's name is valid or not.\"\"\"\n    if len(file_name) > 3 or len(file_name) < 4:\n        return \"No\"\n    elif file_name[0].isalpha() and len(file_name) == 4 and file_name!= \".\":\n        return \"No\"\n    else:\n        for i in range(len(file_name)):\n            if i + 1 <= 26 and file_name[i] >= 'a' and file_name[i] <= 'z':\n                continue\n            elif i + 1 <= 27 and file_name[i] >= 'A' and file_name[i] <= 'Z':\n                continue\n            else:\n                return \"No\"\n        extension = file_name[-3:]\n        if extension in [\"txt\", \"exe\", \"dll\"]:\n            return \"Yes\"\n        else:\n            return \"No\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i!= 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    # split sentence into words\n    words = sentence.split()\n    \n    # find all prime numbers between 2 and length of words\n    primes = [i for i in range(2, len(words)) if words[i].isdigit() and int(words[i]) > 1]\n    \n    # create output string\n    output = \"\"\n    for word in words:\n        for prime in primes:\n            if word.isdigit():\n                break\n        else:\n            prime += 1\n        while prime < len(words):\n            output += words[prime] + \" \"\n        prime -= 1\n    \n    return output.strip()"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    if int(n*x) == n*int(x):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    sorted_list = sorted(nums)\n    return [str(sum(int(digit))) for digit in nums and digit > 0]"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and num // 10 %% 2 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \n    If there are no such triples, return 0.\n        \n    Example:\n    n = 5\n    Output: 1\n    Explanation:\n    a = [1, 3, 7, 13, 21]\n    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # initialize a as an empty list\n    a = []\n    \n    # loop through all values of i from 1 to n/2\n    for i in range(1, int(n/2)+1):\n        # check if i*i+1 <= n\n        if i*(i+1) + n >= 9*3:\n            # find all possible values of j and k such that i<j<k<=n/2\n            j = i + 1\n            while j <= n/2:\n                k = j + 1\n                while k <= n/2:\n                    if i + j + k == n or (i + j + k - n) % 3!= 0:\n                        continue\n                for _ in range(i, k+1):\n                    if _ + _ + _ > n:\n                        break\n                else:\n                    a.append((j, k))\n                    break\n            # count the number of triples\n            count = 0\n            for _ in range(i, n+1):\n                if _ + _ + _ == 3*i:\n                    count += 1\n            return count\n    return 0"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    # Define the list of planets\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if planet1 and planet2 are valid planet names\n    if planet1!= \"Jupiter\" and planet1!= \"Neptune\":\n        return()\n    if planet2!= \"Jupiter\" and planet2!= \"Neptune\":\n        return()\n    \n    # Create a dictionary to store the positions of the planets\n    pos_dict = {}\n    \n    # Loop through each planet and find its position\n    for i in range(len(planets)):\n        pos_dict[i] = {\"name\": planets[i], \"pos\": []}\n        \n    # Find the position of the first planet\n    pos_list = [{\"name\": planet1, \"pos\": []}]\n    pos_dict[0][{...}].update({\"pos\": [pos_list]})\n    \n    # Sort the planets by their distance from the sun\n    sort_key = lambda x: x[\"pos\"][0][\"distance\"]\n    sorted_planets = sorted([pos_dict.values() for pos_dict in pos_dict.copy().items()])\n    \n    # Return the sorted list of planets\n    return sorted_planets"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Remove odd-length strings from the list\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the remaining strings by length\n    lst = sorted([word for word in lst if len(word) % 2!= 0])\n    \n    return lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n    elif n % 2!= 0 or n > 3:\n        return None\n    else:\n        return x if x % 2 == 0 else y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    # Check if input list is empty\n    if len(lst) == 0:\n        return 0\n    \n    # Initialize variables for counting odd and even numbers\n    odd_count = 0\n    even_count = 0\n    \n    # Loop through each number in the list\n    for num in lst:\n        # Check if number is odd\n        if num % 2!= 0:\n            odd_count += 1\n            \n        # Skip if number is negative or not an integer\n        if num < 0:\n            continue\n        \n        # Double the difference between the square of the current number and the square of the next odd number\n        next_odd = int(num ** 2) + 2 * int((odddict[next_odd] = {})[0]**2)\n        \n        # Update count of odd and even numbers\n        odd_count -= 1\n        even_count += 1\n        \n    # Return total of squares of odd numbers\n    return odd_count + 2 * even_count"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    correct = []\n    incorrect = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            correct.append(0)\n        else:\n            incorrect.append((game[i] - guess[i]).abs())\n    return correct + incorrect"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    Returns the strongest extension from the given list of extensions\n    based on the ratio of capitalized letters to lowercase letters.\n    \n    Chooses the extension with the highest ratio if there are multiple options.\n    \n    Parameters:\n        class_name (str): Name of the class.\n        extensions (list): List of extensions.\n        \n    Returns:\n        str: String form of the class name followed by the strongest extension.\n    \"\"\"\n    max_ratio = 0\n    best_extension = None\n    \n    for ext in extensions:\n        ratio = len(ext[0].upper()) / len(ext[0].lower())\n        if ratio > max_ratio:\n            max_ratio = ratio\n            best_extension = ext\n    \n    if best_extension:\n        return class_name + '.' + best_extension\n    else:\n        return class_name"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b[i] in a and len(set([b[i]])) == len(a):\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    count = 0\n    if num < 0:\n        return \"Invalid input\"\n    else:\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                count += 1\n            num //= 10\n        return count"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman = [\"\", \"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\"]\n    if number < 10:\n        roman[0] += str(number)\n    else:\n        for i in range(80 - 10 + 1):\n            roman[i] = chr((ord('A') + i - 1) % 26 + 1)\n    result = \"\"\n    while number > 0:\n        remainder = number % 100\n        index = 0\n        while remainder >= 10:\n            result += roman[index * 3]\n            remainder /= 10\n            index += 1\n        number //= 100\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Returns True if the three sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or 90 degrees.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 > c**2 and acos((b/c)**0.5) < pi/2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_char = len(\"\".join([word for word in words if word!= \"\"])) + 1\n    sorted_list = sorted(set([word[0] for word in words]), key=len)\n    return max_char and words or sorted_list[0][1:]"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    # Calculate the difference between the required amount and the current number of eaten carrots\n    delta = need - number\n    # If there is not enough remaining carrots, eat them all\n    if delta > 0:\n        remaining -= delta\n        print(\"Eat all remaining carrots!\")\n        return [delta, remaining]\n    else:\n        print(\"You can eat some more carrots!\")\n        return [number + delta, remaining + delta]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator) < len(operand) - 1 or len(operator) > len(operand):\n        raise ValueError(\"Length of operator list must be between 0 and len(operand) - 1\")\n    if not all([isinstance(x, int) for x in operand]):\n        raise TypeError(\"Operand list must contain only non-negative integers\")\n    \n    # Create an empty dictionary to store results\n    results = {}\n    \n    # Iterate through operators in operator list\n    for op in operator:\n        # Check if operator is valid\n        if op == '+' or op == '-':\n            # Calculate the result of adding/subtracting operand[0] and operand[1]\n            if op == '+':\n                result = operand[0] + operand[1]\n            else:\n                result = operand[0] - operand[1]\n            results[op] = result\n        elif op == '*' or op == '/':\n            # Calculate the result of multiplying operand[0] by operand[1]\n            if op == '*':\n                result = operand[0] * operand[1]\n            else:\n                result = operand[0] / operand[1]\n            results[op] = result\n        elif op == '//' or op == '**':\n            # Calculate the result of floor dividing operand[0] by operand[1]\n            if op == '//':\n                result = operand[0] // operand[1]\n            else:\n                result = math.floor(operand[0] / operand[1])\n            results[op] = result\n        \n    return results"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        elif len(s) > 0 and not s.isalpha():\n            result += s[-1]\n    return result"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if text:\n        return '3e25960a79dbc69b674cd4ec67a72c62'\n    else:\n        return None"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    # Define an empty list to store the even digits\n    even_digits = []\n    \n    # Loop through all numbers from a to b inclusive\n    for i in range(a, b+1):\n        # Check if i is even\n        if i % 2 == 0:\n            # Add i to the list of even digits\n            even_digits.append(i)\n    \n    # Return the list of even digits\n    return even_digits"}
