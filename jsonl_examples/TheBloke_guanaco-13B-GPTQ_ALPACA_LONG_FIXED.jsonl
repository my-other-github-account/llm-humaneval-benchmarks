{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    if not numbers:\n        return False\n\n    for i in range(1, len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if j - i > 1 and (numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_groups = []\n    in_group = False\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            in_group = True\n        elif c == ')':\n            in_group = False\n        if in_group:\n            paren_groups.append(c)\n    return paren_groups\n\n"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    :param number: \u6570\u5b57\n    :return: \u6574\u6570\u90e8\u5206\n    \"\"\"\n    if number < 1:\n        return 0\n    else:\n        return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    # Balance after each operation\n    balances = [0] * len(operations)\n\n    # For each operation, add it to the balance\n    for i, op in enumerate(operations):\n        balances[i] += op\n\n    # If the balance is ever negative, return True\n    if any(balance < 0 for balance in balances):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    :param numbers: A list of numbers\n    :return: The mean absolute deviation\n    \"\"\"\n    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    deviation = [abs(x - mean) for x in numbers]\n    return sum(deviation) / len(deviation)\n\n"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if numbers is None or delimeter is None:\n        return numbers\n    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return [numbers[0]]\n    return [numbers[0]] + [numbers[i] for i in range(1, len(numbers), 2) + [numbers[len(numbers) - 1]]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    :param paren_string:\n    :return:\n    \"\"\"\n    paren_stack = []\n    paren_level = 0\n    for c in paren_string:\n        if c == '(':\n            paren_stack.append(paren_level)\n            paren_level += 1\n        elif c == ')':\n            if paren_level == 0:\n                raise ValueError(\"Unbalanced parentheses\")\n            paren_level -= 1\n        else:\n            pass\n\n    return [max(i, key=len(paren_stack)) for i, _ in enumerate(paren_stack)]\n\n"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings, substring):\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers):\n    if not numbers:\n        return 0, 1\n    return sum(numbers), product(numbers)\n\n"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    :param numbers: List of ints\n    :return: List of ints\n    \"\"\"\n    if not numbers:\n        return []\n\n    # store the first element as the initial value\n    initial_value = numbers[0]\n\n    # a list to store the rolling maximum\n    rolling_max = [initial_value]\n\n    # a list to store the elements that have not been considered yet\n    unprocessed_elements = numbers[1:]\n\n    # a flag to indicate if there are more elements to process\n    has_more_elements = True\n\n    while has_more_elements:\n        # if the unprocessed_elements is empty, then the rolling_max is the current element\n        if not unprocessed_elements:\n            rolling_max.append(initial_value)\n\n        # if the current element is greater than the rolling_max, then update the rolling_max\n        if unprocessed_elements[0] > rolling_max[-1]:\n            rolling_max.append(unprocessed_elements[0])\n\n        # remove the processed element from the unprocessed_elements\n        unprocessed_elements.pop(0)\n\n        # if there are more elements to process, then set the has_more_elements flag to True\n        if unprocessed_elements:\n            has_more_elements = True\n\n    return rolling_max\n\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if not string:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    if not is_palindrome(string[1:len(string)-1]):\n        return string\n\n    return string + string[::-1][1:]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a, b):\n    \"\"\"\n    :param a:\n    :param b:\n    :return:\n    \"\"\"\n    return \"\".join(chr(ord(a) ^ ord(b)) for a, b in zip(a, b))\n\n"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> str | None:\n    if not strings:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return max(strings, key=len)\n\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a, b):\n    if a < b:\n        a, b = b, a\n    while b:\n        while a % b == 0:\n            a /= b\n        b /= 2\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    if not string:\n        return []\n    return [string] + all_prefixes(string[1:])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Expects a string in a special format.\n    :param music_string:\n    :return:\n    \"\"\"\n    beats = []\n    for note in music_string:\n        if note == \"o\":\n            beats.append(4)\n        elif note == \"o|\":\n            beats.append(2)\n        elif note == \".|\":\n            beats.append(1)\n    return beats\n\n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string, substring):\n    counter = 0\n    for i, char in enumerate(string):\n        if char == substring[0]:\n            counter += 1\n            if char == substring[1:]:\n                counter += 1\n    return counter"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    numbers = numbers.replace(\" \", \"\").split()\n    numbers.sort(key=int)\n    return \" \".join(numbers)\n\n"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        return (numbers[0], numbers[0])\n\n    # find the two numbers that are farthest apart\n    farthest_apart = (max(numbers), min(numbers))\n\n    # find the two numbers that are closest to each other\n    closest_together = (min(filter(lambda x: x!= farthest_apart[0], numbers),\n                            filter(lambda x: x!= farthest_apart[1], numbers)),\n                        min(filter(lambda x: x!= farthest_apart[0], numbers),\n                            filter(lambda x: x!= farthest_apart[1], numbers)))\n\n    return (closest_together[0], closest_together[1])\n\n"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    if not numbers:\n        return []\n    min_value, max_value = min(numbers), max(numbers)\n    return (numbers - min_value) * (1.0 / (max_value - min_value)) + [0.0]\n\n"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    :param values: List of any python values\n    :return: List of int\n    \"\"\"\n    return [v for v in values if v is int]\n\n"}
{"task_id": "HumanEval/23", "completion": "def strlen(string):\n    return len(string)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n):\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = 3 * n + 1\n    return n\n\n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n):\n    if n < 2:\n        return [n]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors = [i]\n            while True:\n                n, k = n / i, i\n                if k == 1:\n                    break\n                if k % 2 == 0:\n                    factors.append(k)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    return [x for x in numbers if x not in seen and not (x,) in seen]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.upper() if string.isupper() else string.lower()\n\n"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings):\n    return \"\".join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    :param xs: list of coefficients\n    :param x: point at which to evaluate\n    :return: sum of all terms in the polynomial\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    :param xs: list of coefficients\n    :return: x such that poly(x) = 0\n    \"\"\"\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have an even number of coefficients\")\n    if not xs:\n        return 0.0\n    if xs[0]!= 0:\n        return -1.0 / xs[0]\n    for i in range(1, len(xs)):\n        if xs[i]!= 0:\n            return -1.0 / xs[i]\n    return 0.0\n\n"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    l_ = l[:]\n    for i, v in enumerate(l_):\n        if i % 3 == 0:\n            l_[i] = v\n        else:\n            l_[i] = l[i]\n    return l_"}
{"task_id": "HumanEval/34", "completion": "def unique(l):\n    seen = set()\n    for item in l:\n        if item not in seen:\n            seen.add(item)\n            yield item\n\n"}
{"task_id": "HumanEval/35", "completion": "def max_element(l):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n):\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(i)\n\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    l2 = l[:]\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l2[i] = l[i]\n        else:\n            l2[i] = min(l[i:i + 1])\n    return l2"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    :param s:\n    :return:\n    \"\"\"\n    return \"\".join(s[i:i + 3] for i in range(0, len(s), 3))\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    :param s:\n    :return:\n    \"\"\"\n    return s[::3]\n\n"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n):\n    if n < 2:\n        return n\n    else:\n        a, b = 0, 1\n        c = 1\n        while c < n:\n            a, b = b, a + b\n            c = a + b\n        if a % 2 == 0 and b % 2 == 0:\n            return a\n        else:\n            return b\n\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    for i in l:\n        for j in l:\n            for k in l:\n                if i + j + k == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    if n < 2:\n        return 0\n    else:\n        return n * car_race_collision(n-1) + car_race_collision(n-2)\n\n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l):\n    return [x + 1 for x in l]\n\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x, base):\n    s = str(x)\n    while s and base:\n        s = s[1:]\n        x = int(s)\n        s = str(x)\n    return s or '0'\n\n"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * h) / 2\n\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n):\n    if n < 4:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\n"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    if not l:\n        return None\n    else:\n        l.sort()\n        return l[len(l) // 2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n, p):\n    if n < 0:\n        raise ValueError(f\"n must be non-negative, got {n}\")\n    if p < 2:\n        raise ValueError(f\"p must be at least 2, got {p}\")\n\n    if n == 0:\n        return 1 if p == 1 else 0\n\n    if n == 1:\n        return 1\n\n    if n == -1:\n        return p - 1\n\n    if n == 2:\n        return p\n\n    if n == -2:\n        return 1 if p % 4 == 1 else 3\n\n    if n == 3:\n        return p - 1 if p % 8 == 7 else p\n\n    if n == -3:\n        return 3 if p % 8 == 7 else 1\n\n    if n == 4:\n        return p - 1 if p % 16 == 15 else p\n\n    if n == -4:\n        return 5 if p % 16 == 15 else 1\n\n    if n == 5:\n        return p - 1 if p % 32 == 31 else p\n\n    if n == -5:\n        return 7 if p % 32 == 31 else 1\n\n    if n == 6:\n        return p - 1 if p % 64 == 63 else p\n\n    if n == -6:\n        return 13 if p % 64 == 63 else 1\n\n    if n == 7:\n        return p - 1 if p % 128 == 127 else p\n\n    if n == -7:\n        return 17 if p % 128 == 127 else 1\n\n    if n == 8:\n        return p - 1 if p % 256 == 255 else p\n\n    if n == -8:\n        return 19 if p % 256 == 255 else 1\n\n    if n == 9:\n        return p -"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s):\n    return \"\".join([chr(ord(c) + 5 - ord(\"a\") + 5) for c in s])\n\n\ndef decode_shift(s):\n    return \"\".join([chr(ord(c) - 5 + 5) for c in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    return \"\".join(x for x in text if x not in \"aeiou\")"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l, t):\n    if not l:\n        return True\n    if l[0] < t:\n        return False\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1] + t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x, y):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0, s1):\n    if s0 and s1:\n        if s0.lower() == s1.lower():\n            return True\n    return False"}
{"task_id": "HumanEval/55", "completion": "def fib(n):\n    if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets):\n    if not brackets:\n        return True\n    if brackets[0]!= \"<\":\n        return False\n    for i in range(1, len(brackets)):\n        if brackets[i] == \"<\":\n            if i + 1 < len(brackets) and brackets[i + 1] == \">\":\n                i += 1\n            else:\n                return False\n    return True"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l):\n    if len(l) < 2:\n        return True\n    if l[0] > l[1]:\n        return True\n    if l[0] < l[1]:\n        return False\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            return True\n        if l[i] < l[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    return sorted(list(set(l1.intersection(l2))))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    if n < 2:\n        return 0\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if (n % i) == 0:\n            p = i\n\n            while (n % p) == 0:\n                p *= 10\n\n            n //= p\n\n    return p\n\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    s = 0\n    for i in range(1, n + 1):\n        s += i\n    return s"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets):\n    if not brackets:\n        return True\n    if brackets[0]!= '(':\n        return False\n    for i in range(1, len(brackets)):\n        if brackets[i] == '(' and brackets[i+1] == ')':\n            i += 1\n        else:\n            return False\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    if not xs:\n        return []\n    d = [0] * (len(xs) - 1)\n    for i in range(1, len(xs)):\n        d[i - 1] = i * d[i]\n    return d + xs\n\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    if n < 3:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = \"aeiouy\"\n    vowels_count = 0\n\n    for i in s:\n        if i in vowels and i!= \"y\" and i!= \"w\":\n            vowels_count += 1\n\n    if s[-1] == \"y\":\n        vowels_count += 1\n\n    return vowels_count\n\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n\n    :param x: the integer to circular shift\n    :param shift: the number of digits to shift\n    :return: the circularly shifted integer as a string\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:].zfill(len(str(x)) - shift)\n\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) - ord('0') + 1 for c in s.upper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples, oranges, mangoes = 0, 0, 0\n    for i, c in enumerate(s):\n        if c == 'a':\n            apples += 1\n        elif c == 'o':\n            oranges += 1\n        elif c =='m':\n            mangoes += 1\n    return n - apples - oranges + mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n\n    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n\n    smallest_even_value = min(even_values)\n    index = [i for i, x in enumerate(even_values) if x == smallest_even_value][0]\n\n    return [smallest_even_value, index]\n\n"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    if not lst:\n        return -1\n    v = max(lst, key=lambda x: lst.count(x))\n    return v if v > 0 else -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n\n    min_val, max_val = lst[0], lst[-1]\n    for i in range(1, len(lst)):\n        if min_val > lst[i]:\n            min_val = lst[i]\n        if max_val < lst[i]:\n            max_val = lst[i]\n\n    return [min_val, max_val] + strange_sort_list(lst[1:-1])\n\n"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a + b > c) and (b + c > a) and (c + a > b):\n        return math.sqrt(0.5 * (a * b + b * c + c * a))\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if not is_balanced(q):\n        return False\n    if sum(q) > w:\n        return False\n    return True\n\n\ndef is_balanced(q):\n    if not q:\n        return True\n    if q[0]!= q[-1]:\n        return False\n    for i in range(1, len(q) - 1):\n        if q[i]!= q[i - 1] + q[i + 1]:\n            return False\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    if not arr:\n        return 0\n\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] == arr[j]:\n            i += 1\n        else:\n            j -= 1\n\n    return i\n\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) > len(lst2):\n        return total_match(lst2, lst1)\n    if len(lst2) > len(lst1):\n        return total_match(lst1, lst2)\n    if len(lst1) == len(lst2):\n        return lst1\n    return []"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 100 and a % 3 == 0 and a % 5 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == n**len(n.zfill(1))[1:]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a < 0:\n        a = -a\n    while a % 1!= 0:\n        a /= 10\n    return a * a * a == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    if not num:\n        return 0\n    if num.isalpha():\n        if num.upper() in \"ABDEF\":\n            return 1\n    if num.isdigit():\n        if num in [2, 3, 5, 7, 11, 13]:\n            return 1\n    return 0"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    s = \"db\" + \"\".join([\"1\" if i else \"0\" for i in str(decimal)]) + \"db\"\n    return s\n\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i:i+3] == s[i+1:i+4]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    grades = list(grades)\n    if not grades:\n        return []\n\n    gpa_list = [gpa for gpa, _ in sorted(zip(grades, grades), key=lambda x: x[0])]\n    gpa_min = min(gpa_list)\n    gpa_max = max(gpa_list)\n\n    letter_grade = {\n        gpa_min: 'E',\n        gpa_max: 'A+',\n        gpa_min + 0.1: 'D-',\n        gpa_max - 0.1: 'A-',\n        gpa_min + 0.2: 'C-',\n        gpa_max - 0.2: 'B+',\n        gpa_min + 0.3: 'B-',\n        gpa_max - 0.3: 'A',\n        gpa_min + 0.4: 'A',\n        gpa_max - 0.4: 'B',\n        gpa_min + 0.5: 'B',\n        gpa_max - 0.5: 'C',\n        gpa_min + 0.6: 'C',\n        gpa_max - 0.6: 'D',\n        gpa_min + 0.7: 'D',\n        gpa_max - 0.7: 'E',\n    }\n\n    letter_grades = [letter_grade[gpa] for gpa in gpa_list]\n    return letter_grades\n\n"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if len(string) == 0:\n        return False\n    for i in range(2, len(string)):\n        if string[i] % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (1 + starts_one_ends(n-1)) * (n - 1)\n\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    s = 0\n    while N:\n        s += N % 2\n        N //= 10\n    return s"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_indices = [i for i in range(len(lst)) if i % 2 == 0]\n    return [lst[i] for i in even_indices]\n\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    s = s.replace(' ', '')\n    s = ''.join(sorted(s.lower(), key=lambda x: ord(x)))\n    return s\n\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    if not lst:\n        return []\n\n    # find x in the list\n    i = [i for i, v in enumerate(lst) if v == x][0]\n\n    # get the row\n    row = [i]\n\n    # get the columns\n    columns = [j for j, v in enumerate(lst[i]) if v]\n\n    # sort the row\n    row.sort(reverse=True)\n\n    # sort the columns\n    columns.sort(reverse=True)\n\n    return [(i, j) for i, j in zip(row, columns)]\n\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n\n    first, last = array[0], array[-1]\n    if first + last == 0:\n        return array\n\n    if (first + last) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n\n    return array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    return s[::-2] + s[1::2]"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    else:\n        return min(lst[1:])"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    for i, c in enumerate(S):\n        if c in ['.', '?', '!' and i == 0] or c == 'I':\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x.is_integer() and y.is_integer() and z.is_integer():\n        if (x + y) == z:\n            return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    # Swap case of all letters\n    message = message.upper()\n\n    # Replace vowels with the letter that appears 2 places ahead of that vowel in the english alphabet\n    vowels = 'AEIOU'\n    for vowel in vowels:\n        message = message.replace(vowel, (vowel[2:]) + vowel)\n\n    return message\n\n"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    if not lst:\n        return 0\n\n    prime_sum = 0\n    for i in lst:\n        if i > 0 and all(i % j!= 0 for j in range(2, int(math.sqrt(i)) + 1)):\n            prime_sum += sum(map(int, str(i)))\n\n    return prime_sum\n\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    if all(k.lower() == k for k in dict):\n        return True\n    if all(k.upper() == k for k in dict):\n        return True\n    return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n < 2:\n        return []\n    if n % 2 == 0:\n        return [2]\n    for i in range(3, int(n ** 0.5) + 1):\n        if all(i % j!= 0 for j in range(2, int(n ** 0.5) + 1)):\n            yield i\n\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    if a < 10 and b < 10:\n        return a * b\n    elif a < 100 and b < 100:\n        return (a * 10 + b) * 10\n    else:\n        return 0\n\n"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] == s[i+1].upper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    if value.isdigit():\n        return int(value)\n    else:\n        return float(value).round(2)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n, (n + 1) * 2, (n + 1) * 3]\n    else:\n        return [n, (n + 1) * 2, (n + 1) * 3, (n + 1) * 4]\n\n"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(sep=','if s.endswith(' and ')') else s.split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        x, y = y, x\n\n    for i in range(x, y + 1):\n        if i % 2 == 0 and i > max(x, y):\n            return i\n\n    return -1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return int(avg * 256 + avg).lstrip('0')"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = list(x)\n    x.sort()\n    even_digits = [i for i in x if i % 2 == 0]\n    return x[::2] + [i for i in even_digits if i not in x]"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    arr.sort(key=lambda x: 1 if 1 <= x < 10 else 10)\n    arr.reverse()\n    return [f\"{i}\" for i in arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    if n % 2 == 0:\n        return [i for i in range(1, n+1) if i % 2 == 0] + [n, n-1, n-2, n-3, n-4, n-5]\n    else:\n        return [i for i in range(1, n+1) if i % 2!= 0] + [n, n-1, n-2, n-3, n-4, n-5]\n\n"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_palindromes = 0\n    odd_palindromes = 0\n\n    for i in range(1, n + 1):\n        if i == int(str(i)) and i.ispalindrome():\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n\n    return (even_palindromes, odd_palindromes)\n\n"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    :param arr: \u5217\u8868\n    :return: \u542b\u6709\u5927\u4e8e0\u7684\u6574\u6570\u7684\u6570\u76ee\n    \"\"\"\n    nums = [int(n) for n in arr]\n    return sum(n > 0 and n < 10 for n in nums)\n\n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[-1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            arr.insert(0, arr.pop())\n            return move_one_ball(arr)\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n\n    for i in range(len(lst1)):\n        if i in lst2:\n            if (lst1[i] % 2) == 0:\n                if (lst2[i] % 2) == 0:\n                    del lst2[i]\n                    del lst1[i]\n                    continue\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n\n    if (len(lst1) % 2) == 0:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    # get all the letters in the string\n    letters = test.lower().split()\n\n    # create a dictionary to hold the results\n    result = {}\n\n    # for each letter in the string\n    for letter in letters:\n        # if the letter is not in the dictionary already\n        if letter not in result:\n            # add it to the dictionary with a count of 1\n            result[letter] = 1\n\n        # if the letter is already in the dictionary\n        else:\n            # increment the count for that letter\n            result[letter] += 1\n\n    # return the dictionary\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    \"\"\"\n    Task: We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example:\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd', False)\n    For s = \"abcdef\", c = \"b\", the result should be ('acdef', False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc', True)\n    \"\"\"\n\n    if not s:\n        return (s, False)\n\n    if c:\n        s = [c for c in s if c!= c[0]]\n\n    s.reverse()\n\n    if s == s[::-1]:\n        return (s, True)\n\n    return (s, False)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    odds = 0\n    for i in lst:\n        if i.isdigit():\n            odds += 1 if int(i) % 2 else 0\n    return [f\"the number of odd elements in the string {i} is {odds}.\"]\n\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    mx = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > mx:\n            mx = nums[i]\n    min_so_far = mx\n    for i in range(1, len(nums)):\n        if i > 0 and nums[i]!= 0:\n            min_so_far += nums[i]\n            if min_so_far < min_so_far:\n                min_so_far = min_so_far\n    return min_so_far"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    if not grid:\n        return 0\n    m, n = len(grid), len(grid[0])\n    if m == 1:\n        return 0 if grid[0] == [0] * n else 1\n    if n == 1:\n        return 0 if grid == [0] * m else 1\n    if m == 2 and n == 2:\n        return 1 if grid[0] == [1, 1] and grid[1] == [1, 1] else 2\n    if m > 2 or n > 2:\n        return max(\n            max_fill(grid[i:m, :n], capacity)\n            for i in range(m)\n        )\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1 and (i - 1 >= 0 and grid[i - 1][j] == 1) and (i + 1 < m and grid[i + 1][j] == 1) and (j - 1 >= 0 and grid[i][j - 1] == 1) and (j + 1 < n and grid[i][j + 1] == 1):\n                if capacity - grid[i - 1][j] - grid[i + 1][j] - grid[i][j - 1] - grid[i][j + 1] > 0:\n                    return max(\n                        max_fill(\n                            [\n                                [\n                                    x\n                                    if y == 1\n                                    else 0\n                                    for y in range(n)\n                                ]\n                                for x in range(m)\n                            ],\n                            capacity\n                        )\n                        for i in range(m)\n                    )\n    return 0"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    if not arr:\n        return []\n\n    # 1. sort by the number of ones\n    # 2. if the number of ones is the same, sort by the value\n    # 3. if the value is the same, sort by the index\n    # 4. if the index is the same, sort by the length of the array\n    # 5. if the length is the same, sort by the first element\n    # 6. if the first element is the same, sort by the second element\n    # 7. if the second element is the same, sort by the third element\n    # 8. if the third element is the same, sort by the fourth element\n    # 9. if the fourth element is the same, sort by the fifth element\n    # 10. if the fifth element is the same, sort by the sixth element\n    # 11. if the sixth element is the same, sort by the seventh element\n    # 12. if the seventh element is the same, sort by the eighth element\n    # 13. if the eighth element is the same, sort by the ninth element\n    # 14. if the ninth element is the same, sort by the tenth element\n    # 15. if the tenth element is the same, sort by the eleventh element\n    # 16. if the eleventh element is the same, sort by the twelfth element\n    # 17. if the twelfth element is the same, sort by the thirteenth element\n    # 18. if the thirteenth element is the same, sort by the fourteenth element\n    # 19. if the fourteenth element is the same, sort by the fifteenth element\n    # 20. if the fifteenth element is the same, sort by the sixteenth element\n    # 21. if the sixteenth element is the same, sort by the seventeenth element\n    # 22. if the seventeenth element is the same, sort by the eighteenth element\n    # 23. if the eighteenth element is the same, sort by the nineteenth element\n    # 24. if the ninete"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if s:\n        words = s.split()\n        res = []\n        for i, word in enumerate(words):\n            if len(word) - len(word.lstrip(\" \")) + len(word.rstrip(\" \")) == n:\n                res.append(word)\n        return res\n    else:\n        return []"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"a\", \"e\", \"i\", \"o\", \"u\"\n    if not word:\n        return \"\"\n    if word[0] in vowels and word[-1] in vowels and word[0]!= word[-1]:\n        return word[0]\n    for i in range(1, len(word)):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i]!= word[i - 1]:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    if not lst:\n        return \"No\"\n    if len(lst) == 1:\n        return \"Yes\"\n    if (lst[0] == \"(\" and lst[1] == \")\" or lst[0] == \")\" and lst[1] == \"(\"):\n        return \"Yes\"\n    return \"No\""}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k must be a positive integer and less than or equal to the length of the array\")\n\n    if k == 1:\n        return [x for x in arr if x!= 0]\n\n    arr.sort()\n    return arr[0:k]\n\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    if k > len(arr):\n        return 0\n\n    s = 0\n    for i in range(k):\n        s += arr[i]\n\n    return s\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    if n == 1:\n        return [1]\n\n    else:\n        return [n] + get_odd_collatz(n // 2)\n\n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date.strip():\n        return False\n\n    month = date.split(\"-\")[0]\n    day = date.split(\"-\")[1]\n    year = date.split(\"-\")[2]\n\n    if int(month) < 1 or int(month) > 12:\n        return False\n\n    if int(day) < 1 or int(day) > 31:\n        if (int(month) == 1 or int(month) == 3 or int(month) == 5 or int(month) == 7 or int(month) == 8 or int(month) == 10 or int(month) == 12):\n            return False\n        else:\n            if int(year) % 4 == 0:\n                if int(day) > 29:\n                    return False\n            else:\n                if int(day) > 28:\n                    return False\n\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if not txt:\n        return []\n    if'' in txt:\n        return txt.split()\n    if ',' in txt:\n        return [x.strip() for x in txt.split(',')]\n    return len(set(x.lower() for x in txt if x.isalpha() and (ord(x) % 2 == 1)))"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i - 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if not (interval1[1] > interval2[0] and interval2[1] > interval1[0]):\n        return \"NO\"\n\n    if (interval1[1] - interval1[0] + 1) * (interval2[1] - interval2[0] + 1) == (interval1[1] - interval1[0]) * (interval2[1] - interval2[0]) + (interval1[0] - interval2[0]):\n        return \"YES\"\n\n    return \"NO\"\n\n"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    s = 0\n    for i, v in enumerate(arr):\n        s += v * (1 if v > 0 else -1)\n    return s"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    if not grid or not k:\n        return None\n\n    if grid[0].size() < k:\n        return [grid[0][0]]\n\n    if grid.size() == 1:\n        return [grid[0][0]]\n\n    if grid.size() == 2:\n        return [min(grid[0], grid[1])]\n\n    m = min(grid[0], grid[1])\n    for i in range(1, k+1):\n        for j in range(1, i+1):\n            if m + 1 in grid and m - 1 in grid:\n                if grid[m][i] < grid[m - 1][j] and grid[m][i] < grid[m + 1][j]:\n                    m = m + 1\n            elif m + 1 in grid:\n                if grid[m][i] < grid[m + 1][i]:\n                    m = m + 1\n            elif m - 1 in grid:\n                if grid[m][i] < grid[m - 1][i]:\n                    m = m - 1\n\n        if m is not None:\n            yield m\n\n    for i in range(1, k+1):\n        for j in range(1, i+1):\n            if m + 1 in grid and m - 1 in grid:\n                if grid[m][i] < grid[m - 1][j] and grid[m][i] < grid[m + 1][j]:\n                    m = m + 1\n            elif m + 1 in grid:\n                if grid[m][i] < grid[m + 1][i]:\n                    m = m + 1\n            elif m - 1 in grid:\n                if grid[m][i] < grid[m - 1][i]:\n                    m = m - 1\n\n        if m is not None:\n            yield m\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0 or n == 1:\n        return 1\n    if n % 2 == 0:\n        return (n / 2) + 1\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    if n < 1:\n        return 0\n    odd_digits = 0\n    for i in range(1, int(n) + 1):\n        if i % 2 == 1:\n            odd_digits *= i\n    return odd_digits"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    if not string:\n        return False\n    if string[0] == '[' and string[-1] == ']':\n        return True\n    return is_nested(string[1:-1]) and (string[0] == '[' or string[1] == '[') and (string[-1] == ']' or string[-2] == ']')\n\n"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(i**2 for i in lst if i > 0)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    if not (r\"([^\\s])([A-Za-z])(\\s|$)\"):\n        return False\n    match = re.search(r\"([^\\s])([A-Za-z])(\\s|$)\", txt)\n    if not match:\n        return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    i = 1\n    while i < len(arr):\n        if arr[i] <= arr[i-1]:\n            i += 1\n        else:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return None, None\n\n    neg_ints = [x for x in lst if x < 0]\n    pos_ints = [x for x in lst if x >= 0]\n\n    if neg_ints:\n        largest_int = max(neg_ints)\n    else:\n        largest_int = None\n\n    if pos_ints:\n        smallest_int = min(pos_ints)\n    else:\n        smallest_int = None\n\n    return largest_int, smallest_int\n\n"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if a == b:\n        return None\n    if a.is_integer() and b.is_integer():\n        if a > b:\n            return a\n        else:\n            return b\n    if a.is_float() and b.is_float():\n        if a > b:\n            return a\n        else:\n            return b\n    if a.is_string() and b.is_string():\n        if a.rstrip() > b.rstrip():\n            return a\n        else:\n            return b\n    return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n < 4:\n        return False\n    for i in range(1, n, 2):\n        if i in [2, 4, 6, 8]:\n            return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    return re.sub(r\" +\", \"_\", text)"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return \"No\"\n    if not file_name.find(\".\")!= -1:\n        return \"No\"\n    if not (file_name[0].isalpha() and file_name[-1] == \".\") and (file_name[0]!= \".\" and file_name[-1]!= \".\"):\n        return \"No\"\n    if file_name[-4:].lower() not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    if not lst:\n        return 0\n    for i, v in enumerate(lst):\n        if i % 3 == 0:\n            v *= v\n        if i % 4 == 0 and i % 3!= 0:\n            v = v ** 3\n    return sum(v for i, v in enumerate(lst) if i % 3 or i % 4)"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    prime_words = []\n    for word in sentence.split():\n        if not word.isdigit():\n            for i in range(2, int(word) + 1):\n                if all(x % i for x in word):\n                    prime_words.append(word)\n    if prime_words:\n        return''.join(prime_words)\n    else:\n        return sentence"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x, n = x.strip(), n.strip()\n    if n == \"1\":\n        return True\n    if x == \"0\":\n        return False\n    if n.isdigit() and x.isdigit():\n        if int(n) == 1 and int(x)!= 0:\n            return True\n        if int(n) > 1 and int(x) == 0:\n            return False\n    if n.find(\"/\")!= -1 and x.find(\"/\")!= -1:\n        n1, n2 = n.split(\"/\")\n        x1, x2 = x.split(\"/\")\n        if int(n1) == 1 and int(x1)!= 0:\n            return True\n        if int(n1) > 1 and int(x1) == 0:\n            return False\n    return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    nums.sort(key=lambda x: sum(map(int, str(x))), reverse=True)\n    return nums\n\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    return len([num for num in nums if (num > 10 and (num % 100 % 10 == 1 or num % 100 % 10 == 3 or num % 100 % 10 == 5 or num % 100 % 10 == 7 or num % 100 % 10 == 9))])"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i*i-i+1 for i in range(n)]\n    triples = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    triples += 1\n    return triples"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    if not isinstance(planet1, str) or not isinstance(planet2, str):\n        return ()\n    if planet1 == 'Jupiter' and planet2 == 'Neptune':\n        return ('Saturn', 'Uranus')\n    if planet1 == 'Earth' and planet2 == 'Mercury':\n        return ('Venus')\n    if planet1 == 'Mercury' and planet2 == 'Uranus':\n        return ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    return ()"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)))"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n % 2 == 0:\n        return y\n    for i in range(3, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return x\n    return y\n\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    return sum(i**2 for i in lst if i%2 and isinstance(i, int))"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    if game == guess:\n        return [0] * len(game)\n    else:\n        return [abs(x - y) for x, y in zip(game, guess)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    if not isinstance(class_name, str):\n        raise ValueError(f\"Expected a string for the class name, got {class_name}.\")\n    if not isinstance(extensions, list):\n        raise ValueError(f\"Expected a list of extensions, got {extensions}.\")\n\n    # Get the extensions' names\n    extension_names = [e.rsplit(\".\", 1)[-1] for e in extensions]\n\n    # Get the extension strengths\n    extension_strengths = [\n        (\n            sum(\n                [\n                    c.isupper()\n                    for c in e.lower()\n                ]\n            )\n            -\n            sum(\n                [\n                    c.islower()\n                    for c in e.lower()\n                ]\n            )\n        )\n        for e in extension_names\n    ]\n\n    # Find the"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if a.find(b, 0, len(b))!= -1:\n        return True\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b and cycpattern_check(a, b):\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even = 0\n    odd = 0\n    while num:\n        if num % 10 in [0, 2, 8]:\n            even += 1\n        else:\n            odd += 1\n        num /= 10\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    if number < 1 or number > 1000:\n        raise ValueError(f\"Number must be between 1 and 1000: {number}\")\n\n    # 1-9\n    if 1 <= number < 4:\n        return \"i\"\n    if 4 <= number < 5:\n        return \"ii\"\n    if 5 <= number < 6:\n        return \"iii\"\n    if 6 <= number < 7:\n        return \"iv\"\n    if 7 <= number < 8:\n        return \"v\"\n    if 8 <= number < 9:\n        return \"vi\"\n\n    # 10-99\n    if 10 <= number < 20:\n        return \"x\"\n    if 20 <= number < 30:\n        return \"xi\"\n    if 30 <= number < 40:\n        return \"xii\"\n    if 40 <= number < 50:\n        return \"xiii\"\n    if 50 <= number < 60:\n        return \"xiv\"\n    if 60 <= number < 70:\n        return \"xv\"\n    if 70 <= number < 80:\n        return \"xvi\"\n    if 80 <= number < 90:\n        return \"xvii\"\n    if 90 <= number < 100:\n        return \"xviii\"\n    if 100 <= number < 110:\n        return \"ix\"\n    if 110 <= number < 120:\n        return \"xix\"\n    if 120 <= number < 130:\n        return \"xx\"\n    if 130 <= number < 140:\n        return \"xxi\"\n    if 140 <= number < 150:\n        return \"xxii\"\n    if 150 <= number < 160:\n        return \"xxiii\"\n    if 160 <= number < 170:\n        return \"xxiv\"\n    if 17"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if (a**2 + b**2 - c**2) < 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    if not words:\n        return \"\"\n    if len(set(words[0])) > len(set(words[1:])):\n        return words[0]\n    return max(words, key=len)\n\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if number >= need:\n        return [number, 0]\n    if remaining >= need:\n        return [number, need]\n    eaten = number - (need - (remaining - 1))\n    return [eaten, remaining - eaten]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator) == 0:\n        return 0\n    if len(operand) < 2:\n        return 0\n    if len(operator)!= len(operand) - 1:\n        return 0\n    if operator[0] not in ['+', '-', '*', '/']:\n        return 0\n    if operand[0] < 0:\n        return 0\n    for i in range(len(operand)):\n        if operator[0] == '+':\n            operand[i] += operand[i + 1]\n        elif operator[0] == '-':\n            operand[i] -= operand[i + 1]\n        elif operator[0] == '*':\n            operand[i] *= operand[i + 1]\n        elif operator[0] == '/':\n            if operand[i + 1]!= 0:\n                operand[i] /= operand[i + 1]\n    return operand[0]"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not s:\n        return s\n    s = s.upper() if s[0].isalpha() else s.lower()\n    for i, c in enumerate(s):\n        if c.isalpha():\n            s[i] = c.upper() if c.islower() else c.lower()\n    return s"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a < b:\n        return [i for i in range(a, b+1) if i % 2 == 0 and i > 0]\n    else:\n        return []"}
