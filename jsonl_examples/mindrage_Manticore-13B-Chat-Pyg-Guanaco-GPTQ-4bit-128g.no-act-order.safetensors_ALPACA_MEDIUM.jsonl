{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    if not numbers:\n        return False\n    if len(numbers) == 1:\n        return False\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if j - i < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = paren_string.split()\n    return [group for group in paren_groups if group.startswith('(') and group.endswith(')')]\n\n"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\n    return number - (int(number) + 0.5)\n\n"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        else:\n            balance -= op\n    return balance < 0\n\n"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    if not numbers:\n        return 0\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return [numbers[0]]\n    return [numbers[0]] + [delimeter] + [n if i+1 < len(numbers) else delimeter for i, n in enumerate(numbers)] + [delimeter] + [n for n in numbers]\n\n"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    :param paren_string: the string to be parsed\n    :return: a list of the deepest levels of nesting for each group of parentheses\n    \"\"\"\n    # Create a list of all the parentheses in the string\n    all_parens = paren_string.split()\n\n    # Keep track of the current depth of nesting for each group of parentheses\n    depths = [0] * len(all_parens)\n\n    # Iterate through each character in the string\n    for i, c in enumerate(paren_string):\n        # If the character is a parentheses, increment the depth for the corresponding group\n        if c == '(':\n            depths[i] += 1\n        # If the character is a closing parenthesis, and the depth is the deepest for that group,\n        # then update the deepest level of nesting for that group\n        elif c == ')':\n            if depths[i] == len(all_parens) - i - 1:\n                # The group of parentheses is the deepest, so add it to the list of deepest levels\n                # and reset the depth for the next group\n                deepest = (i, depths[i])\n                for j in range(i + 1, len(all_parens)):\n                    depths[j] = 0\n                yield from [deepest]\n            else:\n                depths[i] = 0\n\n    # If there are any groups of parentheses left with a non-zero depth,\n    # they are the deepest levels of nesting for those groups\n    for i, (i, d) in enumerate(depths):\n        if d > 0:\n            yield (i, d)\n"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n\n"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), product(numbers))\n\n\ndef product(numbers: List[int]) -> int:\n    \"\"\" For a given list of integers, return the product of all the integers in a list.\n    Empty product should be equal to 1.\n    >>> product([])\n    1\n    >>> product([1, 2, 3, 4])\n    24\n    \"\"\"\n    if not numbers:\n        return 1\n    return multiply(numbers)\n\n\ndef multiply(numbers: List[int]) -> int:\n    \"\"\" For a given list of integers, return the product of all the integers in a list.\n    Empty product should be equal to 1.\n    >>> multiply([])\n    1\n    >>> multiply([1, 2, 3, 4])\n    24\n    \"\"\"\n    if not numbers:\n        return 1\n    return int(sum(map(lambda x: x**2, numbers)))\n\n\ndef sum(numbers: List[int]) -> int:\n    \"\"\" For a given list of integers, return the sum of all the integers in a list.\n    Empty sum should be equal to 0.\n    >>> sum([])\n    0\n    >>> sum([1, 2, 3, 4])\n    10\n    \"\"\"\n    if not numbers:\n        return 0\n    return sum(numbers)\n\n\ndef sum(numbers: List[int]) -> int:\n    \"\"\" For a given list of integers, return the sum of all the integers in a list.\n    Empty sum should be equal to 0.\n    >>> sum([])\n    0\n    >>> sum([1, 2, 3, 4])\n    10\n    \"\"\"\n    if not numbers:\n        return 0\n    return sum(numbers)\n\n"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    # keep track of the current maximum\n    current_max = numbers[0]\n    \n    # a list to store the rolling maximums\n    rolling_maxes = []\n    \n    # iterate over the numbers\n    for i in range(1, len(numbers)):\n        # if the current number is bigger than the current maximum\n        if numbers[i] > current_max:\n            # update the current maximum\n            current_max = numbers[i]\n            \n            # add the current maximum to the list of rolling maximums\n            rolling_maxes.append(current_max)\n    # add the last maximum to the list of rolling maximums\n    rolling_maxes.append(current_max)\n    \n    return rolling_maxes\n\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string:\n        return ''\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:-1]) + string[0]\n    else:\n        return make_palindrome(string[1:-1])\n\n"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    xor_list = [ord(c) for c in a]\n    xor_list.append(ord(b[0]))\n    for i in range(1, len(b)):\n        xor_list.append(ord(b[i]) ^ xor_list[i-1])\n    return ''.join(map(lambda x: str(x^ord(b[0])), xor_list))\n\n"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if strings:\n        longest_string = strings[0]\n        for string in strings[1]:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string\n    else:\n        return None\n\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    if a == b:\n        return a\n\n    for i in range(2, int(abs(a))+1):\n        for j in range(2, int(abs(b))+1):\n            if i <= a and i <= b:\n                if j <= a and j <= b:\n                    if i*j <= a*b:\n                        return i*j\n\n    return 1\n"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if not string:\n        return []\n    else:\n        return [string] + all_prefixes(string[1:])\n\n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    if n == 0:\n        return '0'\n    else:\n        return f'{n-1} {string_sequence(n-1)}'\n\n"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    # create a set of all characters in the string\n    char_set = set(string)\n    \n    # count the number of elements in the set\n    distinct_character_count = len(char_set)\n    \n    return distinct_character_count\n\n"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = []\n    for note in music_string:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif '.|' == note:\n            beats.append(1)\n    return beats\n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string, substring):\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n        i += len(substring)\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    numbers = numbers.replace(\" \", \"\").split()\n    numbers.sort()\n    return \" \".join(numbers)\n\n"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        return None, None\n    else:\n        min_distance = float('inf')\n        closest_pair = None\n        for i in range(len(numbers)):\n            for j in range(i + 1, len(numbers)):\n                distance = numbers[j] - numbers[i]\n                if distance < min_distance:\n                    min_distance = distance\n                    closest_pair = (numbers[i], numbers[j])\n        return closest_pair\n\n"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must have at least two elements.\")\n\n    # find min and max values\n    min_value, max_value = numbers[0], numbers[0]\n    for number in numbers:\n        if number < min_value:\n            min_value = number\n        if number > max_value:\n            max_value = number\n\n    # rescale to unit interval\n    for i, number in enumerate(numbers):\n        numbers[i] = (number - min_value) / (max_value - min_value)\n\n    return numbers\n"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if x is a number and x.is_integer()]\n\n"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    if string:\n        return len(string)\n    else:\n        return 0\n\n"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n    if n <= 1:\n        return n\n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0 and i <= n/2:\n            return i\n\n    return n\n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\"\n    Return a list of all the prime factors of n, in ascending order by factor size, and a count of how many times each factor occurs in the factorization of n.\n    The factorization of n is the product of all the factors, so n must be equal to the product of the factors and their counts.\n    \"\"\"\n    factors = []\n    count = 1\n    while n > 1:\n        while n % 2 == 0:\n            factors.append(2)\n            n //= 2\n        if n > 1:\n            factors.append(n)\n            n //= 1\n    factor_counts = [1 for _ in factors]\n    for i, factor in enumerate(factors):\n        while factor * factor_counts[i] < n:\n            factor_counts[i] += 1\n    return factors, factor_counts\n\n"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n\n    for num in numbers:\n        if num in seen:\n            continue\n        seen.add(num)\n        result.append(num)\n\n    return result\n\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.casefold()\n\n"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    if strings:\n        return strings[0] + ''.join(strings[1:])\n    else:\n        return ''\n\n"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l):\n    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float) -> float:\n    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"List of coefficients must have an even number of elements.\")\n    if xs[n // 2 - 1] * 2 == -1:\n        return -math.inf\n    for i in range(1, n, 2):\n        if xs[i - 1] * x ** i == 0:\n            return 0\n    return xs[n // 2 - 1] * x ** (n // 2)\n\n\ndef find_zero(xs: list) -> float:\n    n = len(xs)\n    if n % 2!= 1:\n        raise ValueError(\"List of coefficients must have an odd number of elements.\")\n    if xs[n // 2] * 2 == -1:\n        return -math.inf\n    for i in range(1, n, 2):\n        if xs[i - 1] * x ** i == 0:\n            return x\n    return -1\n\n"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l_ = list(l)\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_[i] = l[i]\n        else:\n            l_[i] = sorted(l[i])\n    return l_\n"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    seen = set()\n    unique_list = []\n\n    for item in l:\n        if item in seen:\n            continue\n\n        seen.add(item)\n        unique_list.append(item)\n\n    return unique_list\n"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    if not l:\n        return None\n    else:\n        return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            if i == 7:\n                count += 1\n            else:\n                if i == 7:\n                    count += 2\n                else:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = list(l)\n    even_indices = [i for i, x in enumerate(l_) if x % 2 == 0]\n    for i in even_indices:\n        l_[i] = l_[i].sorted()\n    return l_\n\n"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Decode the string\n    s = s.replace('-', '').upper()\n    # Rearrange the order of the characters\n    s = s[::-1]\n    # Slice the string into groups of three\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    # Cycle the elements in each group\n    groups = [(group[2], group[0], group[1]) if len(group) == 3 else group for group in groups]\n    # Join the groups back into a string\n    return ''.join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    if n < 2:\n        return 2\n    for i in range(2, n+1):\n        if is_prime(i):\n            if i in fibonacci_numbers(n):\n                return i\n    return \"No such number exists\"\n\ndef is_prime(n: int):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci_numbers(n: int):\n    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    for i in range(3, n+1):\n        if is_prime(i):\n            if i in fibonacci_numbers(n-i):\n                return i\n    return \"No such number exists\"\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    left_cars = [i for i in range(n) if i % 2 == 0]\n    right_cars = [n - i for i in range(n) if i % 2!= 0]\n\n    for i in range(n):\n        if i in left_cars and i - n / 2 >= 0:\n            left_car = left_cars.pop(0)\n            right_car = right_cars.pop(0)\n            if left_car.x < right_car.x:\n                left_car.x = max(left_car.x, right_car.x)\n                right_car.x = min(left_car.x, right_car.x)\n\n    collisions = len(left_cars) + len(right_cars) - n\n    return collisions\n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return list(map(lambda x: x+1, l))\n\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    if len(l) < 2:\n        return False\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if base < 2:\n        raise ValueError(\"Base must be greater than 1.\")\n    if x == 0:\n        return \"0\"\n    if base == 1:\n        return str(x)\n    if base == 2:\n        if x % 2 == 0:\n            return \"0\"\n        else:\n            return \"1\"\n    elif base == 3:\n        s = str(x)\n        return s[0] + s[1] * 3 + s[2] * 9\n    elif base == 4:\n        s = str(x)\n        return s[0] + s[1] * 4 + s[2] * 16\n    elif base == 5:\n        s = str(x)\n        return s[0] + s[1] * 5 + s[2] * 20\n    elif base == 6:\n        s = str(x)\n        return s[0] + s[1] * 6 + s[2] * 30\n    elif base == 7:\n        s = str(x)\n        return s[0] + s[1] * 7 + s[2] * 42\n    elif base == 8:\n        s = str(x)\n        return s[0] + s[1] * 8 + s[2] * 64\n    elif base == 9:\n        s = str(x)\n        return s[0] + s[1] * 9 + s[2] * 81\n    else:\n        raise ValueError(f\"Base {base} is not a valid base for conversion.\")"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n\n    if h < a:\n        return 0\n    elif h == a:\n        return (a**2 - (a/2)**2) / 2\n    else:\n        return (a**2 - (a/2*(h+1))**2) / 2\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n <= 3:\n        return n\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\n"}
{"task_id": "HumanEval/47", "completion": "def median(l: List[int]):\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    if not text:\n        return True\n    else:\n        left = 0\n        right = len(text) - 1\n        while left < right:\n            if text[left]!= text[right]:\n                break\n            left += 1\n            right -= 1\n        return right == left"}
{"task_id": "HumanEval/49", "completion": "def modp(n, p):\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    while p <= n:\n        if (n % p)!= 0:\n            break\n        p += 1\n    if p > n:\n        p = n\n    return 2**n % p\n"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    :param s: a str to be encoded\n    :return: the encoded string\n    \"\"\"\n    return \"\".join([chr(ord(ch) + 5 - ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    :param s: a str to be decoded\n    :return: the decoded string\n    \"\"\"\n    return \"\".join([chr(int(c) - ord(\"a\") + 5) for c in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiou'\n    text = text.lower()\n    res = []\n    for char in text:\n        if char in vowels:\n            continue\n        else:\n            res.append(char)\n    return ''.join(res)\n"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    if not l:\n        return True\n    if l[0] > t:\n        return False\n    for i in range(1, len(l)):\n        if l[i] > t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n < 2:\n        return n\n    return (fib(n-1) + fib(n-2))\n\n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    :param brackets: str\n    :return: bool\n    \"\"\"\n    if not brackets:\n        return True\n    if brackets[0]!= '<':\n        return False\n    for i in range(1, len(brackets)):\n        if brackets[i] == '>' and i < len(brackets) - 1 and brackets[i + 1] == '<':\n            i += 1\n        else:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    if len(l) < 2:\n        return True\n    else:\n        prev_val = l[0]\n        for val in l[1:]:\n            if val < prev_val:\n                return False\n            prev_val = val\n        return True\n\n"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    l1.sort()\n    l2.sort()\n    common_set = set(l1) & set(l2)\n    return list(common_set)\n\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    if not n > 1:\n        raise ValueError(\"n must be greater than 1\")\n    if is_prime(n):\n        return n\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if (n, i) == 1:\n                p = i\n                break\n        if p:\n            return p\n        n |= 1\n        for i in range(p, n**0.5, i*p):\n            if (n, i) == 1:\n                p = i\n                break\n        if p:\n            return p\n    return 0\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(5, int(n**0.5) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    s = 0\n    while n > 1:\n        s += n % 10\n        n //= 10\n    return s\n\n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    :param brackets: str\n    :return: bool\n    \"\"\"\n    if not brackets:\n        return True\n    if not brackets[0] == '(':\n        return False\n    for i in range(1, len(brackets), 2):\n        if brackets[i]!= ')':\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    n = len(xs)\n    if n == 0:\n        return []\n    else:\n        first = xs[0]\n        rest = xs[1:]\n        second = sum(rest)\n        der = [second * first / n]\n        for i in range(1, n):\n            der.append(i * der[i-1] - second * rest[i-1] / n)\n        return der\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    if n < 3:\n        return n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = \"aeiouy\"\n    vowel_count = 0\n    for c in s:\n        if c in vowels:\n            vowel_count += 1\n    if s.endswith(\"y\") and s.rfind(\"y\") == (len(s) - 1):\n        vowel_count += 1\n    return vowel_count\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    if shift > len(str(x))-1:\n        return str(x)[::-1]\n    else:\n        return str(x)[shift-1:len(str(x))-shift-1]\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"\n    s: str\n    \"\"\"\n    # get the uppercase characters\n    upper_chars = [char.upper() if char.isalpha() else char for char in s]\n    \n    # sum of the uppercase characters\n    sum_of_upper_chars = sum(int(char) for char in upper_chars if char.isdigit())\n    \n    return sum_of_upper_chars\n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples, oranges, mangoes = 0, 0, 0\n    for i, fruit in enumerate(s.split()):\n        if fruit.lower() == 'apple':\n            apples += 1\n        if fruit.lower() == 'orange':\n            oranges += 1\n    total_fruits = apples + oranges\n    if total_fruits == n:\n        mangoes = n - total_fruits\n        return mangoes\n    else:\n        return 0\n"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n\n    # find the smallest even value\n    even_values = [val for val in arr if val % 2 == 0 and val / 2 in arr]\n    if not even_values:\n        return []\n    smallest_even_value = min(even_values)\n\n    # find the node with the smallest even value\n    for i, val in enumerate(arr):\n        if val / 2 == smallest_even_value:\n            return [smallest_even_value, i]\n\n    # if no node with the smallest even value was found, return an empty list\n    return []\n"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    if not lst:\n        return -1\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = 0\n    max_num = -1\n    for num, freq in freq.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n    return max_num\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n\n    # find the minimum and maximum values\n    min_val = lst[0]\n    max_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n        if lst[i] > max_val:\n            max_val = lst[i]\n\n    # sort the list in strange order\n    sorted_lst = [min_val, max_val] + sorted(lst[1:], key=lst.index)\n\n    return sorted_lst\n"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a + b > c) and (b + c > a) and (c + a > b):\n        return (a * b) / 2.0\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if not is_palindrome(q):\n        return False\n\n    sum_q = sum(q)\n    if sum_q > w:\n        return False\n\n    if q[0] + q[-1]!= sum_q:\n        return False\n\n    return True\n\ndef is_palindrome(q):\n    if len(q) < 2:\n        return False\n\n    for i in range(len(q) / 2):\n        if q[i]!= q[len(q) - i - 1]:\n            return False\n\n    return True\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    if arr[0]!= arr[n-1] and arr[1]!= arr[n-2] and arr[n-3]!= arr[n-4] and arr[n-5]!= arr[n-6] and arr[n-7]!= arr[n-8] and arr[n-9]!= arr[n-10]:\n        return 1\n    for i in range(1, n):\n        if arr[i]!= arr[n-i-1]:\n            return i+1\n    return n-i-1\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) < len(lst2):\n        return total_match(lst2, lst1)\n    if len(lst1) > len(lst2):\n        return total_match(lst1, lst2[1:])\n    if not lst1 or not lst2:\n        return []\n    if len(set(lst1) & set(lst2)) == len(lst1):\n        return lst1\n    return [x for x in lst1 if x in set(lst2)]\n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 100:\n        for i in range(3):\n            if not is_prime(a/i):\n                return False\n        for i in range(2, (a+1)//a/2-1, 2):\n            if not is_prime(i):\n                return False\n    return True\n\ndef is_prime(a):\n    if a < 2:\n        return False\n    for i in range(2, int(a/2)+1):\n        if a % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == n**int(1):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a < 0:\n        a = -a\n    for i in range(1, a):\n        if i**3 - a == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    if not num:\n        return 0\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 43, 59, 71, 83, 107, 131, 151, 193, 227, 251, 289, 341, 393, 441, 519, 601, 719, 871, 1061, 1309, 1621, 2039, 2551, 3329, 4401, 6059, 8119, 12221, 18229, 28551, 45119, 73319, 121631, 202051, 343219, 586439, 1172829, 2345659, 4691319, 9382639, 18765279, 3752955, 7505919, 15011839, 29523679, 59047359, 118094119, 236188239, 472376479, 944752959, 1989505999, 3979011999, 7958023999, 15916047999, 31832095999, 63664191999, 127328383999, 2546567"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(int(decimal)).replace('b', 'db')\n    return 'db' + binary + 'db'\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i:i+3] == s[i+1:i+4] == s[i+2:i+5]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for i, gpa in enumerate(grades):\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif 3.7 <= gpa < 3.99:\n            letter_grades.append('A')\n        elif 3.301 <= gpa < 3.699:\n            letter_grades.append('A-')\n        elif 3.001 <= gpa < 3.3009:\n            letter_grades.append('B+')\n        elif 2.701 <= gpa < 2.999:\n            letter_grades.append('B')\n        elif 2.301 <= gpa < 2.699:\n            letter_grades.append('B-')\n        elif 2.001 <= gpa < 2.3009:\n            letter_grades.append('C+')\n        elif 1.701 <= gpa < 1.999:\n            letter_grades.append('C')\n        elif 1.301 <= gpa < 1.699:\n            letter_grades.append('C-')\n        elif 1.001 <= gpa < 1.3009:\n            letter_grades.append('D+')\n        elif 0.701 <= gpa < 0.999:\n            letter_grades.append('D')\n        elif 0.001 <= gpa < 0.7009:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if len(string) == 0:\n        return False\n    for i in range(2, len(string) + 1):\n        if string.count(i) > 1:\n            return False\n    return True\n"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Count the number of n-digit numbers that start with 1\n    start_with_1 = (10**n - 1) // 10\n    # Count the number of n-digit numbers that end with 1\n    end_with_1 = (10**n - 1) % 10\n    # Return the sum of start_with_1 and end_with_1\n    return start_with_1 + end_with_1\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    # Convert N to binary\n    binary = bin(N).replace('b', '')\n\n    # Get the sum of digits in binary\n    sum_digits = sum(int(d) for d in binary)\n\n    # Return the result\n    return str(sum_digits)\n\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_at_odd = [x for i, x in enumerate(lst) if i % 2 == 1]\n    return len(even_at_odd) == 0\n\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # s is the input string\n    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = str(ord(word[0])) + word[1:]\n        new_words.append(new_word)\n    new_string =''.join(new_words)\n    return new_string\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    # sort by rows in ascending order\n    rows = sorted(range(len(lst)), key=lambda i: lst[i])\n\n    # sort by columns within each row in descending order\n    def sort_cols(row):\n        return sorted(row, key=lambda c: c, reverse=True)\n\n    # get the coordinates of each x value\n    coords = []\n    for i in range(len(rows)):\n        row = lst[rows[i]]\n        if x in row:\n            coords.append((i, sort_cols(row).index(x)))\n\n    # return the coordinates\n    return coords\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return array\n    n = len(array)\n    if n == 1:\n        return [array[0]]\n    if (sum(array[0], array[n-1]) % 2) == 1:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    # create a list of all the letters in the alphabet\n    letters = list(s)\n    \n    # rotate the alphabet\n    for i in range(len(letters)):\n        if i % 2:\n            j = i // 2\n            letters[i] = letters[j]\n    \n    # encrypt the string\n    encrypted = ''.join([letters[i] if i < len(s) else None for i in range(len(s))])\n    return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    else:\n        return min(lst, key=lambda x: -lst.index(x))\n"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredoms = 0\n    for i, word in enumerate(S):\n        if word.lower() == 'i':\n            boredoms += 1\n    return boredoms\n\n"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x + y == z and all(i.isdigit(c) for c in str(x)) and all(i.isdigit(c) for c in str(y)) and all(i.isdigit(c) for c in str(z)):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiou'\n    new_message = ''.join(\n        [\n            c if c.isalpha() and c.lower() in vowels else chr(ord(c) + 2)\n            for c in message\n        ]\n    )\n    return new_message.swapcase()\n\n"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    prime_sums = []\n    for p in prime_numbers(lst):\n        digits = str(p)\n        prime_sums.append(sum(int(d) for d in digits))\n\n    largest_prime_value = max(prime_sums)\n    return largest_prime_value\n\ndef prime_numbers(lst):\n    \"\"\"\n    Returns a list of all prime numbers up to a given limit.\n    \"\"\"\n\n    up_to = 0\n    while up_to < len(lst):\n        for i in range(2, int(lst[up_to]) + 1):\n            if is_prime(i):\n                up_to += 1\n                yield i\n\ndef is_prime(n):\n    \"\"\""}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_strs = [key for key in dict.keys() if isinstance(key, str)]\n    if not all_strs:\n        return False\n    if all(key.isupper() if key.isupper() else key.islower() for key in all_strs):\n        return True\n    return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [2,3]\n    primes = [2,3]\n    for i in range(5, n+1):\n        if all(i%p!= 0 for p in primes):\n            primes.append(i)\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a < 0 and b < 0:\n        return -1 * multiply(abs(a), abs(b))\n    if a == 0:\n        return 0 if b < 0 else 1\n    if b == 0:\n        return a if a > 0 else 0\n    return a * b\n\n"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    \"\"\"\n    Find the closest integer to a given value.\n    \"\"\"\n    if value.isdigit() and len(str(value)) == 1:\n        return int(value)\n    if value.isalpha() or value.isdigit() or value.ismi() or value.isalpha() or value.isdigit():\n        return value\n    if value.find('.')!= -1:\n        return round(float(value))\n    return value\n"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n % 2 == 1:\n        return [n, (n+1)//2, (n+1)//2, (n+1)//2, (n+1)//2]\n    else:\n        return [n, (n+1), (n+1), (n+1), (n+1)]\n"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if s is None or s.strip() == '':\n        return []\n    words = s.split(',') if ',' in s.lower() else s.split()\n    return [word.strip() for word in words]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        x, y = y, x\n    for i in range(x+1):\n        if i % 2 == 0 and i >= x and i <= y:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (m + n) / 2\n    while True:\n        i = (n + m) / 2\n        if i % 10 == 0:\n            break\n        i += 1\n    j = i - n\n    while j > 0:\n        j = j // 10\n    k = m - n\n    while k > 0:\n        k = k // 10\n    l = (j + k) / 2\n    if l % 2 == 1:\n        avg += 1\n    if l > 0:\n        avg = l / 2\n    return avg\n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    # Sorted list of all elements\n    sorted_x = sorted(x)\n\n    # List of even digits\n    even_digits = [digit for digit in range(10) if x[0] % 10 == digit]\n\n    # List of unique elements that don't have any even digit\n    unique_digits = [digit for digit in range(10) if digit not in even_digits and x[0] % 10!= digit]\n\n    # Sorted list of unique digits\n    sorted_unique_digits = sorted(unique_digits)\n\n    return sorted_unique_digits\n"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if arr:\n        # sort by length\n        arr.sort(key=len, reverse=True)\n\n        # only keep the part that is between 1 and 9\n        good_arr = [x for x in arr if 1 <= x <= 9]\n\n        # reverse the good part\n        reversed_good_arr = list(reversed(good_arr))\n\n        # replace each digit with its corresponding name\n        result = [f\"{x}\" for x in reversed_good_arr]\n\n        return result\n    else:\n        return []\n"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    if n == 0:\n        return []\n    else:\n        even_fact = [x for x in range(n+1) if n % 2 == 0 and x % 2 == 0]\n        odd_sum = [x for x in range(n+1) if n % 2!= 0]\n        return even_fact + odd_sum\n"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    # create a list of all palindrome numbers within the range\n    palindromes = [i for i in range(1, n+1) if is_palindrome(i)]\n\n    # count the even palindromes\n    even_count = 0\n    for i in palindromes:\n        if i % 2 == 0:\n            even_count += 1\n\n    # count the odd palindromes\n    odd_count = len(palindromes) - even_count\n\n    return (even_count, odd_count)\n\ndef is_palindrome(n):\n    \"\"\"\n    Check if a number is a palindrome\n    \"\"\"\n    if n < 10:\n        return n == str(n)\n    else:\n        return n[::-1] == n\n"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i < 0:\n            s_digits = str(abs(i))\n            for j in range(len(s_digits)):\n                if s_digits[j].isdigit() and str(int(s_digits[j])) > 0:\n                    count += 1\n        else:\n            if i > 0:\n                for j in range(1, len(str(i))+1):\n                    if str(i).zfill(len(str(i)))[j-1].isdigit() and str(int(str(i).zfill(len(str(i)))[j-1])) > 0:\n                        count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    if all(arr[i] < arr[i+1] for i in range(len(arr)-1)):\n        return True\n    return False\n"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n    if all(e % 2 == 0 for e in lst1) and all(e % 2!= 0 for e in lst2):\n        return \"YES\"\n    for i in range(min(len(lst1), len(lst2))):\n        if lst1[i] % 2!= 0 and lst2[i] % 2 == 0:\n            exchange(lst1, lst2)\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    # create a dictionary to store the counts\n    counts = {}\n    \n    # iterate through the string\n    for letter in test.lower():\n        # if the letter is already in the counts dictionary\n        # increment its count\n        if letter in counts:\n            counts[letter] += 1\n        # if the letter is not in the counts dictionary\n        # add it with a count of 1\n        else:\n            counts[letter] = 1\n    \n    # return the counts dictionary\n    return counts\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = s\n    for i in range(len(s)):\n        if s[i] in c:\n            result = result.replace(s[i], '', 1)\n    if result == s:\n        return (result, True)\n    else:\n        return (result, False)\n"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    odd_counts = []\n    for i, s in enumerate(lst):\n        if all(c % 2!= 0 for c in s):\n            odd_counts.append(\"the number of odd elements in the string {i+1} of the input.\".format(i=i+1))\n    return odd_counts\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    n = len(nums)\n    m = n - 1\n    s = 0\n    for i in range(1, n+1):\n        s += i * nums[m-i+1]\n    for i in range(1, n+1):\n        if i >= m:\n            s -= i * nums[i-1]\n    return s"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # create a 2D list to keep track of the number of times each well is emptied\n    emptied_wells = [[0] * (grid[0, 1] + 1) for i in range(grid.shape[1])]\n\n    # use a queue to keep track of the wells that still need to be emptied\n    queue = [(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    if not arr:\n        return []\n    if len(arr) == 1:\n        return [0]\n    bins = [0] * (1 << (32 * len(arr)))\n    for i, x in enumerate(arr):\n        bins[x] = i\n    for i in range(1 << (32 * len(arr))):\n        if bins[i] == 0:\n            continue\n        j = bins[i] - 1\n        while j >= 0 and arr[j] == i:\n            j = bins[arr[j]] - 1\n        bins[i] = j + 1\n    return arr[bins]\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for i, word in enumerate(words):\n        if n == len(word.strip(' ')) - 1:\n            result.append(word)\n            break\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if not word:\n        return \"\"\n    if word[0] in vowels and word[1:] in vowels:\n        return word[1:]\n    for i in range(len(word)):\n        if word[i] in vowels and (i == len(word) - 2 and word[i-2] in vowels or i > 0 and word[i-1] in vowels and word[i-2] in vowels):\n            return word[i]\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    if len(lst) == 1:\n        return \"Yes\" if lst[0] == \"(\" else \"No\"\n    if len(lst) == 2:\n        if lst[0] == \"(\" and lst[1] == \")\" or lst[1] == \"(\" and lst[0] == \")\" or lst[0] == lst[1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    for i in range(1, len(lst)):\n        if lst[i-1] == \"(\" and lst[i] == \")\" or lst[i-1] == \")\" and lst[i] == \"(\":\n            for j in range(i+1, len(lst)):\n                if lst[j-1] == \"(\" and lst[j] == \")\" or lst[j-1] == \")\" and lst[j] == \"(\":\n                    if i!= j-1:\n                        return \"No\"\n    return \"No\"\n\n"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    if k > len(arr) or k < 1:\n        return None\n    if k == 1:\n        return [x for x in arr if x > 0]\n    arr.sort(reverse=True)\n    return [x for x in arr[0:k] if x > 0]\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    odd_sum = 0\n    for i in range(len(lst) - 1):\n        if lst[i] % 2 == 0 and lst[i+1] % 2 == 0:\n            odd_sum += lst[i+1]\n    return odd_sum\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    # sum of the first k elements\n    k_sum = sum(arr[i] for i in range(k))\n    \n    # number of elements with at most two digits\n    two_digit_count = len(str(arr[0])[2:])\n    \n    # sum of the first two digits of the first k elements\n    k_first_two_digits_sum = sum(int(d) for d in str(arr[0])[2:])\n    \n    # return the sum of the first k elements and the sum of the first two digits of the first k elements\n    return k_sum + k_first_two_digits_sum if two_digit_count <= 2 else k_sum\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    # Base case: n=1\n    if n == 1:\n        return [1]\n\n    # Collatz sequence for n\n    collatz_sequence = [n]\n    while True:\n        # If n is even, half it\n        if n & 1 == 1:\n            n = (3 * n + 1) // 2\n\n        # If n is odd, multiply by 3 and add 1\n        else:\n            n = 3 * n + 1\n\n        # Check if n is 1\n        if n == 1:\n            break\n\n    # Odd numbers in collatz sequence\n    odd_numbers = [n for n in collatz_sequence if n % 2 == 1]\n\n    # Sorted list of odd numbers\n    return sorted(odd_numbers)\n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    # 1. The date string is not empty\n    if not date.strip():\n        return False\n\n    # 2. The number of days is valid\n    day, month, year = map(int, date.split(\"-\"))\n    if (month < 1 or month > 12) or (day < 1 or day > days_in_month(year, month)) or (year < 2000 or year > 2099):\n        return False\n\n    # 3. The months are valid\n    while month < 1 or month > 12:\n        month = input(\"Enter a valid month (1-12): \")\n        if not is_valid_month(month):\n            continue\n        break\n\n    # 4. The date is in the correct format\n    if date.count(\"-\")!= 2:\n        return False\n    if date.startswith(month + \"-\"):\n        return True\n    return False\n\ndef is_valid_month(month):\n    if (month < 1 or month > 12) or (month in (4, 6, 9, 11)) and (month!= 4 and month!= 6 and month!= 9 and month!= 11):\n        return False\n    return True\n\ndef days_in_month(year, month):\n    if (month == 2 and (year % 4 == 0 and year % 100!= 0 or year % 400 == 0)) or (month == 29):\n        return 29\n    if (month == 4, 6, 9, 11):\n        return 30\n    if (month == 2 and (year % 4!= 0 and year % 100 == 0 or year % 400!= 0)):\n        return 28\n    return 28\n"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if not txt.strip():\n        return len(list(set(map(ord, txt))))\n    else:\n        return txt.split()"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i-1]:\n            return True\n    return False\n"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if not (interval1[1] > interval2[0] and interval2[1] > interval1[0]):\n        return \"NO\"\n    if not (interval1[1] - interval1[0] + 1 and interval2[1] - interval2[0] + 1):\n        return \"NO\"\n    if not (interval1[1] - interval1[0] + 1 and interval2[1] - interval2[0] + 1) and (interval1[1] - interval1[0] + 1) % 2 == 1:\n        return \"YES\"\n    return \"NO\"\n\n"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    else:\n        sign = 1 if arr[0] > 0 else -1\n        for i in range(1, len(arr)):\n            if arr[i] < 0:\n                sign *= -1\n            else:\n                sign = 1\n        return sign * sum(abs(x) for x in arr)\n"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    if k > len(grid) or k < 1:\n        return None\n\n    # create a list of all possible paths of length k\n    path_list = [[]] * k\n\n    # start from any cell\n    start_cell = random.choice(grid[0])\n    path_list[0] = [start_cell]\n\n    # for each cell in the grid\n    for i in range(len(grid)):\n        for j in range(k):\n            # if the cell is not in the path and its neighbors are not in the path\n            if i!= 0 and j < len(path_list[0]) and path_list[0][j]!= grid[i][0]:\n                # add it to the path\n                path_list[j] = path_list[0] + [grid[i][0]]\n\n    # for each path\n    for i in range(k):\n        path = path_list[i]\n\n        # make a list of the values on the cells that the path go through\n        value_list = [v for v in grid if v[0] in path]\n\n        # sort the list lexicographically\n        value_list.sort(key=lambda x: x[0])\n\n        # if this path is the shortest one\n        if i == k and len(value_list) == k and minPath(value_list, k) is None:\n            return value_list\n\n    # if no path is found\n    return None\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, n / 2, 3, tri(n - 1) + tri(n - 2) + tri(n + 1)]\n    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1), 1, n / 2, 3]\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 2:\n        return 0\n    odd_digits = n // 2\n    even_digits = n - odd_digits\n    if even_digits == 0:\n        return 0\n    else:\n        return (odd_digits * (3 * odd_digits + 1)) // 2\n\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    if not string:\n        return False\n    if string[0] == '[' and string[-1] == ']':\n        return True\n    return is_nested(string[1:-1])\n\n"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    if not lst:\n        return 0\n    if len(lst) == 1:\n        return (lst[0] ** 2).rounded(1)\n    return (sum(i ** 2 for i in lst) ** 0.5).rounded(2)\n"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    words = txt.split()\n    if words:\n        if not words[-1].strip():\n            return False\n    last_char = txt.rstrip()\n    if last_char and not last_char.isspace() and not last_char.isalpha():\n        return False\n    return True\n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    if len(arr) == 0:\n        return -1\n    if arr[0] > arr[1]:\n        return 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return None, None\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    if negatives:\n        largest_negative = max(negatives)\n    else:\n        largest_negative = None\n    if positives:\n        smallest_positive = min(positives)\n    else:\n        smallest_positive = None\n    return (largest_negative, smallest_positive)\n"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if a == b:\n        return None\n    if a < b:\n        return a\n    else:\n        return b\n"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n < 4:\n        return False\n    for i in range(4):\n        if n - i in [0, 2, 4, 6, 8, 10, 12, 14, 16] and n - i % 2 == 0:\n            even_numbers.append(n - i)\n    if len(even_numbers) == 4:\n        return True\n    return False\n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    if n <= 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = re.sub(r' +', '-', text)\n    return re.sub(r' +','', text)\n"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3 or not file_name.endswith('.txt') and not file_name.endswith('.exe') and not file_name.endswith('.dll'):\n        return 'No'\n    if not file_name.startswith(file_name[0] in ['a', 'A'] and file_name[1:].isalpha()):\n        return 'No'\n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    if not lst:\n        return 0\n    if any(i % 3 == 0 for i in lst):\n        for i, v in enumerate(lst):\n            if i % 3 == 0:\n                lst[i] = v**2\n    if any(i % 4 == 0 and i % 3!= 0 for i in lst):\n        for i, v in enumerate(lst):\n            if i % 4 == 0 and i % 3!= 0:\n                lst[i] = v**3\n    return sum(lst)\n"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    prime_words = []\n    for word in sentence.split():\n        if len(word) and all(x in string.ascii_lowercase for x in word) and not word.isdigit():\n            if is_prime(len(word)):\n                prime_words.append(word)\n    if not prime_words:\n        return None\n    else:\n        return''.join(prime_words)\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    \"\"\"\n    Implementation of a function to simplify the expression x * n\n    by converting it to a whole number.\n    \"\"\"\n    x_fraction = x.split(\"/\")\n    numerator, denominator = int(x_fraction[0]), int(x_fraction[1])\n    n_fraction = n.split(\"/\")\n    numerator, denominator = int(n_fraction[0]), int(n_fraction[1])\n    \n    if (numerator * denominator) == (x * n):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    # base case for empty list\n    if not nums:\n        return []\n\n    # sort nums based on the sum of their digits\n    nums.sort(key=lambda x: sum(map(int, str(x))))\n\n    # if there are ties, sort them based on their index in the original list\n    return [x for x in nums if x!= nums[0]]\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) in (1, 3, 5, 7, 9) and (num // 10) % 2!= 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(n)]\n    triples = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i < j < k and a[i] + a[j] + a[k] % 3 == 0:\n                    triples += 1\n    return triples\n"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    if planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Earth\" and planet2 == \"Mercury\":\n        return (\"Venus\")\n    if planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Venus\" and planet2 == \"Uranus\":\n        return (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Venus\" and planet2 == \"Mercury\":\n        return (\"Earth\", \"Mars\")\n    if planet1 == \"Venus\" and planet2 == \"Uranus\":\n        return (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Earth\" and planet2 == \"Venus\":\n        return (\"Mars\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Earth\" and planet2 == \"Mercury\":\n        return (\"Mars\")\n    if planet1 == \"Earth\" and planet2 == \"Uranus\":\n        return (\"Mars\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Mars\" and planet2 == \"Venus\":\n        return (\"Jupiter\", \"Saturn\")\n    if planet1 == \"Mars\" and planet2 == \"Mercury\":\n        return (\"Jupiter\", \"Saturn\")\n    if planet1 == \"Mars\" and planet2 == \"Uranus\":\n        return (\"Jupiter\", \"Saturn\")\n    if planet1 == \"Jupiter\" and planet2 == \"Venus\":\n        return (\"Saturn\")\n    if planet1 == \"Jupiter\" and planet2 == \"Mercury\":\n        return (\"Saturn\")\n    if planet1 == \"Jupiter\""}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # sort by length of word\n    lst.sort(key=len)\n\n    # remove odd length words\n    even_words = [word for (word, _), _ in lst]\n\n    # sum of even words\n    sum_of_even_words = sum(int(word) for word in even_words)\n\n    # return list of even words\n    return [word for (word, _), _ in lst if word in even_words]\n"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n > 1:\n        for i in range(2, int(n**0.5) + 1):\n            if (n % i) == 0:\n                return x\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    for i, n in enumerate(lst):\n        if n is not a number or n < 0:\n            continue\n        if not n.is_integer():\n            continue\n        if n % 2!= 1:\n            continue\n        result = n * n\n        yield result\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    if game == guess:\n        return [0] * len(game)\n    else:\n        return [abs(game - guess) if game!= guess else 0 for i in range(len(game))]\n"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    for extension in extensions:\n        strength = (len(extension) - len(extension.lower()) - 1) / len(extension)\n        if strength > 0:\n            return class_name + '.' + extension\n    return None\n\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if a.lower() in b.lower():\n        return True\n    for i in range(len(b)):\n        rotated = b[i:].rotate(i)\n        if rotated in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_digits = 0\n    odd_digits = 0\n\n    while num:\n        if num % 10 in [0, 1, 5, 9]:\n            even_digits += 1\n        else:\n            odd_digits += 1\n\n    return (even_digits, odd_digits)\n\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    if number <= 9:\n        return str(number)\n    else:\n        return f\"{number}a\"\n\n"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if (a**2 + b**2) <= c**2:\n        return False\n    else:\n        return True\n"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_unique_chars:\n            max_unique_chars = len(set(word))\n            max_word = word\n    if max_unique_chars == 0:\n        return \"\"\n    else:\n        return max_word\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if need > remaining:\n        eaten, leftover = 0, 0\n        while eaten < need:\n            eaten += 1\n            leftover = min(remaining - eaten, leftover)\n            if leftover == 0:\n                eaten = need\n        return [eaten, leftover]\n    else:\n        eaten = max(0, need - remaining)\n        leftover = remaining - eaten\n        return [eaten, leftover]\n"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator) < 2 or (len(operator) - 1) < len(operand):\n        return \"Error: Incorrect number of operands or operators.\"\n    if not all(isinstance(e, int) for e in operand) or any(e < 0 for e in operand):\n        return \"Error: Only non-negative integers are allowed in the operand list.\"\n    if operator[0] == '+':\n        result = sum(operator[1:], operand)\n    elif operator[0] == '-':\n        result = -reduce(operator[1:], operand)\n    elif operator[0] == '*':\n        result = product(operator[1:], operand)\n    elif operator[0] == '/':\n        if not all(e > 0 for e in operand) or (\n                not all(isinstance(e, int) for e in operand) or\n                any(e < 0 for e in operand) or\n                (\n                    not all(e == 1 for e in operand if e % 2 == 0) and\n                    any(e!= 1 for e in operand if e % 2 == 1)\n                )\n        ):\n            return \"Error: Floor division by zero or non-integer operands.\"\n        result = divmod(operator[1:], operand)\n    else:\n        result = pow(operator[1:], operand)\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not s:\n        return s\n    if not s[0].isalpha():\n        return s\n    s1 = ''.join(x.upper() if x.isalpha() else x for x in s)\n    return s1\n"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash\n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    even_digits = []\n    while a <= b:\n        if a % 2 == 0:\n            even_digits.append(a)\n        a += 1\n    return even_digits\n"}
